"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@leichtgewicht";
exports.ids = ["vendor-chunks/@leichtgewicht"];
exports.modules = {

/***/ "(ssr)/./node_modules/@leichtgewicht/base64-codec/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@leichtgewicht/base64-codec/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PREFERS_NO_PADDING: () => (/* binding */ PREFERS_NO_PADDING),\n/* harmony export */   PREFERS_PADDING: () => (/* binding */ PREFERS_PADDING),\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   base64URL: () => (/* binding */ base64URL),\n/* harmony export */   make: () => (/* binding */ make)\n/* harmony export */ });\nconst PREFERS_PADDING = 1;\nconst PREFERS_NO_PADDING = 2;\nfunction make(name, charset, padding, paddingMode) {\n    if (charset.length !== 64) {\n        throw new Error(`Charset needs to be 64 characters long! (${charset.length})`);\n    }\n    const byCharCode = new Uint8Array(256);\n    const byNum = new Uint8Array(64);\n    for(let i = 0; i < 64; i += 1){\n        const code = charset.charCodeAt(i);\n        if (code > 255) {\n            throw new Error(`Character #${i} in charset [code=${code}, char=${charset.charAt(i)}] is too high! (max=255)`);\n        }\n        if (byCharCode[code] !== 0) {\n            throw new Error(`Character [code=${code}, char=${charset.charAt(i)}] is more than once in the charset!`);\n        }\n        byCharCode[code] = i;\n        byNum[i] = code;\n    }\n    const padCode = padding.charCodeAt(0);\n    const codec = {\n        name,\n        encodingLength (str) {\n            const strLen = str.length;\n            const len = strLen * 0.75 | 0;\n            if (str.charCodeAt(strLen - 1) === padCode) {\n                if (str.charCodeAt(strLen - 2) === padCode) {\n                    return len - 2;\n                }\n                return len - 1;\n            }\n            return len;\n        },\n        encode (str, buffer, offset) {\n            if (buffer === null || buffer === undefined) {\n                buffer = new Uint8Array(codec.encodingLength(str));\n            }\n            if (offset === null || offset === undefined) {\n                offset = 0;\n            }\n            let strLen = str.length;\n            if (str.charCodeAt(strLen - 1) === padCode) {\n                if (str.charCodeAt(strLen - 2) === padCode) {\n                    strLen -= 2;\n                } else {\n                    strLen -= 1;\n                }\n            }\n            const padding = strLen % 4;\n            const safeLen = strLen - padding;\n            let off = offset;\n            let i = 0;\n            while(i < safeLen){\n                const code = byCharCode[str.charCodeAt(i)] << 18 | byCharCode[str.charCodeAt(i + 1)] << 12 | byCharCode[str.charCodeAt(i + 2)] << 6 | byCharCode[str.charCodeAt(i + 3)];\n                buffer[off++] = code >> 16;\n                buffer[off++] = code >> 8;\n                buffer[off++] = code;\n                i += 4;\n            }\n            if (padding === 3) {\n                const code = byCharCode[str.charCodeAt(i)] << 10 | byCharCode[str.charCodeAt(i + 1)] << 4 | byCharCode[str.charCodeAt(i + 2)] >> 2;\n                buffer[off++] = code >> 8;\n                buffer[off++] = code;\n            } else if (padding === 2) {\n                buffer[off++] = byCharCode[str.charCodeAt(i)] << 2 | byCharCode[str.charCodeAt(i + 1)] >> 4;\n            }\n            codec.encode.bytes = off - offset;\n            return buffer;\n        },\n        decode (buffer, start, end) {\n            if (start === null || start === undefined) {\n                start = 0;\n            }\n            if (end === null || end === undefined) {\n                end = buffer.length;\n            }\n            const length = end - start;\n            const pad = length % 3;\n            const safeEnd = start + length - pad;\n            const codes = [];\n            for(let off = start; off < safeEnd; off += 3){\n                const num = buffer[off] << 16 | buffer[off + 1] << 8 | buffer[off + 2];\n                codes.push(byNum[num >> 18 & 0x3F], byNum[num >> 12 & 0x3F], byNum[num >> 6 & 0x3F], byNum[num & 0x3F]);\n            }\n            if (pad === 2) {\n                const num = (buffer[end - 2] << 8) + buffer[end - 1];\n                codes.push(byNum[num >> 10], byNum[num >> 4 & 0x3F], byNum[num << 2 & 0x3F]);\n                if (paddingMode === PREFERS_PADDING) {\n                    codes.push(padCode);\n                }\n            } else if (pad === 1) {\n                const num = buffer[end - 1];\n                codes.push(byNum[num >> 2], byNum[num << 4 & 0x3F]);\n                if (paddingMode === PREFERS_PADDING) {\n                    codes.push(padCode, padCode);\n                }\n            }\n            codec.decode.bytes = length;\n            return String.fromCharCode.apply(String, codes);\n        }\n    };\n    return codec;\n}\nconst base64 = make(\"base64\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", \"=\", PREFERS_PADDING);\n// https://datatracker.ietf.org/doc/html/rfc4648#section-5\nconst base64URL = make(\"base64-url\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\", \"=\", PREFERS_NO_PADDING);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/base64-codec/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/buffer_utils.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/buffer_utils.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytelength: () => (/* binding */ bytelength),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   isU8Arr: () => (/* binding */ isU8Arr),\n/* harmony export */   readUInt16BE: () => (/* binding */ readUInt16BE),\n/* harmony export */   readUInt32BE: () => (/* binding */ readUInt32BE),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   write: () => (/* binding */ write),\n/* harmony export */   writeUInt16BE: () => (/* binding */ writeUInt16BE),\n/* harmony export */   writeUInt32BE: () => (/* binding */ writeUInt32BE)\n/* harmony export */ });\n/* harmony import */ var utf8_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! utf8-codec */ \"(ssr)/./node_modules/utf8-codec/index.mjs\");\n\nconst isU8Arr = (input)=>input instanceof Uint8Array;\nfunction bytelength(input) {\n    return typeof input === \"string\" ? utf8_codec__WEBPACK_IMPORTED_MODULE_0__.encodingLength(input) : input.byteLength;\n}\nfunction from(input) {\n    if (input instanceof Uint8Array) {\n        return input;\n    }\n    if (Array.isArray(input)) {\n        return new Uint8Array(input);\n    }\n    return utf8_codec__WEBPACK_IMPORTED_MODULE_0__.encode(input);\n}\nfunction write(arr, str, start) {\n    if (typeof str !== \"string\") {\n        throw new Error(\"unknown input type\");\n    }\n    utf8_codec__WEBPACK_IMPORTED_MODULE_0__.encode(str, arr, start);\n    return utf8_codec__WEBPACK_IMPORTED_MODULE_0__.encode.bytes;\n}\nfunction toHex(buf, start, end) {\n    let result = \"\";\n    for(let offset = start; offset < end;){\n        const num = buf[offset++];\n        const str = num.toString(16);\n        result += str.length === 1 ? \"0\" + str : str;\n    }\n    return result;\n}\nconst P_24 = Math.pow(2, 24);\nconst P_16 = Math.pow(2, 16);\nconst P_8 = Math.pow(2, 8);\nconst readUInt32BE = (buf, offset)=>buf[offset] * P_24 + buf[offset + 1] * P_16 + buf[offset + 2] * P_8 + buf[offset + 3];\nconst readUInt16BE = (buf, offset)=>buf[offset] << 8 | buf[offset + 1];\nconst writeUInt32BE = (buf, value, offset)=>{\n    value = +value;\n    buf[offset + 3] = value;\n    value = value >>> 8;\n    buf[offset + 2] = value;\n    value = value >>> 8;\n    buf[offset + 1] = value;\n    value = value >>> 8;\n    buf[offset] = value;\n    return offset + 4;\n};\nconst writeUInt16BE = (buf, value, offset)=>{\n    buf[offset] = value >> 8;\n    buf[offset + 1] = value & 0xFF;\n    return offset + 2;\n};\nfunction copy(source, target, targetStart, sourceStart, sourceEnd) {\n    if (targetStart < 0) {\n        sourceStart -= targetStart;\n        targetStart = 0;\n    }\n    if (sourceStart < 0) {\n        sourceStart = 0;\n    }\n    if (sourceEnd < 0) {\n        return new Uint8Array(0);\n    }\n    if (targetStart >= target.length || sourceStart >= sourceEnd) {\n        return 0;\n    }\n    return _copyActual(source, target, targetStart, sourceStart, sourceEnd);\n}\nfunction _copyActual(source, target, targetStart, sourceStart, sourceEnd) {\n    if (sourceEnd - sourceStart > target.length - targetStart) {\n        sourceEnd = sourceStart + target.length - targetStart;\n    }\n    let nb = sourceEnd - sourceStart;\n    const sourceLen = source.length - sourceStart;\n    if (nb > sourceLen) {\n        nb = sourceLen;\n    }\n    if (sourceStart !== 0 || sourceEnd < source.length) {\n        source = new Uint8Array(source.buffer, source.byteOffset + sourceStart, nb);\n    }\n    target.set(source, targetStart);\n    return nb;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9idWZmZXJfdXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBRTNCLE1BQU1DLFVBQVVDLENBQUFBLFFBQVNBLGlCQUFpQkMsV0FBVTtBQUVwRCxTQUFTQyxXQUFZRixLQUFLO0lBQy9CLE9BQU8sT0FBT0EsVUFBVSxXQUFXRixzREFBbUIsQ0FBQ0UsU0FBU0EsTUFBTUksVUFBVTtBQUNsRjtBQUVPLFNBQVNDLEtBQU1MLEtBQUs7SUFDekIsSUFBSUEsaUJBQWlCQyxZQUFZO1FBQy9CLE9BQU9EO0lBQ1Q7SUFDQSxJQUFJTSxNQUFNQyxPQUFPLENBQUNQLFFBQVE7UUFDeEIsT0FBTyxJQUFJQyxXQUFXRDtJQUN4QjtJQUNBLE9BQU9GLDhDQUFXLENBQUNFO0FBQ3JCO0FBRU8sU0FBU1MsTUFBT0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEtBQUs7SUFDcEMsSUFBSSxPQUFPRCxRQUFRLFVBQVU7UUFDM0IsTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBQ0FmLDhDQUFXLENBQUNhLEtBQUtELEtBQUtFO0lBQ3RCLE9BQU9kLDhDQUFXLENBQUNnQixLQUFLO0FBQzFCO0FBRU8sU0FBU0MsTUFBT0MsR0FBRyxFQUFFSixLQUFLLEVBQUVLLEdBQUc7SUFDcEMsSUFBSUMsU0FBUztJQUNiLElBQUssSUFBSUMsU0FBU1AsT0FBT08sU0FBU0YsS0FBTTtRQUN0QyxNQUFNRyxNQUFNSixHQUFHLENBQUNHLFNBQVM7UUFDekIsTUFBTVIsTUFBTVMsSUFBSUMsUUFBUSxDQUFDO1FBQ3pCSCxVQUFVLElBQUtJLE1BQU0sS0FBSyxJQUFLLE1BQU1YLE1BQU1BO0lBQzdDO0lBQ0EsT0FBT087QUFDVDtBQUVBLE1BQU1LLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3pCLE1BQU1DLE9BQU9GLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ3pCLE1BQU1FLE1BQU1ILEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBQ2pCLE1BQU1HLGVBQWUsQ0FBQ1osS0FBS0csU0FBV0gsR0FBRyxDQUFDRyxPQUFPLEdBQUdJLE9BQ3pEUCxHQUFHLENBQUNHLFNBQVMsRUFBRSxHQUFHTyxPQUNsQlYsR0FBRyxDQUFDRyxTQUFTLEVBQUUsR0FBR1EsTUFDbEJYLEdBQUcsQ0FBQ0csU0FBUyxFQUFFO0FBRVYsTUFBTVUsZUFBZSxDQUFDYixLQUFLRyxTQUFXLEdBQUksQ0FBQ0EsT0FBTyxJQUFJLElBQUtILEdBQUcsQ0FBQ0csU0FBUyxFQUFFO0FBQzFFLE1BQU1XLGdCQUFnQixDQUFDZCxLQUFLZSxPQUFPWjtJQUN4Q1ksUUFBUSxDQUFDQTtJQUNUZixHQUFHLENBQUNHLFNBQVMsRUFBRSxHQUFHWTtJQUNsQkEsUUFBUUEsVUFBVTtJQUNsQmYsR0FBRyxDQUFDRyxTQUFTLEVBQUUsR0FBR1k7SUFDbEJBLFFBQVFBLFVBQVU7SUFDbEJmLEdBQUcsQ0FBQ0csU0FBUyxFQUFFLEdBQUdZO0lBQ2xCQSxRQUFRQSxVQUFVO0lBQ2xCZixHQUFHLENBQUNHLE9BQU8sR0FBR1k7SUFDZCxPQUFPWixTQUFTO0FBQ2xCLEVBQUM7QUFDTSxNQUFNYSxnQkFBZ0IsQ0FBQ2hCLEtBQUtlLE9BQU9aO0lBQ3hDSCxHQUFHLENBQUNHLE9BQU8sR0FBR1ksU0FBUztJQUN2QmYsR0FBRyxDQUFDRyxTQUFTLEVBQUUsR0FBR1ksUUFBUTtJQUMxQixPQUFPWixTQUFTO0FBQ2xCLEVBQUM7QUFFTSxTQUFTYyxLQUFNQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUVDLFNBQVM7SUFDdkUsSUFBSUYsY0FBYyxHQUFHO1FBQ25CQyxlQUFlRDtRQUNmQSxjQUFjO0lBQ2hCO0lBRUEsSUFBSUMsY0FBYyxHQUFHO1FBQ25CQSxjQUFjO0lBQ2hCO0lBRUEsSUFBSUMsWUFBWSxHQUFHO1FBQ2pCLE9BQU8sSUFBSXJDLFdBQVc7SUFDeEI7SUFFQSxJQUFJbUMsZUFBZUQsT0FBT2IsTUFBTSxJQUFJZSxlQUFlQyxXQUFXO1FBQzVELE9BQU87SUFDVDtJQUVBLE9BQU9DLFlBQVlMLFFBQVFDLFFBQVFDLGFBQWFDLGFBQWFDO0FBQy9EO0FBRUEsU0FBU0MsWUFBYUwsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxTQUFTO0lBQ3ZFLElBQUlBLFlBQVlELGNBQWNGLE9BQU9iLE1BQU0sR0FBR2MsYUFBYTtRQUN6REUsWUFBWUQsY0FBY0YsT0FBT2IsTUFBTSxHQUFHYztJQUM1QztJQUVBLElBQUlJLEtBQUtGLFlBQVlEO0lBQ3JCLE1BQU1JLFlBQVlQLE9BQU9aLE1BQU0sR0FBR2U7SUFDbEMsSUFBSUcsS0FBS0MsV0FBVztRQUNsQkQsS0FBS0M7SUFDUDtJQUVBLElBQUlKLGdCQUFnQixLQUFLQyxZQUFZSixPQUFPWixNQUFNLEVBQUU7UUFDbERZLFNBQVMsSUFBSWpDLFdBQVdpQyxPQUFPUSxNQUFNLEVBQUVSLE9BQU9TLFVBQVUsR0FBR04sYUFBYUc7SUFDMUU7SUFFQUwsT0FBT1MsR0FBRyxDQUFDVixRQUFRRTtJQUVuQixPQUFPSTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9idWZmZXJfdXRpbHMubWpzP2VjOGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRmOCBmcm9tICd1dGY4LWNvZGVjJ1xuXG5leHBvcnQgY29uc3QgaXNVOEFyciA9IGlucHV0ID0+IGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheVxuXG5leHBvcnQgZnVuY3Rpb24gYnl0ZWxlbmd0aCAoaW5wdXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgPyB1dGY4LmVuY29kaW5nTGVuZ3RoKGlucHV0KSA6IGlucHV0LmJ5dGVMZW5ndGhcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb20gKGlucHV0KSB7XG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gaW5wdXRcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpXG4gIH1cbiAgcmV0dXJuIHV0ZjguZW5jb2RlKGlucHV0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGUgKGFyciwgc3RyLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gaW5wdXQgdHlwZScpXG4gIH1cbiAgdXRmOC5lbmNvZGUoc3RyLCBhcnIsIHN0YXJ0KVxuICByZXR1cm4gdXRmOC5lbmNvZGUuYnl0ZXNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4IChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJlc3VsdCA9ICcnXG4gIGZvciAobGV0IG9mZnNldCA9IHN0YXJ0OyBvZmZzZXQgPCBlbmQ7KSB7XG4gICAgY29uc3QgbnVtID0gYnVmW29mZnNldCsrXVxuICAgIGNvbnN0IHN0ciA9IG51bS50b1N0cmluZygxNilcbiAgICByZXN1bHQgKz0gKHN0ci5sZW5ndGggPT09IDEpID8gJzAnICsgc3RyIDogc3RyXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBQXzI0ID0gTWF0aC5wb3coMiwgMjQpXG5jb25zdCBQXzE2ID0gTWF0aC5wb3coMiwgMTYpXG5jb25zdCBQXzggPSBNYXRoLnBvdygyLCA4KVxuZXhwb3J0IGNvbnN0IHJlYWRVSW50MzJCRSA9IChidWYsIG9mZnNldCkgPT4gYnVmW29mZnNldF0gKiBQXzI0ICtcbiAgYnVmW29mZnNldCArIDFdICogUF8xNiArXG4gIGJ1ZltvZmZzZXQgKyAyXSAqIFBfOCArXG4gIGJ1ZltvZmZzZXQgKyAzXVxuXG5leHBvcnQgY29uc3QgcmVhZFVJbnQxNkJFID0gKGJ1Ziwgb2Zmc2V0KSA9PiAoYnVmW29mZnNldF0gPDwgOCkgfCBidWZbb2Zmc2V0ICsgMV1cbmV4cG9ydCBjb25zdCB3cml0ZVVJbnQzMkJFID0gKGJ1ZiwgdmFsdWUsIG9mZnNldCkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBidWZbb2Zmc2V0ICsgM10gPSB2YWx1ZVxuICB2YWx1ZSA9IHZhbHVlID4+PiA4XG4gIGJ1ZltvZmZzZXQgKyAyXSA9IHZhbHVlXG4gIHZhbHVlID0gdmFsdWUgPj4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gdmFsdWVcbiAgdmFsdWUgPSB2YWx1ZSA+Pj4gOFxuICBidWZbb2Zmc2V0XSA9IHZhbHVlXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5leHBvcnQgY29uc3Qgd3JpdGVVSW50MTZCRSA9IChidWYsIHZhbHVlLCBvZmZzZXQpID0+IHtcbiAgYnVmW29mZnNldF0gPSB2YWx1ZSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAxXSA9IHZhbHVlICYgMHhGRlxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weSAoc291cmNlLCB0YXJnZXQsIHRhcmdldFN0YXJ0LCBzb3VyY2VTdGFydCwgc291cmNlRW5kKSB7XG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICBzb3VyY2VTdGFydCAtPSB0YXJnZXRTdGFydFxuICAgIHRhcmdldFN0YXJ0ID0gMFxuICB9XG5cbiAgaWYgKHNvdXJjZVN0YXJ0IDwgMCkge1xuICAgIHNvdXJjZVN0YXJ0ID0gMFxuICB9XG5cbiAgaWYgKHNvdXJjZUVuZCA8IDApIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMClcbiAgfVxuXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoIHx8IHNvdXJjZVN0YXJ0ID49IHNvdXJjZUVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cblxuICByZXR1cm4gX2NvcHlBY3R1YWwoc291cmNlLCB0YXJnZXQsIHRhcmdldFN0YXJ0LCBzb3VyY2VTdGFydCwgc291cmNlRW5kKVxufVxuXG5mdW5jdGlvbiBfY29weUFjdHVhbCAoc291cmNlLCB0YXJnZXQsIHRhcmdldFN0YXJ0LCBzb3VyY2VTdGFydCwgc291cmNlRW5kKSB7XG4gIGlmIChzb3VyY2VFbmQgLSBzb3VyY2VTdGFydCA+IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCkge1xuICAgIHNvdXJjZUVuZCA9IHNvdXJjZVN0YXJ0ICsgdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0XG4gIH1cblxuICBsZXQgbmIgPSBzb3VyY2VFbmQgLSBzb3VyY2VTdGFydFxuICBjb25zdCBzb3VyY2VMZW4gPSBzb3VyY2UubGVuZ3RoIC0gc291cmNlU3RhcnRcbiAgaWYgKG5iID4gc291cmNlTGVuKSB7XG4gICAgbmIgPSBzb3VyY2VMZW5cbiAgfVxuXG4gIGlmIChzb3VyY2VTdGFydCAhPT0gMCB8fCBzb3VyY2VFbmQgPCBzb3VyY2UubGVuZ3RoKSB7XG4gICAgc291cmNlID0gbmV3IFVpbnQ4QXJyYXkoc291cmNlLmJ1ZmZlciwgc291cmNlLmJ5dGVPZmZzZXQgKyBzb3VyY2VTdGFydCwgbmIpXG4gIH1cblxuICB0YXJnZXQuc2V0KHNvdXJjZSwgdGFyZ2V0U3RhcnQpXG5cbiAgcmV0dXJuIG5iXG59XG4iXSwibmFtZXMiOlsidXRmOCIsImlzVThBcnIiLCJpbnB1dCIsIlVpbnQ4QXJyYXkiLCJieXRlbGVuZ3RoIiwiZW5jb2RpbmdMZW5ndGgiLCJieXRlTGVuZ3RoIiwiZnJvbSIsIkFycmF5IiwiaXNBcnJheSIsImVuY29kZSIsIndyaXRlIiwiYXJyIiwic3RyIiwic3RhcnQiLCJFcnJvciIsImJ5dGVzIiwidG9IZXgiLCJidWYiLCJlbmQiLCJyZXN1bHQiLCJvZmZzZXQiLCJudW0iLCJ0b1N0cmluZyIsImxlbmd0aCIsIlBfMjQiLCJNYXRoIiwicG93IiwiUF8xNiIsIlBfOCIsInJlYWRVSW50MzJCRSIsInJlYWRVSW50MTZCRSIsIndyaXRlVUludDMyQkUiLCJ2YWx1ZSIsIndyaXRlVUludDE2QkUiLCJjb3B5Iiwic291cmNlIiwidGFyZ2V0IiwidGFyZ2V0U3RhcnQiLCJzb3VyY2VTdGFydCIsInNvdXJjZUVuZCIsIl9jb3B5QWN0dWFsIiwibmIiLCJzb3VyY2VMZW4iLCJidWZmZXIiLCJieXRlT2Zmc2V0Iiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/buffer_utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/classes.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/classes.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toClass: () => (/* binding */ toClass),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\nfunction toString(klass) {\n    switch(klass){\n        case 1:\n            return \"IN\";\n        case 2:\n            return \"CS\";\n        case 3:\n            return \"CH\";\n        case 4:\n            return \"HS\";\n        case 255:\n            return \"ANY\";\n    }\n    return \"UNKNOWN_\" + klass;\n}\nfunction toClass(name) {\n    switch(name.toUpperCase()){\n        case \"IN\":\n            return 1;\n        case \"CS\":\n            return 2;\n        case \"CH\":\n            return 3;\n        case \"HS\":\n            return 4;\n        case \"ANY\":\n            return 255;\n    }\n    return 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9jbGFzc2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLFNBQVVDLEtBQUs7SUFDN0IsT0FBUUE7UUFDTixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBSyxPQUFPO0lBQ25CO0lBQ0EsT0FBTyxhQUFhQTtBQUN0QjtBQUVPLFNBQVNDLFFBQVNDLElBQUk7SUFDM0IsT0FBUUEsS0FBS0MsV0FBVztRQUN0QixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU0sT0FBTztRQUNsQixLQUFLO1lBQU8sT0FBTztJQUNyQjtJQUNBLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BsZWljaHRnZXdpY2h0L2Rucy1wYWNrZXQvY2xhc3Nlcy5tanM/MGRlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcgKGtsYXNzKSB7XG4gIHN3aXRjaCAoa2xhc3MpIHtcbiAgICBjYXNlIDE6IHJldHVybiAnSU4nXG4gICAgY2FzZSAyOiByZXR1cm4gJ0NTJ1xuICAgIGNhc2UgMzogcmV0dXJuICdDSCdcbiAgICBjYXNlIDQ6IHJldHVybiAnSFMnXG4gICAgY2FzZSAyNTU6IHJldHVybiAnQU5ZJ1xuICB9XG4gIHJldHVybiAnVU5LTk9XTl8nICsga2xhc3Ncbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQ2xhc3MgKG5hbWUpIHtcbiAgc3dpdGNoIChuYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdJTic6IHJldHVybiAxXG4gICAgY2FzZSAnQ1MnOiByZXR1cm4gMlxuICAgIGNhc2UgJ0NIJzogcmV0dXJuIDNcbiAgICBjYXNlICdIUyc6IHJldHVybiA0XG4gICAgY2FzZSAnQU5ZJzogcmV0dXJuIDI1NVxuICB9XG4gIHJldHVybiAwXG59XG4iXSwibmFtZXMiOlsidG9TdHJpbmciLCJrbGFzcyIsInRvQ2xhc3MiLCJuYW1lIiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/classes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTHENTIC_DATA: () => (/* binding */ AUTHENTIC_DATA),\n/* harmony export */   AUTHORITATIVE_ANSWER: () => (/* binding */ AUTHORITATIVE_ANSWER),\n/* harmony export */   CHECKING_DISABLED: () => (/* binding */ CHECKING_DISABLED),\n/* harmony export */   DNSSEC_OK: () => (/* binding */ DNSSEC_OK),\n/* harmony export */   RECURSION_AVAILABLE: () => (/* binding */ RECURSION_AVAILABLE),\n/* harmony export */   RECURSION_DESIRED: () => (/* binding */ RECURSION_DESIRED),\n/* harmony export */   TRUNCATED_RESPONSE: () => (/* binding */ TRUNCATED_RESPONSE),\n/* harmony export */   a: () => (/* binding */ ra),\n/* harmony export */   aaaa: () => (/* binding */ raaaa),\n/* harmony export */   answer: () => (/* binding */ answer),\n/* harmony export */   caa: () => (/* binding */ rcaa),\n/* harmony export */   cname: () => (/* binding */ rptr),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeList: () => (/* binding */ decodeList),\n/* harmony export */   dname: () => (/* binding */ rptr),\n/* harmony export */   dnskey: () => (/* binding */ rdnskey),\n/* harmony export */   ds: () => (/* binding */ rds),\n/* harmony export */   enc: () => (/* binding */ renc),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeList: () => (/* binding */ encodeList),\n/* harmony export */   encodingLength: () => (/* binding */ encodingLength),\n/* harmony export */   encodingLengthList: () => (/* binding */ encodingLengthList),\n/* harmony export */   hinfo: () => (/* binding */ rhinfo),\n/* harmony export */   mx: () => (/* binding */ rmx),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   ns: () => (/* binding */ rns),\n/* harmony export */   nsec: () => (/* binding */ rnsec),\n/* harmony export */   nsec3: () => (/* binding */ rnsec3),\n/* harmony export */   \"null\": () => (/* binding */ rnull),\n/* harmony export */   opt: () => (/* binding */ ropt),\n/* harmony export */   option: () => (/* binding */ roption),\n/* harmony export */   packet: () => (/* binding */ packet),\n/* harmony export */   ptr: () => (/* binding */ rptr),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   question: () => (/* binding */ question),\n/* harmony export */   response: () => (/* binding */ response),\n/* harmony export */   rp: () => (/* binding */ rrp),\n/* harmony export */   rrsig: () => (/* binding */ rrrsig),\n/* harmony export */   soa: () => (/* binding */ rsoa),\n/* harmony export */   srv: () => (/* binding */ rsrv),\n/* harmony export */   streamDecode: () => (/* binding */ streamDecode),\n/* harmony export */   streamEncode: () => (/* binding */ streamEncode),\n/* harmony export */   txt: () => (/* binding */ rtxt),\n/* harmony export */   unknown: () => (/* binding */ runknown)\n/* harmony export */ });\n/* harmony import */ var _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @leichtgewicht/ip-codec */ \"(ssr)/./node_modules/@leichtgewicht/ip-codec/index.mjs\");\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.mjs */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/types.mjs\");\n/* harmony import */ var _rcodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rcodes.mjs */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/rcodes.mjs\");\n/* harmony import */ var _opcodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./opcodes.mjs */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/opcodes.mjs\");\n/* harmony import */ var _classes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./classes.mjs */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/classes.mjs\");\n/* harmony import */ var _optioncodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optioncodes.mjs */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/optioncodes.mjs\");\n/* harmony import */ var _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buffer_utils.mjs */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/buffer_utils.mjs\");\n/* harmony import */ var utf8_codec__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! utf8-codec */ \"(ssr)/./node_modules/utf8-codec/index.mjs\");\n\n\n\n\n\n\n\n\nconst QUERY_FLAG = 0;\nconst RESPONSE_FLAG = 1 << 15;\nconst FLUSH_MASK = 1 << 15;\nconst NOT_FLUSH_MASK = ~FLUSH_MASK;\nconst QU_MASK = 1 << 15;\nconst NOT_QU_MASK = ~QU_MASK;\nfunction codec({ bytes = 0, encode, decode, encodingLength }) {\n    encode.bytes = bytes;\n    decode.bytes = bytes;\n    return {\n        encode,\n        decode,\n        encodingLength: encodingLength || (()=>bytes)\n    };\n}\nconst name = codec({\n    encode (str, buf, offset) {\n        if (!buf) buf = new Uint8Array(name.encodingLength(str));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        // strip leading and trailing .\n        const n = str.replace(/^\\.|\\.$/gm, \"\");\n        if (n.length) {\n            const list = n.split(\".\");\n            for(let i = 0; i < list.length; i++){\n                const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.write(buf, list[i], offset + 1);\n                buf[offset] = len;\n                offset += len + 1;\n            }\n        }\n        buf[offset++] = 0;\n        name.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const list = [];\n        let oldOffset = offset;\n        let totalLength = 0;\n        let consumedBytes = 0;\n        let jumped = false;\n        while(true){\n            if (offset >= buf.length) {\n                throw new Error(\"Cannot decode name (buffer overflow)\");\n            }\n            const len = buf[offset++];\n            consumedBytes += jumped ? 0 : 1;\n            if (len === 0) {\n                break;\n            } else if ((len & 0xc0) === 0) {\n                if (offset + len > buf.length) {\n                    throw new Error(\"Cannot decode name (buffer overflow)\");\n                }\n                totalLength += len + 1;\n                if (totalLength > 254) {\n                    throw new Error(\"Cannot decode name (name too long)\");\n                }\n                list.push((0,utf8_codec__WEBPACK_IMPORTED_MODULE_7__.decode)(buf, offset, offset + len));\n                offset += len;\n                consumedBytes += jumped ? 0 : len;\n            } else if ((len & 0xc0) === 0xc0) {\n                if (offset + 1 > buf.length) {\n                    throw new Error(\"Cannot decode name (buffer overflow)\");\n                }\n                const jumpOffset = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset - 1) - 0xc000;\n                if (jumpOffset >= oldOffset) {\n                    // Allow only pointers to prior data. RFC 1035, section 4.1.4 states:\n                    // \"[...] an entire domain name or a list of labels at the end of a domain name\n                    // is replaced with a pointer to a prior occurance (sic) of the same name.\"\n                    throw new Error(\"Cannot decode name (bad pointer)\");\n                }\n                offset = jumpOffset;\n                oldOffset = jumpOffset;\n                consumedBytes += jumped ? 0 : 1;\n                jumped = true;\n            } else {\n                throw new Error(\"Cannot decode name (bad label)\");\n            }\n        }\n        name.decode.bytes = consumedBytes;\n        return list.length === 0 ? \".\" : list.join(\".\");\n    },\n    encodingLength (n) {\n        if (n === \".\" || n === \"..\") return 1;\n        return _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(n.replace(/^\\.|\\.$/gm, \"\")) + 2;\n    }\n});\nconst string = codec({\n    encode (s, buf, offset) {\n        if (!buf) buf = new Uint8Array(string.encodingLength(s));\n        if (!offset) offset = 0;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.write(buf, s, offset + 1);\n        buf[offset] = len;\n        string.encode.bytes = len + 1;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const len = buf[offset];\n        const s = (0,utf8_codec__WEBPACK_IMPORTED_MODULE_7__.decode)(buf, offset + 1, offset + 1 + len);\n        string.decode.bytes = len + 1;\n        return s;\n    },\n    encodingLength (s) {\n        return _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(s) + 1;\n    }\n});\nconst header = codec({\n    bytes: 12,\n    encode (h, buf, offset) {\n        if (!buf) buf = new Uint8Array(header.encodingLength(h));\n        if (!offset) offset = 0;\n        const flags = (h.flags || 0) & 32767;\n        const type = h.type === \"response\" ? RESPONSE_FLAG : QUERY_FLAG;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, h.id || 0, offset);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, flags | type, offset + 2);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, h.questions.length, offset + 4);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, h.answers.length, offset + 6);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, h.authorities.length, offset + 8);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, h.additionals.length, offset + 10);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        if (buf.length < 12) throw new Error(\"Header must be 12 bytes\");\n        const flags = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 2);\n        return {\n            id: _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset),\n            type: flags & RESPONSE_FLAG ? \"response\" : \"query\",\n            flags: flags & 32767,\n            flag_qr: (flags >> 15 & 0x1) === 1,\n            opcode: _opcodes_mjs__WEBPACK_IMPORTED_MODULE_3__.toString(flags >> 11 & 0xf),\n            flag_aa: (flags >> 10 & 0x1) === 1,\n            flag_tc: (flags >> 9 & 0x1) === 1,\n            flag_rd: (flags >> 8 & 0x1) === 1,\n            flag_ra: (flags >> 7 & 0x1) === 1,\n            flag_z: (flags >> 6 & 0x1) === 1,\n            flag_ad: (flags >> 5 & 0x1) === 1,\n            flag_cd: (flags >> 4 & 0x1) === 1,\n            rcode: _rcodes_mjs__WEBPACK_IMPORTED_MODULE_2__.toString(flags & 0xf),\n            questions: new Array(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 4)),\n            answers: new Array(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 6)),\n            authorities: new Array(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 8)),\n            additionals: new Array(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 10))\n        };\n    },\n    encodingLength () {\n        return 12;\n    }\n});\nconst runknown = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(runknown.encodingLength(data));\n        if (!offset) offset = 0;\n        const dLen = data.length;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, dLen, offset);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(data, buf, offset + 2, 0, dLen);\n        runknown.encode.bytes = dLen + 2;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        const data = buf.slice(offset + 2, offset + 2 + len);\n        runknown.decode.bytes = len + 2;\n        return data;\n    },\n    encodingLength (data) {\n        return data.length + 2;\n    }\n});\nconst rns = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rns.encodingLength(data));\n        if (!offset) offset = 0;\n        name.encode(data, buf, offset + 2);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, name.encode.bytes, offset);\n        rns.encode.bytes = name.encode.bytes + 2;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        const dd = name.decode(buf, offset + 2);\n        rns.decode.bytes = len + 2;\n        return dd;\n    },\n    encodingLength (data) {\n        return name.encodingLength(data) + 2;\n    }\n});\nconst rsoa = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rsoa.encodingLength(data));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        offset += 2;\n        name.encode(data.mname, buf, offset);\n        offset += name.encode.bytes;\n        name.encode(data.rname, buf, offset);\n        offset += name.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, data.serial || 0, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, data.refresh || 0, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, data.retry || 0, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, data.expire || 0, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, data.minimum || 0, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, offset - oldOffset - 2, oldOffset);\n        rsoa.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const data = {};\n        offset += 2;\n        data.mname = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        data.rname = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        data.serial = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        data.refresh = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        data.retry = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        data.expire = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        data.minimum = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        rsoa.decode.bytes = offset - oldOffset;\n        return data;\n    },\n    encodingLength (data) {\n        return 22 + name.encodingLength(data.mname) + name.encodingLength(data.rname);\n    }\n});\nconst rtxt = codec({\n    encode (data, buf, offset) {\n        if (!Array.isArray(data)) data = [\n            data\n        ];\n        for(let i = 0; i < data.length; i++){\n            if (typeof data[i] === \"string\") {\n                data[i] = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.from(data[i]);\n            }\n            if (!_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(data[i])) {\n                throw new Error(\"Must be a Buffer\");\n            }\n        }\n        if (!buf) buf = new Uint8Array(rtxt.encodingLength(data));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        offset += 2;\n        data.forEach(function(d) {\n            buf[offset++] = d.length;\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(d, buf, offset, 0, d.length);\n            offset += d.length;\n        });\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, offset - oldOffset - 2, oldOffset);\n        rtxt.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        let remaining = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        const data = [];\n        while(remaining > 0){\n            const len = buf[offset++];\n            --remaining;\n            if (remaining < len) {\n                throw new Error(\"Buffer overflow\");\n            }\n            data.push(buf.slice(offset, offset + len));\n            offset += len;\n            remaining -= len;\n        }\n        rtxt.decode.bytes = offset - oldOffset;\n        return data;\n    },\n    encodingLength (data) {\n        if (!Array.isArray(data)) data = [\n            data\n        ];\n        let length = 2;\n        data.forEach(function(buf) {\n            if (typeof buf === \"string\") {\n                length += _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(buf) + 1;\n            } else {\n                length += buf.length + 1;\n            }\n        });\n        return length;\n    }\n});\nconst rnull = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rnull.encodingLength(data));\n        if (!offset) offset = 0;\n        if (typeof data === \"string\") data = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.from(data);\n        if (!data) data = new Uint8Array(0);\n        const oldOffset = offset;\n        offset += 2;\n        const len = data.length;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(data, buf, offset, 0, len);\n        offset += len;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, offset - oldOffset - 2, oldOffset);\n        rnull.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        const data = buf.slice(offset, offset + len);\n        offset += len;\n        rnull.decode.bytes = offset - oldOffset;\n        return data;\n    },\n    encodingLength (data) {\n        if (!data) return 2;\n        return (_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(data) ? data.length : _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(data)) + 2;\n    }\n});\nconst rhinfo = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rhinfo.encodingLength(data));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        offset += 2;\n        string.encode(data.cpu, buf, offset);\n        offset += string.encode.bytes;\n        string.encode(data.os, buf, offset);\n        offset += string.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, offset - oldOffset - 2, oldOffset);\n        rhinfo.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const data = {};\n        offset += 2;\n        data.cpu = string.decode(buf, offset);\n        offset += string.decode.bytes;\n        data.os = string.decode(buf, offset);\n        offset += string.decode.bytes;\n        rhinfo.decode.bytes = offset - oldOffset;\n        return data;\n    },\n    encodingLength (data) {\n        return string.encodingLength(data.cpu) + string.encodingLength(data.os) + 2;\n    }\n});\nconst rptr = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rptr.encodingLength(data));\n        if (!offset) offset = 0;\n        name.encode(data, buf, offset + 2);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, name.encode.bytes, offset);\n        rptr.encode.bytes = name.encode.bytes + 2;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const data = name.decode(buf, offset + 2);\n        rptr.decode.bytes = name.decode.bytes + 2;\n        return data;\n    },\n    encodingLength (data) {\n        return name.encodingLength(data) + 2;\n    }\n});\nconst rsrv = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rsrv.encodingLength(data));\n        if (!offset) offset = 0;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, data.priority || 0, offset + 2);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, data.weight || 0, offset + 4);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, data.port || 0, offset + 6);\n        name.encode(data.target, buf, offset + 8);\n        const len = name.encode.bytes + 6;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, len, offset);\n        rsrv.encode.bytes = len + 2;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        const data = {};\n        data.priority = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 2);\n        data.weight = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 4);\n        data.port = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 6);\n        data.target = name.decode(buf, offset + 8);\n        rsrv.decode.bytes = len + 2;\n        return data;\n    },\n    encodingLength (data) {\n        return 8 + name.encodingLength(data.target);\n    }\n});\nconst rcaa = codec({\n    encode (data, buf, offset) {\n        const len = rcaa.encodingLength(data);\n        if (!buf) buf = new Uint8Array(rcaa.encodingLength(data));\n        if (!offset) offset = 0;\n        if (data.issuerCritical) {\n            data.flags = rcaa.ISSUER_CRITICAL;\n        }\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, len - 2, offset);\n        offset += 2;\n        buf[offset] = data.flags || 0;\n        offset += 1;\n        string.encode(data.tag, buf, offset);\n        offset += string.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.write(buf, data.value, offset);\n        offset += _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(data.value);\n        rcaa.encode.bytes = len;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        const oldOffset = offset;\n        const data = {};\n        data.flags = buf[offset];\n        offset += 1;\n        data.tag = string.decode(buf, offset);\n        offset += string.decode.bytes;\n        data.value = (0,utf8_codec__WEBPACK_IMPORTED_MODULE_7__.decode)(buf, offset, oldOffset + len);\n        data.issuerCritical = !!(data.flags & rcaa.ISSUER_CRITICAL);\n        rcaa.decode.bytes = len + 2;\n        return data;\n    },\n    encodingLength (data) {\n        return string.encodingLength(data.tag) + string.encodingLength(data.value) + 2;\n    }\n});\nrcaa.ISSUER_CRITICAL = 1 << 7;\nconst rmx = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rmx.encodingLength(data));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        offset += 2;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, data.preference || 0, offset);\n        offset += 2;\n        name.encode(data.exchange, buf, offset);\n        offset += name.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, offset - oldOffset - 2, oldOffset);\n        rmx.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const data = {};\n        offset += 2;\n        data.preference = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        data.exchange = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        rmx.decode.bytes = offset - oldOffset;\n        return data;\n    },\n    encodingLength (data) {\n        return 4 + name.encodingLength(data.exchange);\n    }\n});\nconst ra = codec({\n    encode (host, buf, offset) {\n        if (!buf) buf = new Uint8Array(ra.encodingLength(host));\n        if (!offset) offset = 0;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, 4, offset);\n        offset += 2;\n        _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.v4.encode(host, buf, offset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        offset += 2;\n        const host = _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.v4.decode(buf, offset);\n        return host;\n    },\n    bytes: 6\n});\nconst raaaa = codec({\n    encode (host, buf, offset) {\n        if (!buf) buf = new Uint8Array(raaaa.encodingLength(host));\n        if (!offset) offset = 0;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, 16, offset);\n        offset += 2;\n        _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.v6.encode(host, buf, offset);\n        raaaa.encode.bytes = 18;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        offset += 2;\n        const host = _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.v6.decode(buf, offset);\n        raaaa.decode.bytes = 18;\n        return host;\n    },\n    bytes: 18\n});\nconst alloc = (size)=>new Uint8Array(size);\nconst roption = codec({\n    encode (option, buf, offset) {\n        if (!buf) buf = new Uint8Array(roption.encodingLength(option));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const code = _optioncodes_mjs__WEBPACK_IMPORTED_MODULE_5__.toCode(option.code);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, code, offset);\n        offset += 2;\n        if (option.data) {\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, option.data.length, offset);\n            offset += 2;\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(option.data, buf, offset);\n            offset += option.data.length;\n        } else {\n            switch(code){\n                // case 3: NSID.  No encode makes sense.\n                // case 5,6,7: Not implementable\n                case 8:\n                    {\n                        // note: do IP math before calling\n                        const spl = option.sourcePrefixLength || 0;\n                        const fam = option.family || _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.familyOf(option.ip, alloc);\n                        const ipBuf = _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.encode(option.ip, alloc);\n                        const ipLen = Math.ceil(spl / 8);\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, ipLen + 4, offset);\n                        offset += 2;\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, fam, offset);\n                        offset += 2;\n                        buf[offset++] = spl;\n                        buf[offset++] = option.scopePrefixLength || 0;\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(ipBuf, buf, offset, 0, ipLen);\n                        offset += ipLen;\n                    }\n                    break;\n                // case 9: EXPIRE (experimental)\n                // case 10: COOKIE.  No encode makes sense.\n                case 11:\n                    if (option.timeout) {\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, 2, offset);\n                        offset += 2;\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, option.timeout, offset);\n                        offset += 2;\n                    } else {\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, 0, offset);\n                        offset += 2;\n                    }\n                    break;\n                case 12:\n                    {\n                        const len = option.length || 0;\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, len, offset);\n                        offset += 2;\n                        buf.fill(0, offset, offset + len);\n                        offset += len;\n                    }\n                    break;\n                // case 13:  CHAIN.  Experimental.\n                case 14:\n                    {\n                        const tagsLen = option.tags.length * 2;\n                        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, tagsLen, offset);\n                        offset += 2;\n                        for (const tag of option.tags){\n                            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, tag, offset);\n                            offset += 2;\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown roption code: ${option.code}`);\n            }\n        }\n        roption.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const option = {};\n        option.code = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        option.type = _optioncodes_mjs__WEBPACK_IMPORTED_MODULE_5__.toString(option.code);\n        offset += 2;\n        const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        option.data = buf.slice(offset, offset + len);\n        switch(option.code){\n            // case 3: NSID.  No decode makes sense.\n            case 8:\n                option.family = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n                offset += 2;\n                option.sourcePrefixLength = buf[offset++];\n                option.scopePrefixLength = buf[offset++];\n                {\n                    const padded = new Uint8Array(option.family === 1 ? 4 : 16);\n                    _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(buf, padded, 0, offset, offset + len - 4);\n                    option.ip = _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_0__.decode(padded);\n                }\n                break;\n            // case 12: Padding.  No decode makes sense.\n            case 11:\n                if (len > 0) {\n                    option.timeout = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n                    offset += 2;\n                }\n                break;\n            case 14:\n                option.tags = [];\n                for(let i = 0; i < len; i += 2){\n                    option.tags.push(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset));\n                    offset += 2;\n                }\n        }\n        roption.decode.bytes = len + 4;\n        return option;\n    },\n    encodingLength (option) {\n        if (option.data) {\n            return option.data.length + 4;\n        }\n        const code = _optioncodes_mjs__WEBPACK_IMPORTED_MODULE_5__.toCode(option.code);\n        switch(code){\n            case 8:\n                {\n                    const spl = option.sourcePrefixLength || 0;\n                    return Math.ceil(spl / 8) + 8;\n                }\n            case 11:\n                return typeof option.timeout === \"number\" ? 6 : 4;\n            case 12:\n                return option.length + 4;\n            case 14:\n                return 4 + option.tags.length * 2;\n        }\n        throw new Error(`Unknown roption code: ${option.code}`);\n    }\n});\nconst ropt = codec({\n    encode (options, buf, offset) {\n        if (!buf) buf = new Uint8Array(ropt.encodingLength(options));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const rdlen = encodingLengthList(options, roption);\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rdlen, offset);\n        offset = encodeList(options, roption, buf, offset + 2);\n        ropt.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const options = [];\n        let rdlen = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        let o = 0;\n        while(rdlen > 0){\n            options[o++] = roption.decode(buf, offset);\n            offset += roption.decode.bytes;\n            rdlen -= roption.decode.bytes;\n        }\n        ropt.decode.bytes = offset - oldOffset;\n        return options;\n    },\n    encodingLength (options) {\n        return 2 + encodingLengthList(options || [], roption);\n    }\n});\nconst rdnskey = codec({\n    encode (key, buf, offset) {\n        if (!buf) buf = new Uint8Array(rdnskey.encodingLength(key));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const keydata = key.key;\n        if (!_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(keydata)) {\n            throw new Error(\"Key must be a Buffer\");\n        }\n        offset += 2 // Leave space for length\n        ;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, key.flags, offset);\n        offset += 2;\n        buf[offset] = rdnskey.PROTOCOL_DNSSEC;\n        offset += 1;\n        buf[offset] = key.algorithm;\n        offset += 1;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(keydata, buf, offset, 0, keydata.length);\n        offset += keydata.length;\n        rdnskey.encode.bytes = offset - oldOffset;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rdnskey.encode.bytes - 2, oldOffset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const key = {};\n        const length = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        key.flags = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        if (buf[offset] !== rdnskey.PROTOCOL_DNSSEC) {\n            throw new Error(\"Protocol must be 3\");\n        }\n        offset += 1;\n        key.algorithm = buf[offset];\n        offset += 1;\n        key.key = buf.slice(offset, oldOffset + length + 2);\n        offset += key.key.length;\n        rdnskey.decode.bytes = offset - oldOffset;\n        return key;\n    },\n    encodingLength (key) {\n        return 6 + _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(key.key);\n    }\n});\nrdnskey.PROTOCOL_DNSSEC = 3;\nrdnskey.ZONE_KEY = 0x80;\nrdnskey.SECURE_ENTRYPOINT = 0x8000;\nconst rrrsig = codec({\n    encode (sig, buf, offset) {\n        if (!buf) buf = new Uint8Array(rrrsig.encodingLength(sig));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const signature = sig.signature;\n        if (!_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(signature)) {\n            throw new Error(\"Signature must be a Buffer\");\n        }\n        offset += 2 // Leave space for length\n        ;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toType(sig.typeCovered), offset);\n        offset += 2;\n        buf[offset] = sig.algorithm;\n        offset += 1;\n        buf[offset] = sig.labels;\n        offset += 1;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, sig.originalTTL, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, sig.expiration, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, sig.inception, offset);\n        offset += 4;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, sig.keyTag, offset);\n        offset += 2;\n        name.encode(sig.signersName, buf, offset);\n        offset += name.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(signature, buf, offset, 0, signature.length);\n        offset += signature.length;\n        rrrsig.encode.bytes = offset - oldOffset;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rrrsig.encode.bytes - 2, oldOffset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const sig = {};\n        const length = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        sig.typeCovered = _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toString(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset));\n        offset += 2;\n        sig.algorithm = buf[offset];\n        offset += 1;\n        sig.labels = buf[offset];\n        offset += 1;\n        sig.originalTTL = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        sig.expiration = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        sig.inception = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset);\n        offset += 4;\n        sig.keyTag = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        sig.signersName = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        sig.signature = buf.slice(offset, oldOffset + length + 2);\n        offset += sig.signature.length;\n        rrrsig.decode.bytes = offset - oldOffset;\n        return sig;\n    },\n    encodingLength (sig) {\n        return 20 + name.encodingLength(sig.signersName) + _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(sig.signature);\n    }\n});\nconst rrp = codec({\n    encode (data, buf, offset) {\n        if (!buf) buf = new Uint8Array(rrp.encodingLength(data));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        offset += 2 // Leave space for length\n        ;\n        name.encode(data.mbox || \".\", buf, offset);\n        offset += name.encode.bytes;\n        name.encode(data.txt || \".\", buf, offset);\n        offset += name.encode.bytes;\n        rrp.encode.bytes = offset - oldOffset;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rrp.encode.bytes - 2, oldOffset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const data = {};\n        offset += 2;\n        data.mbox = name.decode(buf, offset) || \".\";\n        offset += name.decode.bytes;\n        data.txt = name.decode(buf, offset) || \".\";\n        offset += name.decode.bytes;\n        rrp.decode.bytes = offset - oldOffset;\n        return data;\n    },\n    encodingLength (data) {\n        return 2 + name.encodingLength(data.mbox || \".\") + name.encodingLength(data.txt || \".\");\n    }\n});\nconst typebitmap = codec({\n    encode (typelist, buf, offset) {\n        if (!buf) buf = new Uint8Array(typebitmap.encodingLength(typelist));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const typesByWindow = [];\n        for(let i = 0; i < typelist.length; i++){\n            const typeid = _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toType(typelist[i]);\n            if (typesByWindow[typeid >> 8] === undefined) {\n                typesByWindow[typeid >> 8] = [];\n            }\n            typesByWindow[typeid >> 8][typeid >> 3 & 0x1F] |= 1 << 7 - (typeid & 0x7);\n        }\n        for(let i = 0; i < typesByWindow.length; i++){\n            if (typesByWindow[i] !== undefined) {\n                const windowBuf = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.from(typesByWindow[i]);\n                buf[offset] = i;\n                offset += 1;\n                buf[offset] = windowBuf.length;\n                offset += 1;\n                _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(windowBuf, buf, offset, 0, windowBuf.length);\n                offset += windowBuf.length;\n            }\n        }\n        typebitmap.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset, length) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const typelist = [];\n        while(offset - oldOffset < length){\n            const window = buf[offset];\n            offset += 1;\n            const windowLength = buf[offset];\n            offset += 1;\n            for(let i = 0; i < windowLength; i++){\n                const b = buf[offset + i];\n                for(let j = 0; j < 8; j++){\n                    if (b & 1 << 7 - j) {\n                        const typeid = _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toString(window << 8 | i << 3 | j);\n                        typelist.push(typeid);\n                    }\n                }\n            }\n            offset += windowLength;\n        }\n        typebitmap.decode.bytes = offset - oldOffset;\n        return typelist;\n    },\n    encodingLength (typelist) {\n        const extents = [];\n        for(let i = 0; i < typelist.length; i++){\n            const typeid = _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toType(typelist[i]);\n            extents[typeid >> 8] = Math.max(extents[typeid >> 8] || 0, typeid & 0xFF);\n        }\n        let len = 0;\n        for(let i = 0; i < extents.length; i++){\n            if (extents[i] !== undefined) {\n                len += 2 + Math.ceil((extents[i] + 1) / 8);\n            }\n        }\n        return len;\n    }\n});\nconst rnsec = codec({\n    encode (record, buf, offset) {\n        if (!buf) buf = new Uint8Array(rnsec.encodingLength(record));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        offset += 2 // Leave space for length\n        ;\n        name.encode(record.nextDomain, buf, offset);\n        offset += name.encode.bytes;\n        typebitmap.encode(record.rrtypes, buf, offset);\n        offset += typebitmap.encode.bytes;\n        rnsec.encode.bytes = offset - oldOffset;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rnsec.encode.bytes - 2, oldOffset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const record = {};\n        const length = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        record.nextDomain = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        record.rrtypes = typebitmap.decode(buf, offset, length - (offset - oldOffset));\n        offset += typebitmap.decode.bytes;\n        rnsec.decode.bytes = offset - oldOffset;\n        return record;\n    },\n    encodingLength (record) {\n        return 2 + name.encodingLength(record.nextDomain) + typebitmap.encodingLength(record.rrtypes);\n    }\n});\nconst rnsec3 = codec({\n    encode (record, buf, offset) {\n        if (!buf) buf = new Uint8Array(rnsec3.encodingLength(record));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const salt = record.salt;\n        if (!_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(salt)) {\n            throw new Error(\"salt must be a Buffer\");\n        }\n        const nextDomain = record.nextDomain;\n        if (!_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(nextDomain)) {\n            throw new Error(\"nextDomain must be a Buffer\");\n        }\n        offset += 2 // Leave space for length\n        ;\n        buf[offset] = record.algorithm;\n        offset += 1;\n        buf[offset] = record.flags;\n        offset += 1;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, record.iterations, offset);\n        offset += 2;\n        buf[offset] = salt.length;\n        offset += 1;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(salt, buf, offset, 0, salt.length);\n        offset += salt.length;\n        buf[offset] = nextDomain.length;\n        offset += 1;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(nextDomain, buf, offset, 0, nextDomain.length);\n        offset += nextDomain.length;\n        typebitmap.encode(record.rrtypes, buf, offset);\n        offset += typebitmap.encode.bytes;\n        rnsec3.encode.bytes = offset - oldOffset;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rnsec3.encode.bytes - 2, oldOffset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const record = {};\n        const length = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        record.algorithm = buf[offset];\n        offset += 1;\n        record.flags = buf[offset];\n        offset += 1;\n        record.iterations = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        const saltLength = buf[offset];\n        offset += 1;\n        record.salt = buf.slice(offset, offset + saltLength);\n        offset += saltLength;\n        const hashLength = buf[offset];\n        offset += 1;\n        record.nextDomain = buf.slice(offset, offset + hashLength);\n        offset += hashLength;\n        record.rrtypes = typebitmap.decode(buf, offset, length - (offset - oldOffset));\n        offset += typebitmap.decode.bytes;\n        rnsec3.decode.bytes = offset - oldOffset;\n        return record;\n    },\n    encodingLength (record) {\n        return 8 + record.salt.length + record.nextDomain.length + typebitmap.encodingLength(record.rrtypes);\n    }\n});\nconst rds = codec({\n    encode (digest, buf, offset) {\n        if (!buf) buf = new Uint8Array(rds.encodingLength(digest));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const digestdata = digest.digest;\n        if (!_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.isU8Arr(digestdata)) {\n            throw new Error(\"Digest must be a Buffer\");\n        }\n        offset += 2 // Leave space for length\n        ;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, digest.keyTag, offset);\n        offset += 2;\n        buf[offset] = digest.algorithm;\n        offset += 1;\n        buf[offset] = digest.digestType;\n        offset += 1;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(digestdata, buf, offset, 0, digestdata.length);\n        offset += digestdata.length;\n        rds.encode.bytes = offset - oldOffset;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, rds.encode.bytes - 2, oldOffset);\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const digest = {};\n        const length = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        digest.keyTag = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset);\n        offset += 2;\n        digest.algorithm = buf[offset];\n        offset += 1;\n        digest.digestType = buf[offset];\n        offset += 1;\n        digest.digest = buf.slice(offset, oldOffset + length + 2);\n        offset += digest.digest.length;\n        rds.decode.bytes = offset - oldOffset;\n        return digest;\n    },\n    encodingLength (digest) {\n        return 6 + _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.bytelength(digest.digest);\n    }\n});\nfunction renc(type) {\n    switch(type.toUpperCase()){\n        case \"A\":\n            return ra;\n        case \"PTR\":\n            return rptr;\n        case \"CNAME\":\n            return rptr;\n        case \"DNAME\":\n            return rptr;\n        case \"TXT\":\n            return rtxt;\n        case \"NULL\":\n            return rnull;\n        case \"AAAA\":\n            return raaaa;\n        case \"SRV\":\n            return rsrv;\n        case \"HINFO\":\n            return rhinfo;\n        case \"CAA\":\n            return rcaa;\n        case \"NS\":\n            return rns;\n        case \"SOA\":\n            return rsoa;\n        case \"MX\":\n            return rmx;\n        case \"OPT\":\n            return ropt;\n        case \"DNSKEY\":\n            return rdnskey;\n        case \"RRSIG\":\n            return rrrsig;\n        case \"RP\":\n            return rrp;\n        case \"NSEC\":\n            return rnsec;\n        case \"NSEC3\":\n            return rnsec3;\n        case \"DS\":\n            return rds;\n    }\n    return runknown;\n}\nconst answer = codec({\n    encode (a, buf, offset) {\n        if (!buf) buf = new Uint8Array(answer.encodingLength(a));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        name.encode(a.name, buf, offset);\n        offset += name.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toType(a.type), offset);\n        if (a.type.toUpperCase() === \"OPT\") {\n            if (a.name !== \".\") {\n                throw new Error(\"OPT name must be root.\");\n            }\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, a.udpPayloadSize || 4096, offset + 2);\n            buf[offset + 4] = a.extendedRcode || 0;\n            buf[offset + 5] = a.ednsVersion || 0;\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, a.flags || 0, offset + 6);\n            offset += 8;\n            ropt.encode(a.options || [], buf, offset);\n            offset += ropt.encode.bytes;\n        } else {\n            let klass = _classes_mjs__WEBPACK_IMPORTED_MODULE_4__.toClass(a.class === undefined ? \"IN\" : a.class);\n            if (a.flush) klass |= FLUSH_MASK // the 1st bit of the class is the flush bit\n            ;\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, klass, offset + 2);\n            _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt32BE(buf, a.ttl || 0, offset + 4);\n            offset += 8;\n            const enc = renc(a.type);\n            enc.encode(a.data, buf, offset);\n            offset += enc.encode.bytes;\n        }\n        answer.encode.bytes = offset - oldOffset;\n        return buf;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const a = {};\n        const oldOffset = offset;\n        a.name = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        a.type = _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toString(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset));\n        if (a.type === \"OPT\") {\n            a.udpPayloadSize = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 2);\n            a.extendedRcode = buf[offset + 4];\n            a.ednsVersion = buf[offset + 5];\n            a.flags = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 6);\n            a.flag_do = (a.flags >> 15 & 0x1) === 1;\n            a.options = ropt.decode(buf, offset + 8);\n            offset += 8 + ropt.decode.bytes;\n        } else {\n            const klass = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset + 2);\n            a.ttl = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt32BE(buf, offset + 4);\n            a.class = _classes_mjs__WEBPACK_IMPORTED_MODULE_4__.toString(klass & NOT_FLUSH_MASK);\n            a.flush = !!(klass & FLUSH_MASK);\n            const enc = renc(a.type);\n            a.data = enc.decode(buf, offset + 8);\n            offset += 8 + enc.decode.bytes;\n        }\n        answer.decode.bytes = offset - oldOffset;\n        return a;\n    },\n    encodingLength (a) {\n        const data = a.data !== null && a.data !== undefined ? a.data : a.options;\n        return name.encodingLength(a.name) + 8 + renc(a.type).encodingLength(data);\n    }\n});\nconst question = codec({\n    encode (q, buf, offset) {\n        if (!buf) buf = new Uint8Array(question.encodingLength(q));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        name.encode(q.name, buf, offset);\n        offset += name.encode.bytes;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toType(q.type), offset);\n        offset += 2;\n        _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(buf, _classes_mjs__WEBPACK_IMPORTED_MODULE_4__.toClass(q.class === undefined ? \"IN\" : q.class), offset);\n        offset += 2;\n        question.encode.bytes = offset - oldOffset;\n        return q;\n    },\n    decode (buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const q = {};\n        q.name = name.decode(buf, offset);\n        offset += name.decode.bytes;\n        q.type = _types_mjs__WEBPACK_IMPORTED_MODULE_1__.toString(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset));\n        offset += 2;\n        q.class = _classes_mjs__WEBPACK_IMPORTED_MODULE_4__.toString(_buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(buf, offset));\n        offset += 2;\n        const qu = !!(q.class & QU_MASK);\n        if (qu) q.class &= NOT_QU_MASK;\n        question.decode.bytes = offset - oldOffset;\n        return q;\n    },\n    encodingLength (q) {\n        return name.encodingLength(q.name) + 4;\n    }\n});\n\nconst AUTHORITATIVE_ANSWER = 1 << 10;\nconst TRUNCATED_RESPONSE = 1 << 9;\nconst RECURSION_DESIRED = 1 << 8;\nconst RECURSION_AVAILABLE = 1 << 7;\nconst AUTHENTIC_DATA = 1 << 5;\nconst CHECKING_DISABLED = 1 << 4;\nconst DNSSEC_OK = 1 << 15;\nconst packet = {\n    encode: function(result, buf, offset) {\n        const allocing = !buf;\n        if (allocing) buf = new Uint8Array(encodingLength(result));\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        if (!result.questions) result.questions = [];\n        if (!result.answers) result.answers = [];\n        if (!result.authorities) result.authorities = [];\n        if (!result.additionals) result.additionals = [];\n        header.encode(result, buf, offset);\n        offset += header.encode.bytes;\n        offset = encodeList(result.questions, question, buf, offset);\n        offset = encodeList(result.answers, answer, buf, offset);\n        offset = encodeList(result.authorities, answer, buf, offset);\n        offset = encodeList(result.additionals, answer, buf, offset);\n        packet.encode.bytes = offset - oldOffset;\n        // just a quick sanity check\n        if (allocing && encode.bytes !== buf.length) {\n            return buf.slice(0, encode.bytes);\n        }\n        return buf;\n    },\n    decode: function(buf, offset) {\n        if (!offset) offset = 0;\n        const oldOffset = offset;\n        const result = header.decode(buf, offset);\n        offset += header.decode.bytes;\n        offset = decodeList(result.questions, question, buf, offset);\n        offset = decodeList(result.answers, answer, buf, offset);\n        offset = decodeList(result.authorities, answer, buf, offset);\n        offset = decodeList(result.additionals, answer, buf, offset);\n        packet.decode.bytes = offset - oldOffset;\n        return result;\n    },\n    encodingLength: function(result) {\n        return header.encodingLength(result) + encodingLengthList(result.questions || [], question) + encodingLengthList(result.answers || [], answer) + encodingLengthList(result.authorities || [], answer) + encodingLengthList(result.additionals || [], answer);\n    }\n};\npacket.encode.bytes = 0;\npacket.decode.bytes = 0;\nfunction sanitizeSingle(input, type) {\n    if (input.questions) {\n        throw new Error(\"Only one .question object expected instead of a .questions array!\");\n    }\n    const sanitized = Object.assign({\n        type\n    }, input);\n    if (sanitized.question) {\n        sanitized.questions = [\n            sanitized.question\n        ];\n        delete sanitized.question;\n    }\n    return sanitized;\n}\nconst query = {\n    encode: function(result, buf, offset) {\n        buf = packet.encode(sanitizeSingle(result, \"query\"), buf, offset);\n        query.encode.bytes = packet.encode.bytes;\n        return buf;\n    },\n    decode: function(buf, offset) {\n        const res = packet.decode(buf, offset);\n        query.decode.bytes = packet.decode.bytes;\n        if (res.questions) {\n            res.question = res.questions[0];\n            delete res.questions;\n        }\n        return res;\n    },\n    encodingLength: function(result) {\n        return packet.encodingLength(sanitizeSingle(result, \"query\"));\n    }\n};\nquery.encode.bytes = 0;\nquery.decode.bytes = 0;\nconst response = {\n    encode: function(result, buf, offset) {\n        buf = packet.encode(sanitizeSingle(result, \"response\"), buf, offset);\n        response.encode.bytes = packet.encode.bytes;\n        return buf;\n    },\n    decode: function(buf, offset) {\n        const res = packet.decode(buf, offset);\n        response.decode.bytes = packet.decode.bytes;\n        if (res.questions) {\n            res.question = res.questions[0];\n            delete res.questions;\n        }\n        return res;\n    },\n    encodingLength: function(result) {\n        return packet.encodingLength(sanitizeSingle(result, \"response\"));\n    }\n};\nresponse.encode.bytes = 0;\nresponse.decode.bytes = 0;\nconst encode = packet.encode;\nconst decode = packet.decode;\nconst encodingLength = packet.encodingLength;\nfunction streamEncode(result) {\n    const buf = encode(result);\n    const combine = new Uint8Array(2 + buf.byteLength);\n    _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.writeUInt16BE(combine, buf.byteLength);\n    _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.copy(buf, combine, 2, 0, buf.length);\n    streamEncode.bytes = combine.byteLength;\n    return combine;\n}\nstreamEncode.bytes = 0;\nfunction streamDecode(sbuf) {\n    const len = _buffer_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.readUInt16BE(sbuf, 0);\n    if (sbuf.byteLength < len + 2) {\n        // not enough data\n        return null;\n    }\n    const result = decode(sbuf.slice(2));\n    streamDecode.bytes = decode.bytes;\n    return result;\n}\nstreamDecode.bytes = 0;\nfunction encodingLengthList(list, enc) {\n    let len = 0;\n    for(let i = 0; i < list.length; i++)len += enc.encodingLength(list[i]);\n    return len;\n}\nfunction encodeList(list, enc, buf, offset) {\n    for(let i = 0; i < list.length; i++){\n        enc.encode(list[i], buf, offset);\n        offset += enc.encode.bytes;\n    }\n    return offset;\n}\nfunction decodeList(list, enc, buf, offset) {\n    for(let i = 0; i < list.length; i++){\n        list[i] = enc.decode(buf, offset);\n        offset += enc.decode.bytes;\n    }\n    return offset;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/opcodes.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/opcodes.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toOpcode: () => (/* binding */ toOpcode),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/*\n * Traditional DNS header OPCODEs (4-bits) defined by IANA in\n * https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-5\n */ function toString(opcode) {\n    switch(opcode){\n        case 0:\n            return \"QUERY\";\n        case 1:\n            return \"IQUERY\";\n        case 2:\n            return \"STATUS\";\n        case 3:\n            return \"OPCODE_3\";\n        case 4:\n            return \"NOTIFY\";\n        case 5:\n            return \"UPDATE\";\n        case 6:\n            return \"OPCODE_6\";\n        case 7:\n            return \"OPCODE_7\";\n        case 8:\n            return \"OPCODE_8\";\n        case 9:\n            return \"OPCODE_9\";\n        case 10:\n            return \"OPCODE_10\";\n        case 11:\n            return \"OPCODE_11\";\n        case 12:\n            return \"OPCODE_12\";\n        case 13:\n            return \"OPCODE_13\";\n        case 14:\n            return \"OPCODE_14\";\n        case 15:\n            return \"OPCODE_15\";\n    }\n    return \"OPCODE_\" + opcode;\n}\nfunction toOpcode(code) {\n    switch(code.toUpperCase()){\n        case \"QUERY\":\n            return 0;\n        case \"IQUERY\":\n            return 1;\n        case \"STATUS\":\n            return 2;\n        case \"OPCODE_3\":\n            return 3;\n        case \"NOTIFY\":\n            return 4;\n        case \"UPDATE\":\n            return 5;\n        case \"OPCODE_6\":\n            return 6;\n        case \"OPCODE_7\":\n            return 7;\n        case \"OPCODE_8\":\n            return 8;\n        case \"OPCODE_9\":\n            return 9;\n        case \"OPCODE_10\":\n            return 10;\n        case \"OPCODE_11\":\n            return 11;\n        case \"OPCODE_12\":\n            return 12;\n        case \"OPCODE_13\":\n            return 13;\n        case \"OPCODE_14\":\n            return 14;\n        case \"OPCODE_15\":\n            return 15;\n    }\n    return 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9vcGNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Q0FHQyxHQUVNLFNBQVNBLFNBQVVDLE1BQU07SUFDOUIsT0FBUUE7UUFDTixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO0lBQ2xCO0lBQ0EsT0FBTyxZQUFZQTtBQUNyQjtBQUVPLFNBQVNDLFNBQVVDLElBQUk7SUFDNUIsT0FBUUEsS0FBS0MsV0FBVztRQUN0QixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQVUsT0FBTztRQUN0QixLQUFLO1lBQVUsT0FBTztRQUN0QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQVUsT0FBTztRQUN0QixLQUFLO1lBQVUsT0FBTztRQUN0QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQWEsT0FBTztRQUN6QixLQUFLO1lBQWEsT0FBTztRQUN6QixLQUFLO1lBQWEsT0FBTztRQUN6QixLQUFLO1lBQWEsT0FBTztRQUN6QixLQUFLO1lBQWEsT0FBTztRQUN6QixLQUFLO1lBQWEsT0FBTztJQUMzQjtJQUNBLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BsZWljaHRnZXdpY2h0L2Rucy1wYWNrZXQvb3Bjb2Rlcy5tanM/YTcwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogVHJhZGl0aW9uYWwgRE5TIGhlYWRlciBPUENPREVzICg0LWJpdHMpIGRlZmluZWQgYnkgSUFOQSBpblxuICogaHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvZG5zLXBhcmFtZXRlcnMvZG5zLXBhcmFtZXRlcnMueGh0bWwjZG5zLXBhcmFtZXRlcnMtNVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyAob3Bjb2RlKSB7XG4gIHN3aXRjaCAob3Bjb2RlKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gJ1FVRVJZJ1xuICAgIGNhc2UgMTogcmV0dXJuICdJUVVFUlknXG4gICAgY2FzZSAyOiByZXR1cm4gJ1NUQVRVUydcbiAgICBjYXNlIDM6IHJldHVybiAnT1BDT0RFXzMnXG4gICAgY2FzZSA0OiByZXR1cm4gJ05PVElGWSdcbiAgICBjYXNlIDU6IHJldHVybiAnVVBEQVRFJ1xuICAgIGNhc2UgNjogcmV0dXJuICdPUENPREVfNidcbiAgICBjYXNlIDc6IHJldHVybiAnT1BDT0RFXzcnXG4gICAgY2FzZSA4OiByZXR1cm4gJ09QQ09ERV84J1xuICAgIGNhc2UgOTogcmV0dXJuICdPUENPREVfOSdcbiAgICBjYXNlIDEwOiByZXR1cm4gJ09QQ09ERV8xMCdcbiAgICBjYXNlIDExOiByZXR1cm4gJ09QQ09ERV8xMSdcbiAgICBjYXNlIDEyOiByZXR1cm4gJ09QQ09ERV8xMidcbiAgICBjYXNlIDEzOiByZXR1cm4gJ09QQ09ERV8xMydcbiAgICBjYXNlIDE0OiByZXR1cm4gJ09QQ09ERV8xNCdcbiAgICBjYXNlIDE1OiByZXR1cm4gJ09QQ09ERV8xNSdcbiAgfVxuICByZXR1cm4gJ09QQ09ERV8nICsgb3Bjb2RlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b09wY29kZSAoY29kZSkge1xuICBzd2l0Y2ggKGNvZGUudG9VcHBlckNhc2UoKSkge1xuICAgIGNhc2UgJ1FVRVJZJzogcmV0dXJuIDBcbiAgICBjYXNlICdJUVVFUlknOiByZXR1cm4gMVxuICAgIGNhc2UgJ1NUQVRVUyc6IHJldHVybiAyXG4gICAgY2FzZSAnT1BDT0RFXzMnOiByZXR1cm4gM1xuICAgIGNhc2UgJ05PVElGWSc6IHJldHVybiA0XG4gICAgY2FzZSAnVVBEQVRFJzogcmV0dXJuIDVcbiAgICBjYXNlICdPUENPREVfNic6IHJldHVybiA2XG4gICAgY2FzZSAnT1BDT0RFXzcnOiByZXR1cm4gN1xuICAgIGNhc2UgJ09QQ09ERV84JzogcmV0dXJuIDhcbiAgICBjYXNlICdPUENPREVfOSc6IHJldHVybiA5XG4gICAgY2FzZSAnT1BDT0RFXzEwJzogcmV0dXJuIDEwXG4gICAgY2FzZSAnT1BDT0RFXzExJzogcmV0dXJuIDExXG4gICAgY2FzZSAnT1BDT0RFXzEyJzogcmV0dXJuIDEyXG4gICAgY2FzZSAnT1BDT0RFXzEzJzogcmV0dXJuIDEzXG4gICAgY2FzZSAnT1BDT0RFXzE0JzogcmV0dXJuIDE0XG4gICAgY2FzZSAnT1BDT0RFXzE1JzogcmV0dXJuIDE1XG4gIH1cbiAgcmV0dXJuIDBcbn1cbiJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIm9wY29kZSIsInRvT3Bjb2RlIiwiY29kZSIsInRvVXBwZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/opcodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/optioncodes.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/optioncodes.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toCode: () => (/* binding */ toCode),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\nfunction toString(type) {\n    switch(type){\n        // list at\n        // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-11\n        case 1:\n            return \"LLQ\";\n        case 2:\n            return \"UL\";\n        case 3:\n            return \"NSID\";\n        case 5:\n            return \"DAU\";\n        case 6:\n            return \"DHU\";\n        case 7:\n            return \"N3U\";\n        case 8:\n            return \"CLIENT_SUBNET\";\n        case 9:\n            return \"EXPIRE\";\n        case 10:\n            return \"COOKIE\";\n        case 11:\n            return \"TCP_KEEPALIVE\";\n        case 12:\n            return \"PADDING\";\n        case 13:\n            return \"CHAIN\";\n        case 14:\n            return \"KEY_TAG\";\n        case 26946:\n            return \"DEVICEID\";\n    }\n    if (type < 0) {\n        return null;\n    }\n    return `OPTION_${type}`;\n}\nfunction toCode(name) {\n    if (typeof name === \"number\") {\n        return name;\n    }\n    if (!name) {\n        return -1;\n    }\n    switch(name.toUpperCase()){\n        case \"OPTION_0\":\n            return 0;\n        case \"LLQ\":\n            return 1;\n        case \"UL\":\n            return 2;\n        case \"NSID\":\n            return 3;\n        case \"OPTION_4\":\n            return 4;\n        case \"DAU\":\n            return 5;\n        case \"DHU\":\n            return 6;\n        case \"N3U\":\n            return 7;\n        case \"CLIENT_SUBNET\":\n            return 8;\n        case \"EXPIRE\":\n            return 9;\n        case \"COOKIE\":\n            return 10;\n        case \"TCP_KEEPALIVE\":\n            return 11;\n        case \"PADDING\":\n            return 12;\n        case \"CHAIN\":\n            return 13;\n        case \"KEY_TAG\":\n            return 14;\n        case \"DEVICEID\":\n            return 26946;\n        case \"OPTION_65535\":\n            return 65535;\n    }\n    const m = name.match(/_(\\d+)$/);\n    if (m) {\n        return parseInt(m[1], 10);\n    }\n    return -1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9vcHRpb25jb2Rlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxTQUFVQyxJQUFJO0lBQzVCLE9BQVFBO1FBQ04sVUFBVTtRQUNWLHlGQUF5RjtRQUN6RixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFPLE9BQU87SUFDckI7SUFDQSxJQUFJQSxPQUFPLEdBQUc7UUFDWixPQUFPO0lBQ1Q7SUFDQSxPQUFPLENBQUMsT0FBTyxFQUFFQSxLQUFLLENBQUM7QUFDekI7QUFFTyxTQUFTQyxPQUFRQyxJQUFJO0lBQzFCLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzVCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLENBQUNBLE1BQU07UUFDVCxPQUFPLENBQUM7SUFDVjtJQUNBLE9BQVFBLEtBQUtDLFdBQVc7UUFDdEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFpQixPQUFPO1FBQzdCLEtBQUs7WUFBVSxPQUFPO1FBQ3RCLEtBQUs7WUFBVSxPQUFPO1FBQ3RCLEtBQUs7WUFBaUIsT0FBTztRQUM3QixLQUFLO1lBQVcsT0FBTztRQUN2QixLQUFLO1lBQVMsT0FBTztRQUNyQixLQUFLO1lBQVcsT0FBTztRQUN2QixLQUFLO1lBQVksT0FBTztRQUN4QixLQUFLO1lBQWdCLE9BQU87SUFDOUI7SUFDQSxNQUFNQyxJQUFJRixLQUFLRyxLQUFLLENBQUM7SUFDckIsSUFBSUQsR0FBRztRQUNMLE9BQU9FLFNBQVNGLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDeEI7SUFDQSxPQUFPLENBQUM7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BsZWljaHRnZXdpY2h0L2Rucy1wYWNrZXQvb3B0aW9uY29kZXMubWpzPzJjMGEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nICh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIC8vIGxpc3QgYXRcbiAgICAvLyBodHRwczovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9kbnMtcGFyYW1ldGVycy9kbnMtcGFyYW1ldGVycy54aHRtbCNkbnMtcGFyYW1ldGVycy0xMVxuICAgIGNhc2UgMTogcmV0dXJuICdMTFEnXG4gICAgY2FzZSAyOiByZXR1cm4gJ1VMJ1xuICAgIGNhc2UgMzogcmV0dXJuICdOU0lEJ1xuICAgIGNhc2UgNTogcmV0dXJuICdEQVUnXG4gICAgY2FzZSA2OiByZXR1cm4gJ0RIVSdcbiAgICBjYXNlIDc6IHJldHVybiAnTjNVJ1xuICAgIGNhc2UgODogcmV0dXJuICdDTElFTlRfU1VCTkVUJ1xuICAgIGNhc2UgOTogcmV0dXJuICdFWFBJUkUnXG4gICAgY2FzZSAxMDogcmV0dXJuICdDT09LSUUnXG4gICAgY2FzZSAxMTogcmV0dXJuICdUQ1BfS0VFUEFMSVZFJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnUEFERElORydcbiAgICBjYXNlIDEzOiByZXR1cm4gJ0NIQUlOJ1xuICAgIGNhc2UgMTQ6IHJldHVybiAnS0VZX1RBRydcbiAgICBjYXNlIDI2OTQ2OiByZXR1cm4gJ0RFVklDRUlEJ1xuICB9XG4gIGlmICh0eXBlIDwgMCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgcmV0dXJuIGBPUFRJT05fJHt0eXBlfWBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQ29kZSAobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG5hbWVcbiAgfVxuICBpZiAoIW5hbWUpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBzd2l0Y2ggKG5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgIGNhc2UgJ09QVElPTl8wJzogcmV0dXJuIDBcbiAgICBjYXNlICdMTFEnOiByZXR1cm4gMVxuICAgIGNhc2UgJ1VMJzogcmV0dXJuIDJcbiAgICBjYXNlICdOU0lEJzogcmV0dXJuIDNcbiAgICBjYXNlICdPUFRJT05fNCc6IHJldHVybiA0XG4gICAgY2FzZSAnREFVJzogcmV0dXJuIDVcbiAgICBjYXNlICdESFUnOiByZXR1cm4gNlxuICAgIGNhc2UgJ04zVSc6IHJldHVybiA3XG4gICAgY2FzZSAnQ0xJRU5UX1NVQk5FVCc6IHJldHVybiA4XG4gICAgY2FzZSAnRVhQSVJFJzogcmV0dXJuIDlcbiAgICBjYXNlICdDT09LSUUnOiByZXR1cm4gMTBcbiAgICBjYXNlICdUQ1BfS0VFUEFMSVZFJzogcmV0dXJuIDExXG4gICAgY2FzZSAnUEFERElORyc6IHJldHVybiAxMlxuICAgIGNhc2UgJ0NIQUlOJzogcmV0dXJuIDEzXG4gICAgY2FzZSAnS0VZX1RBRyc6IHJldHVybiAxNFxuICAgIGNhc2UgJ0RFVklDRUlEJzogcmV0dXJuIDI2OTQ2XG4gICAgY2FzZSAnT1BUSU9OXzY1NTM1JzogcmV0dXJuIDY1NTM1XG4gIH1cbiAgY29uc3QgbSA9IG5hbWUubWF0Y2goL18oXFxkKykkLylcbiAgaWYgKG0pIHtcbiAgICByZXR1cm4gcGFyc2VJbnQobVsxXSwgMTApXG4gIH1cbiAgcmV0dXJuIC0xXG59XG4iXSwibmFtZXMiOlsidG9TdHJpbmciLCJ0eXBlIiwidG9Db2RlIiwibmFtZSIsInRvVXBwZXJDYXNlIiwibSIsIm1hdGNoIiwicGFyc2VJbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/optioncodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/rcodes.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/rcodes.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toRcode: () => (/* binding */ toRcode),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/*\n * Traditional DNS header RCODEs (4-bits) defined by IANA in\n * https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml\n */ function toString(rcode) {\n    switch(rcode){\n        case 0:\n            return \"NOERROR\";\n        case 1:\n            return \"FORMERR\";\n        case 2:\n            return \"SERVFAIL\";\n        case 3:\n            return \"NXDOMAIN\";\n        case 4:\n            return \"NOTIMP\";\n        case 5:\n            return \"REFUSED\";\n        case 6:\n            return \"YXDOMAIN\";\n        case 7:\n            return \"YXRRSET\";\n        case 8:\n            return \"NXRRSET\";\n        case 9:\n            return \"NOTAUTH\";\n        case 10:\n            return \"NOTZONE\";\n        case 11:\n            return \"RCODE_11\";\n        case 12:\n            return \"RCODE_12\";\n        case 13:\n            return \"RCODE_13\";\n        case 14:\n            return \"RCODE_14\";\n        case 15:\n            return \"RCODE_15\";\n    }\n    return \"RCODE_\" + rcode;\n}\nfunction toRcode(code) {\n    switch(code.toUpperCase()){\n        case \"NOERROR\":\n            return 0;\n        case \"FORMERR\":\n            return 1;\n        case \"SERVFAIL\":\n            return 2;\n        case \"NXDOMAIN\":\n            return 3;\n        case \"NOTIMP\":\n            return 4;\n        case \"REFUSED\":\n            return 5;\n        case \"YXDOMAIN\":\n            return 6;\n        case \"YXRRSET\":\n            return 7;\n        case \"NXRRSET\":\n            return 8;\n        case \"NOTAUTH\":\n            return 9;\n        case \"NOTZONE\":\n            return 10;\n        case \"RCODE_11\":\n            return 11;\n        case \"RCODE_12\":\n            return 12;\n        case \"RCODE_13\":\n            return 13;\n        case \"RCODE_14\":\n            return 14;\n        case \"RCODE_15\":\n            return 15;\n    }\n    return 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9yY29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7OztDQUdDLEdBRU0sU0FBU0EsU0FBVUMsS0FBSztJQUM3QixPQUFRQTtRQUNOLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87SUFDbEI7SUFDQSxPQUFPLFdBQVdBO0FBQ3BCO0FBRU8sU0FBU0MsUUFBU0MsSUFBSTtJQUMzQixPQUFRQSxLQUFLQyxXQUFXO1FBQ3RCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBVSxPQUFPO1FBQ3RCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBVyxPQUFPO1FBQ3ZCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBWSxPQUFPO1FBQ3hCLEtBQUs7WUFBWSxPQUFPO0lBQzFCO0lBQ0EsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC9yY29kZXMubWpzPzFjMzMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRyYWRpdGlvbmFsIEROUyBoZWFkZXIgUkNPREVzICg0LWJpdHMpIGRlZmluZWQgYnkgSUFOQSBpblxuICogaHR0cHM6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvZG5zLXBhcmFtZXRlcnMvZG5zLXBhcmFtZXRlcnMueGh0bWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcgKHJjb2RlKSB7XG4gIHN3aXRjaCAocmNvZGUpIHtcbiAgICBjYXNlIDA6IHJldHVybiAnTk9FUlJPUidcbiAgICBjYXNlIDE6IHJldHVybiAnRk9STUVSUidcbiAgICBjYXNlIDI6IHJldHVybiAnU0VSVkZBSUwnXG4gICAgY2FzZSAzOiByZXR1cm4gJ05YRE9NQUlOJ1xuICAgIGNhc2UgNDogcmV0dXJuICdOT1RJTVAnXG4gICAgY2FzZSA1OiByZXR1cm4gJ1JFRlVTRUQnXG4gICAgY2FzZSA2OiByZXR1cm4gJ1lYRE9NQUlOJ1xuICAgIGNhc2UgNzogcmV0dXJuICdZWFJSU0VUJ1xuICAgIGNhc2UgODogcmV0dXJuICdOWFJSU0VUJ1xuICAgIGNhc2UgOTogcmV0dXJuICdOT1RBVVRIJ1xuICAgIGNhc2UgMTA6IHJldHVybiAnTk9UWk9ORSdcbiAgICBjYXNlIDExOiByZXR1cm4gJ1JDT0RFXzExJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnUkNPREVfMTInXG4gICAgY2FzZSAxMzogcmV0dXJuICdSQ09ERV8xMydcbiAgICBjYXNlIDE0OiByZXR1cm4gJ1JDT0RFXzE0J1xuICAgIGNhc2UgMTU6IHJldHVybiAnUkNPREVfMTUnXG4gIH1cbiAgcmV0dXJuICdSQ09ERV8nICsgcmNvZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmNvZGUgKGNvZGUpIHtcbiAgc3dpdGNoIChjb2RlLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdOT0VSUk9SJzogcmV0dXJuIDBcbiAgICBjYXNlICdGT1JNRVJSJzogcmV0dXJuIDFcbiAgICBjYXNlICdTRVJWRkFJTCc6IHJldHVybiAyXG4gICAgY2FzZSAnTlhET01BSU4nOiByZXR1cm4gM1xuICAgIGNhc2UgJ05PVElNUCc6IHJldHVybiA0XG4gICAgY2FzZSAnUkVGVVNFRCc6IHJldHVybiA1XG4gICAgY2FzZSAnWVhET01BSU4nOiByZXR1cm4gNlxuICAgIGNhc2UgJ1lYUlJTRVQnOiByZXR1cm4gN1xuICAgIGNhc2UgJ05YUlJTRVQnOiByZXR1cm4gOFxuICAgIGNhc2UgJ05PVEFVVEgnOiByZXR1cm4gOVxuICAgIGNhc2UgJ05PVFpPTkUnOiByZXR1cm4gMTBcbiAgICBjYXNlICdSQ09ERV8xMSc6IHJldHVybiAxMVxuICAgIGNhc2UgJ1JDT0RFXzEyJzogcmV0dXJuIDEyXG4gICAgY2FzZSAnUkNPREVfMTMnOiByZXR1cm4gMTNcbiAgICBjYXNlICdSQ09ERV8xNCc6IHJldHVybiAxNFxuICAgIGNhc2UgJ1JDT0RFXzE1JzogcmV0dXJuIDE1XG4gIH1cbiAgcmV0dXJuIDBcbn1cbiJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsInJjb2RlIiwidG9SY29kZSIsImNvZGUiLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/rcodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-packet/types.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-packet/types.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: () => (/* binding */ toString),\n/* harmony export */   toType: () => (/* binding */ toType)\n/* harmony export */ });\nfunction toString(type) {\n    switch(type){\n        case 1:\n            return \"A\";\n        case 10:\n            return \"NULL\";\n        case 28:\n            return \"AAAA\";\n        case 18:\n            return \"AFSDB\";\n        case 42:\n            return \"APL\";\n        case 257:\n            return \"CAA\";\n        case 60:\n            return \"CDNSKEY\";\n        case 59:\n            return \"CDS\";\n        case 37:\n            return \"CERT\";\n        case 5:\n            return \"CNAME\";\n        case 49:\n            return \"DHCID\";\n        case 32769:\n            return \"DLV\";\n        case 39:\n            return \"DNAME\";\n        case 48:\n            return \"DNSKEY\";\n        case 43:\n            return \"DS\";\n        case 55:\n            return \"HIP\";\n        case 13:\n            return \"HINFO\";\n        case 45:\n            return \"IPSECKEY\";\n        case 25:\n            return \"KEY\";\n        case 36:\n            return \"KX\";\n        case 29:\n            return \"LOC\";\n        case 15:\n            return \"MX\";\n        case 35:\n            return \"NAPTR\";\n        case 2:\n            return \"NS\";\n        case 47:\n            return \"NSEC\";\n        case 50:\n            return \"NSEC3\";\n        case 51:\n            return \"NSEC3PARAM\";\n        case 12:\n            return \"PTR\";\n        case 46:\n            return \"RRSIG\";\n        case 17:\n            return \"RP\";\n        case 24:\n            return \"SIG\";\n        case 6:\n            return \"SOA\";\n        case 99:\n            return \"SPF\";\n        case 33:\n            return \"SRV\";\n        case 44:\n            return \"SSHFP\";\n        case 32768:\n            return \"TA\";\n        case 249:\n            return \"TKEY\";\n        case 52:\n            return \"TLSA\";\n        case 250:\n            return \"TSIG\";\n        case 16:\n            return \"TXT\";\n        case 252:\n            return \"AXFR\";\n        case 251:\n            return \"IXFR\";\n        case 41:\n            return \"OPT\";\n        case 255:\n            return \"ANY\";\n    }\n    return \"UNKNOWN_\" + type;\n}\nfunction toType(name) {\n    switch(name.toUpperCase()){\n        case \"A\":\n            return 1;\n        case \"NULL\":\n            return 10;\n        case \"AAAA\":\n            return 28;\n        case \"AFSDB\":\n            return 18;\n        case \"APL\":\n            return 42;\n        case \"CAA\":\n            return 257;\n        case \"CDNSKEY\":\n            return 60;\n        case \"CDS\":\n            return 59;\n        case \"CERT\":\n            return 37;\n        case \"CNAME\":\n            return 5;\n        case \"DHCID\":\n            return 49;\n        case \"DLV\":\n            return 32769;\n        case \"DNAME\":\n            return 39;\n        case \"DNSKEY\":\n            return 48;\n        case \"DS\":\n            return 43;\n        case \"HIP\":\n            return 55;\n        case \"HINFO\":\n            return 13;\n        case \"IPSECKEY\":\n            return 45;\n        case \"KEY\":\n            return 25;\n        case \"KX\":\n            return 36;\n        case \"LOC\":\n            return 29;\n        case \"MX\":\n            return 15;\n        case \"NAPTR\":\n            return 35;\n        case \"NS\":\n            return 2;\n        case \"NSEC\":\n            return 47;\n        case \"NSEC3\":\n            return 50;\n        case \"NSEC3PARAM\":\n            return 51;\n        case \"PTR\":\n            return 12;\n        case \"RRSIG\":\n            return 46;\n        case \"RP\":\n            return 17;\n        case \"SIG\":\n            return 24;\n        case \"SOA\":\n            return 6;\n        case \"SPF\":\n            return 99;\n        case \"SRV\":\n            return 33;\n        case \"SSHFP\":\n            return 44;\n        case \"TA\":\n            return 32768;\n        case \"TKEY\":\n            return 249;\n        case \"TLSA\":\n            return 52;\n        case \"TSIG\":\n            return 250;\n        case \"TXT\":\n            return 16;\n        case \"AXFR\":\n            return 252;\n        case \"IXFR\":\n            return 251;\n        case \"OPT\":\n            return 41;\n        case \"ANY\":\n            return 255;\n        case \"*\":\n            return 255;\n    }\n    if (name.toUpperCase().startsWith(\"UNKNOWN_\")) return parseInt(name.slice(8));\n    return 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXBhY2tldC90eXBlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxTQUFVQyxJQUFJO0lBQzVCLE9BQVFBO1FBQ04sS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUcsT0FBTztRQUNmLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBTyxPQUFPO1FBQ25CLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBSSxPQUFPO1FBQ2hCLEtBQUs7WUFBRyxPQUFPO1FBQ2YsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFJLE9BQU87UUFDaEIsS0FBSztZQUFHLE9BQU87UUFDZixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQU8sT0FBTztRQUNuQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUssT0FBTztRQUNqQixLQUFLO1lBQUksT0FBTztRQUNoQixLQUFLO1lBQUssT0FBTztJQUNuQjtJQUNBLE9BQU8sYUFBYUE7QUFDdEI7QUFFTyxTQUFTQyxPQUFRQyxJQUFJO0lBQzFCLE9BQVFBLEtBQUtDLFdBQVc7UUFDdEIsS0FBSztZQUFLLE9BQU87UUFDakIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFXLE9BQU87UUFDdkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFVLE9BQU87UUFDdEIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFZLE9BQU87UUFDeEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFjLE9BQU87UUFDMUIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFTLE9BQU87UUFDckIsS0FBSztZQUFNLE9BQU87UUFDbEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFRLE9BQU87UUFDcEIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFPLE9BQU87UUFDbkIsS0FBSztZQUFLLE9BQU87SUFDbkI7SUFDQSxJQUFJRCxLQUFLQyxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxhQUFhLE9BQU9DLFNBQVNILEtBQUtJLEtBQUssQ0FBQztJQUMxRSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AbGVpY2h0Z2V3aWNodC9kbnMtcGFja2V0L3R5cGVzLm1qcz83OTJiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyAodHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIDE6IHJldHVybiAnQSdcbiAgICBjYXNlIDEwOiByZXR1cm4gJ05VTEwnXG4gICAgY2FzZSAyODogcmV0dXJuICdBQUFBJ1xuICAgIGNhc2UgMTg6IHJldHVybiAnQUZTREInXG4gICAgY2FzZSA0MjogcmV0dXJuICdBUEwnXG4gICAgY2FzZSAyNTc6IHJldHVybiAnQ0FBJ1xuICAgIGNhc2UgNjA6IHJldHVybiAnQ0ROU0tFWSdcbiAgICBjYXNlIDU5OiByZXR1cm4gJ0NEUydcbiAgICBjYXNlIDM3OiByZXR1cm4gJ0NFUlQnXG4gICAgY2FzZSA1OiByZXR1cm4gJ0NOQU1FJ1xuICAgIGNhc2UgNDk6IHJldHVybiAnREhDSUQnXG4gICAgY2FzZSAzMjc2OTogcmV0dXJuICdETFYnXG4gICAgY2FzZSAzOTogcmV0dXJuICdETkFNRSdcbiAgICBjYXNlIDQ4OiByZXR1cm4gJ0ROU0tFWSdcbiAgICBjYXNlIDQzOiByZXR1cm4gJ0RTJ1xuICAgIGNhc2UgNTU6IHJldHVybiAnSElQJ1xuICAgIGNhc2UgMTM6IHJldHVybiAnSElORk8nXG4gICAgY2FzZSA0NTogcmV0dXJuICdJUFNFQ0tFWSdcbiAgICBjYXNlIDI1OiByZXR1cm4gJ0tFWSdcbiAgICBjYXNlIDM2OiByZXR1cm4gJ0tYJ1xuICAgIGNhc2UgMjk6IHJldHVybiAnTE9DJ1xuICAgIGNhc2UgMTU6IHJldHVybiAnTVgnXG4gICAgY2FzZSAzNTogcmV0dXJuICdOQVBUUidcbiAgICBjYXNlIDI6IHJldHVybiAnTlMnXG4gICAgY2FzZSA0NzogcmV0dXJuICdOU0VDJ1xuICAgIGNhc2UgNTA6IHJldHVybiAnTlNFQzMnXG4gICAgY2FzZSA1MTogcmV0dXJuICdOU0VDM1BBUkFNJ1xuICAgIGNhc2UgMTI6IHJldHVybiAnUFRSJ1xuICAgIGNhc2UgNDY6IHJldHVybiAnUlJTSUcnXG4gICAgY2FzZSAxNzogcmV0dXJuICdSUCdcbiAgICBjYXNlIDI0OiByZXR1cm4gJ1NJRydcbiAgICBjYXNlIDY6IHJldHVybiAnU09BJ1xuICAgIGNhc2UgOTk6IHJldHVybiAnU1BGJ1xuICAgIGNhc2UgMzM6IHJldHVybiAnU1JWJ1xuICAgIGNhc2UgNDQ6IHJldHVybiAnU1NIRlAnXG4gICAgY2FzZSAzMjc2ODogcmV0dXJuICdUQSdcbiAgICBjYXNlIDI0OTogcmV0dXJuICdUS0VZJ1xuICAgIGNhc2UgNTI6IHJldHVybiAnVExTQSdcbiAgICBjYXNlIDI1MDogcmV0dXJuICdUU0lHJ1xuICAgIGNhc2UgMTY6IHJldHVybiAnVFhUJ1xuICAgIGNhc2UgMjUyOiByZXR1cm4gJ0FYRlInXG4gICAgY2FzZSAyNTE6IHJldHVybiAnSVhGUidcbiAgICBjYXNlIDQxOiByZXR1cm4gJ09QVCdcbiAgICBjYXNlIDI1NTogcmV0dXJuICdBTlknXG4gIH1cbiAgcmV0dXJuICdVTktOT1dOXycgKyB0eXBlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1R5cGUgKG5hbWUpIHtcbiAgc3dpdGNoIChuYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICBjYXNlICdBJzogcmV0dXJuIDFcbiAgICBjYXNlICdOVUxMJzogcmV0dXJuIDEwXG4gICAgY2FzZSAnQUFBQSc6IHJldHVybiAyOFxuICAgIGNhc2UgJ0FGU0RCJzogcmV0dXJuIDE4XG4gICAgY2FzZSAnQVBMJzogcmV0dXJuIDQyXG4gICAgY2FzZSAnQ0FBJzogcmV0dXJuIDI1N1xuICAgIGNhc2UgJ0NETlNLRVknOiByZXR1cm4gNjBcbiAgICBjYXNlICdDRFMnOiByZXR1cm4gNTlcbiAgICBjYXNlICdDRVJUJzogcmV0dXJuIDM3XG4gICAgY2FzZSAnQ05BTUUnOiByZXR1cm4gNVxuICAgIGNhc2UgJ0RIQ0lEJzogcmV0dXJuIDQ5XG4gICAgY2FzZSAnRExWJzogcmV0dXJuIDMyNzY5XG4gICAgY2FzZSAnRE5BTUUnOiByZXR1cm4gMzlcbiAgICBjYXNlICdETlNLRVknOiByZXR1cm4gNDhcbiAgICBjYXNlICdEUyc6IHJldHVybiA0M1xuICAgIGNhc2UgJ0hJUCc6IHJldHVybiA1NVxuICAgIGNhc2UgJ0hJTkZPJzogcmV0dXJuIDEzXG4gICAgY2FzZSAnSVBTRUNLRVknOiByZXR1cm4gNDVcbiAgICBjYXNlICdLRVknOiByZXR1cm4gMjVcbiAgICBjYXNlICdLWCc6IHJldHVybiAzNlxuICAgIGNhc2UgJ0xPQyc6IHJldHVybiAyOVxuICAgIGNhc2UgJ01YJzogcmV0dXJuIDE1XG4gICAgY2FzZSAnTkFQVFInOiByZXR1cm4gMzVcbiAgICBjYXNlICdOUyc6IHJldHVybiAyXG4gICAgY2FzZSAnTlNFQyc6IHJldHVybiA0N1xuICAgIGNhc2UgJ05TRUMzJzogcmV0dXJuIDUwXG4gICAgY2FzZSAnTlNFQzNQQVJBTSc6IHJldHVybiA1MVxuICAgIGNhc2UgJ1BUUic6IHJldHVybiAxMlxuICAgIGNhc2UgJ1JSU0lHJzogcmV0dXJuIDQ2XG4gICAgY2FzZSAnUlAnOiByZXR1cm4gMTdcbiAgICBjYXNlICdTSUcnOiByZXR1cm4gMjRcbiAgICBjYXNlICdTT0EnOiByZXR1cm4gNlxuICAgIGNhc2UgJ1NQRic6IHJldHVybiA5OVxuICAgIGNhc2UgJ1NSVic6IHJldHVybiAzM1xuICAgIGNhc2UgJ1NTSEZQJzogcmV0dXJuIDQ0XG4gICAgY2FzZSAnVEEnOiByZXR1cm4gMzI3NjhcbiAgICBjYXNlICdUS0VZJzogcmV0dXJuIDI0OVxuICAgIGNhc2UgJ1RMU0EnOiByZXR1cm4gNTJcbiAgICBjYXNlICdUU0lHJzogcmV0dXJuIDI1MFxuICAgIGNhc2UgJ1RYVCc6IHJldHVybiAxNlxuICAgIGNhc2UgJ0FYRlInOiByZXR1cm4gMjUyXG4gICAgY2FzZSAnSVhGUic6IHJldHVybiAyNTFcbiAgICBjYXNlICdPUFQnOiByZXR1cm4gNDFcbiAgICBjYXNlICdBTlknOiByZXR1cm4gMjU1XG4gICAgY2FzZSAnKic6IHJldHVybiAyNTVcbiAgfVxuICBpZiAobmFtZS50b1VwcGVyQ2FzZSgpLnN0YXJ0c1dpdGgoJ1VOS05PV05fJykpIHJldHVybiBwYXJzZUludChuYW1lLnNsaWNlKDgpKVxuICByZXR1cm4gMFxufVxuIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwidHlwZSIsInRvVHlwZSIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSIsInN0YXJ0c1dpdGgiLCJwYXJzZUludCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-packet/types.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/dns-socket/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@leichtgewicht/dns-socket/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNSSocket: () => (/* binding */ DNSSocket)\n/* harmony export */ });\n/* harmony import */ var dgram__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dgram */ \"dgram\");\n/* harmony import */ var _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @leichtgewicht/dns-packet */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/index.mjs\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"buffer\");\n\n\n\n\nclass DNSSocket extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    constructor(opts = {}){\n        super();\n        this.retries = opts.retries !== undefined ? opts.retries : 5;\n        this.timeout = opts.timeout || 7500;\n        this.timeoutChecks = opts.timeoutChecks || this.timeout / 10;\n        this.destroyed = false;\n        this.inflight = 0;\n        this.raw = opts.raw === true;\n        this.maxQueries = opts.maxQueries || 10000;\n        this.maxRedirects = opts.maxRedirects || 0;\n        this.socket = opts.socket || dgram__WEBPACK_IMPORTED_MODULE_0__.createSocket(\"udp4\");\n        this._id = Math.ceil(Math.random() * this.maxQueries);\n        this._queries = new Array(this.maxQueries).fill(null);\n        this._interval = null;\n        this.socket.on(\"error\", (err)=>{\n            if (err.code === \"EACCES\" || err.code === \"EADDRINUSE\") {\n                this.emit(\"error\", err);\n            } else {\n                this.emit(\"warning\", err);\n            }\n        });\n        this.socket.on(\"message\", (message, rinfo)=>{\n            this._onmessage(message, rinfo);\n        });\n        const onlistening = ()=>{\n            this._interval = setInterval(()=>this._ontimeoutCheck(), this.timeoutChecks);\n            this.emit(\"listening\");\n        };\n        if (isListening(this.socket)) onlistening();\n        else this.socket.on(\"listening\", onlistening);\n        this.socket.on(\"close\", ()=>this.emit(\"close\"));\n    }\n    address() {\n        return this.socket.address();\n    }\n    bind(...args) {\n        const onlistening = args.length > 0 && args[args.length - 1];\n        if (typeof onlistening === \"function\") {\n            this.once(\"listening\", onlistening);\n            this.socket.bind(...args.slice(0, -1));\n        } else {\n            this.socket.bind(...args);\n        }\n    }\n    destroy(onclose) {\n        if (onclose) {\n            this.once(\"close\", onclose);\n        }\n        if (this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        clearInterval(this._interval);\n        this.socket.close();\n        for(let i = 0; i < this.maxQueries; i++){\n            const q = this._queries[i];\n            if (q) {\n                q.callback(new Error(\"Socket destroyed\"));\n                this._queries[i] = null;\n            }\n        }\n        this.inflight = 0;\n    }\n    _ontimeoutCheck() {\n        const now = Date.now();\n        for(let i = 0; i < this.maxQueries; i++){\n            const q = this._queries[i];\n            if (!q || now - q.firstTry < (q.tries + 1) * this.timeout) {\n                continue;\n            }\n            if (q.tries > this.retries) {\n                this._queries[i] = null;\n                this.inflight--;\n                this.emit(\"timeout\", q.query, q.port, q.host);\n                q.callback(new Error(\"Query timed out\"));\n                continue;\n            }\n            q.tries++;\n            this.socket.send(q.buffer, 0, q.buffer.length, q.port, Array.isArray(q.host) ? q.host[Math.floor(q.host.length * Math.random())] : q.host || \"127.0.0.1\");\n        }\n    }\n    _shouldRedirect(q, result) {\n        // no redirects, no query, more than 1 questions, has any A record answer\n        if (this.maxRedirects <= 0 || !q || q.query.questions.length !== 1 || result.answers.filter((e)=>e.type === \"A\").length > 0) {\n            return false;\n        }\n        // no more redirects left\n        if (q.redirects > this.maxRedirects) {\n            return false;\n        }\n        const cnameresults = result.answers.filter((e)=>e.type === \"CNAME\");\n        if (cnameresults.length === 0) {\n            return false;\n        }\n        const id = this._getNextEmptyId();\n        if (id === -1) {\n            q.callback(new Error(\"Query array is full!\"));\n            return true;\n        }\n        // replace current query with a new one\n        q.query = {\n            id: id + 1,\n            flags: _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.RECURSION_DESIRED,\n            questions: [\n                {\n                    type: \"A\",\n                    name: cnameresults[0].data\n                }\n            ]\n        };\n        q.redirects++;\n        q.firstTry = Date.now();\n        q.tries = 0;\n        q.buffer = buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.alloc(_leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.encodingLength(q.query));\n        _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.encode(q.query, q.buffer);\n        this._queries[id] = q;\n        this.socket.send(q.buffer, 0, q.buffer.length, q.port, Array.isArray(q.host) ? q.host[Math.floor(q.host.length * Math.random())] : q.host || \"127.0.0.1\");\n        return true;\n    }\n    _onmessage(buffer, rinfo) {\n        let message;\n        try {\n            message = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.decode(buffer);\n        } catch (err) {\n            this.emit(\"warning\", err);\n            return;\n        }\n        if (message.type === \"response\" && message.id) {\n            const q = this._queries[message.id - 1];\n            if (q) {\n                this._queries[message.id - 1] = null;\n                this.inflight--;\n                if (!this._shouldRedirect(q, message)) {\n                    q.callback(null, message);\n                }\n            }\n        }\n        this.emit(message.type, message, rinfo.port, rinfo.address);\n    }\n    unref() {\n        this.socket.unref();\n    }\n    ref() {\n        this.socket.ref();\n    }\n    response(query, response, port, host) {\n        if (this.destroyed) {\n            return;\n        }\n        response.type = \"response\";\n        response.id = query.id;\n        const buffer = buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.alloc(_leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.encodingLength(response));\n        _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.encode(response, buffer);\n        this.socket.send(buffer, 0, buffer.length, port, host);\n    }\n    cancel(id) {\n        const q = this._queries[id];\n        if (!q) return;\n        this._queries[id] = null;\n        this.inflight--;\n        q.callback(new Error(\"Query cancelled\"));\n    }\n    setRetries(id, retries) {\n        const q = this._queries[id];\n        if (!q) return;\n        q.firstTry = q.firstTry - this.timeout * (retries - q.retries);\n        q.retries = this.retries - retries;\n    }\n    _getNextEmptyId() {\n        // try to find the next unused id\n        let id = -1;\n        for(let idtries = this.maxQueries; idtries > 0; idtries--){\n            const normalizedId = (this._id + idtries) % this.maxQueries;\n            if (this._queries[normalizedId] === null) {\n                id = normalizedId;\n                this._id = (normalizedId + 1) % this.maxQueries;\n                break;\n            }\n        }\n        return id;\n    }\n    query(query, port, host, cb) {\n        if (this.destroyed) {\n            cb(new Error(\"Socket destroyed\"));\n            return 0;\n        }\n        this.inflight++;\n        query.type = \"query\";\n        query.flags = typeof query.flags === \"number\" ? query.flags : DNSSocket.RECURSION_DESIRED;\n        const id = this._getNextEmptyId();\n        if (id === -1) {\n            cb(new Error(\"Query array is full!\"));\n            return 0;\n        }\n        query.id = id + 1;\n        const buffer = buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.alloc(_leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.encodingLength(query));\n        _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.encode(query, buffer);\n        this._queries[id] = {\n            callback: cb || noop,\n            redirects: 0,\n            firstTry: Date.now(),\n            query,\n            tries: 0,\n            buffer,\n            port,\n            host\n        };\n        this.socket.send(buffer, 0, buffer.length, port, Array.isArray(host) ? host[Math.floor(host.length * Math.random())] : host || \"127.0.0.1\");\n        return id;\n    }\n}\nDNSSocket.RECURSION_DESIRED = DNSSocket.prototype.RECURSION_DESIRED = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.RECURSION_DESIRED;\nDNSSocket.RECURSION_AVAILABLE = DNSSocket.prototype.RECURSION_AVAILABLE = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.RECURSION_AVAILABLE;\nDNSSocket.TRUNCATED_RESPONSE = DNSSocket.prototype.TRUNCATED_RESPONSE = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.TRUNCATED_RESPONSE;\nDNSSocket.AUTHORITATIVE_ANSWER = DNSSocket.prototype.AUTHORITATIVE_ANSWER = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.AUTHORITATIVE_ANSWER;\nDNSSocket.AUTHENTIC_DATA = DNSSocket.prototype.AUTHENTIC_DATA = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.AUTHENTIC_DATA;\nDNSSocket.CHECKING_DISABLED = DNSSocket.prototype.CHECKING_DISABLED = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_1__.CHECKING_DISABLED;\nfunction noop() {}\nfunction isListening(socket) {\n    try {\n        return socket.address().port !== 0;\n    } catch (err) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxlaWNodGdld2ljaHQvZG5zLXNvY2tldC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBeUI7QUFDMEI7QUFDZDtBQUNOO0FBRXhCLE1BQU1JLGtCQUFrQkYsZ0RBQVlBO0lBQ3pDRyxZQUFhQyxPQUFPLENBQUMsQ0FBQyxDQUFFO1FBQ3RCLEtBQUs7UUFFTCxJQUFJLENBQUNDLE9BQU8sR0FBR0QsS0FBS0MsT0FBTyxLQUFLQyxZQUFZRixLQUFLQyxPQUFPLEdBQUc7UUFDM0QsSUFBSSxDQUFDRSxPQUFPLEdBQUdILEtBQUtHLE9BQU8sSUFBSTtRQUMvQixJQUFJLENBQUNDLGFBQWEsR0FBR0osS0FBS0ksYUFBYSxJQUFLLElBQUksQ0FBQ0QsT0FBTyxHQUFHO1FBQzNELElBQUksQ0FBQ0UsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsR0FBRyxHQUFHUCxLQUFLTyxHQUFHLEtBQUs7UUFDeEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdSLEtBQUtRLFVBQVUsSUFBSTtRQUNyQyxJQUFJLENBQUNDLFlBQVksR0FBR1QsS0FBS1MsWUFBWSxJQUFJO1FBQ3pDLElBQUksQ0FBQ0MsTUFBTSxHQUFHVixLQUFLVSxNQUFNLElBQUloQiwrQ0FBa0IsQ0FBQztRQUNoRCxJQUFJLENBQUNrQixHQUFHLEdBQUdDLEtBQUtDLElBQUksQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLLElBQUksQ0FBQ1AsVUFBVTtRQUNwRCxJQUFJLENBQUNRLFFBQVEsR0FBRyxJQUFJQyxNQUFNLElBQUksQ0FBQ1QsVUFBVSxFQUFFVSxJQUFJLENBQUM7UUFDaEQsSUFBSSxDQUFDQyxTQUFTLEdBQUc7UUFFakIsSUFBSSxDQUFDVCxNQUFNLENBQUNVLEVBQUUsQ0FBQyxTQUFTQyxDQUFBQTtZQUN0QixJQUFJQSxJQUFJQyxJQUFJLEtBQUssWUFBWUQsSUFBSUMsSUFBSSxLQUFLLGNBQWM7Z0JBQ3RELElB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T0EsT0FBT3FCLE9BQU8sR0FBR21CLElBQUksS0FBSztJQUNuQyxFQUFFLE9BQU83QixLQUFLO1FBQ1osT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AbGVpY2h0Z2V3aWNodC9kbnMtc29ja2V0L2luZGV4Lm1qcz84NTVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZ3JhbSBmcm9tICdkZ3JhbSdcbmltcG9ydCAqIGFzIHBhY2tldCBmcm9tICdAbGVpY2h0Z2V3aWNodC9kbnMtcGFja2V0J1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJ1xuXG5leHBvcnQgY2xhc3MgRE5TU29ja2V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKClcblxuICAgIHRoaXMucmV0cmllcyA9IG9wdHMucmV0cmllcyAhPT0gdW5kZWZpbmVkID8gb3B0cy5yZXRyaWVzIDogNVxuICAgIHRoaXMudGltZW91dCA9IG9wdHMudGltZW91dCB8fCA3NTAwXG4gICAgdGhpcy50aW1lb3V0Q2hlY2tzID0gb3B0cy50aW1lb3V0Q2hlY2tzIHx8ICh0aGlzLnRpbWVvdXQgLyAxMClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG4gICAgdGhpcy5pbmZsaWdodCA9IDBcbiAgICB0aGlzLnJhdyA9IG9wdHMucmF3ID09PSB0cnVlXG4gICAgdGhpcy5tYXhRdWVyaWVzID0gb3B0cy5tYXhRdWVyaWVzIHx8IDEwMDAwXG4gICAgdGhpcy5tYXhSZWRpcmVjdHMgPSBvcHRzLm1heFJlZGlyZWN0cyB8fCAwXG4gICAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldCB8fCBkZ3JhbS5jcmVhdGVTb2NrZXQoJ3VkcDQnKVxuICAgIHRoaXMuX2lkID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiB0aGlzLm1heFF1ZXJpZXMpXG4gICAgdGhpcy5fcXVlcmllcyA9IG5ldyBBcnJheSh0aGlzLm1heFF1ZXJpZXMpLmZpbGwobnVsbClcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcblxuICAgIHRoaXMuc29ja2V0Lm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFQUNDRVMnIHx8IGVyci5jb2RlID09PSAnRUFERFJJTlVTRScpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW1pdCgnd2FybmluZycsIGVycilcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuc29ja2V0Lm9uKCdtZXNzYWdlJywgKG1lc3NhZ2UsIHJpbmZvKSA9PiB7XG4gICAgICB0aGlzLl9vbm1lc3NhZ2UobWVzc2FnZSwgcmluZm8pXG4gICAgfSlcblxuICAgIGNvbnN0IG9ubGlzdGVuaW5nID0gKCkgPT4ge1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLl9vbnRpbWVvdXRDaGVjaygpLCB0aGlzLnRpbWVvdXRDaGVja3MpXG4gICAgICB0aGlzLmVtaXQoJ2xpc3RlbmluZycpXG4gICAgfVxuXG4gICAgaWYgKGlzTGlzdGVuaW5nKHRoaXMuc29ja2V0KSkgb25saXN0ZW5pbmcoKVxuICAgIGVsc2UgdGhpcy5zb2NrZXQub24oJ2xpc3RlbmluZycsIG9ubGlzdGVuaW5nKVxuICAgIHRoaXMuc29ja2V0Lm9uKFxuICAgICAgJ2Nsb3NlJyxcbiAgICAgICgpID0+IHRoaXMuZW1pdCgnY2xvc2UnKVxuICAgIClcbiAgfVxuXG4gIGFkZHJlc3MgKCkge1xuICAgIHJldHVybiB0aGlzLnNvY2tldC5hZGRyZXNzKClcbiAgfVxuXG4gIGJpbmQgKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBvbmxpc3RlbmluZyA9IGFyZ3MubGVuZ3RoID4gMCAmJiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV1cbiAgICBpZiAodHlwZW9mIG9ubGlzdGVuaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLm9uY2UoJ2xpc3RlbmluZycsIG9ubGlzdGVuaW5nKVxuICAgICAgdGhpcy5zb2NrZXQuYmluZCguLi5hcmdzLnNsaWNlKDAsIC0xKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zb2NrZXQuYmluZCguLi5hcmdzKVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3kgKG9uY2xvc2UpIHtcbiAgICBpZiAob25jbG9zZSkge1xuICAgICAgdGhpcy5vbmNlKCdjbG9zZScsIG9uY2xvc2UpXG4gICAgfVxuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZVxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpXG4gICAgdGhpcy5zb2NrZXQuY2xvc2UoKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1heFF1ZXJpZXM7IGkrKykge1xuICAgICAgY29uc3QgcSA9IHRoaXMuX3F1ZXJpZXNbaV1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEuY2FsbGJhY2sobmV3IEVycm9yKCdTb2NrZXQgZGVzdHJveWVkJykpXG4gICAgICAgIHRoaXMuX3F1ZXJpZXNbaV0gPSBudWxsXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaW5mbGlnaHQgPSAwXG4gIH1cblxuICBfb250aW1lb3V0Q2hlY2sgKCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWF4UXVlcmllczsgaSsrKSB7XG4gICAgICBjb25zdCBxID0gdGhpcy5fcXVlcmllc1tpXVxuXG4gICAgICBpZiAoKCFxKSB8fCAobm93IC0gcS5maXJzdFRyeSA8IChxLnRyaWVzICsgMSkgKiB0aGlzLnRpbWVvdXQpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChxLnRyaWVzID4gdGhpcy5yZXRyaWVzKSB7XG4gICAgICAgIHRoaXMuX3F1ZXJpZXNbaV0gPSBudWxsXG4gICAgICAgIHRoaXMuaW5mbGlnaHQtLVxuICAgICAgICB0aGlzLmVtaXQoJ3RpbWVvdXQnLCBxLnF1ZXJ5LCBxLnBvcnQsIHEuaG9zdClcbiAgICAgICAgcS5jYWxsYmFjayhuZXcgRXJyb3IoJ1F1ZXJ5IHRpbWVkIG91dCcpKVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgcS50cmllcysrXG4gICAgICB0aGlzLnNvY2tldC5zZW5kKHEuYnVmZmVyLCAwLCBxLmJ1ZmZlci5sZW5ndGgsIHEucG9ydCwgQXJyYXkuaXNBcnJheShxLmhvc3QpID8gcS5ob3N0W01hdGguZmxvb3IocS5ob3N0Lmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpXSA6IHEuaG9zdCB8fCAnMTI3LjAuMC4xJylcbiAgICB9XG4gIH1cblxuICBfc2hvdWxkUmVkaXJlY3QgKHEsIHJlc3VsdCkge1xuICAgIC8vIG5vIHJlZGlyZWN0cywgbm8gcXVlcnksIG1vcmUgdGhhbiAxIHF1ZXN0aW9ucywgaGFzIGFueSBBIHJlY29yZCBhbnN3ZXJcbiAgICBpZiAodGhpcy5tYXhSZWRpcmVjdHMgPD0gMCB8fCAoIXEpIHx8IChxLnF1ZXJ5LnF1ZXN0aW9ucy5sZW5ndGggIT09IDEpIHx8IHJlc3VsdC5hbnN3ZXJzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gJ0EnKS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBubyBtb3JlIHJlZGlyZWN0cyBsZWZ0XG4gICAgaWYgKHEucmVkaXJlY3RzID4gdGhpcy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGNuYW1lcmVzdWx0cyA9IHJlc3VsdC5hbnN3ZXJzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gJ0NOQU1FJylcbiAgICBpZiAoY25hbWVyZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgaWQgPSB0aGlzLl9nZXROZXh0RW1wdHlJZCgpXG4gICAgaWYgKGlkID09PSAtMSkge1xuICAgICAgcS5jYWxsYmFjayhuZXcgRXJyb3IoJ1F1ZXJ5IGFycmF5IGlzIGZ1bGwhJykpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIHJlcGxhY2UgY3VycmVudCBxdWVyeSB3aXRoIGEgbmV3IG9uZVxuICAgIHEucXVlcnkgPSB7XG4gICAgICBpZDogaWQgKyAxLFxuICAgICAgZmxhZ3M6IHBhY2tldC5SRUNVUlNJT05fREVTSVJFRCxcbiAgICAgIHF1ZXN0aW9uczogW3tcbiAgICAgICAgdHlwZTogJ0EnLFxuICAgICAgICBuYW1lOiBjbmFtZXJlc3VsdHNbMF0uZGF0YVxuICAgICAgfV1cbiAgICB9XG4gICAgcS5yZWRpcmVjdHMrK1xuICAgIHEuZmlyc3RUcnkgPSBEYXRlLm5vdygpXG4gICAgcS50cmllcyA9IDBcbiAgICBxLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhwYWNrZXQuZW5jb2RpbmdMZW5ndGgocS5xdWVyeSkpXG4gICAgcGFja2V0LmVuY29kZShxLnF1ZXJ5LCBxLmJ1ZmZlcilcbiAgICB0aGlzLl9xdWVyaWVzW2lkXSA9IHFcbiAgICB0aGlzLnNvY2tldC5zZW5kKHEuYnVmZmVyLCAwLCBxLmJ1ZmZlci5sZW5ndGgsIHEucG9ydCwgQXJyYXkuaXNBcnJheShxLmhvc3QpID8gcS5ob3N0W01hdGguZmxvb3IocS5ob3N0Lmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpXSA6IHEuaG9zdCB8fCAnMTI3LjAuMC4xJylcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgX29ubWVzc2FnZSAoYnVmZmVyLCByaW5mbykge1xuICAgIGxldCBtZXNzYWdlXG5cbiAgICB0cnkge1xuICAgICAgbWVzc2FnZSA9IHBhY2tldC5kZWNvZGUoYnVmZmVyKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5lbWl0KCd3YXJuaW5nJywgZXJyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJyAmJiBtZXNzYWdlLmlkKSB7XG4gICAgICBjb25zdCBxID0gdGhpcy5fcXVlcmllc1ttZXNzYWdlLmlkIC0gMV1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHRoaXMuX3F1ZXJpZXNbbWVzc2FnZS5pZCAtIDFdID0gbnVsbFxuICAgICAgICB0aGlzLmluZmxpZ2h0LS1cblxuICAgICAgICBpZiAoIXRoaXMuX3Nob3VsZFJlZGlyZWN0KHEsIG1lc3NhZ2UpKSB7XG4gICAgICAgICAgcS5jYWxsYmFjayhudWxsLCBtZXNzYWdlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KG1lc3NhZ2UudHlwZSwgbWVzc2FnZSwgcmluZm8ucG9ydCwgcmluZm8uYWRkcmVzcylcbiAgfVxuXG4gIHVucmVmICgpIHtcbiAgICB0aGlzLnNvY2tldC51bnJlZigpXG4gIH1cblxuICByZWYgKCkge1xuICAgIHRoaXMuc29ja2V0LnJlZigpXG4gIH1cblxuICByZXNwb25zZSAocXVlcnksIHJlc3BvbnNlLCBwb3J0LCBob3N0KSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICByZXNwb25zZS50eXBlID0gJ3Jlc3BvbnNlJ1xuICAgIHJlc3BvbnNlLmlkID0gcXVlcnkuaWRcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2MocGFja2V0LmVuY29kaW5nTGVuZ3RoKHJlc3BvbnNlKSlcbiAgICBwYWNrZXQuZW5jb2RlKHJlc3BvbnNlLCBidWZmZXIpXG4gICAgdGhpcy5zb2NrZXQuc2VuZChidWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGgsIHBvcnQsIGhvc3QpXG4gIH1cblxuICBjYW5jZWwgKGlkKSB7XG4gICAgY29uc3QgcSA9IHRoaXMuX3F1ZXJpZXNbaWRdXG4gICAgaWYgKCFxKSByZXR1cm5cblxuICAgIHRoaXMuX3F1ZXJpZXNbaWRdID0gbnVsbFxuICAgIHRoaXMuaW5mbGlnaHQtLVxuICAgIHEuY2FsbGJhY2sobmV3IEVycm9yKCdRdWVyeSBjYW5jZWxsZWQnKSlcbiAgfVxuXG4gIHNldFJldHJpZXMgKGlkLCByZXRyaWVzKSB7XG4gICAgY29uc3QgcSA9IHRoaXMuX3F1ZXJpZXNbaWRdXG4gICAgaWYgKCFxKSByZXR1cm5cbiAgICBxLmZpcnN0VHJ5ID0gcS5maXJzdFRyeSAtIHRoaXMudGltZW91dCAqIChyZXRyaWVzIC0gcS5yZXRyaWVzKVxuICAgIHEucmV0cmllcyA9IHRoaXMucmV0cmllcyAtIHJldHJpZXNcbiAgfVxuXG4gIF9nZXROZXh0RW1wdHlJZCAoKSB7XG4gICAgLy8gdHJ5IHRvIGZpbmQgdGhlIG5leHQgdW51c2VkIGlkXG4gICAgbGV0IGlkID0gLTFcbiAgICBmb3IgKGxldCBpZHRyaWVzID0gdGhpcy5tYXhRdWVyaWVzOyBpZHRyaWVzID4gMDsgaWR0cmllcy0tKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkSWQgPSAodGhpcy5faWQgKyBpZHRyaWVzKSAlIHRoaXMubWF4UXVlcmllc1xuICAgICAgaWYgKHRoaXMuX3F1ZXJpZXNbbm9ybWFsaXplZElkXSA9PT0gbnVsbCkge1xuICAgICAgICBpZCA9IG5vcm1hbGl6ZWRJZFxuICAgICAgICB0aGlzLl9pZCA9IChub3JtYWxpemVkSWQgKyAxKSAlIHRoaXMubWF4UXVlcmllc1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIHF1ZXJ5IChxdWVyeSwgcG9ydCwgaG9zdCwgY2IpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIGNiKG5ldyBFcnJvcignU29ja2V0IGRlc3Ryb3llZCcpKVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICB0aGlzLmluZmxpZ2h0KytcbiAgICBxdWVyeS50eXBlID0gJ3F1ZXJ5J1xuICAgIHF1ZXJ5LmZsYWdzID0gdHlwZW9mIHF1ZXJ5LmZsYWdzID09PSAnbnVtYmVyJyA/IHF1ZXJ5LmZsYWdzIDogRE5TU29ja2V0LlJFQ1VSU0lPTl9ERVNJUkVEXG5cbiAgICBjb25zdCBpZCA9IHRoaXMuX2dldE5leHRFbXB0eUlkKClcbiAgICBpZiAoaWQgPT09IC0xKSB7XG4gICAgICBjYihuZXcgRXJyb3IoJ1F1ZXJ5IGFycmF5IGlzIGZ1bGwhJykpXG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIHF1ZXJ5LmlkID0gaWQgKyAxXG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKHBhY2tldC5lbmNvZGluZ0xlbmd0aChxdWVyeSkpXG4gICAgcGFja2V0LmVuY29kZShxdWVyeSwgYnVmZmVyKVxuXG4gICAgdGhpcy5fcXVlcmllc1tpZF0gPSB7XG4gICAgICBjYWxsYmFjazogY2IgfHwgbm9vcCxcbiAgICAgIHJlZGlyZWN0czogMCxcbiAgICAgIGZpcnN0VHJ5OiBEYXRlLm5vdygpLFxuICAgICAgcXVlcnksXG4gICAgICB0cmllczogMCxcbiAgICAgIGJ1ZmZlcixcbiAgICAgIHBvcnQsXG4gICAgICBob3N0XG4gICAgfVxuICAgIHRoaXMuc29ja2V0LnNlbmQoYnVmZmVyLCAwLCBidWZmZXIubGVuZ3RoLCBwb3J0LCBBcnJheS5pc0FycmF5KGhvc3QpID8gaG9zdFtNYXRoLmZsb29yKGhvc3QubGVuZ3RoICogTWF0aC5yYW5kb20oKSldIDogaG9zdCB8fCAnMTI3LjAuMC4xJylcbiAgICByZXR1cm4gaWRcbiAgfVxufVxuXG5ETlNTb2NrZXQuUkVDVVJTSU9OX0RFU0lSRUQgPSBETlNTb2NrZXQucHJvdG90eXBlLlJFQ1VSU0lPTl9ERVNJUkVEID0gcGFja2V0LlJFQ1VSU0lPTl9ERVNJUkVEXG5ETlNTb2NrZXQuUkVDVVJTSU9OX0FWQUlMQUJMRSA9IEROU1NvY2tldC5wcm90b3R5cGUuUkVDVVJTSU9OX0FWQUlMQUJMRSA9IHBhY2tldC5SRUNVUlNJT05fQVZBSUxBQkxFXG5ETlNTb2NrZXQuVFJVTkNBVEVEX1JFU1BPTlNFID0gRE5TU29ja2V0LnByb3RvdHlwZS5UUlVOQ0FURURfUkVTUE9OU0UgPSBwYWNrZXQuVFJVTkNBVEVEX1JFU1BPTlNFXG5ETlNTb2NrZXQuQVVUSE9SSVRBVElWRV9BTlNXRVIgPSBETlNTb2NrZXQucHJvdG90eXBlLkFVVEhPUklUQVRJVkVfQU5TV0VSID0gcGFja2V0LkFVVEhPUklUQVRJVkVfQU5TV0VSXG5ETlNTb2NrZXQuQVVUSEVOVElDX0RBVEEgPSBETlNTb2NrZXQucHJvdG90eXBlLkFVVEhFTlRJQ19EQVRBID0gcGFja2V0LkFVVEhFTlRJQ19EQVRBXG5ETlNTb2NrZXQuQ0hFQ0tJTkdfRElTQUJMRUQgPSBETlNTb2NrZXQucHJvdG90eXBlLkNIRUNLSU5HX0RJU0FCTEVEID0gcGFja2V0LkNIRUNLSU5HX0RJU0FCTEVEXG5cbmZ1bmN0aW9uIG5vb3AgKCkge1xufVxuXG5mdW5jdGlvbiBpc0xpc3RlbmluZyAoc29ja2V0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHNvY2tldC5hZGRyZXNzKCkucG9ydCAhPT0gMFxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIl0sIm5hbWVzIjpbImRncmFtIiwicGFja2V0IiwiRXZlbnRFbWl0dGVyIiwiQnVmZmVyIiwiRE5TU29ja2V0IiwiY29uc3RydWN0b3IiLCJvcHRzIiwicmV0cmllcyIsInVuZGVmaW5lZCIsInRpbWVvdXQiLCJ0aW1lb3V0Q2hlY2tzIiwiZGVzdHJveWVkIiwiaW5mbGlnaHQiLCJyYXciLCJtYXhRdWVyaWVzIiwibWF4UmVkaXJlY3RzIiwic29ja2V0IiwiY3JlYXRlU29ja2V0IiwiX2lkIiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJfcXVlcmllcyIsIkFycmF5IiwiZmlsbCIsIl9pbnRlcnZhbCIsIm9uIiwiZXJyIiwiY29kZSIsImVtaXQiLCJtZXNzYWdlIiwicmluZm8iLCJfb25tZXNzYWdlIiwib25saXN0ZW5pbmciLCJzZXRJbnRlcnZhbCIsIl9vbnRpbWVvdXRDaGVjayIsImlzTGlzdGVuaW5nIiwiYWRkcmVzcyIsImJpbmQiLCJhcmdzIiwibGVuZ3RoIiwib25jZSIsInNsaWNlIiwiZGVzdHJveSIsIm9uY2xvc2UiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJpIiwicSIsImNhbGxiYWNrIiwiRXJyb3IiLCJub3ciLCJEYXRlIiwiZmlyc3RUcnkiLCJ0cmllcyIsInF1ZXJ5IiwicG9ydCIsImhvc3QiLCJzZW5kIiwiYnVmZmVyIiwiaXNBcnJheSIsImZsb29yIiwiX3Nob3VsZFJlZGlyZWN0IiwicmVzdWx0IiwicXVlc3Rpb25zIiwiYW5zd2VycyIsImZpbHRlciIsImUiLCJ0eXBlIiwicmVkaXJlY3RzIiwiY25hbWVyZXN1bHRzIiwiaWQiLCJfZ2V0TmV4dEVtcHR5SWQiLCJmbGFncyIsIlJFQ1VSU0lPTl9ERVNJUkVEIiwibmFtZSIsImRhdGEiLCJhbGxvYyIsImVuY29kaW5nTGVuZ3RoIiwiZW5jb2RlIiwiZGVjb2RlIiwidW5yZWYiLCJyZWYiLCJyZXNwb25zZSIsImNhbmNlbCIsInNldFJldHJpZXMiLCJpZHRyaWVzIiwibm9ybWFsaXplZElkIiwiY2IiLCJub29wIiwicHJvdG90eXBlIiwiUkVDVVJTSU9OX0FWQUlMQUJMRSIsIlRSVU5DQVRFRF9SRVNQT05TRSIsIkFVVEhPUklUQVRJVkVfQU5TV0VSIiwiQVVUSEVOVElDX0RBVEEiLCJDSEVDS0lOR19ESVNBQkxFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/dns-socket/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@leichtgewicht/ip-codec/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@leichtgewicht/ip-codec/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   familyOf: () => (/* binding */ familyOf),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   sizeOf: () => (/* binding */ sizeOf),\n/* harmony export */   v4: () => (/* binding */ v4),\n/* harmony export */   v6: () => (/* binding */ v6)\n/* harmony export */ });\nconst v4Regex = /^(\\d{1,3}\\.){3,3}\\d{1,3}$/;\nconst v4Size = 4;\nconst v6Regex = /^(::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;\nconst v6Size = 16;\nconst v4 = {\n    name: \"v4\",\n    size: v4Size,\n    isFormat: (ip)=>v4Regex.test(ip),\n    encode (ip, buff, offset) {\n        offset = ~~offset;\n        buff = buff || new Uint8Array(offset + v4Size);\n        const max = ip.length;\n        let n = 0;\n        for(let i = 0; i < max;){\n            const c = ip.charCodeAt(i++);\n            if (c === 46) {\n                buff[offset++] = n;\n                n = 0;\n            } else {\n                n = n * 10 + (c - 48);\n            }\n        }\n        buff[offset] = n;\n        return buff;\n    },\n    decode (buff, offset) {\n        offset = ~~offset;\n        return `${buff[offset++]}.${buff[offset++]}.${buff[offset++]}.${buff[offset]}`;\n    }\n};\nconst v6 = {\n    name: \"v6\",\n    size: v6Size,\n    isFormat: (ip)=>ip.length > 0 && v6Regex.test(ip),\n    encode (ip, buff, offset) {\n        offset = ~~offset;\n        let end = offset + v6Size;\n        let fill = -1;\n        let hexN = 0;\n        let decN = 0;\n        let prevColon = true;\n        let useDec = false;\n        buff = buff || new Uint8Array(offset + v6Size);\n        // Note: This algorithm needs to check if the offset\n        // could exceed the buffer boundaries as it supports\n        // non-standard compliant encodings that may go beyond\n        // the boundary limits. if (offset < end) checks should\n        // not be necessary...\n        for(let i = 0; i < ip.length; i++){\n            let c = ip.charCodeAt(i);\n            if (c === 58) {\n                if (prevColon) {\n                    if (fill !== -1) {\n                        // Not Standard! (standard doesn't allow multiple ::)\n                        // We need to treat\n                        if (offset < end) buff[offset] = 0;\n                        if (offset < end - 1) buff[offset + 1] = 0;\n                        offset += 2;\n                    } else if (offset < end) {\n                        // :: in the middle\n                        fill = offset;\n                    }\n                } else {\n                    // : ends the previous number\n                    if (useDec === true) {\n                        // Non-standard! (ipv4 should be at end only)\n                        // A ipv4 address should not be found anywhere else but at\n                        // the end. This codec also support putting characters\n                        // after the ipv4 address..\n                        if (offset < end) buff[offset] = decN;\n                        offset++;\n                    } else {\n                        if (offset < end) buff[offset] = hexN >> 8;\n                        if (offset < end - 1) buff[offset + 1] = hexN & 0xff;\n                        offset += 2;\n                    }\n                    hexN = 0;\n                    decN = 0;\n                }\n                prevColon = true;\n                useDec = false;\n            } else if (c === 46) {\n                if (offset < end) buff[offset] = decN;\n                offset++;\n                decN = 0;\n                hexN = 0;\n                prevColon = false;\n                useDec = true;\n            } else {\n                prevColon = false;\n                if (c >= 97) {\n                    c -= 87 // a-f ... 97~102 -87 => 10~15\n                    ;\n                } else if (c >= 65) {\n                    c -= 55 // A-F ... 65~70 -55 => 10~15\n                    ;\n                } else {\n                    c -= 48 // 0-9 ... starting from charCode 48\n                    ;\n                    decN = decN * 10 + c;\n                }\n                // We don't know yet if its a dec or hex number\n                hexN = (hexN << 4) + c;\n            }\n        }\n        if (prevColon === false) {\n            // Commiting last number\n            if (useDec === true) {\n                if (offset < end) buff[offset] = decN;\n                offset++;\n            } else {\n                if (offset < end) buff[offset] = hexN >> 8;\n                if (offset < end - 1) buff[offset + 1] = hexN & 0xff;\n                offset += 2;\n            }\n        } else if (fill === 0) {\n            // Not Standard! (standard doesn't allow multiple ::)\n            // This means that a : was found at the start AND end which means the\n            // end needs to be treated as 0 entry...\n            if (offset < end) buff[offset] = 0;\n            if (offset < end - 1) buff[offset + 1] = 0;\n            offset += 2;\n        } else if (fill !== -1) {\n            // Non-standard! (standard doens't allow multiple ::)\n            // Here we find that there has been a :: somewhere in the middle\n            // and the end. To treat the end with priority we need to move all\n            // written data two bytes to the right.\n            offset += 2;\n            for(let i = Math.min(offset - 1, end - 1); i >= fill + 2; i--){\n                buff[i] = buff[i - 2];\n            }\n            buff[fill] = 0;\n            buff[fill + 1] = 0;\n            fill = offset;\n        }\n        if (fill !== offset && fill !== -1) {\n            // Move the written numbers to the end while filling the everything\n            // \"fill\" to the bytes with zeros.\n            if (offset > end - 2) {\n                // Non Standard support, when the cursor exceeds bounds.\n                offset = end - 2;\n            }\n            while(end > fill){\n                buff[--end] = offset < end && offset > fill ? buff[--offset] : 0;\n            }\n        } else {\n            // Fill the rest with zeros\n            while(offset < end){\n                buff[offset++] = 0;\n            }\n        }\n        return buff;\n    },\n    decode (buff, offset) {\n        offset = ~~offset;\n        let result = \"\";\n        for(let i = 0; i < v6Size; i += 2){\n            if (i !== 0) {\n                result += \":\";\n            }\n            result += (buff[offset + i] << 8 | buff[offset + i + 1]).toString(16);\n        }\n        return result.replace(/(^|:)0(:0)*:0(:|$)/, \"$1::$3\").replace(/:{3,4}/, \"::\");\n    }\n};\nconst name = \"ip\";\nfunction sizeOf(ip) {\n    if (v4.isFormat(ip)) return v4.size;\n    if (v6.isFormat(ip)) return v6.size;\n    throw Error(`Invalid ip address: ${ip}`);\n}\nfunction familyOf(string) {\n    return sizeOf(string) === v4.size ? 1 : 2;\n}\nfunction encode(ip, buff, offset) {\n    offset = ~~offset;\n    const size = sizeOf(ip);\n    if (typeof buff === \"function\") {\n        buff = buff(offset + size);\n    }\n    if (size === v4.size) {\n        return v4.encode(ip, buff, offset);\n    }\n    return v6.encode(ip, buff, offset);\n}\nfunction decode(buff, offset, length) {\n    offset = ~~offset;\n    length = length || buff.length - offset;\n    if (length === v4.size) {\n        return v4.decode(buff, offset, length);\n    }\n    if (length === v6.size) {\n        return v6.decode(buff, offset, length);\n    }\n    throw Error(`Invalid buffer size needs to be ${v4.size} for v4 or ${v6.size} for v6.`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@leichtgewicht/ip-codec/index.mjs\n");

/***/ })

};
;