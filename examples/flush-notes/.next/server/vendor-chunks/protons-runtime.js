"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/protons-runtime";
exports.ids = ["vendor-chunks/protons-runtime"];
exports.modules = {

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/codec.js":
/*!********************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/codec.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CODEC_TYPES: () => (/* binding */ CODEC_TYPES),\n/* harmony export */   createCodec: () => (/* binding */ createCodec)\n/* harmony export */ });\n// https://developers.google.com/protocol-buffers/docs/encoding#structure\nvar CODEC_TYPES;\n(function(CODEC_TYPES) {\n    CODEC_TYPES[CODEC_TYPES[\"VARINT\"] = 0] = \"VARINT\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT64\"] = 1] = \"BIT64\";\n    CODEC_TYPES[CODEC_TYPES[\"LENGTH_DELIMITED\"] = 2] = \"LENGTH_DELIMITED\";\n    CODEC_TYPES[CODEC_TYPES[\"START_GROUP\"] = 3] = \"START_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"END_GROUP\"] = 4] = \"END_GROUP\";\n    CODEC_TYPES[CODEC_TYPES[\"BIT32\"] = 5] = \"BIT32\";\n})(CODEC_TYPES || (CODEC_TYPES = {}));\nfunction createCodec(name, type, encode, decode) {\n    return {\n        name,\n        type,\n        encode,\n        decode\n    };\n} //# sourceMappingURL=codec.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2NvZGVjLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUVBQXlFO0FBQ2xFLElBQUlBLFlBQVk7QUFDdEIsVUFBVUEsV0FBVztJQUNsQkEsV0FBVyxDQUFDQSxXQUFXLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUN6Q0EsV0FBVyxDQUFDQSxXQUFXLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRztJQUN4Q0EsV0FBVyxDQUFDQSxXQUFXLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQ25EQSxXQUFXLENBQUNBLFdBQVcsQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxXQUFXLENBQUNBLFdBQVcsQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQzVDQSxXQUFXLENBQUNBLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0FBQzVDLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFDM0IsU0FBU0MsWUFBWUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUNsRCxPQUFPO1FBQ0hIO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0o7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL3Byb3RvbnMtcnVudGltZS9kaXN0L3NyYy9jb2RlYy5qcz83ODFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb3RvY29sLWJ1ZmZlcnMvZG9jcy9lbmNvZGluZyNzdHJ1Y3R1cmVcbmV4cG9ydCB2YXIgQ09ERUNfVFlQRVM7XG4oZnVuY3Rpb24gKENPREVDX1RZUEVTKSB7XG4gICAgQ09ERUNfVFlQRVNbQ09ERUNfVFlQRVNbXCJWQVJJTlRcIl0gPSAwXSA9IFwiVkFSSU5UXCI7XG4gICAgQ09ERUNfVFlQRVNbQ09ERUNfVFlQRVNbXCJCSVQ2NFwiXSA9IDFdID0gXCJCSVQ2NFwiO1xuICAgIENPREVDX1RZUEVTW0NPREVDX1RZUEVTW1wiTEVOR1RIX0RFTElNSVRFRFwiXSA9IDJdID0gXCJMRU5HVEhfREVMSU1JVEVEXCI7XG4gICAgQ09ERUNfVFlQRVNbQ09ERUNfVFlQRVNbXCJTVEFSVF9HUk9VUFwiXSA9IDNdID0gXCJTVEFSVF9HUk9VUFwiO1xuICAgIENPREVDX1RZUEVTW0NPREVDX1RZUEVTW1wiRU5EX0dST1VQXCJdID0gNF0gPSBcIkVORF9HUk9VUFwiO1xuICAgIENPREVDX1RZUEVTW0NPREVDX1RZUEVTW1wiQklUMzJcIl0gPSA1XSA9IFwiQklUMzJcIjtcbn0pKENPREVDX1RZUEVTIHx8IChDT0RFQ19UWVBFUyA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29kZWMobmFtZSwgdHlwZSwgZW5jb2RlLCBkZWNvZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlLFxuICAgICAgICBlbmNvZGUsXG4gICAgICAgIGRlY29kZVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2RlYy5qcy5tYXAiXSwibmFtZXMiOlsiQ09ERUNfVFlQRVMiLCJjcmVhdGVDb2RlYyIsIm5hbWUiLCJ0eXBlIiwiZW5jb2RlIiwiZGVjb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/codec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/codecs/enum.js":
/*!**************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/codecs/enum.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enumeration: () => (/* binding */ enumeration)\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../codec.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/codec.js\");\n\nfunction enumeration(v) {\n    function findValue(val) {\n        // Use the reverse mapping to look up the enum key for the stored value\n        // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n        if (v[val.toString()] == null) {\n            throw new Error(\"Invalid enum value\");\n        }\n        return v[val];\n    }\n    const encode = function enumEncode(val, writer) {\n        const enumValue = findValue(val);\n        writer.int32(enumValue);\n    };\n    const decode = function enumDecode(reader) {\n        const val = reader.int32();\n        return findValue(val);\n    };\n    // @ts-expect-error yeah yeah\n    return (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)(\"enum\", _codec_js__WEBPACK_IMPORTED_MODULE_0__.CODEC_TYPES.VARINT, encode, decode);\n} //# sourceMappingURL=enum.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2NvZGVjcy9lbnVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ2hELFNBQVNFLFlBQVlDLENBQUM7SUFDekIsU0FBU0MsVUFBVUMsR0FBRztRQUNsQix1RUFBdUU7UUFDdkUsMkVBQTJFO1FBQzNFLElBQUlGLENBQUMsQ0FBQ0UsSUFBSUMsUUFBUSxHQUFHLElBQUksTUFBTTtZQUMzQixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxPQUFPSixDQUFDLENBQUNFLElBQUk7SUFDakI7SUFDQSxNQUFNRyxTQUFTLFNBQVNDLFdBQVdKLEdBQUcsRUFBRUssTUFBTTtRQUMxQyxNQUFNQyxZQUFZUCxVQUFVQztRQUM1QkssT0FBT0UsS0FBSyxDQUFDRDtJQUNqQjtJQUNBLE1BQU1FLFNBQVMsU0FBU0MsV0FBV0MsTUFBTTtRQUNyQyxNQUFNVixNQUFNVSxPQUFPSCxLQUFLO1FBQ3hCLE9BQU9SLFVBQVVDO0lBQ3JCO0lBQ0EsNkJBQTZCO0lBQzdCLE9BQU9MLHNEQUFXQSxDQUFDLFFBQVFDLGtEQUFXQSxDQUFDZSxNQUFNLEVBQUVSLFFBQVFLO0FBQzNELEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2NvZGVjcy9lbnVtLmpzPzQxNDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29kZWMsIENPREVDX1RZUEVTIH0gZnJvbSAnLi4vY29kZWMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGVudW1lcmF0aW9uKHYpIHtcbiAgICBmdW5jdGlvbiBmaW5kVmFsdWUodmFsKSB7XG4gICAgICAgIC8vIFVzZSB0aGUgcmV2ZXJzZSBtYXBwaW5nIHRvIGxvb2sgdXAgdGhlIGVudW0ga2V5IGZvciB0aGUgc3RvcmVkIHZhbHVlXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2VudW1zLmh0bWwjcmV2ZXJzZS1tYXBwaW5nc1xuICAgICAgICBpZiAodlt2YWwudG9TdHJpbmcoKV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVudW0gdmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdlt2YWxdO1xuICAgIH1cbiAgICBjb25zdCBlbmNvZGUgPSBmdW5jdGlvbiBlbnVtRW5jb2RlKHZhbCwgd3JpdGVyKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZSA9IGZpbmRWYWx1ZSh2YWwpO1xuICAgICAgICB3cml0ZXIuaW50MzIoZW51bVZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlY29kZSA9IGZ1bmN0aW9uIGVudW1EZWNvZGUocmVhZGVyKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICByZXR1cm4gZmluZFZhbHVlKHZhbCk7XG4gICAgfTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIHllYWggeWVhaFxuICAgIHJldHVybiBjcmVhdGVDb2RlYygnZW51bScsIENPREVDX1RZUEVTLlZBUklOVCwgZW5jb2RlLCBkZWNvZGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQ29kZWMiLCJDT0RFQ19UWVBFUyIsImVudW1lcmF0aW9uIiwidiIsImZpbmRWYWx1ZSIsInZhbCIsInRvU3RyaW5nIiwiRXJyb3IiLCJlbmNvZGUiLCJlbnVtRW5jb2RlIiwid3JpdGVyIiwiZW51bVZhbHVlIiwiaW50MzIiLCJkZWNvZGUiLCJlbnVtRGVjb2RlIiwicmVhZGVyIiwiVkFSSU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/codecs/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/codecs/message.js":
/*!*****************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/codecs/message.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   message: () => (/* binding */ message)\n/* harmony export */ });\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../codec.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/codec.js\");\n\nfunction message(encode, decode) {\n    return (0,_codec_js__WEBPACK_IMPORTED_MODULE_0__.createCodec)(\"message\", _codec_js__WEBPACK_IMPORTED_MODULE_0__.CODEC_TYPES.LENGTH_DELIMITED, encode, decode);\n} //# sourceMappingURL=message.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2NvZGVjcy9tZXNzYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVEO0FBQ2hELFNBQVNFLFFBQVFDLE1BQU0sRUFBRUMsTUFBTTtJQUNsQyxPQUFPSixzREFBV0EsQ0FBQyxXQUFXQyxrREFBV0EsQ0FBQ0ksZ0JBQWdCLEVBQUVGLFFBQVFDO0FBQ3hFLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2NvZGVjcy9tZXNzYWdlLmpzPzlhMmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29kZWMsIENPREVDX1RZUEVTIH0gZnJvbSAnLi4vY29kZWMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2UoZW5jb2RlLCBkZWNvZGUpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29kZWMoJ21lc3NhZ2UnLCBDT0RFQ19UWVBFUy5MRU5HVEhfREVMSU1JVEVELCBlbmNvZGUsIGRlY29kZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVDb2RlYyIsIkNPREVDX1RZUEVTIiwibWVzc2FnZSIsImVuY29kZSIsImRlY29kZSIsIkxFTkdUSF9ERUxJTUlURUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/codecs/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/decode.js":
/*!*********************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/decode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeMessage: () => (/* binding */ decodeMessage)\n/* harmony export */ });\n/* harmony import */ var _utils_reader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/reader.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/reader.js\");\n\nfunction decodeMessage(buf, codec, opts) {\n    const reader = (0,_utils_reader_js__WEBPACK_IMPORTED_MODULE_0__.createReader)(buf);\n    return codec.decode(reader, undefined, opts);\n} //# sourceMappingURL=decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2RlY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUMxQyxTQUFTQyxjQUFjQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsSUFBSTtJQUMxQyxNQUFNQyxTQUFTTCw4REFBWUEsQ0FBQ0U7SUFDNUIsT0FBT0MsTUFBTUcsTUFBTSxDQUFDRCxRQUFRRSxXQUFXSDtBQUMzQyxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL3Byb3RvbnMtcnVudGltZS9kaXN0L3NyYy9kZWNvZGUuanM/Y2VhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVSZWFkZXIgfSBmcm9tICcuL3V0aWxzL3JlYWRlci5qcyc7XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlTWVzc2FnZShidWYsIGNvZGVjLCBvcHRzKSB7XG4gICAgY29uc3QgcmVhZGVyID0gY3JlYXRlUmVhZGVyKGJ1Zik7XG4gICAgcmV0dXJuIGNvZGVjLmRlY29kZShyZWFkZXIsIHVuZGVmaW5lZCwgb3B0cyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZVJlYWRlciIsImRlY29kZU1lc3NhZ2UiLCJidWYiLCJjb2RlYyIsIm9wdHMiLCJyZWFkZXIiLCJkZWNvZGUiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/decode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/encode.js":
/*!*********************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/encode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeMessage: () => (/* binding */ encodeMessage)\n/* harmony export */ });\n/* harmony import */ var _utils_writer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/writer.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/writer.js\");\n\nfunction encodeMessage(message, codec) {\n    const w = (0,_utils_writer_js__WEBPACK_IMPORTED_MODULE_0__.createWriter)();\n    codec.encode(message, w, {\n        lengthDelimited: false\n    });\n    return w.finish();\n} //# sourceMappingURL=encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2VuY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUMxQyxTQUFTQyxjQUFjQyxPQUFPLEVBQUVDLEtBQUs7SUFDeEMsTUFBTUMsSUFBSUosOERBQVlBO0lBQ3RCRyxNQUFNRSxNQUFNLENBQUNILFNBQVNFLEdBQUc7UUFDckJFLGlCQUFpQjtJQUNyQjtJQUNBLE9BQU9GLEVBQUVHLE1BQU07QUFDbkIsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9wcm90b25zLXJ1bnRpbWUvZGlzdC9zcmMvZW5jb2RlLmpzPzkxMDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlV3JpdGVyIH0gZnJvbSAnLi91dGlscy93cml0ZXIuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZU1lc3NhZ2UobWVzc2FnZSwgY29kZWMpIHtcbiAgICBjb25zdCB3ID0gY3JlYXRlV3JpdGVyKCk7XG4gICAgY29kZWMuZW5jb2RlKG1lc3NhZ2UsIHcsIHtcbiAgICAgICAgbGVuZ3RoRGVsaW1pdGVkOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiB3LmZpbmlzaCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVXcml0ZXIiLCJlbmNvZGVNZXNzYWdlIiwibWVzc2FnZSIsImNvZGVjIiwidyIsImVuY29kZSIsImxlbmd0aERlbGltaXRlZCIsImZpbmlzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/encode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeError: () => (/* binding */ CodeError),\n/* harmony export */   decodeMessage: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_0__.decodeMessage),\n/* harmony export */   encodeMessage: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_1__.encodeMessage),\n/* harmony export */   enumeration: () => (/* reexport safe */ _codecs_enum_js__WEBPACK_IMPORTED_MODULE_2__.enumeration),\n/* harmony export */   message: () => (/* reexport safe */ _codecs_message_js__WEBPACK_IMPORTED_MODULE_3__.message),\n/* harmony export */   reader: () => (/* reexport safe */ _utils_reader_js__WEBPACK_IMPORTED_MODULE_4__.createReader),\n/* harmony export */   writer: () => (/* reexport safe */ _utils_writer_js__WEBPACK_IMPORTED_MODULE_5__.createWriter)\n/* harmony export */ });\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./decode.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/decode.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encode.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/encode.js\");\n/* harmony import */ var _codecs_enum_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codecs/enum.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/codecs/enum.js\");\n/* harmony import */ var _codecs_message_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codecs/message.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/codecs/message.js\");\n/* harmony import */ var _utils_reader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/reader.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/reader.js\");\n/* harmony import */ var _utils_writer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/writer.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/writer.js\");\n/**\n * @packageDocumentation\n *\n * This module contains serialization/deserialization code used when encoding/decoding protobufs.\n *\n * It should be declared as a dependency of your project:\n *\n * ```console\n * npm i protons-runtime\n * ```\n */ \n\n\n\n\n\nclass CodeError extends Error {\n    constructor(message, code, options){\n        super(message, options);\n        this.code = code;\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBQzJDO0FBQ0E7QUFDRztBQUNEO0FBQ2E7QUFDQTtBQUNwRCxNQUFNUSxrQkFBa0JDO0lBRTNCQyxZQUFZUCxPQUFPLEVBQUVRLElBQUksRUFBRUMsT0FBTyxDQUFFO1FBQ2hDLEtBQUssQ0FBQ1QsU0FBU1M7UUFDZixJQUFJLENBQUNELElBQUksR0FBR0E7SUFDaEI7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL3Byb3RvbnMtcnVudGltZS9kaXN0L3NyYy9pbmRleC5qcz83NzNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKlxuICogVGhpcyBtb2R1bGUgY29udGFpbnMgc2VyaWFsaXphdGlvbi9kZXNlcmlhbGl6YXRpb24gY29kZSB1c2VkIHdoZW4gZW5jb2RpbmcvZGVjb2RpbmcgcHJvdG9idWZzLlxuICpcbiAqIEl0IHNob3VsZCBiZSBkZWNsYXJlZCBhcyBhIGRlcGVuZGVuY3kgb2YgeW91ciBwcm9qZWN0OlxuICpcbiAqIGBgYGNvbnNvbGVcbiAqIG5wbSBpIHByb3RvbnMtcnVudGltZVxuICogYGBgXG4gKi9cbmV4cG9ydCB7IGRlY29kZU1lc3NhZ2UgfSBmcm9tICcuL2RlY29kZS5qcyc7XG5leHBvcnQgeyBlbmNvZGVNZXNzYWdlIH0gZnJvbSAnLi9lbmNvZGUuanMnO1xuZXhwb3J0IHsgZW51bWVyYXRpb24gfSBmcm9tICcuL2NvZGVjcy9lbnVtLmpzJztcbmV4cG9ydCB7IG1lc3NhZ2UgfSBmcm9tICcuL2NvZGVjcy9tZXNzYWdlLmpzJztcbmV4cG9ydCB7IGNyZWF0ZVJlYWRlciBhcyByZWFkZXIgfSBmcm9tICcuL3V0aWxzL3JlYWRlci5qcyc7XG5leHBvcnQgeyBjcmVhdGVXcml0ZXIgYXMgd3JpdGVyIH0gZnJvbSAnLi91dGlscy93cml0ZXIuanMnO1xuZXhwb3J0IGNsYXNzIENvZGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb2RlO1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImRlY29kZU1lc3NhZ2UiLCJlbmNvZGVNZXNzYWdlIiwiZW51bWVyYXRpb24iLCJtZXNzYWdlIiwiY3JlYXRlUmVhZGVyIiwicmVhZGVyIiwiY3JlYXRlV3JpdGVyIiwid3JpdGVyIiwiQ29kZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/utils/float.js":
/*!**************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/utils/float.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readDoubleBE: () => (/* binding */ readDoubleBE),\n/* harmony export */   readDoubleLE: () => (/* binding */ readDoubleLE),\n/* harmony export */   readFloatBE: () => (/* binding */ readFloatBE),\n/* harmony export */   readFloatLE: () => (/* binding */ readFloatLE),\n/* harmony export */   writeDoubleBE: () => (/* binding */ writeDoubleBE),\n/* harmony export */   writeDoubleLE: () => (/* binding */ writeDoubleLE),\n/* harmony export */   writeFloatBE: () => (/* binding */ writeFloatBE),\n/* harmony export */   writeFloatLE: () => (/* binding */ writeFloatLE)\n/* harmony export */ });\nconst f32 = new Float32Array([\n    -0\n]);\nconst f8b = new Uint8Array(f32.buffer);\n/**\n * Writes a 32 bit float to a buffer using little endian byte order\n */ function writeFloatLE(val, buf, pos) {\n    f32[0] = val;\n    buf[pos] = f8b[0];\n    buf[pos + 1] = f8b[1];\n    buf[pos + 2] = f8b[2];\n    buf[pos + 3] = f8b[3];\n}\n/**\n * Writes a 32 bit float to a buffer using big endian byte order\n */ function writeFloatBE(val, buf, pos) {\n    f32[0] = val;\n    buf[pos] = f8b[3];\n    buf[pos + 1] = f8b[2];\n    buf[pos + 2] = f8b[1];\n    buf[pos + 3] = f8b[0];\n}\n/**\n * Reads a 32 bit float from a buffer using little endian byte order\n */ function readFloatLE(buf, pos) {\n    f8b[0] = buf[pos];\n    f8b[1] = buf[pos + 1];\n    f8b[2] = buf[pos + 2];\n    f8b[3] = buf[pos + 3];\n    return f32[0];\n}\n/**\n * Reads a 32 bit float from a buffer using big endian byte order\n */ function readFloatBE(buf, pos) {\n    f8b[3] = buf[pos];\n    f8b[2] = buf[pos + 1];\n    f8b[1] = buf[pos + 2];\n    f8b[0] = buf[pos + 3];\n    return f32[0];\n}\nconst f64 = new Float64Array([\n    -0\n]);\nconst d8b = new Uint8Array(f64.buffer);\n/**\n * Writes a 64 bit double to a buffer using little endian byte order\n */ function writeDoubleLE(val, buf, pos) {\n    f64[0] = val;\n    buf[pos] = d8b[0];\n    buf[pos + 1] = d8b[1];\n    buf[pos + 2] = d8b[2];\n    buf[pos + 3] = d8b[3];\n    buf[pos + 4] = d8b[4];\n    buf[pos + 5] = d8b[5];\n    buf[pos + 6] = d8b[6];\n    buf[pos + 7] = d8b[7];\n}\n/**\n * Writes a 64 bit double to a buffer using big endian byte order\n */ function writeDoubleBE(val, buf, pos) {\n    f64[0] = val;\n    buf[pos] = d8b[7];\n    buf[pos + 1] = d8b[6];\n    buf[pos + 2] = d8b[5];\n    buf[pos + 3] = d8b[4];\n    buf[pos + 4] = d8b[3];\n    buf[pos + 5] = d8b[2];\n    buf[pos + 6] = d8b[1];\n    buf[pos + 7] = d8b[0];\n}\n/**\n * Reads a 64 bit double from a buffer using little endian byte order\n */ function readDoubleLE(buf, pos) {\n    d8b[0] = buf[pos];\n    d8b[1] = buf[pos + 1];\n    d8b[2] = buf[pos + 2];\n    d8b[3] = buf[pos + 3];\n    d8b[4] = buf[pos + 4];\n    d8b[5] = buf[pos + 5];\n    d8b[6] = buf[pos + 6];\n    d8b[7] = buf[pos + 7];\n    return f64[0];\n}\n/**\n * Reads a 64 bit double from a buffer using big endian byte order\n */ function readDoubleBE(buf, pos) {\n    d8b[7] = buf[pos];\n    d8b[6] = buf[pos + 1];\n    d8b[5] = buf[pos + 2];\n    d8b[4] = buf[pos + 3];\n    d8b[3] = buf[pos + 4];\n    d8b[2] = buf[pos + 5];\n    d8b[1] = buf[pos + 6];\n    d8b[0] = buf[pos + 7];\n    return f64[0];\n} //# sourceMappingURL=float.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/utils/float.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/utils/longbits.js":
/*!*****************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/utils/longbits.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LongBits: () => (/* binding */ LongBits)\n/* harmony export */ });\n// the largest BigInt we can safely downcast to a Number\nconst MAX_SAFE_NUMBER_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);\nconst MIN_SAFE_NUMBER_INTEGER = BigInt(Number.MIN_SAFE_INTEGER);\n/**\n * Constructs new long bits.\n *\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @function Object() { [native code] }\n * @param {number} lo - Low 32 bits, unsigned\n * @param {number} hi - High 32 bits, unsigned\n */ class LongBits {\n    constructor(lo, hi){\n        // note that the casts below are theoretically unnecessary as of today, but older statically\n        // generated converter code might still call the ctor with signed 32bits. kept for compat.\n        /**\n         * Low bits\n         */ this.lo = lo | 0;\n        /**\n         * High bits\n         */ this.hi = hi | 0;\n    }\n    /**\n     * Converts this long bits to a possibly unsafe JavaScript number\n     */ toNumber(unsigned = false) {\n        if (!unsigned && this.hi >>> 31 > 0) {\n            const lo = ~this.lo + 1 >>> 0;\n            let hi = ~this.hi >>> 0;\n            if (lo === 0) {\n                hi = hi + 1 >>> 0;\n            }\n            return -(lo + hi * 4294967296);\n        }\n        return this.lo + this.hi * 4294967296;\n    }\n    /**\n     * Converts this long bits to a bigint\n     */ toBigInt(unsigned = false) {\n        if (unsigned) {\n            return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);\n        }\n        if (this.hi >>> 31 !== 0) {\n            const lo = ~this.lo + 1 >>> 0;\n            let hi = ~this.hi >>> 0;\n            if (lo === 0) {\n                hi = hi + 1 >>> 0;\n            }\n            return -(BigInt(lo) + (BigInt(hi) << 32n));\n        }\n        return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);\n    }\n    /**\n     * Converts this long bits to a string\n     */ toString(unsigned = false) {\n        return this.toBigInt(unsigned).toString();\n    }\n    /**\n     * Zig-zag encodes this long bits\n     */ zzEncode() {\n        const mask = this.hi >> 31;\n        this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n        this.lo = (this.lo << 1 ^ mask) >>> 0;\n        return this;\n    }\n    /**\n     * Zig-zag decodes this long bits\n     */ zzDecode() {\n        const mask = -(this.lo & 1);\n        this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n        this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n        return this;\n    }\n    /**\n     * Calculates the length of this longbits when encoded as a varint.\n     */ length() {\n        const part0 = this.lo;\n        const part1 = (this.lo >>> 28 | this.hi << 4) >>> 0;\n        const part2 = this.hi >>> 24;\n        return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n    }\n    /**\n     * Constructs new long bits from the specified number\n     */ static fromBigInt(value) {\n        if (value === 0n) {\n            return zero;\n        }\n        if (value < MAX_SAFE_NUMBER_INTEGER && value > MIN_SAFE_NUMBER_INTEGER) {\n            return this.fromNumber(Number(value));\n        }\n        const negative = value < 0n;\n        if (negative) {\n            value = -value;\n        }\n        let hi = value >> 32n;\n        let lo = value - (hi << 32n);\n        if (negative) {\n            hi = ~hi | 0n;\n            lo = ~lo | 0n;\n            if (++lo > TWO_32) {\n                lo = 0n;\n                if (++hi > TWO_32) {\n                    hi = 0n;\n                }\n            }\n        }\n        return new LongBits(Number(lo), Number(hi));\n    }\n    /**\n     * Constructs new long bits from the specified number\n     */ static fromNumber(value) {\n        if (value === 0) {\n            return zero;\n        }\n        const sign = value < 0;\n        if (sign) {\n            value = -value;\n        }\n        let lo = value >>> 0;\n        let hi = (value - lo) / 4294967296 >>> 0;\n        if (sign) {\n            hi = ~hi >>> 0;\n            lo = ~lo >>> 0;\n            if (++lo > 4294967295) {\n                lo = 0;\n                if (++hi > 4294967295) {\n                    hi = 0;\n                }\n            }\n        }\n        return new LongBits(lo, hi);\n    }\n    /**\n     * Constructs new long bits from a number, long or string\n     */ static from(value) {\n        if (typeof value === \"number\") {\n            return LongBits.fromNumber(value);\n        }\n        if (typeof value === \"bigint\") {\n            return LongBits.fromBigInt(value);\n        }\n        if (typeof value === \"string\") {\n            return LongBits.fromBigInt(BigInt(value));\n        }\n        return value.low != null || value.high != null ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n    }\n}\nconst zero = new LongBits(0, 0);\nzero.toBigInt = function() {\n    return 0n;\n};\nzero.zzEncode = zero.zzDecode = function() {\n    return this;\n};\nzero.length = function() {\n    return 1;\n};\nconst TWO_32 = 4294967296n; //# sourceMappingURL=longbits.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/utils/longbits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/utils/pool.js":
/*!*************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/utils/pool.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pool)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n\n/**\n * A general purpose buffer pool\n */ function pool(size) {\n    const SIZE = size ?? 8192;\n    const MAX = SIZE >>> 1;\n    let slab;\n    let offset = SIZE;\n    return function poolAlloc(size) {\n        if (size < 1 || size > MAX) {\n            return (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(size);\n        }\n        if (offset + size > SIZE) {\n            slab = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(SIZE);\n            offset = 0;\n        }\n        const buf = slab.subarray(offset, offset += size);\n        if ((offset & 7) !== 0) {\n            // align to 32 bit\n            offset = (offset | 7) + 1;\n        }\n        return buf;\n    };\n} //# sourceMappingURL=pool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL3V0aWxzL3Bvb2wuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0Q7QUFDaEQ7O0NBRUMsR0FDYyxTQUFTQyxLQUFLQyxJQUFJO0lBQzdCLE1BQU1DLE9BQU9ELFFBQVE7SUFDckIsTUFBTUUsTUFBTUQsU0FBUztJQUNyQixJQUFJRTtJQUNKLElBQUlDLFNBQVNIO0lBQ2IsT0FBTyxTQUFTSSxVQUFVTCxJQUFJO1FBQzFCLElBQUlBLE9BQU8sS0FBS0EsT0FBT0UsS0FBSztZQUN4QixPQUFPSiw4REFBV0EsQ0FBQ0U7UUFDdkI7UUFDQSxJQUFJSSxTQUFTSixPQUFPQyxNQUFNO1lBQ3RCRSxPQUFPTCw4REFBV0EsQ0FBQ0c7WUFDbkJHLFNBQVM7UUFDYjtRQUNBLE1BQU1FLE1BQU1ILEtBQUtJLFFBQVEsQ0FBQ0gsUUFBUUEsVUFBVUo7UUFDNUMsSUFBSSxDQUFDSSxTQUFTLE9BQU8sR0FBRztZQUNwQixrQkFBa0I7WUFDbEJBLFNBQVMsQ0FBQ0EsU0FBUyxLQUFLO1FBQzVCO1FBQ0EsT0FBT0U7SUFDWDtBQUNKLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL3V0aWxzL3Bvb2wuanM/YzdlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbGxvY1Vuc2FmZSB9IGZyb20gJ3VpbnQ4YXJyYXlzL2FsbG9jJztcbi8qKlxuICogQSBnZW5lcmFsIHB1cnBvc2UgYnVmZmVyIHBvb2xcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcG9vbChzaXplKSB7XG4gICAgY29uc3QgU0laRSA9IHNpemUgPz8gODE5MjtcbiAgICBjb25zdCBNQVggPSBTSVpFID4+PiAxO1xuICAgIGxldCBzbGFiO1xuICAgIGxldCBvZmZzZXQgPSBTSVpFO1xuICAgIHJldHVybiBmdW5jdGlvbiBwb29sQWxsb2Moc2l6ZSkge1xuICAgICAgICBpZiAoc2l6ZSA8IDEgfHwgc2l6ZSA+IE1BWCkge1xuICAgICAgICAgICAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgKyBzaXplID4gU0laRSkge1xuICAgICAgICAgICAgc2xhYiA9IGFsbG9jVW5zYWZlKFNJWkUpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWYgPSBzbGFiLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICs9IHNpemUpO1xuICAgICAgICBpZiAoKG9mZnNldCAmIDcpICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBhbGlnbiB0byAzMiBiaXRcbiAgICAgICAgICAgIG9mZnNldCA9IChvZmZzZXQgfCA3KSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9vbC5qcy5tYXAiXSwibmFtZXMiOlsiYWxsb2NVbnNhZmUiLCJwb29sIiwic2l6ZSIsIlNJWkUiLCJNQVgiLCJzbGFiIiwib2Zmc2V0IiwicG9vbEFsbG9jIiwiYnVmIiwic3ViYXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/utils/pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/utils/reader.js":
/*!***************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/utils/reader.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Uint8ArrayReader: () => (/* binding */ Uint8ArrayReader),\n/* harmony export */   createReader: () => (/* binding */ createReader)\n/* harmony export */ });\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8-varint */ \"(ssr)/./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var _float_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./float.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/float.js\");\n/* harmony import */ var _longbits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./longbits.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/longbits.js\");\n/* harmony import */ var _utf8_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utf8.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/utf8.js\");\n\n\n\n\n/* istanbul ignore next */ function indexOutOfRange(reader, writeLength) {\n    return RangeError(`index out of range: ${reader.pos} + ${writeLength ?? 1} > ${reader.len}`);\n}\nfunction readFixed32End(buf, end) {\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n/**\n * Constructs a new reader instance using the specified buffer.\n */ class Uint8ArrayReader {\n    constructor(buffer){\n        this._slice = Uint8Array.prototype.subarray;\n        /**\n         * Read buffer\n         */ this.buf = buffer;\n        /**\n         * Read buffer position\n         */ this.pos = 0;\n        /**\n         * Read buffer length\n         */ this.len = buffer.length;\n    }\n    /**\n     * Reads a varint as an unsigned 32 bit value\n     */ uint32() {\n        let value = 4294967295;\n        value = (this.buf[this.pos] & 127) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n        if (this.buf[this.pos++] < 128) return value;\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    }\n    /**\n     * Reads a varint as a signed 32 bit value\n     */ int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Reads a zig-zag encoded varint as a signed 32 bit value\n     */ sint32() {\n        const value = this.uint32();\n        return value >>> 1 ^ -(value & 1) | 0;\n    }\n    /**\n     * Reads a varint as a boolean\n     */ bool() {\n        return this.uint32() !== 0;\n    }\n    /**\n     * Reads fixed 32 bits as an unsigned 32 bit integer\n     */ fixed32() {\n        if (this.pos + 4 > this.len) {\n            throw indexOutOfRange(this, 4);\n        }\n        const res = readFixed32End(this.buf, this.pos += 4);\n        return res;\n    }\n    /**\n     * Reads fixed 32 bits as a signed 32 bit integer\n     */ sfixed32() {\n        if (this.pos + 4 > this.len) {\n            throw indexOutOfRange(this, 4);\n        }\n        const res = readFixed32End(this.buf, this.pos += 4) | 0;\n        return res;\n    }\n    /**\n     * Reads a float (32 bit) as a number\n     */ float() {\n        if (this.pos + 4 > this.len) {\n            throw indexOutOfRange(this, 4);\n        }\n        const value = (0,_float_js__WEBPACK_IMPORTED_MODULE_1__.readFloatLE)(this.buf, this.pos);\n        this.pos += 4;\n        return value;\n    }\n    /**\n     * Reads a double (64 bit float) as a number\n     */ double() {\n        /* istanbul ignore if */ if (this.pos + 8 > this.len) {\n            throw indexOutOfRange(this, 4);\n        }\n        const value = (0,_float_js__WEBPACK_IMPORTED_MODULE_1__.readDoubleLE)(this.buf, this.pos);\n        this.pos += 8;\n        return value;\n    }\n    /**\n     * Reads a sequence of bytes preceded by its length as a varint\n     */ bytes() {\n        const length = this.uint32();\n        const start = this.pos;\n        const end = this.pos + length;\n        /* istanbul ignore if */ if (end > this.len) {\n            throw indexOutOfRange(this, length);\n        }\n        this.pos += length;\n        return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n         ? new Uint8Array(0) : this.buf.subarray(start, end);\n    }\n    /**\n     * Reads a string preceded by its byte length as a varint\n     */ string() {\n        const bytes = this.bytes();\n        return _utf8_js__WEBPACK_IMPORTED_MODULE_3__.read(bytes, 0, bytes.length);\n    }\n    /**\n     * Skips the specified number of bytes if specified, otherwise skips a varint\n     */ skip(length) {\n        if (typeof length === \"number\") {\n            /* istanbul ignore if */ if (this.pos + length > this.len) {\n                throw indexOutOfRange(this, length);\n            }\n            this.pos += length;\n        } else {\n            do {\n                /* istanbul ignore if */ if (this.pos >= this.len) {\n                    throw indexOutOfRange(this);\n                }\n            }while ((this.buf[this.pos++] & 128) !== 0);\n        }\n        return this;\n    }\n    /**\n     * Skips the next element of the specified wire type\n     */ skipType(wireType) {\n        switch(wireType){\n            case 0:\n                this.skip();\n                break;\n            case 1:\n                this.skip(8);\n                break;\n            case 2:\n                this.skip(this.uint32());\n                break;\n            case 3:\n                while((wireType = this.uint32() & 7) !== 4){\n                    this.skipType(wireType);\n                }\n                break;\n            case 5:\n                this.skip(4);\n                break;\n            /* istanbul ignore next */ default:\n                throw Error(`invalid wire type ${wireType} at offset ${this.pos}`);\n        }\n        return this;\n    }\n    readLongVarint() {\n        // tends to deopt with local vars for octet etc.\n        const bits = new _longbits_js__WEBPACK_IMPORTED_MODULE_2__.LongBits(0, 0);\n        let i = 0;\n        if (this.len - this.pos > 4) {\n            for(; i < 4; ++i){\n                // 1st..4th\n                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n                if (this.buf[this.pos++] < 128) {\n                    return bits;\n                }\n            }\n            // 5th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n            if (this.buf[this.pos++] < 128) {\n                return bits;\n            }\n            i = 0;\n        } else {\n            for(; i < 3; ++i){\n                /* istanbul ignore if */ if (this.pos >= this.len) {\n                    throw indexOutOfRange(this);\n                }\n                // 1st..3th\n                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n                if (this.buf[this.pos++] < 128) {\n                    return bits;\n                }\n            }\n            // 4th\n            bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n            return bits;\n        }\n        if (this.len - this.pos > 4) {\n            for(; i < 5; ++i){\n                // 6th..10th\n                bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n                if (this.buf[this.pos++] < 128) {\n                    return bits;\n                }\n            }\n        } else {\n            for(; i < 5; ++i){\n                if (this.pos >= this.len) {\n                    throw indexOutOfRange(this);\n                }\n                // 6th..10th\n                bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n                if (this.buf[this.pos++] < 128) {\n                    return bits;\n                }\n            }\n        }\n        throw Error(\"invalid varint encoding\");\n    }\n    readFixed64() {\n        if (this.pos + 8 > this.len) {\n            throw indexOutOfRange(this, 8);\n        }\n        const lo = readFixed32End(this.buf, this.pos += 4);\n        const hi = readFixed32End(this.buf, this.pos += 4);\n        return new _longbits_js__WEBPACK_IMPORTED_MODULE_2__.LongBits(lo, hi);\n    }\n    /**\n     * Reads a varint as a signed 64 bit value\n     */ int64() {\n        return this.readLongVarint().toBigInt();\n    }\n    /**\n     * Reads a varint as a signed 64 bit value returned as a possibly unsafe\n     * JavaScript number\n     */ int64Number() {\n        return this.readLongVarint().toNumber();\n    }\n    /**\n     * Reads a varint as a signed 64 bit value returned as a string\n     */ int64String() {\n        return this.readLongVarint().toString();\n    }\n    /**\n     * Reads a varint as an unsigned 64 bit value\n     */ uint64() {\n        return this.readLongVarint().toBigInt(true);\n    }\n    /**\n     * Reads a varint as an unsigned 64 bit value returned as a possibly unsafe\n     * JavaScript number\n     */ uint64Number() {\n        const value = (0,uint8_varint__WEBPACK_IMPORTED_MODULE_0__.decodeUint8Array)(this.buf, this.pos);\n        this.pos += (0,uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength)(value);\n        return value;\n    }\n    /**\n     * Reads a varint as an unsigned 64 bit value returned as a string\n     */ uint64String() {\n        return this.readLongVarint().toString(true);\n    }\n    /**\n     * Reads a zig-zag encoded varint as a signed 64 bit value\n     */ sint64() {\n        return this.readLongVarint().zzDecode().toBigInt();\n    }\n    /**\n     * Reads a zig-zag encoded varint as a signed 64 bit value returned as a\n     * possibly unsafe JavaScript number\n     */ sint64Number() {\n        return this.readLongVarint().zzDecode().toNumber();\n    }\n    /**\n     * Reads a zig-zag encoded varint as a signed 64 bit value returned as a\n     * string\n     */ sint64String() {\n        return this.readLongVarint().zzDecode().toString();\n    }\n    /**\n     * Reads fixed 64 bits\n     */ fixed64() {\n        return this.readFixed64().toBigInt();\n    }\n    /**\n     * Reads fixed 64 bits returned as a possibly unsafe JavaScript number\n     */ fixed64Number() {\n        return this.readFixed64().toNumber();\n    }\n    /**\n     * Reads fixed 64 bits returned as a string\n     */ fixed64String() {\n        return this.readFixed64().toString();\n    }\n    /**\n     * Reads zig-zag encoded fixed 64 bits\n     */ sfixed64() {\n        return this.readFixed64().toBigInt();\n    }\n    /**\n     * Reads zig-zag encoded fixed 64 bits returned as a possibly unsafe\n     * JavaScript number\n     */ sfixed64Number() {\n        return this.readFixed64().toNumber();\n    }\n    /**\n     * Reads zig-zag encoded fixed 64 bits returned as a string\n     */ sfixed64String() {\n        return this.readFixed64().toString();\n    }\n}\nfunction createReader(buf) {\n    return new Uint8ArrayReader(buf instanceof Uint8Array ? buf : buf.subarray());\n} //# sourceMappingURL=reader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/utils/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/utils/utf8.js":
/*!*************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/utils/utf8.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   read: () => (/* binding */ read),\n/* harmony export */   write: () => (/* binding */ write)\n/* harmony export */ });\n/**\n * Calculates the UTF8 byte length of a string\n */ function length(string) {\n    let len = 0;\n    let c = 0;\n    for(let i = 0; i < string.length; ++i){\n        c = string.charCodeAt(i);\n        if (c < 128) {\n            len += 1;\n        } else if (c < 2048) {\n            len += 2;\n        } else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n            ++i;\n            len += 4;\n        } else {\n            len += 3;\n        }\n    }\n    return len;\n}\n/**\n * Reads UTF8 bytes as a string\n */ function read(buffer, start, end) {\n    const len = end - start;\n    if (len < 1) {\n        return \"\";\n    }\n    let parts;\n    const chunk = [];\n    let i = 0; // char offset\n    let t; // temporary\n    while(start < end){\n        t = buffer[start++];\n        if (t < 128) {\n            chunk[i++] = t;\n        } else if (t > 191 && t < 224) {\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\n        } else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        } else {\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n        }\n        if (i > 8191) {\n            (parts ?? (parts = [])).push(String.fromCharCode.apply(String, chunk));\n            i = 0;\n        }\n    }\n    if (parts != null) {\n        if (i > 0) {\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        }\n        return parts.join(\"\");\n    }\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\n}\n/**\n * Writes a string as UTF8 bytes\n */ function write(string, buffer, offset) {\n    const start = offset;\n    let c1; // character 1\n    let c2; // character 2\n    for(let i = 0; i < string.length; ++i){\n        c1 = string.charCodeAt(i);\n        if (c1 < 128) {\n            buffer[offset++] = c1;\n        } else if (c1 < 2048) {\n            buffer[offset++] = c1 >> 6 | 192;\n            buffer[offset++] = c1 & 63 | 128;\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n            ++i;\n            buffer[offset++] = c1 >> 18 | 240;\n            buffer[offset++] = c1 >> 12 & 63 | 128;\n            buffer[offset++] = c1 >> 6 & 63 | 128;\n            buffer[offset++] = c1 & 63 | 128;\n        } else {\n            buffer[offset++] = c1 >> 12 | 224;\n            buffer[offset++] = c1 >> 6 & 63 | 128;\n            buffer[offset++] = c1 & 63 | 128;\n        }\n    }\n    return offset - start;\n} //# sourceMappingURL=utf8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL3V0aWxzL3V0ZjguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0NBRUMsR0FDTSxTQUFTQSxPQUFPQyxNQUFNO0lBQ3pCLElBQUlDLE1BQU07SUFDVixJQUFJQyxJQUFJO0lBQ1IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE9BQU9ELE1BQU0sRUFBRSxFQUFFSSxFQUFHO1FBQ3BDRCxJQUFJRixPQUFPSSxVQUFVLENBQUNEO1FBQ3RCLElBQUlELElBQUksS0FBSztZQUNURCxPQUFPO1FBQ1gsT0FDSyxJQUFJQyxJQUFJLE1BQU07WUFDZkQsT0FBTztRQUNYLE9BQ0ssSUFBSSxDQUFDQyxJQUFJLE1BQUssTUFBTyxVQUFVLENBQUNGLE9BQU9JLFVBQVUsQ0FBQ0QsSUFBSSxLQUFLLE1BQUssTUFBTyxRQUFRO1lBQ2hGLEVBQUVBO1lBQ0ZGLE9BQU87UUFDWCxPQUNLO1lBQ0RBLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBT0E7QUFDWDtBQUNBOztDQUVDLEdBQ00sU0FBU0ksS0FBS0MsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEdBQUc7SUFDbkMsTUFBTVAsTUFBTU8sTUFBTUQ7SUFDbEIsSUFBSU4sTUFBTSxHQUFHO1FBQ1QsT0FBTztJQUNYO0lBQ0EsSUFBSVE7SUFDSixNQUFNQyxRQUFRLEVBQUU7SUFDaEIsSUFBSVAsSUFBSSxHQUFHLGNBQWM7SUFDekIsSUFBSVEsR0FBRyxZQUFZO0lBQ25CLE1BQU9KLFFBQVFDLElBQUs7UUFDaEJHLElBQUlMLE1BQU0sQ0FBQ0MsUUFBUTtRQUNuQixJQUFJSSxJQUFJLEtBQUs7WUFDVEQsS0FBSyxDQUFDUCxJQUFJLEdBQUdRO1FBQ2pCLE9BQ0ssSUFBSUEsSUFBSSxPQUFPQSxJQUFJLEtBQUs7WUFDekJELEtBQUssQ0FBQ1AsSUFBSSxHQUFHLENBQUNRLElBQUksRUFBQyxLQUFNLElBQUlMLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHO1FBQ25ELE9BQ0ssSUFBSUksSUFBSSxPQUFPQSxJQUFJLEtBQUs7WUFDekJBLElBQUksQ0FBQyxDQUFDQSxJQUFJLE1BQU0sS0FBSyxDQUFDTCxNQUFNLENBQUNDLFFBQVEsR0FBRyxFQUFDLEtBQU0sS0FBSyxDQUFDRCxNQUFNLENBQUNDLFFBQVEsR0FBRyxFQUFDLEtBQU0sSUFBSUQsTUFBTSxDQUFDQyxRQUFRLEdBQUcsRUFBQyxJQUFLO1lBQzFHRyxLQUFLLENBQUNQLElBQUksR0FBRyxTQUFVUSxDQUFBQSxLQUFLLEVBQUM7WUFDN0JELEtBQUssQ0FBQ1AsSUFBSSxHQUFHLFNBQVVRLENBQUFBLElBQUksSUFBRztRQUNsQyxPQUNLO1lBQ0RELEtBQUssQ0FBQ1AsSUFBSSxHQUFHLENBQUNRLElBQUksRUFBQyxLQUFNLEtBQUssQ0FBQ0wsTUFBTSxDQUFDQyxRQUFRLEdBQUcsRUFBQyxLQUFNLElBQUlELE1BQU0sQ0FBQ0MsUUFBUSxHQUFHO1FBQ2xGO1FBQ0EsSUFBSUosSUFBSSxNQUFNO1lBQ1RNLENBQUFBLFNBQVVBLENBQUFBLFFBQVEsRUFBRSxHQUFHRyxJQUFJLENBQUNDLE9BQU9DLFlBQVksQ0FBQ0MsS0FBSyxDQUFDRixRQUFRSDtZQUMvRFAsSUFBSTtRQUNSO0lBQ0o7SUFDQSxJQUFJTSxTQUFTLE1BQU07UUFDZixJQUFJTixJQUFJLEdBQUc7WUFDUE0sTUFBTUcsSUFBSSxDQUFDQyxPQUFPQyxZQUFZLENBQUNDLEtBQUssQ0FBQ0YsUUFBUUgsTUFBTU0sS0FBSyxDQUFDLEdBQUdiO1FBQ2hFO1FBQ0EsT0FBT00sTUFBTVEsSUFBSSxDQUFDO0lBQ3RCO0lBQ0EsT0FBT0osT0FBT0MsWUFBWSxDQUFDQyxLQUFLLENBQUNGLFFBQVFILE1BQU1NLEtBQUssQ0FBQyxHQUFHYjtBQUM1RDtBQUNBOztDQUVDLEdBQ00sU0FBU2UsTUFBTWxCLE1BQU0sRUFBRU0sTUFBTSxFQUFFYSxNQUFNO0lBQ3hDLE1BQU1aLFFBQVFZO0lBQ2QsSUFBSUMsSUFBSSxjQUFjO0lBQ3RCLElBQUlDLElBQUksY0FBYztJQUN0QixJQUFLLElBQUlsQixJQUFJLEdBQUdBLElBQUlILE9BQU9ELE1BQU0sRUFBRSxFQUFFSSxFQUFHO1FBQ3BDaUIsS0FBS3BCLE9BQU9JLFVBQVUsQ0FBQ0Q7UUFDdkIsSUFBSWlCLEtBQUssS0FBSztZQUNWZCxNQUFNLENBQUNhLFNBQVMsR0FBR0M7UUFDdkIsT0FDSyxJQUFJQSxLQUFLLE1BQU07WUFDaEJkLE1BQU0sQ0FBQ2EsU0FBUyxHQUFHQyxNQUFNLElBQUk7WUFDN0JkLE1BQU0sQ0FBQ2EsU0FBUyxHQUFHQyxLQUFLLEtBQUs7UUFDakMsT0FDSyxJQUFJLENBQUNBLEtBQUssTUFBSyxNQUFPLFVBQVUsQ0FBQyxDQUFDQyxLQUFLckIsT0FBT0ksVUFBVSxDQUFDRCxJQUFJLEVBQUMsSUFBSyxNQUFLLE1BQU8sUUFBUTtZQUN4RmlCLEtBQUssVUFBVyxFQUFDQSxLQUFLLE1BQUssS0FBTSxFQUFDLElBQU1DLENBQUFBLEtBQUssTUFBSztZQUNsRCxFQUFFbEI7WUFDRkcsTUFBTSxDQUFDYSxTQUFTLEdBQUdDLE1BQU0sS0FBSztZQUM5QmQsTUFBTSxDQUFDYSxTQUFTLEdBQUdDLE1BQU0sS0FBSyxLQUFLO1lBQ25DZCxNQUFNLENBQUNhLFNBQVMsR0FBR0MsTUFBTSxJQUFJLEtBQUs7WUFDbENkLE1BQU0sQ0FBQ2EsU0FBUyxHQUFHQyxLQUFLLEtBQUs7UUFDakMsT0FDSztZQUNEZCxNQUFNLENBQUNhLFNBQVMsR0FBR0MsTUFBTSxLQUFLO1lBQzlCZCxNQUFNLENBQUNhLFNBQVMsR0FBR0MsTUFBTSxJQUFJLEtBQUs7WUFDbENkLE1BQU0sQ0FBQ2EsU0FBUyxHQUFHQyxLQUFLLEtBQUs7UUFDakM7SUFDSjtJQUNBLE9BQU9ELFNBQVNaO0FBQ3BCLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvcHJvdG9ucy1ydW50aW1lL2Rpc3Qvc3JjL3V0aWxzL3V0ZjguanM/YTFlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENhbGN1bGF0ZXMgdGhlIFVURjggYnl0ZSBsZW5ndGggb2YgYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChzdHJpbmcpIHtcbiAgICBsZXQgbGVuID0gMDtcbiAgICBsZXQgYyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgICAgICAgbGVuICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgICAgICAgIGxlbiArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhGQzAwKSA9PT0gMHhEODAwICYmIChzdHJpbmcuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDApIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIGxlbiArPSA0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGVuICs9IDM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlbjtcbn1cbi8qKlxuICogUmVhZHMgVVRGOCBieXRlcyBhcyBhIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZChidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydDtcbiAgICBpZiAobGVuIDwgMSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGxldCBwYXJ0cztcbiAgICBjb25zdCBjaHVuayA9IFtdO1xuICAgIGxldCBpID0gMDsgLy8gY2hhciBvZmZzZXRcbiAgICBsZXQgdDsgLy8gdGVtcG9yYXJ5XG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIHQgPSBidWZmZXJbc3RhcnQrK107XG4gICAgICAgIGlmICh0IDwgMTI4KSB7XG4gICAgICAgICAgICBjaHVua1tpKytdID0gdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ID4gMTkxICYmIHQgPCAyMjQpIHtcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAodCAmIDMxKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodCA+IDIzOSAmJiB0IDwgMzY1KSB7XG4gICAgICAgICAgICB0ID0gKCh0ICYgNykgPDwgMTggfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDEyIHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjMpIC0gMHgxMDAwMDtcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweEQ4MDAgKyAodCA+PiAxMCk7XG4gICAgICAgICAgICBjaHVua1tpKytdID0gMHhEQzAwICsgKHQgJiAxMDIzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAodCAmIDE1KSA8PCAxMiB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID4gODE5MSkge1xuICAgICAgICAgICAgKHBhcnRzID8/IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcbiAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJ0cyAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmsuc2xpY2UoMCwgaSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydHMuam9pbignJyk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmsuc2xpY2UoMCwgaSkpO1xufVxuLyoqXG4gKiBXcml0ZXMgYSBzdHJpbmcgYXMgVVRGOCBieXRlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gd3JpdGUoc3RyaW5nLCBidWZmZXIsIG9mZnNldCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gb2Zmc2V0O1xuICAgIGxldCBjMTsgLy8gY2hhcmFjdGVyIDFcbiAgICBsZXQgYzI7IC8vIGNoYXJhY3RlciAyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYzEgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYzEgPCAyMDQ4KSB7XG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiB8IDE5MjtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAmIDYzIHwgMTI4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChjMSAmIDB4RkMwMCkgPT09IDB4RDgwMCAmJiAoKGMyID0gc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpKSAmIDB4RkMwMCkgPT09IDB4REMwMCkge1xuICAgICAgICAgICAgYzEgPSAweDEwMDAwICsgKChjMSAmIDB4MDNGRikgPDwgMTApICsgKGMyICYgMHgwM0ZGKTtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiAxOCB8IDI0MDtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiAxMiAmIDYzIHwgMTI4O1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgJiA2MyB8IDEyODtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAmIDYzIHwgMTI4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyIHwgMjI0O1xuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgJiA2MyB8IDEyODtcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAmIDYzIHwgMTI4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0ZjguanMubWFwIl0sIm5hbWVzIjpbImxlbmd0aCIsInN0cmluZyIsImxlbiIsImMiLCJpIiwiY2hhckNvZGVBdCIsInJlYWQiLCJidWZmZXIiLCJzdGFydCIsImVuZCIsInBhcnRzIiwiY2h1bmsiLCJ0IiwicHVzaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5Iiwic2xpY2UiLCJqb2luIiwid3JpdGUiLCJvZmZzZXQiLCJjMSIsImMyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/utils/utf8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protons-runtime/dist/src/utils/writer.js":
/*!***************************************************************!*\
  !*** ./node_modules/protons-runtime/dist/src/utils/writer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWriter: () => (/* binding */ createWriter)\n/* harmony export */ });\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8-varint */ \"(ssr)/./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var _float_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./float.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/float.js\");\n/* harmony import */ var _longbits_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./longbits.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/longbits.js\");\n/* harmony import */ var _pool_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pool.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/pool.js\");\n/* harmony import */ var _utf8_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utf8.js */ \"(ssr)/./node_modules/protons-runtime/dist/src/utils/utf8.js\");\n\n\n\n\n\n\n\n/**\n * Constructs a new writer operation instance.\n *\n * @classdesc Scheduled writer operation\n */ class Op {\n    constructor(fn, len, val){\n        this.fn = fn;\n        this.len = len;\n        this.next = undefined;\n        this.val = val; // type varies\n    }\n}\n/* istanbul ignore next */ function noop() {} // eslint-disable-line no-empty-function\n/**\n * Constructs a new writer state instance\n */ class State {\n    constructor(writer){\n        this.head = writer.head;\n        this.tail = writer.tail;\n        this.len = writer.len;\n        this.next = writer.states;\n    }\n}\nconst bufferPool = (0,_pool_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n/**\n * Allocates a buffer of the specified size\n */ function alloc(size) {\n    if (globalThis.Buffer != null) {\n        return (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(size);\n    }\n    return bufferPool(size);\n}\n/**\n * When a value is written, the writer calculates its byte length and puts it into a linked\n * list of operations to perform when finish() is called. This both allows us to allocate\n * buffers of the exact required size and reduces the amount of work we have to do compared\n * to first calculating over objects and then encoding over objects. In our case, the encoding\n * part is just a linked list walk calling operations with already prepared values.\n */ class Uint8ArrayWriter {\n    constructor(){\n        this.len = 0;\n        this.head = new Op(noop, 0, 0);\n        this.tail = this.head;\n        this.states = null;\n    }\n    /**\n     * Pushes a new operation to the queue\n     */ _push(fn, len, val) {\n        this.tail = this.tail.next = new Op(fn, len, val);\n        this.len += len;\n        return this;\n    }\n    /**\n     * Writes an unsigned 32 bit value as a varint\n     */ uint32(value) {\n        // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n        // uint32 is by far the most frequently used operation and benefits significantly from this.\n        this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n        return this;\n    }\n    /**\n     * Writes a signed 32 bit value as a varint`\n     */ int32(value) {\n        return value < 0 ? this._push(writeVarint64, 10, _longbits_js__WEBPACK_IMPORTED_MODULE_4__.LongBits.fromNumber(value)) // 10 bytes per spec\n         : this.uint32(value);\n    }\n    /**\n     * Writes a 32 bit value as a varint, zig-zag encoded\n     */ sint32(value) {\n        return this.uint32((value << 1 ^ value >> 31) >>> 0);\n    }\n    /**\n     * Writes an unsigned 64 bit value as a varint\n     */ uint64(value) {\n        const bits = _longbits_js__WEBPACK_IMPORTED_MODULE_4__.LongBits.fromBigInt(value);\n        return this._push(writeVarint64, bits.length(), bits);\n    }\n    /**\n     * Writes an unsigned 64 bit value as a varint\n     */ uint64Number(value) {\n        return this._push(uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodeUint8Array, (0,uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength)(value), value);\n    }\n    /**\n     * Writes an unsigned 64 bit value as a varint\n     */ uint64String(value) {\n        return this.uint64(BigInt(value));\n    }\n    /**\n     * Writes a signed 64 bit value as a varint\n     */ int64(value) {\n        return this.uint64(value);\n    }\n    /**\n     * Writes a signed 64 bit value as a varint\n     */ int64Number(value) {\n        return this.uint64Number(value);\n    }\n    /**\n     * Writes a signed 64 bit value as a varint\n     */ int64String(value) {\n        return this.uint64String(value);\n    }\n    /**\n     * Writes a signed 64 bit value as a varint, zig-zag encoded\n     */ sint64(value) {\n        const bits = _longbits_js__WEBPACK_IMPORTED_MODULE_4__.LongBits.fromBigInt(value).zzEncode();\n        return this._push(writeVarint64, bits.length(), bits);\n    }\n    /**\n     * Writes a signed 64 bit value as a varint, zig-zag encoded\n     */ sint64Number(value) {\n        const bits = _longbits_js__WEBPACK_IMPORTED_MODULE_4__.LongBits.fromNumber(value).zzEncode();\n        return this._push(writeVarint64, bits.length(), bits);\n    }\n    /**\n     * Writes a signed 64 bit value as a varint, zig-zag encoded\n     */ sint64String(value) {\n        return this.sint64(BigInt(value));\n    }\n    /**\n     * Writes a boolish value as a varint\n     */ bool(value) {\n        return this._push(writeByte, 1, value ? 1 : 0);\n    }\n    /**\n     * Writes an unsigned 32 bit value as fixed 32 bits\n     */ fixed32(value) {\n        return this._push(writeFixed32, 4, value >>> 0);\n    }\n    /**\n     * Writes a signed 32 bit value as fixed 32 bits\n     */ sfixed32(value) {\n        return this.fixed32(value);\n    }\n    /**\n     * Writes an unsigned 64 bit value as fixed 64 bits\n     */ fixed64(value) {\n        const bits = _longbits_js__WEBPACK_IMPORTED_MODULE_4__.LongBits.fromBigInt(value);\n        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n    }\n    /**\n     * Writes an unsigned 64 bit value as fixed 64 bits\n     */ fixed64Number(value) {\n        const bits = _longbits_js__WEBPACK_IMPORTED_MODULE_4__.LongBits.fromNumber(value);\n        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n    }\n    /**\n     * Writes an unsigned 64 bit value as fixed 64 bits\n     */ fixed64String(value) {\n        return this.fixed64(BigInt(value));\n    }\n    /**\n     * Writes a signed 64 bit value as fixed 64 bits\n     */ sfixed64(value) {\n        return this.fixed64(value);\n    }\n    /**\n     * Writes a signed 64 bit value as fixed 64 bits\n     */ sfixed64Number(value) {\n        return this.fixed64Number(value);\n    }\n    /**\n     * Writes a signed 64 bit value as fixed 64 bits\n     */ sfixed64String(value) {\n        return this.fixed64String(value);\n    }\n    /**\n     * Writes a float (32 bit)\n     */ float(value) {\n        return this._push(_float_js__WEBPACK_IMPORTED_MODULE_3__.writeFloatLE, 4, value);\n    }\n    /**\n     * Writes a double (64 bit float).\n     *\n     * @function\n     * @param {number} value - Value to write\n     * @returns {Writer} `this`\n     */ double(value) {\n        return this._push(_float_js__WEBPACK_IMPORTED_MODULE_3__.writeDoubleLE, 8, value);\n    }\n    /**\n     * Writes a sequence of bytes\n     */ bytes(value) {\n        const len = value.length >>> 0;\n        if (len === 0) {\n            return this._push(writeByte, 1, 0);\n        }\n        return this.uint32(len)._push(writeBytes, len, value);\n    }\n    /**\n     * Writes a string\n     */ string(value) {\n        const len = _utf8_js__WEBPACK_IMPORTED_MODULE_6__.length(value);\n        return len !== 0 ? this.uint32(len)._push(_utf8_js__WEBPACK_IMPORTED_MODULE_6__.write, len, value) : this._push(writeByte, 1, 0);\n    }\n    /**\n     * Forks this writer's state by pushing it to a stack.\n     * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n     */ fork() {\n        this.states = new State(this);\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len = 0;\n        return this;\n    }\n    /**\n     * Resets this instance to the last state\n     */ reset() {\n        if (this.states != null) {\n            this.head = this.states.head;\n            this.tail = this.states.tail;\n            this.len = this.states.len;\n            this.states = this.states.next;\n        } else {\n            this.head = this.tail = new Op(noop, 0, 0);\n            this.len = 0;\n        }\n        return this;\n    }\n    /**\n     * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n     */ ldelim() {\n        const head = this.head;\n        const tail = this.tail;\n        const len = this.len;\n        this.reset().uint32(len);\n        if (len !== 0) {\n            this.tail.next = head.next; // skip noop\n            this.tail = tail;\n            this.len += len;\n        }\n        return this;\n    }\n    /**\n     * Finishes the write operation\n     */ finish() {\n        let head = this.head.next; // skip noop\n        const buf = alloc(this.len);\n        let pos = 0;\n        while(head != null){\n            head.fn(head.val, buf, pos);\n            pos += head.len;\n            head = head.next;\n        }\n        // this.head = this.tail = null;\n        return buf;\n    }\n}\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n    while(val > 127){\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n/**\n * Constructs a new varint writer operation instance.\n *\n * @classdesc Scheduled varint writer operation\n */ class VarintOp extends Op {\n    constructor(len, val){\n        super(writeVarint32, len, val);\n        this.next = undefined;\n    }\n}\nfunction writeVarint64(val, buf, pos) {\n    while(val.hi !== 0){\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while(val.lo > 127){\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\nfunction writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n}\nfunction writeBytes(val, buf, pos) {\n    buf.set(val, pos);\n}\nif (globalThis.Buffer != null) {\n    Uint8ArrayWriter.prototype.bytes = function(value) {\n        const len = value.length >>> 0;\n        this.uint32(len);\n        if (len > 0) {\n            this._push(writeBytesBuffer, len, value);\n        }\n        return this;\n    };\n    Uint8ArrayWriter.prototype.string = function(value) {\n        const len = globalThis.Buffer.byteLength(value);\n        this.uint32(len);\n        if (len > 0) {\n            this._push(writeStringBuffer, len, value);\n        }\n        return this;\n    };\n}\nfunction writeBytesBuffer(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n// also works for plain array values\n}\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) {\n        // plain js is faster for short strings (probably due to redundant assertions)\n        _utf8_js__WEBPACK_IMPORTED_MODULE_6__.write(val, buf, pos);\n    // @ts-expect-error buf isn't a Uint8Array?\n    } else if (buf.utf8Write != null) {\n        // @ts-expect-error buf isn't a Uint8Array?\n        buf.utf8Write(val, pos);\n    } else {\n        buf.set((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(val), pos);\n    }\n}\n/**\n * Creates a new writer\n */ function createWriter() {\n    return new Uint8ArrayWriter();\n} //# sourceMappingURL=writer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protons-runtime/dist/src/utils/writer.js\n");

/***/ })

};
;