"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-forge";
exports.ids = ["vendor-chunks/node-forge"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-forge/lib/aes.js":
/*!********************************************!*\
  !*** ./node_modules/node-forge/lib/aes.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Advanced Encryption Standard (AES) implementation.\n *\n * This implementation is based on the public domain library 'jscrypto' which\n * was written by:\n *\n * Emily Stark (estark@stanford.edu)\n * Mike Hamburg (mhamburg@stanford.edu)\n * Dan Boneh (dabo@cs.stanford.edu)\n *\n * Parts of this code are based on the OpenSSL implementation of AES:\n * http://www.openssl.org\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./cipher */ \"(ssr)/./node_modules/node-forge/lib/cipher.js\");\n__webpack_require__(/*! ./cipherModes */ \"(ssr)/./node_modules/node-forge/lib/cipherModes.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n/* AES API */ module.exports = forge.aes = forge.aes || {};\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('AES-<mode>', key);\n * cipher.start({iv: iv});\n *\n * Creates an AES cipher object to encrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as a string of bytes, an array of bytes,\n * a byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ forge.aes.startEncrypting = function(key, iv, output, mode) {\n    var cipher = _createCipher({\n        key: key,\n        output: output,\n        decrypt: false,\n        mode: mode\n    });\n    cipher.start(iv);\n    return cipher;\n};\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('AES-<mode>', key);\n *\n * Creates an AES cipher object to encrypt data using the given symmetric key.\n *\n * The key may be given as a string of bytes, an array of bytes, a\n * byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ forge.aes.createEncryptionCipher = function(key, mode) {\n    return _createCipher({\n        key: key,\n        output: null,\n        decrypt: false,\n        mode: mode\n    });\n};\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('AES-<mode>', key);\n * decipher.start({iv: iv});\n *\n * Creates an AES cipher object to decrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as a string of bytes, an array of bytes,\n * a byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ forge.aes.startDecrypting = function(key, iv, output, mode) {\n    var cipher = _createCipher({\n        key: key,\n        output: output,\n        decrypt: true,\n        mode: mode\n    });\n    cipher.start(iv);\n    return cipher;\n};\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('AES-<mode>', key);\n *\n * Creates an AES cipher object to decrypt data using the given symmetric key.\n *\n * The key may be given as a string of bytes, an array of bytes, a\n * byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ forge.aes.createDecryptionCipher = function(key, mode) {\n    return _createCipher({\n        key: key,\n        output: null,\n        decrypt: true,\n        mode: mode\n    });\n};\n/**\n * Creates a new AES cipher algorithm object.\n *\n * @param name the name of the algorithm.\n * @param mode the mode factory function.\n *\n * @return the AES algorithm object.\n */ forge.aes.Algorithm = function(name, mode) {\n    if (!init) {\n        initialize();\n    }\n    var self = this;\n    self.name = name;\n    self.mode = new mode({\n        blockSize: 16,\n        cipher: {\n            encrypt: function(inBlock, outBlock) {\n                return _updateBlock(self._w, inBlock, outBlock, false);\n            },\n            decrypt: function(inBlock, outBlock) {\n                return _updateBlock(self._w, inBlock, outBlock, true);\n            }\n        }\n    });\n    self._init = false;\n};\n/**\n * Initializes this AES algorithm by expanding its key.\n *\n * @param options the options to use.\n *          key the key to use with this algorithm.\n *          decrypt true if the algorithm should be initialized for decryption,\n *            false for encryption.\n */ forge.aes.Algorithm.prototype.initialize = function(options) {\n    if (this._init) {\n        return;\n    }\n    var key = options.key;\n    var tmp;\n    /* Note: The key may be a string of bytes, an array of bytes, a byte\n    buffer, or an array of 32-bit integers. If the key is in bytes, then\n    it must be 16, 24, or 32 bytes in length. If it is in 32-bit\n    integers, it must be 4, 6, or 8 integers long. */ if (typeof key === \"string\" && (key.length === 16 || key.length === 24 || key.length === 32)) {\n        // convert key string into byte buffer\n        key = forge.util.createBuffer(key);\n    } else if (forge.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {\n        // convert key integer array into byte buffer\n        tmp = key;\n        key = forge.util.createBuffer();\n        for(var i = 0; i < tmp.length; ++i){\n            key.putByte(tmp[i]);\n        }\n    }\n    // convert key byte buffer into 32-bit integer array\n    if (!forge.util.isArray(key)) {\n        tmp = key;\n        key = [];\n        // key lengths of 16, 24, 32 bytes allowed\n        var len = tmp.length();\n        if (len === 16 || len === 24 || len === 32) {\n            len = len >>> 2;\n            for(var i = 0; i < len; ++i){\n                key.push(tmp.getInt32());\n            }\n        }\n    }\n    // key must be an array of 32-bit integers by now\n    if (!forge.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) {\n        throw new Error(\"Invalid key parameter.\");\n    }\n    // encryption operation is always used for these modes\n    var mode = this.mode.name;\n    var encryptOp = [\n        \"CFB\",\n        \"OFB\",\n        \"CTR\",\n        \"GCM\"\n    ].indexOf(mode) !== -1;\n    // do key expansion\n    this._w = _expandKey(key, options.decrypt && !encryptOp);\n    this._init = true;\n};\n/**\n * Expands a key. Typically only used for testing.\n *\n * @param key the symmetric key to expand, as an array of 32-bit words.\n * @param decrypt true to expand for decryption, false for encryption.\n *\n * @return the expanded key.\n */ forge.aes._expandKey = function(key, decrypt) {\n    if (!init) {\n        initialize();\n    }\n    return _expandKey(key, decrypt);\n};\n/**\n * Updates a single block. Typically only used for testing.\n *\n * @param w the expanded key to use.\n * @param input an array of block-size 32-bit words.\n * @param output an array of block-size 32-bit words.\n * @param decrypt true to decrypt, false to encrypt.\n */ forge.aes._updateBlock = _updateBlock;\n/** Register AES algorithms **/ registerAlgorithm(\"AES-ECB\", forge.cipher.modes.ecb);\nregisterAlgorithm(\"AES-CBC\", forge.cipher.modes.cbc);\nregisterAlgorithm(\"AES-CFB\", forge.cipher.modes.cfb);\nregisterAlgorithm(\"AES-OFB\", forge.cipher.modes.ofb);\nregisterAlgorithm(\"AES-CTR\", forge.cipher.modes.ctr);\nregisterAlgorithm(\"AES-GCM\", forge.cipher.modes.gcm);\nfunction registerAlgorithm(name, mode) {\n    var factory = function() {\n        return new forge.aes.Algorithm(name, mode);\n    };\n    forge.cipher.registerAlgorithm(name, factory);\n}\n/** AES implementation **/ var init = false; // not yet initialized\nvar Nb = 4; // number of words comprising the state (AES = 4)\nvar sbox; // non-linear substitution table used in key expansion\nvar isbox; // inversion of sbox\nvar rcon; // round constant word array\nvar mix; // mix-columns table\nvar imix; // inverse mix-columns table\n/**\n * Performs initialization, ie: precomputes tables to optimize for speed.\n *\n * One way to understand how AES works is to imagine that 'addition' and\n * 'multiplication' are interfaces that require certain mathematical\n * properties to hold true (ie: they are associative) but they might have\n * different implementations and produce different kinds of results ...\n * provided that their mathematical properties remain true. AES defines\n * its own methods of addition and multiplication but keeps some important\n * properties the same, ie: associativity and distributivity. The\n * explanation below tries to shed some light on how AES defines addition\n * and multiplication of bytes and 32-bit words in order to perform its\n * encryption and decryption algorithms.\n *\n * The basics:\n *\n * The AES algorithm views bytes as binary representations of polynomials\n * that have either 1 or 0 as the coefficients. It defines the addition\n * or subtraction of two bytes as the XOR operation. It also defines the\n * multiplication of two bytes as a finite field referred to as GF(2^8)\n * (Note: 'GF' means \"Galois Field\" which is a field that contains a finite\n * number of elements so GF(2^8) has 256 elements).\n *\n * This means that any two bytes can be represented as binary polynomials;\n * when they multiplied together and modularly reduced by an irreducible\n * polynomial of the 8th degree, the results are the field GF(2^8). The\n * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.\n * This multiplication is associative with 0x01 as the identity:\n *\n * (b * 0x01 = GF(b, 0x01) = b).\n *\n * The operation GF(b, 0x02) can be performed at the byte level by left\n * shifting b once and then XOR'ing it (to perform the modular reduction)\n * with 0x11b if b is >= 128. Repeated application of the multiplication\n * of 0x02 can be used to implement the multiplication of any two bytes.\n *\n * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can\n * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these\n * factors can each be multiplied by 0x57 and then added together. To do\n * the multiplication, values for 0x57 multiplied by each of these 3 factors\n * can be precomputed and stored in a table. To add them, the values from\n * the table are XOR'd together.\n *\n * AES also defines addition and multiplication of words, that is 4-byte\n * numbers represented as polynomials of 3 degrees where the coefficients\n * are the values of the bytes.\n *\n * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.\n *\n * Addition is performed by XOR'ing like powers of x. Multiplication\n * is performed in two steps, the first is an algebriac expansion as\n * you would do normally (where addition is XOR). But the result is\n * a polynomial larger than 3 degrees and thus it cannot fit in a word. So\n * next the result is modularly reduced by an AES-specific polynomial of\n * degree 4 which will always produce a polynomial of less than 4 degrees\n * such that it will fit in a word. In AES, this polynomial is x^4 + 1.\n *\n * The modular product of two polynomials 'a' and 'b' is thus:\n *\n * d(x) = d3x^3 + d2x^2 + d1x + d0\n * with\n * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)\n * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)\n * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)\n * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)\n *\n * As a matrix:\n *\n * [d0] = [a0 a3 a2 a1][b0]\n * [d1]   [a1 a0 a3 a2][b1]\n * [d2]   [a2 a1 a0 a3][b2]\n * [d3]   [a3 a2 a1 a0][b3]\n *\n * Special polynomials defined by AES (0x02 == {02}):\n * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}\n * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.\n *\n * These polynomials are used in the MixColumns() and InverseMixColumns()\n * operations, respectively, to cause each element in the state to affect\n * the output (referred to as diffusing).\n *\n * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the\n * polynomial x3.\n *\n * The ShiftRows() method modifies the last 3 rows in the state (where\n * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.\n * The 1st byte in the second row is moved to the end of the row. The 1st\n * and 2nd bytes in the third row are moved to the end of the row. The 1st,\n * 2nd, and 3rd bytes are moved in the fourth row.\n *\n * More details on how AES arithmetic works:\n *\n * In the polynomial representation of binary numbers, XOR performs addition\n * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)\n * corresponds with the multiplication of polynomials modulo an irreducible\n * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply\n * polynomial 'a' with polynomial 'b' and then do a modular reduction by\n * an AES-specific irreducible polynomial of degree 8.\n *\n * A polynomial is irreducible if its only divisors are one and itself. For\n * the AES algorithm, this irreducible polynomial is:\n *\n * m(x) = x^8 + x^4 + x^3 + x + 1,\n *\n * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:\n * 100011011 = 283 = 0x11b.\n *\n * For example, GF(0x57, 0x83) = 0xc1 because\n *\n * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1\n * 0x85 = 131 = 10000101 = x^7 + x + 1\n *\n * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)\n * =  x^13 + x^11 + x^9 + x^8 + x^7 +\n *    x^7 + x^5 + x^3 + x^2 + x +\n *    x^6 + x^4 + x^2 + x + 1\n * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y\n *    y modulo (x^8 + x^4 + x^3 + x + 1)\n * =  x^7 + x^6 + 1.\n *\n * The modular reduction by m(x) guarantees the result will be a binary\n * polynomial of less than degree 8, so that it can fit in a byte.\n *\n * The operation to multiply a binary polynomial b with x (the polynomial\n * x in binary representation is 00000010) is:\n *\n * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1\n *\n * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the\n * most significant bit is 0 in b) then the result is already reduced. If\n * it is 1, then we can reduce it by subtracting m(x) via an XOR.\n *\n * It follows that multiplication by x (00000010 or 0x02) can be implemented\n * by performing a left shift followed by a conditional bitwise XOR with\n * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by\n * higher powers of x can be implemented by repeated application of xtime().\n *\n * By adding intermediate results, multiplication by any constant can be\n * implemented. For instance:\n *\n * GF(0x57, 0x13) = 0xfe because:\n *\n * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)\n *\n * Note: We XOR with 0x11b instead of 0x1b because in javascript our\n * datatype for b can be larger than 1 byte, so a left shift will not\n * automatically eliminate bits that overflow a byte ... by XOR'ing the\n * overflow bit with 1 (the extra one from 0x11b) we zero it out.\n *\n * GF(0x57, 0x02) = xtime(0x57) = 0xae\n * GF(0x57, 0x04) = xtime(0xae) = 0x47\n * GF(0x57, 0x08) = xtime(0x47) = 0x8e\n * GF(0x57, 0x10) = xtime(0x8e) = 0x07\n *\n * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))\n *\n * And by the distributive property (since XOR is addition and GF() is\n * multiplication):\n *\n * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)\n * = 0x57 ^ 0xae ^ 0x07\n * = 0xfe.\n */ function initialize() {\n    init = true;\n    /* Populate the Rcon table. These are the values given by\n    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)\n    in the field of GF(2^8), where i starts at 1.\n\n    rcon[0] = [0x00, 0x00, 0x00, 0x00]\n    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1\n    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2\n    ...\n    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B\n    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36\n\n    We only store the first byte because it is the only one used.\n  */ rcon = [\n        0x00,\n        0x01,\n        0x02,\n        0x04,\n        0x08,\n        0x10,\n        0x20,\n        0x40,\n        0x80,\n        0x1B,\n        0x36\n    ];\n    // compute xtime table which maps i onto GF(i, 0x02)\n    var xtime = new Array(256);\n    for(var i = 0; i < 128; ++i){\n        xtime[i] = i << 1;\n        xtime[i + 128] = i + 128 << 1 ^ 0x11B;\n    }\n    // compute all other tables\n    sbox = new Array(256);\n    isbox = new Array(256);\n    mix = new Array(4);\n    imix = new Array(4);\n    for(var i = 0; i < 4; ++i){\n        mix[i] = new Array(256);\n        imix[i] = new Array(256);\n    }\n    var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;\n    for(var i = 0; i < 256; ++i){\n        /* We need to generate the SubBytes() sbox and isbox tables so that\n      we can perform byte substitutions. This requires us to traverse\n      all of the elements in GF, find their multiplicative inverses,\n      and apply to each the following affine transformation:\n\n      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^\n            b(i + 7) mod 8 ^ ci\n      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the\n      ith bit of a byte c with the value {63} or {01100011}.\n\n      It is possible to traverse every possible value in a Galois field\n      using what is referred to as a 'generator'. There are many\n      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully\n      traverse GF we iterate 255 times, multiplying by our generator\n      each time.\n\n      On each iteration we can determine the multiplicative inverse for\n      the current element.\n\n      Suppose there is an element in GF 'e'. For a given generator 'g',\n      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns\n      out that if use the inverse of a generator as another generator\n      it will produce all of the corresponding multiplicative inverses\n      at the same time. For this reason, we choose 5 as our inverse\n      generator because it only requires 2 multiplies and 1 add and its\n      inverse, 82, requires relatively few operations as well.\n\n      In order to apply the affine transformation, the multiplicative\n      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a\n      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and\n      'x'. Then 's' is left shifted and the high bit of 's' is made the\n      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd\n      with 's' and stored in 'x'. On each subsequent iteration the same\n      operation is performed. When 4 iterations are complete, 'x' is\n      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.\n      For example:\n\n      s = 01000001\n      x = 01000001\n\n      iteration 1: s = 10000010, x ^= s\n      iteration 2: s = 00000101, x ^= s\n      iteration 3: s = 00001010, x ^= s\n      iteration 4: s = 00010100, x ^= s\n      x ^= 0x63\n\n      This can be done with a loop where s = (s << 1) | (s >> 7). However,\n      it can also be done by using a single 16-bit (in this case 32-bit)\n      number 'sx'. Since XOR is an associative operation, we can set 'sx'\n      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.\n      The most significant bits will flow into the high 8 bit positions\n      and be correctly XOR'd with one another. All that remains will be\n      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits\n      afterwards.\n\n      At the same time we're populating sbox and isbox we can precompute\n      the multiplication we'll need to do to do MixColumns() later.\n    */ // apply affine transformation\n        sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;\n        sx = sx >> 8 ^ sx & 255 ^ 0x63;\n        // update tables\n        sbox[e] = sx;\n        isbox[sx] = e;\n        /* Mixing columns is done using matrix multiplication. The columns\n      that are to be mixed are each a single word in the current state.\n      The state has Nb columns (4 columns). Therefore each column is a\n      4 byte word. So to mix the columns in a single column 'c' where\n      its rows are r0, r1, r2, and r3, we use the following matrix\n      multiplication:\n\n      [2 3 1 1]*[r0,c]=[r'0,c]\n      [1 2 3 1] [r1,c] [r'1,c]\n      [1 1 2 3] [r2,c] [r'2,c]\n      [3 1 1 2] [r3,c] [r'3,c]\n\n      r0, r1, r2, and r3 are each 1 byte of one of the words in the\n      state (a column). To do matrix multiplication for each mixed\n      column c' we multiply the corresponding row from the left matrix\n      with the corresponding column from the right matrix. In total, we\n      get 4 equations:\n\n      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c\n      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c\n      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c\n      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c\n\n      As usual, the multiplication is as previously defined and the\n      addition is XOR. In order to optimize mixing columns we can store\n      the multiplication results in tables. If you think of the whole\n      column as a word (it might help to visualize by mentally rotating\n      the equations above by counterclockwise 90 degrees) then you can\n      see that it would be useful to map the multiplications performed on\n      each byte (r0, r1, r2, r3) onto a word as well. For instance, we\n      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the\n      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two\n      respectively in the middle). This means that a table can be\n      constructed that uses r0 as an index to the word. We can do the\n      same with r1, r2, and r3, creating a total of 4 tables.\n\n      To construct a full c', we can just look up each byte of c in\n      their respective tables and XOR the results together.\n\n      Also, to build each table we only have to calculate the word\n      for 2,1,1,3 for every byte ... which we can do on each iteration\n      of this loop since we will iterate over every byte. After we have\n      calculated 2,1,1,3 we can get the results for the other tables\n      by cycling the byte at the end to the beginning. For instance\n      we can take the result of table 2,1,1,3 and produce table 3,2,1,1\n      by moving the right most byte to the left most position just like\n      how you can imagine the 3 moved out of 2,1,1,3 and to the front\n      to produce 3,2,1,1.\n\n      There is another optimization in that the same multiples of\n      the current element we need in order to advance our generator\n      to the next iteration can be reused in performing the 2,1,1,3\n      calculation. We also calculate the inverse mix column tables,\n      with e,9,d,b being the inverse of 2,1,1,3.\n\n      When we're done, and we need to actually mix columns, the first\n      byte of each state word should be put through mix[0] (2,1,1,3),\n      the second through mix[1] (3,2,1,1) and so forth. Then they should\n      be XOR'd together to produce the fully mixed column.\n    */ // calculate mix and imix table values\n        sx2 = xtime[sx];\n        e2 = xtime[e];\n        e4 = xtime[e2];\n        e8 = xtime[e4];\n        me = sx2 << 24 ^ // 2\n        sx << 16 ^ // 1\n        sx << 8 ^ // 1\n        (sx ^ sx2); // 3\n        ime = (e2 ^ e4 ^ e8) << 24 ^ // E (14)\n        (e ^ e8) << 16 ^ // 9\n        (e ^ e4 ^ e8) << 8 ^ // D (13)\n        (e ^ e2 ^ e8); // B (11)\n        // produce each of the mix tables by rotating the 2,1,1,3 value\n        for(var n = 0; n < 4; ++n){\n            mix[n][e] = me;\n            imix[n][sx] = ime;\n            // cycle the right most byte to the left most position\n            // ie: 2,1,1,3 becomes 3,2,1,1\n            me = me << 24 | me >>> 8;\n            ime = ime << 24 | ime >>> 8;\n        }\n        // get next element and inverse\n        if (e === 0) {\n            // 1 is the inverse of 1\n            e = ei = 1;\n        } else {\n            // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)\n            // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)\n            e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];\n            ei ^= xtime[xtime[ei]];\n        }\n    }\n}\n/**\n * Generates a key schedule using the AES key expansion algorithm.\n *\n * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion\n * routine to generate a key schedule. The Key Expansion generates a total\n * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,\n * and each of the Nr rounds requires Nb words of key data. The resulting\n * key schedule consists of a linear array of 4-byte words, denoted [wi ],\n * with i in the range 0 <= i < Nb(Nr + 1).\n *\n * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)\n * AES-128 (Nb=4, Nk=4, Nr=10)\n * AES-192 (Nb=4, Nk=6, Nr=12)\n * AES-256 (Nb=4, Nk=8, Nr=14)\n * Note: Nr=Nk+6.\n *\n * Nb is the number of columns (32-bit words) comprising the State (or\n * number of bytes in a block). For AES, Nb=4.\n *\n * @param key the key to schedule (as an array of 32-bit words).\n * @param decrypt true to modify the key schedule to decrypt, false not to.\n *\n * @return the generated key schedule.\n */ function _expandKey(key, decrypt) {\n    // copy the key's words to initialize the key schedule\n    var w = key.slice(0);\n    /* RotWord() will rotate a word, moving the first byte to the last\n    byte's position (shifting the other bytes left).\n\n    We will be getting the value of Rcon at i / Nk. 'i' will iterate\n    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in\n    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from\n    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will\n    increase by 1. We use a counter iNk to keep track of this.\n   */ // go through the rounds expanding the key\n    var temp, iNk = 1;\n    var Nk = w.length;\n    var Nr1 = Nk + 6 + 1;\n    var end = Nb * Nr1;\n    for(var i = Nk; i < end; ++i){\n        temp = w[i - 1];\n        if (i % Nk === 0) {\n            // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]\n            temp = sbox[temp >>> 16 & 255] << 24 ^ sbox[temp >>> 8 & 255] << 16 ^ sbox[temp & 255] << 8 ^ sbox[temp >>> 24] ^ rcon[iNk] << 24;\n            iNk++;\n        } else if (Nk > 6 && i % Nk === 4) {\n            // temp = SubWord(temp)\n            temp = sbox[temp >>> 24] << 24 ^ sbox[temp >>> 16 & 255] << 16 ^ sbox[temp >>> 8 & 255] << 8 ^ sbox[temp & 255];\n        }\n        w[i] = w[i - Nk] ^ temp;\n    }\n    /* When we are updating a cipher block we always use the code path for\n     encryption whether we are decrypting or not (to shorten code and\n     simplify the generation of look up tables). However, because there\n     are differences in the decryption algorithm, other than just swapping\n     in different look up tables, we must transform our key schedule to\n     account for these changes:\n\n     1. The decryption algorithm gets its key rounds in reverse order.\n     2. The decryption algorithm adds the round key before mixing columns\n       instead of afterwards.\n\n     We don't need to modify our key schedule to handle the first case,\n     we can just traverse the key schedule in reverse order when decrypting.\n\n     The second case requires a little work.\n\n     The tables we built for performing rounds will take an input and then\n     perform SubBytes() and MixColumns() or, for the decrypt version,\n     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires\n     us to AddRoundKey() before InvMixColumns(). This means we'll need to\n     apply some transformations to the round key to inverse-mix its columns\n     so they'll be correct for moving AddRoundKey() to after the state has\n     had its columns inverse-mixed.\n\n     To inverse-mix the columns of the state when we're decrypting we use a\n     lookup table that will apply InvSubBytes() and InvMixColumns() at the\n     same time. However, the round key's bytes are not inverse-substituted\n     in the decryption algorithm. To get around this problem, we can first\n     substitute the bytes in the round key so that when we apply the\n     transformation via the InvSubBytes()+InvMixColumns() table, it will\n     undo our substitution leaving us with the original value that we\n     want -- and then inverse-mix that value.\n\n     This change will correctly alter our key schedule so that we can XOR\n     each round key with our already transformed decryption state. This\n     allows us to use the same code path as the encryption algorithm.\n\n     We make one more change to the decryption key. Since the decryption\n     algorithm runs in reverse from the encryption algorithm, we reverse\n     the order of the round keys to avoid having to iterate over the key\n     schedule backwards when running the encryption algorithm later in\n     decryption mode. In addition to reversing the order of the round keys,\n     we also swap each round key's 2nd and 4th rows. See the comments\n     section where rounds are performed for more details about why this is\n     done. These changes are done inline with the other substitution\n     described above.\n  */ if (decrypt) {\n        var tmp;\n        var m0 = imix[0];\n        var m1 = imix[1];\n        var m2 = imix[2];\n        var m3 = imix[3];\n        var wnew = w.slice(0);\n        end = w.length;\n        for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb){\n            // do not sub the first or last round key (round keys are Nb\n            // words) as no column mixing is performed before they are added,\n            // but do change the key order\n            if (i === 0 || i === end - Nb) {\n                wnew[i] = w[wi];\n                wnew[i + 1] = w[wi + 3];\n                wnew[i + 2] = w[wi + 2];\n                wnew[i + 3] = w[wi + 1];\n            } else {\n                // substitute each round key byte because the inverse-mix\n                // table will inverse-substitute it (effectively cancel the\n                // substitution because round key bytes aren't sub'd in\n                // decryption mode) and swap indexes 3 and 1\n                for(var n = 0; n < Nb; ++n){\n                    tmp = w[wi + n];\n                    wnew[i + (3 & -n)] = m0[sbox[tmp >>> 24]] ^ m1[sbox[tmp >>> 16 & 255]] ^ m2[sbox[tmp >>> 8 & 255]] ^ m3[sbox[tmp & 255]];\n                }\n            }\n        }\n        w = wnew;\n    }\n    return w;\n}\n/**\n * Updates a single block (16 bytes) using AES. The update will either\n * encrypt or decrypt the block.\n *\n * @param w the key schedule.\n * @param input the input block (an array of 32-bit words).\n * @param output the updated output block.\n * @param decrypt true to decrypt the block, false to encrypt it.\n */ function _updateBlock(w, input, output, decrypt) {\n    /*\n  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])\n  begin\n    byte state[4,Nb]\n    state = in\n    AddRoundKey(state, w[0, Nb-1])\n    for round = 1 step 1 to Nr-1\n      SubBytes(state)\n      ShiftRows(state)\n      MixColumns(state)\n      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])\n    end for\n    SubBytes(state)\n    ShiftRows(state)\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    out = state\n  end\n\n  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])\n  begin\n    byte state[4,Nb]\n    state = in\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    for round = Nr-1 step -1 downto 1\n      InvShiftRows(state)\n      InvSubBytes(state)\n      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])\n      InvMixColumns(state)\n    end for\n    InvShiftRows(state)\n    InvSubBytes(state)\n    AddRoundKey(state, w[0, Nb-1])\n    out = state\n  end\n  */ // Encrypt: AddRoundKey(state, w[0, Nb-1])\n    // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    var Nr = w.length / 4 - 1;\n    var m0, m1, m2, m3, sub;\n    if (decrypt) {\n        m0 = imix[0];\n        m1 = imix[1];\n        m2 = imix[2];\n        m3 = imix[3];\n        sub = isbox;\n    } else {\n        m0 = mix[0];\n        m1 = mix[1];\n        m2 = mix[2];\n        m3 = mix[3];\n        sub = sbox;\n    }\n    var a, b, c, d, a2, b2, c2;\n    a = input[0] ^ w[0];\n    b = input[decrypt ? 3 : 1] ^ w[1];\n    c = input[2] ^ w[2];\n    d = input[decrypt ? 1 : 3] ^ w[3];\n    var i = 3;\n    /* In order to share code we follow the encryption algorithm when both\n    encrypting and decrypting. To account for the changes required in the\n    decryption algorithm, we use different lookup tables when decrypting\n    and use a modified key schedule to account for the difference in the\n    order of transformations applied when performing rounds. We also get\n    key rounds in reverse order (relative to encryption). */ for(var round = 1; round < Nr; ++round){\n        /* As described above, we'll be using table lookups to perform the\n      column mixing. Each column is stored as a word in the state (the\n      array 'input' has one column as a word at each index). In order to\n      mix a column, we perform these transformations on each row in c,\n      which is 1 byte in each word. The new column for c0 is c'0:\n\n               m0      m1      m2      m3\n      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0\n      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0\n      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0\n      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0\n\n      So using mix tables where c0 is a word with r0 being its upper\n      8 bits and r3 being its lower 8 bits:\n\n      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]\n      ...\n      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]\n\n      Therefore to mix the columns in each word in the state we\n      do the following (& 255 omitted for brevity):\n      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n\n      However, before mixing, the algorithm requires us to perform\n      ShiftRows(). The ShiftRows() transformation cyclically shifts the\n      last 3 rows of the state over different offsets. The first row\n      (r = 0) is not shifted.\n\n      s'_r,c = s_r,(c + shift(r, Nb) mod Nb\n      for 0 < r < 4 and 0 <= c < Nb and\n      shift(1, 4) = 1\n      shift(2, 4) = 2\n      shift(3, 4) = 3.\n\n      This causes the first byte in r = 1 to be moved to the end of\n      the row, the first 2 bytes in r = 2 to be moved to the end of\n      the row, the first 3 bytes in r = 3 to be moved to the end of\n      the row:\n\n      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]\n      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]\n      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]\n\n      We can make these substitutions inline with our column mixing to\n      generate an updated set of equations to produce each word in the\n      state (note the columns have changed positions):\n\n      c0 c1 c2 c3 => c0 c1 c2 c3\n      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)\n      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)\n      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)\n\n      Therefore:\n\n      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3\n      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3\n      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3\n      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3\n\n      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0\n      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0\n      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0\n      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0\n\n      ... and so forth for c'2 and c'3. The important distinction is\n      that the columns are cycling, with c0 being used with the m0\n      map when calculating c0, but c1 being used with the m0 map when\n      calculating c1 ... and so forth.\n\n      When performing the inverse we transform the mirror image and\n      skip the bottom row, instead of the top one, and move upwards:\n\n      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption\n      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)\n      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption\n      c3 c2 c1 c0    c3 c2 c1 c0\n\n      If you compare the resulting matrices for ShiftRows()+MixColumns()\n      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are\n      different (in encrypt mode vs. decrypt mode). So in order to use\n      the same code to handle both encryption and decryption, we will\n      need to do some mapping.\n\n      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be\n      a row number in the state, then the resulting matrix in encryption\n      mode for applying the above transformations would be:\n\n      r1: a b c d\n      r2: b c d a\n      r3: c d a b\n      r4: d a b c\n\n      If we did the same in decryption mode we would get:\n\n      r1: a d c b\n      r2: b a d c\n      r3: c b a d\n      r4: d c b a\n\n      If instead we swap d and b (set b=c3 and d=c1), then we get:\n\n      r1: a b c d\n      r2: d a b c\n      r3: c d a b\n      r4: b c d a\n\n      Now the 1st and 3rd rows are the same as the encryption matrix. All\n      we need to do then to make the mapping exactly the same is to swap\n      the 2nd and 4th rows when in decryption mode. To do this without\n      having to do it on each iteration, we swapped the 2nd and 4th rows\n      in the decryption key schedule. We also have to do the swap above\n      when we first pull in the input and when we set the final output. */ a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];\n        b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];\n        c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];\n        d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];\n        a = a2;\n        b = b2;\n        c = c2;\n    }\n    /*\n    Encrypt:\n    SubBytes(state)\n    ShiftRows(state)\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n\n    Decrypt:\n    InvShiftRows(state)\n    InvSubBytes(state)\n    AddRoundKey(state, w[0, Nb-1])\n   */ // Note: rows are shifted inline\n    output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];\n    output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];\n    output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];\n    output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];\n}\n/**\n * Deprecated. Instead, use:\n *\n * forge.cipher.createCipher('AES-<mode>', key);\n * forge.cipher.createDecipher('AES-<mode>', key);\n *\n * Creates a deprecated AES cipher object. This object's mode will default to\n * CBC (cipher-block-chaining).\n *\n * The key and iv may be given as a string of bytes, an array of bytes, a\n * byte buffer, or an array of 32-bit words.\n *\n * @param options the options to use.\n *          key the symmetric key to use.\n *          output the buffer to write to.\n *          decrypt true for decryption, false for encryption.\n *          mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ function _createCipher(options) {\n    options = options || {};\n    var mode = (options.mode || \"CBC\").toUpperCase();\n    var algorithm = \"AES-\" + mode;\n    var cipher;\n    if (options.decrypt) {\n        cipher = forge.cipher.createDecipher(algorithm, options.key);\n    } else {\n        cipher = forge.cipher.createCipher(algorithm, options.key);\n    }\n    // backwards compatible start API\n    var start = cipher.start;\n    cipher.start = function(iv, options) {\n        // backwards compatibility: support second arg as output buffer\n        var output = null;\n        if (options instanceof forge.util.ByteBuffer) {\n            output = options;\n            options = {};\n        }\n        options = options || {};\n        options.output = output;\n        options.iv = iv;\n        start.call(cipher, options);\n    };\n    return cipher;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/aes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/asn1.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/asn1.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Javascript implementation of Abstract Syntax Notation Number One.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n *\n * An API for storing data using the Abstract Syntax Notation Number One\n * format using DER (Distinguished Encoding Rules) encoding. This encoding is\n * commonly used to store data for PKI, i.e. X.509 Certificates, and this\n * implementation exists for that purpose.\n *\n * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract\n * syntax of information without restricting the way the information is encoded\n * for transmission. It provides a standard that allows for open systems\n * communication. ASN.1 defines the syntax of information data and a number of\n * simple data types as well as a notation for describing them and specifying\n * values for them.\n *\n * The RSA algorithm creates public and private keys that are often stored in\n * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This\n * class provides the most basic functionality required to store and load DSA\n * keys that are encoded according to ASN.1.\n *\n * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)\n * and DER (Distinguished Encoding Rules). DER is just a subset of BER that\n * has stricter requirements for how data must be encoded.\n *\n * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)\n * and a byte array for the value of this ASN1 structure which may be data or a\n * list of ASN.1 structures.\n *\n * Each ASN.1 structure using BER is (Tag-Length-Value):\n *\n * | byte 0 | bytes X | bytes Y |\n * |--------|---------|----------\n * |  tag   | length  |  value  |\n *\n * ASN.1 allows for tags to be of \"High-tag-number form\" which allows a tag to\n * be two or more octets, but that is not supported by this class. A tag is\n * only 1 byte. Bits 1-5 give the tag number (ie the data type within a\n * particular 'class'), 6 indicates whether or not the ASN.1 value is\n * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If\n * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,\n * then the class is APPLICATION. If only bit 8 is set, then the class is\n * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.\n * The tag numbers for the data types for the class UNIVERSAL are listed below:\n *\n * UNIVERSAL 0 Reserved for use by the encoding rules\n * UNIVERSAL 1 Boolean type\n * UNIVERSAL 2 Integer type\n * UNIVERSAL 3 Bitstring type\n * UNIVERSAL 4 Octetstring type\n * UNIVERSAL 5 Null type\n * UNIVERSAL 6 Object identifier type\n * UNIVERSAL 7 Object descriptor type\n * UNIVERSAL 8 External type and Instance-of type\n * UNIVERSAL 9 Real type\n * UNIVERSAL 10 Enumerated type\n * UNIVERSAL 11 Embedded-pdv type\n * UNIVERSAL 12 UTF8String type\n * UNIVERSAL 13 Relative object identifier type\n * UNIVERSAL 14-15 Reserved for future editions\n * UNIVERSAL 16 Sequence and Sequence-of types\n * UNIVERSAL 17 Set and Set-of types\n * UNIVERSAL 18-22, 25-30 Character string types\n * UNIVERSAL 23-24 Time types\n *\n * The length of an ASN.1 structure is specified after the tag identifier.\n * There is a definite form and an indefinite form. The indefinite form may\n * be used if the encoding is constructed and not all immediately available.\n * The indefinite form is encoded using a length byte with only the 8th bit\n * set. The end of the constructed object is marked using end-of-contents\n * octets (two zero bytes).\n *\n * The definite form looks like this:\n *\n * The length may take up 1 or more bytes, it depends on the length of the\n * value of the ASN.1 structure. DER encoding requires that if the ASN.1\n * structure has a value that has a length greater than 127, more than 1 byte\n * will be used to store its length, otherwise just one byte will be used.\n * This is strict.\n *\n * In the case that the length of the ASN.1 value is less than 127, 1 octet\n * (byte) is used to store the \"short form\" length. The 8th bit has a value of\n * 0 indicating the length is \"short form\" and not \"long form\" and bits 7-1\n * give the length of the data. (The 8th bit is the left-most, most significant\n * bit: also known as big endian or network format).\n *\n * In the case that the length of the ASN.1 value is greater than 127, 2 to\n * 127 octets (bytes) are used to store the \"long form\" length. The first\n * byte's 8th bit is set to 1 to indicate the length is \"long form.\" Bits 7-1\n * give the number of additional octets. All following octets are in base 256\n * with the most significant digit first (typical big-endian binary unsigned\n * integer storage). So, for instance, if the length of a value was 257, the\n * first byte would be set to:\n *\n * 10000010 = 130 = 0x82.\n *\n * This indicates there are 2 octets (base 256) for the length. The second and\n * third bytes (the octets just mentioned) would store the length in base 256:\n *\n * octet 2: 00000001 = 1 * 256^1 = 256\n * octet 3: 00000001 = 1 * 256^0 = 1\n * total = 257\n *\n * The algorithm for converting a js integer value of 257 to base-256 is:\n *\n * var value = 257;\n * var bytes = [];\n * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first\n * bytes[1] = value & 0xFF;        // least significant byte last\n *\n * On the ASN.1 UNIVERSAL Object Identifier (OID) type:\n *\n * An OID can be written like: \"value1.value2.value3...valueN\"\n *\n * The DER encoding rules:\n *\n * The first byte has the value 40 * value1 + value2.\n * The following bytes, if any, encode the remaining values. Each value is\n * encoded in base 128, most significant digit first (big endian), with as\n * few digits as possible, and the most significant bit of each byte set\n * to 1 except the last in each value's encoding. For example: Given the\n * OID \"1.2.840.113549\", its DER encoding is (remember each byte except the\n * last one in each encoding is OR'd with 0x80):\n *\n * byte 1: 40 * 1 + 2 = 42 = 0x2A.\n * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648\n * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D\n *\n * The final value is: 0x2A864886F70D.\n * The full OID (including ASN.1 tag and length of 6 bytes) is:\n * 0x06062A864886F70D\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n__webpack_require__(/*! ./oids */ \"(ssr)/./node_modules/node-forge/lib/oids.js\");\n/* ASN.1 API */ var asn1 = module.exports = forge.asn1 = forge.asn1 || {};\n/**\n * ASN.1 classes.\n */ asn1.Class = {\n    UNIVERSAL: 0x00,\n    APPLICATION: 0x40,\n    CONTEXT_SPECIFIC: 0x80,\n    PRIVATE: 0xC0\n};\n/**\n * ASN.1 types. Not all types are supported by this implementation, only\n * those necessary to implement a simple PKI are implemented.\n */ asn1.Type = {\n    NONE: 0,\n    BOOLEAN: 1,\n    INTEGER: 2,\n    BITSTRING: 3,\n    OCTETSTRING: 4,\n    NULL: 5,\n    OID: 6,\n    ODESC: 7,\n    EXTERNAL: 8,\n    REAL: 9,\n    ENUMERATED: 10,\n    EMBEDDED: 11,\n    UTF8: 12,\n    ROID: 13,\n    SEQUENCE: 16,\n    SET: 17,\n    PRINTABLESTRING: 19,\n    IA5STRING: 22,\n    UTCTIME: 23,\n    GENERALIZEDTIME: 24,\n    BMPSTRING: 30\n};\n/**\n * Creates a new asn1 object.\n *\n * @param tagClass the tag class for the object.\n * @param type the data type (tag number) for the object.\n * @param constructed true if the asn1 object is in constructed form.\n * @param value the value for the object, if it is not constructed.\n * @param [options] the options to use:\n *          [bitStringContents] the plain BIT STRING content including padding\n *            byte.\n *\n * @return the asn1 object.\n */ asn1.create = function(tagClass, type, constructed, value, options) {\n    /* An asn1 object has a tagClass, a type, a constructed flag, and a\n    value. The value's type depends on the constructed flag. If\n    constructed, it will contain a list of other asn1 objects. If not,\n    it will contain the ASN.1 value as an array of bytes formatted\n    according to the ASN.1 data type. */ // remove undefined values\n    if (forge.util.isArray(value)) {\n        var tmp = [];\n        for(var i = 0; i < value.length; ++i){\n            if (value[i] !== undefined) {\n                tmp.push(value[i]);\n            }\n        }\n        value = tmp;\n    }\n    var obj = {\n        tagClass: tagClass,\n        type: type,\n        constructed: constructed,\n        composed: constructed || forge.util.isArray(value),\n        value: value\n    };\n    if (options && \"bitStringContents\" in options) {\n        // TODO: copy byte buffer if it's a buffer not a string\n        obj.bitStringContents = options.bitStringContents;\n        // TODO: add readonly flag to avoid this overhead\n        // save copy to detect changes\n        obj.original = asn1.copy(obj);\n    }\n    return obj;\n};\n/**\n * Copies an asn1 object.\n *\n * @param obj the asn1 object.\n * @param [options] copy options:\n *          [excludeBitStringContents] true to not copy bitStringContents\n *\n * @return the a copy of the asn1 object.\n */ asn1.copy = function(obj, options) {\n    var copy;\n    if (forge.util.isArray(obj)) {\n        copy = [];\n        for(var i = 0; i < obj.length; ++i){\n            copy.push(asn1.copy(obj[i], options));\n        }\n        return copy;\n    }\n    if (typeof obj === \"string\") {\n        // TODO: copy byte buffer if it's a buffer not a string\n        return obj;\n    }\n    copy = {\n        tagClass: obj.tagClass,\n        type: obj.type,\n        constructed: obj.constructed,\n        composed: obj.composed,\n        value: asn1.copy(obj.value, options)\n    };\n    if (options && !options.excludeBitStringContents) {\n        // TODO: copy byte buffer if it's a buffer not a string\n        copy.bitStringContents = obj.bitStringContents;\n    }\n    return copy;\n};\n/**\n * Compares asn1 objects for equality.\n *\n * Note this function does not run in constant time.\n *\n * @param obj1 the first asn1 object.\n * @param obj2 the second asn1 object.\n * @param [options] compare options:\n *          [includeBitStringContents] true to compare bitStringContents\n *\n * @return true if the asn1 objects are equal.\n */ asn1.equals = function(obj1, obj2, options) {\n    if (forge.util.isArray(obj1)) {\n        if (!forge.util.isArray(obj2)) {\n            return false;\n        }\n        if (obj1.length !== obj2.length) {\n            return false;\n        }\n        for(var i = 0; i < obj1.length; ++i){\n            if (!asn1.equals(obj1[i], obj2[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (typeof obj1 !== typeof obj2) {\n        return false;\n    }\n    if (typeof obj1 === \"string\") {\n        return obj1 === obj2;\n    }\n    var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);\n    if (options && options.includeBitStringContents) {\n        equal = equal && obj1.bitStringContents === obj2.bitStringContents;\n    }\n    return equal;\n};\n/**\n * Gets the length of a BER-encoded ASN.1 value.\n *\n * In case the length is not specified, undefined is returned.\n *\n * @param b the BER-encoded ASN.1 byte buffer, starting with the first\n *          length byte.\n *\n * @return the length of the BER-encoded ASN.1 value or undefined.\n */ asn1.getBerValueLength = function(b) {\n    // TODO: move this function and related DER/BER functions to a der.js\n    // file; better abstract ASN.1 away from der/ber.\n    var b2 = b.getByte();\n    if (b2 === 0x80) {\n        return undefined;\n    }\n    // see if the length is \"short form\" or \"long form\" (bit 8 set)\n    var length;\n    var longForm = b2 & 0x80;\n    if (!longForm) {\n        // length is just the first byte\n        length = b2;\n    } else {\n        // the number of bytes the length is specified in bits 7 through 1\n        // and each length byte is in big-endian base-256\n        length = b.getInt((b2 & 0x7F) << 3);\n    }\n    return length;\n};\n/**\n * Check if the byte buffer has enough bytes. Throws an Error if not.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the bytes remaining in the current parsing state.\n * @param n the number of bytes the buffer must have.\n */ function _checkBufferLength(bytes, remaining, n) {\n    if (n > remaining) {\n        var error = new Error(\"Too few bytes to parse DER.\");\n        error.available = bytes.length();\n        error.remaining = remaining;\n        error.requested = n;\n        throw error;\n    }\n}\n/**\n * Gets the length of a BER-encoded ASN.1 value.\n *\n * In case the length is not specified, undefined is returned.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the bytes remaining in the current parsing state.\n *\n * @return the length of the BER-encoded ASN.1 value or undefined.\n */ var _getValueLength = function(bytes, remaining) {\n    // TODO: move this function and related DER/BER functions to a der.js\n    // file; better abstract ASN.1 away from der/ber.\n    // fromDer already checked that this byte exists\n    var b2 = bytes.getByte();\n    remaining--;\n    if (b2 === 0x80) {\n        return undefined;\n    }\n    // see if the length is \"short form\" or \"long form\" (bit 8 set)\n    var length;\n    var longForm = b2 & 0x80;\n    if (!longForm) {\n        // length is just the first byte\n        length = b2;\n    } else {\n        // the number of bytes the length is specified in bits 7 through 1\n        // and each length byte is in big-endian base-256\n        var longFormBytes = b2 & 0x7F;\n        _checkBufferLength(bytes, remaining, longFormBytes);\n        length = bytes.getInt(longFormBytes << 3);\n    }\n    // FIXME: this will only happen for 32 bit getInt with high bit set\n    if (length < 0) {\n        throw new Error(\"Negative length: \" + length);\n    }\n    return length;\n};\n/**\n * Parses an asn1 object from a byte buffer in DER format.\n *\n * @param bytes the byte buffer to parse from.\n * @param [strict] true to be strict when checking value lengths, false to\n *          allow truncated values (default: true).\n * @param [options] object with options or boolean strict flag\n *          [strict] true to be strict when checking value lengths, false to\n *            allow truncated values (default: true).\n *          [parseAllBytes] true to ensure all bytes are parsed\n *            (default: true)\n *          [decodeBitStrings] true to attempt to decode the content of\n *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that\n *            without schema support to understand the data context this can\n *            erroneously decode values that happen to be valid ASN.1. This\n *            flag will be deprecated or removed as soon as schema support is\n *            available. (default: true)\n *\n * @throws Will throw an error for various malformed input conditions.\n *\n * @return the parsed asn1 object.\n */ asn1.fromDer = function(bytes, options) {\n    if (options === undefined) {\n        options = {\n            strict: true,\n            parseAllBytes: true,\n            decodeBitStrings: true\n        };\n    }\n    if (typeof options === \"boolean\") {\n        options = {\n            strict: options,\n            parseAllBytes: true,\n            decodeBitStrings: true\n        };\n    }\n    if (!(\"strict\" in options)) {\n        options.strict = true;\n    }\n    if (!(\"parseAllBytes\" in options)) {\n        options.parseAllBytes = true;\n    }\n    if (!(\"decodeBitStrings\" in options)) {\n        options.decodeBitStrings = true;\n    }\n    // wrap in buffer if needed\n    if (typeof bytes === \"string\") {\n        bytes = forge.util.createBuffer(bytes);\n    }\n    var byteCount = bytes.length();\n    var value = _fromDer(bytes, bytes.length(), 0, options);\n    if (options.parseAllBytes && bytes.length() !== 0) {\n        var error = new Error(\"Unparsed DER bytes remain after ASN.1 parsing.\");\n        error.byteCount = byteCount;\n        error.remaining = bytes.length();\n        throw error;\n    }\n    return value;\n};\n/**\n * Internal function to parse an asn1 object from a byte buffer in DER format.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the number of bytes remaining for this chunk.\n * @param depth the current parsing depth.\n * @param options object with same options as fromDer().\n *\n * @return the parsed asn1 object.\n */ function _fromDer(bytes, remaining, depth, options) {\n    // temporary storage for consumption calculations\n    var start;\n    // minimum length for ASN.1 DER structure is 2\n    _checkBufferLength(bytes, remaining, 2);\n    // get the first byte\n    var b1 = bytes.getByte();\n    // consumed one byte\n    remaining--;\n    // get the tag class\n    var tagClass = b1 & 0xC0;\n    // get the type (bits 1-5)\n    var type = b1 & 0x1F;\n    // get the variable value length and adjust remaining bytes\n    start = bytes.length();\n    var length = _getValueLength(bytes, remaining);\n    remaining -= start - bytes.length();\n    // ensure there are enough bytes to get the value\n    if (length !== undefined && length > remaining) {\n        if (options.strict) {\n            var error = new Error(\"Too few bytes to read ASN.1 value.\");\n            error.available = bytes.length();\n            error.remaining = remaining;\n            error.requested = length;\n            throw error;\n        }\n        // Note: be lenient with truncated values and use remaining state bytes\n        length = remaining;\n    }\n    // value storage\n    var value;\n    // possible BIT STRING contents storage\n    var bitStringContents;\n    // constructed flag is bit 6 (32 = 0x20) of the first byte\n    var constructed = (b1 & 0x20) === 0x20;\n    if (constructed) {\n        // parse child asn1 objects from the value\n        value = [];\n        if (length === undefined) {\n            // asn1 object of indefinite length, read until end tag\n            for(;;){\n                _checkBufferLength(bytes, remaining, 2);\n                if (bytes.bytes(2) === String.fromCharCode(0, 0)) {\n                    bytes.getBytes(2);\n                    remaining -= 2;\n                    break;\n                }\n                start = bytes.length();\n                value.push(_fromDer(bytes, remaining, depth + 1, options));\n                remaining -= start - bytes.length();\n            }\n        } else {\n            // parsing asn1 object of definite length\n            while(length > 0){\n                start = bytes.length();\n                value.push(_fromDer(bytes, length, depth + 1, options));\n                remaining -= start - bytes.length();\n                length -= start - bytes.length();\n            }\n        }\n    }\n    // if a BIT STRING, save the contents including padding\n    if (value === undefined && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING) {\n        bitStringContents = bytes.bytes(length);\n    }\n    // determine if a non-constructed value should be decoded as a composed\n    // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)\n    // can be used this way.\n    if (value === undefined && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && // FIXME: OCTET STRINGs not yet supported here\n    // .. other parts of forge expect to decode OCTET STRINGs manually\n    type === asn1.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/  && length > 1) {\n        // save read position\n        var savedRead = bytes.read;\n        var savedRemaining = remaining;\n        var unused = 0;\n        if (type === asn1.Type.BITSTRING) {\n            /* The first octet gives the number of bits by which the length of the\n        bit string is less than the next multiple of eight (this is called\n        the \"number of unused bits\").\n\n        The second and following octets give the value of the bit string\n        converted to an octet string. */ _checkBufferLength(bytes, remaining, 1);\n            unused = bytes.getByte();\n            remaining--;\n        }\n        // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs\n        if (unused === 0) {\n            try {\n                // attempt to parse child asn1 object from the value\n                // (stored in array to signal composed value)\n                start = bytes.length();\n                var subOptions = {\n                    // enforce strict mode to avoid parsing ASN.1 from plain data\n                    strict: true,\n                    decodeBitStrings: true\n                };\n                var composed = _fromDer(bytes, remaining, depth + 1, subOptions);\n                var used = start - bytes.length();\n                remaining -= used;\n                if (type == asn1.Type.BITSTRING) {\n                    used++;\n                }\n                // if the data all decoded and the class indicates UNIVERSAL or\n                // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object\n                var tc = composed.tagClass;\n                if (used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {\n                    value = [\n                        composed\n                    ];\n                }\n            } catch (ex) {}\n        }\n        if (value === undefined) {\n            // restore read position\n            bytes.read = savedRead;\n            remaining = savedRemaining;\n        }\n    }\n    if (value === undefined) {\n        // asn1 not constructed or composed, get raw value\n        // TODO: do DER to OID conversion and vice-versa in .toDer?\n        if (length === undefined) {\n            if (options.strict) {\n                throw new Error(\"Non-constructed ASN.1 object of indefinite length.\");\n            }\n            // be lenient and use remaining state bytes\n            length = remaining;\n        }\n        if (type === asn1.Type.BMPSTRING) {\n            value = \"\";\n            for(; length > 0; length -= 2){\n                _checkBufferLength(bytes, remaining, 2);\n                value += String.fromCharCode(bytes.getInt16());\n                remaining -= 2;\n            }\n        } else {\n            value = bytes.getBytes(length);\n            remaining -= length;\n        }\n    }\n    // add BIT STRING contents if available\n    var asn1Options = bitStringContents === undefined ? null : {\n        bitStringContents: bitStringContents\n    };\n    // create and return asn1 object\n    return asn1.create(tagClass, type, constructed, value, asn1Options);\n}\n/**\n * Converts the given asn1 object to a buffer of bytes in DER format.\n *\n * @param asn1 the asn1 object to convert to bytes.\n *\n * @return the buffer of bytes.\n */ asn1.toDer = function(obj) {\n    var bytes = forge.util.createBuffer();\n    // build the first byte\n    var b1 = obj.tagClass | obj.type;\n    // for storing the ASN.1 value\n    var value = forge.util.createBuffer();\n    // use BIT STRING contents if available and data not changed\n    var useBitStringContents = false;\n    if (\"bitStringContents\" in obj) {\n        useBitStringContents = true;\n        if (obj.original) {\n            useBitStringContents = asn1.equals(obj, obj.original);\n        }\n    }\n    if (useBitStringContents) {\n        value.putBytes(obj.bitStringContents);\n    } else if (obj.composed) {\n        // if composed, use each child asn1 object's DER bytes as value\n        // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed\n        // from other asn1 objects\n        if (obj.constructed) {\n            b1 |= 0x20;\n        } else {\n            // type is a bit string, add unused bits of 0x00\n            value.putByte(0x00);\n        }\n        // add all of the child DER bytes together\n        for(var i = 0; i < obj.value.length; ++i){\n            if (obj.value[i] !== undefined) {\n                value.putBuffer(asn1.toDer(obj.value[i]));\n            }\n        }\n    } else {\n        // use asn1.value directly\n        if (obj.type === asn1.Type.BMPSTRING) {\n            for(var i = 0; i < obj.value.length; ++i){\n                value.putInt16(obj.value.charCodeAt(i));\n            }\n        } else {\n            // ensure integer is minimally-encoded\n            // TODO: should all leading bytes be stripped vs just one?\n            // .. ex '00 00 01' => '01'?\n            if (obj.type === asn1.Type.INTEGER && obj.value.length > 1 && // leading 0x00 for positive integer\n            (obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 0x80) === 0 || // leading 0xFF for negative integer\n            obj.value.charCodeAt(0) === 0xFF && (obj.value.charCodeAt(1) & 0x80) === 0x80)) {\n                value.putBytes(obj.value.substr(1));\n            } else {\n                value.putBytes(obj.value);\n            }\n        }\n    }\n    // add tag byte\n    bytes.putByte(b1);\n    // use \"short form\" encoding\n    if (value.length() <= 127) {\n        // one byte describes the length\n        // bit 8 = 0 and bits 7-1 = length\n        bytes.putByte(value.length() & 0x7F);\n    } else {\n        // use \"long form\" encoding\n        // 2 to 127 bytes describe the length\n        // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes\n        // other bytes: length in base 256, big-endian\n        var len = value.length();\n        var lenBytes = \"\";\n        do {\n            lenBytes += String.fromCharCode(len & 0xFF);\n            len = len >>> 8;\n        }while (len > 0);\n        // set first byte to # bytes used to store the length and turn on\n        // bit 8 to indicate long-form length is used\n        bytes.putByte(lenBytes.length | 0x80);\n        // concatenate length bytes in reverse since they were generated\n        // little endian and we need big endian\n        for(var i = lenBytes.length - 1; i >= 0; --i){\n            bytes.putByte(lenBytes.charCodeAt(i));\n        }\n    }\n    // concatenate value bytes\n    bytes.putBuffer(value);\n    return bytes;\n};\n/**\n * Converts an OID dot-separated string to a byte buffer. The byte buffer\n * contains only the DER-encoded value, not any tag or length bytes.\n *\n * @param oid the OID dot-separated string.\n *\n * @return the byte buffer.\n */ asn1.oidToDer = function(oid) {\n    // split OID into individual values\n    var values = oid.split(\".\");\n    var bytes = forge.util.createBuffer();\n    // first byte is 40 * value1 + value2\n    bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));\n    // other bytes are each value in base 128 with 8th bit set except for\n    // the last byte for each value\n    var last, valueBytes, value, b;\n    for(var i = 2; i < values.length; ++i){\n        // produce value bytes in reverse because we don't know how many\n        // bytes it will take to store the value\n        last = true;\n        valueBytes = [];\n        value = parseInt(values[i], 10);\n        do {\n            b = value & 0x7F;\n            value = value >>> 7;\n            // if value is not last, then turn on 8th bit\n            if (!last) {\n                b |= 0x80;\n            }\n            valueBytes.push(b);\n            last = false;\n        }while (value > 0);\n        // add value bytes in reverse (needs to be in big endian)\n        for(var n = valueBytes.length - 1; n >= 0; --n){\n            bytes.putByte(valueBytes[n]);\n        }\n    }\n    return bytes;\n};\n/**\n * Converts a DER-encoded byte buffer to an OID dot-separated string. The\n * byte buffer should contain only the DER-encoded value, not any tag or\n * length bytes.\n *\n * @param bytes the byte buffer.\n *\n * @return the OID dot-separated string.\n */ asn1.derToOid = function(bytes) {\n    var oid;\n    // wrap in buffer if needed\n    if (typeof bytes === \"string\") {\n        bytes = forge.util.createBuffer(bytes);\n    }\n    // first byte is 40 * value1 + value2\n    var b = bytes.getByte();\n    oid = Math.floor(b / 40) + \".\" + b % 40;\n    // other bytes are each value in base 128 with 8th bit set except for\n    // the last byte for each value\n    var value = 0;\n    while(bytes.length() > 0){\n        b = bytes.getByte();\n        value = value << 7;\n        // not the last byte for the value\n        if (b & 0x80) {\n            value += b & 0x7F;\n        } else {\n            // last byte\n            oid += \".\" + (value + b);\n            value = 0;\n        }\n    }\n    return oid;\n};\n/**\n * Converts a UTCTime value to a date.\n *\n * Note: GeneralizedTime has 4 digits for the year and is used for X.509\n * dates past 2049. Parsing that structure hasn't been implemented yet.\n *\n * @param utc the UTCTime value to convert.\n *\n * @return the date.\n */ asn1.utcTimeToDate = function(utc) {\n    /* The following formats can be used:\n\n    YYMMDDhhmmZ\n    YYMMDDhhmm+hh'mm'\n    YYMMDDhhmm-hh'mm'\n    YYMMDDhhmmssZ\n    YYMMDDhhmmss+hh'mm'\n    YYMMDDhhmmss-hh'mm'\n\n    Where:\n\n    YY is the least significant two digits of the year\n    MM is the month (01 to 12)\n    DD is the day (01 to 31)\n    hh is the hour (00 to 23)\n    mm are the minutes (00 to 59)\n    ss are the seconds (00 to 59)\n    Z indicates that local time is GMT, + indicates that local time is\n    later than GMT, and - indicates that local time is earlier than GMT\n    hh' is the absolute value of the offset from GMT in hours\n    mm' is the absolute value of the offset from GMT in minutes */ var date = new Date();\n    // if YY >= 50 use 19xx, if YY < 50 use 20xx\n    var year = parseInt(utc.substr(0, 2), 10);\n    year = year >= 50 ? 1900 + year : 2000 + year;\n    var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month\n    var DD = parseInt(utc.substr(4, 2), 10);\n    var hh = parseInt(utc.substr(6, 2), 10);\n    var mm = parseInt(utc.substr(8, 2), 10);\n    var ss = 0;\n    // not just YYMMDDhhmmZ\n    if (utc.length > 11) {\n        // get character after minutes\n        var c = utc.charAt(10);\n        var end = 10;\n        // see if seconds are present\n        if (c !== \"+\" && c !== \"-\") {\n            // get seconds\n            ss = parseInt(utc.substr(10, 2), 10);\n            end += 2;\n        }\n    }\n    // update date\n    date.setUTCFullYear(year, MM, DD);\n    date.setUTCHours(hh, mm, ss, 0);\n    if (end) {\n        // get +/- after end of time\n        c = utc.charAt(end);\n        if (c === \"+\" || c === \"-\") {\n            // get hours+minutes offset\n            var hhoffset = parseInt(utc.substr(end + 1, 2), 10);\n            var mmoffset = parseInt(utc.substr(end + 4, 2), 10);\n            // calculate offset in milliseconds\n            var offset = hhoffset * 60 + mmoffset;\n            offset *= 60000;\n            // apply offset\n            if (c === \"+\") {\n                date.setTime(+date - offset);\n            } else {\n                date.setTime(+date + offset);\n            }\n        }\n    }\n    return date;\n};\n/**\n * Converts a GeneralizedTime value to a date.\n *\n * @param gentime the GeneralizedTime value to convert.\n *\n * @return the date.\n */ asn1.generalizedTimeToDate = function(gentime) {\n    /* The following formats can be used:\n\n    YYYYMMDDHHMMSS\n    YYYYMMDDHHMMSS.fff\n    YYYYMMDDHHMMSSZ\n    YYYYMMDDHHMMSS.fffZ\n    YYYYMMDDHHMMSS+hh'mm'\n    YYYYMMDDHHMMSS.fff+hh'mm'\n    YYYYMMDDHHMMSS-hh'mm'\n    YYYYMMDDHHMMSS.fff-hh'mm'\n\n    Where:\n\n    YYYY is the year\n    MM is the month (01 to 12)\n    DD is the day (01 to 31)\n    hh is the hour (00 to 23)\n    mm are the minutes (00 to 59)\n    ss are the seconds (00 to 59)\n    .fff is the second fraction, accurate to three decimal places\n    Z indicates that local time is GMT, + indicates that local time is\n    later than GMT, and - indicates that local time is earlier than GMT\n    hh' is the absolute value of the offset from GMT in hours\n    mm' is the absolute value of the offset from GMT in minutes */ var date = new Date();\n    var YYYY = parseInt(gentime.substr(0, 4), 10);\n    var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month\n    var DD = parseInt(gentime.substr(6, 2), 10);\n    var hh = parseInt(gentime.substr(8, 2), 10);\n    var mm = parseInt(gentime.substr(10, 2), 10);\n    var ss = parseInt(gentime.substr(12, 2), 10);\n    var fff = 0;\n    var offset = 0;\n    var isUTC = false;\n    if (gentime.charAt(gentime.length - 1) === \"Z\") {\n        isUTC = true;\n    }\n    var end = gentime.length - 5, c = gentime.charAt(end);\n    if (c === \"+\" || c === \"-\") {\n        // get hours+minutes offset\n        var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);\n        var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);\n        // calculate offset in milliseconds\n        offset = hhoffset * 60 + mmoffset;\n        offset *= 60000;\n        // apply offset\n        if (c === \"+\") {\n            offset *= -1;\n        }\n        isUTC = true;\n    }\n    // check for second fraction\n    if (gentime.charAt(14) === \".\") {\n        fff = parseFloat(gentime.substr(14), 10) * 1000;\n    }\n    if (isUTC) {\n        date.setUTCFullYear(YYYY, MM, DD);\n        date.setUTCHours(hh, mm, ss, fff);\n        // apply offset\n        date.setTime(+date + offset);\n    } else {\n        date.setFullYear(YYYY, MM, DD);\n        date.setHours(hh, mm, ss, fff);\n    }\n    return date;\n};\n/**\n * Converts a date to a UTCTime value.\n *\n * Note: GeneralizedTime has 4 digits for the year and is used for X.509\n * dates past 2049. Converting to a GeneralizedTime hasn't been\n * implemented yet.\n *\n * @param date the date to convert.\n *\n * @return the UTCTime value.\n */ asn1.dateToUtcTime = function(date) {\n    // TODO: validate; currently assumes proper format\n    if (typeof date === \"string\") {\n        return date;\n    }\n    var rval = \"\";\n    // create format YYMMDDhhmmssZ\n    var format = [];\n    format.push((\"\" + date.getUTCFullYear()).substr(2));\n    format.push(\"\" + (date.getUTCMonth() + 1));\n    format.push(\"\" + date.getUTCDate());\n    format.push(\"\" + date.getUTCHours());\n    format.push(\"\" + date.getUTCMinutes());\n    format.push(\"\" + date.getUTCSeconds());\n    // ensure 2 digits are used for each format entry\n    for(var i = 0; i < format.length; ++i){\n        if (format[i].length < 2) {\n            rval += \"0\";\n        }\n        rval += format[i];\n    }\n    rval += \"Z\";\n    return rval;\n};\n/**\n * Converts a date to a GeneralizedTime value.\n *\n * @param date the date to convert.\n *\n * @return the GeneralizedTime value as a string.\n */ asn1.dateToGeneralizedTime = function(date) {\n    // TODO: validate; currently assumes proper format\n    if (typeof date === \"string\") {\n        return date;\n    }\n    var rval = \"\";\n    // create format YYYYMMDDHHMMSSZ\n    var format = [];\n    format.push(\"\" + date.getUTCFullYear());\n    format.push(\"\" + (date.getUTCMonth() + 1));\n    format.push(\"\" + date.getUTCDate());\n    format.push(\"\" + date.getUTCHours());\n    format.push(\"\" + date.getUTCMinutes());\n    format.push(\"\" + date.getUTCSeconds());\n    // ensure 2 digits are used for each format entry\n    for(var i = 0; i < format.length; ++i){\n        if (format[i].length < 2) {\n            rval += \"0\";\n        }\n        rval += format[i];\n    }\n    rval += \"Z\";\n    return rval;\n};\n/**\n * Converts a javascript integer to a DER-encoded byte buffer to be used\n * as the value for an INTEGER type.\n *\n * @param x the integer.\n *\n * @return the byte buffer.\n */ asn1.integerToDer = function(x) {\n    var rval = forge.util.createBuffer();\n    if (x >= -0x80 && x < 0x80) {\n        return rval.putSignedInt(x, 8);\n    }\n    if (x >= -0x8000 && x < 0x8000) {\n        return rval.putSignedInt(x, 16);\n    }\n    if (x >= -0x800000 && x < 0x800000) {\n        return rval.putSignedInt(x, 24);\n    }\n    if (x >= -0x80000000 && x < 0x80000000) {\n        return rval.putSignedInt(x, 32);\n    }\n    var error = new Error(\"Integer too large; max is 32-bits.\");\n    error.integer = x;\n    throw error;\n};\n/**\n * Converts a DER-encoded byte buffer to a javascript integer. This is\n * typically used to decode the value of an INTEGER type.\n *\n * @param bytes the byte buffer.\n *\n * @return the integer.\n */ asn1.derToInteger = function(bytes) {\n    // wrap in buffer if needed\n    if (typeof bytes === \"string\") {\n        bytes = forge.util.createBuffer(bytes);\n    }\n    var n = bytes.length() * 8;\n    if (n > 32) {\n        throw new Error(\"Integer too large; max is 32-bits.\");\n    }\n    return bytes.getSignedInt(n);\n};\n/**\n * Validates that the given ASN.1 object is at least a super set of the\n * given ASN.1 structure. Only tag classes and types are checked. An\n * optional map may also be provided to capture ASN.1 values while the\n * structure is checked.\n *\n * To capture an ASN.1 value, set an object in the validator's 'capture'\n * parameter to the key to use in the capture map. To capture the full\n * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including\n * the leading unused bits counter byte, specify 'captureBitStringContents'.\n * To capture BIT STRING bytes, without the leading unused bits counter byte,\n * specify 'captureBitStringValue'.\n *\n * Objects in the validator may set a field 'optional' to true to indicate\n * that it isn't necessary to pass validation.\n *\n * @param obj the ASN.1 object to validate.\n * @param v the ASN.1 structure validator.\n * @param capture an optional map to capture values in.\n * @param errors an optional array for storing validation errors.\n *\n * @return true on success, false on failure.\n */ asn1.validate = function(obj, v, capture, errors) {\n    var rval = false;\n    // ensure tag class and type are the same if specified\n    if ((obj.tagClass === v.tagClass || typeof v.tagClass === \"undefined\") && (obj.type === v.type || typeof v.type === \"undefined\")) {\n        // ensure constructed flag is the same if specified\n        if (obj.constructed === v.constructed || typeof v.constructed === \"undefined\") {\n            rval = true;\n            // handle sub values\n            if (v.value && forge.util.isArray(v.value)) {\n                var j = 0;\n                for(var i = 0; rval && i < v.value.length; ++i){\n                    rval = v.value[i].optional || false;\n                    if (obj.value[j]) {\n                        rval = asn1.validate(obj.value[j], v.value[i], capture, errors);\n                        if (rval) {\n                            ++j;\n                        } else if (v.value[i].optional) {\n                            rval = true;\n                        }\n                    }\n                    if (!rval && errors) {\n                        errors.push(\"[\" + v.name + \"] \" + 'Tag class \"' + v.tagClass + '\", type \"' + v.type + '\" expected value length \"' + v.value.length + '\", got \"' + obj.value.length + '\"');\n                    }\n                }\n            }\n            if (rval && capture) {\n                if (v.capture) {\n                    capture[v.capture] = obj.value;\n                }\n                if (v.captureAsn1) {\n                    capture[v.captureAsn1] = obj;\n                }\n                if (v.captureBitStringContents && \"bitStringContents\" in obj) {\n                    capture[v.captureBitStringContents] = obj.bitStringContents;\n                }\n                if (v.captureBitStringValue && \"bitStringContents\" in obj) {\n                    var value;\n                    if (obj.bitStringContents.length < 2) {\n                        capture[v.captureBitStringValue] = \"\";\n                    } else {\n                        // FIXME: support unused bits with data shifting\n                        var unused = obj.bitStringContents.charCodeAt(0);\n                        if (unused !== 0) {\n                            throw new Error(\"captureBitStringValue only supported for zero unused bits\");\n                        }\n                        capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);\n                    }\n                }\n            }\n        } else if (errors) {\n            errors.push(\"[\" + v.name + \"] \" + 'Expected constructed \"' + v.constructed + '\", got \"' + obj.constructed + '\"');\n        }\n    } else if (errors) {\n        if (obj.tagClass !== v.tagClass) {\n            errors.push(\"[\" + v.name + \"] \" + 'Expected tag class \"' + v.tagClass + '\", got \"' + obj.tagClass + '\"');\n        }\n        if (obj.type !== v.type) {\n            errors.push(\"[\" + v.name + \"] \" + 'Expected type \"' + v.type + '\", got \"' + obj.type + '\"');\n        }\n    }\n    return rval;\n};\n// regex for testing for non-latin characters\nvar _nonLatinRegex = /[^\\\\u0000-\\\\u00ff]/;\n/**\n * Pretty prints an ASN.1 object to a string.\n *\n * @param obj the object to write out.\n * @param level the level in the tree.\n * @param indentation the indentation to use.\n *\n * @return the string.\n */ asn1.prettyPrint = function(obj, level, indentation) {\n    var rval = \"\";\n    // set default level and indentation\n    level = level || 0;\n    indentation = indentation || 2;\n    // start new line for deep levels\n    if (level > 0) {\n        rval += \"\\n\";\n    }\n    // create indent\n    var indent = \"\";\n    for(var i = 0; i < level * indentation; ++i){\n        indent += \" \";\n    }\n    // print class:type\n    rval += indent + \"Tag: \";\n    switch(obj.tagClass){\n        case asn1.Class.UNIVERSAL:\n            rval += \"Universal:\";\n            break;\n        case asn1.Class.APPLICATION:\n            rval += \"Application:\";\n            break;\n        case asn1.Class.CONTEXT_SPECIFIC:\n            rval += \"Context-Specific:\";\n            break;\n        case asn1.Class.PRIVATE:\n            rval += \"Private:\";\n            break;\n    }\n    if (obj.tagClass === asn1.Class.UNIVERSAL) {\n        rval += obj.type;\n        // known types\n        switch(obj.type){\n            case asn1.Type.NONE:\n                rval += \" (None)\";\n                break;\n            case asn1.Type.BOOLEAN:\n                rval += \" (Boolean)\";\n                break;\n            case asn1.Type.INTEGER:\n                rval += \" (Integer)\";\n                break;\n            case asn1.Type.BITSTRING:\n                rval += \" (Bit string)\";\n                break;\n            case asn1.Type.OCTETSTRING:\n                rval += \" (Octet string)\";\n                break;\n            case asn1.Type.NULL:\n                rval += \" (Null)\";\n                break;\n            case asn1.Type.OID:\n                rval += \" (Object Identifier)\";\n                break;\n            case asn1.Type.ODESC:\n                rval += \" (Object Descriptor)\";\n                break;\n            case asn1.Type.EXTERNAL:\n                rval += \" (External or Instance of)\";\n                break;\n            case asn1.Type.REAL:\n                rval += \" (Real)\";\n                break;\n            case asn1.Type.ENUMERATED:\n                rval += \" (Enumerated)\";\n                break;\n            case asn1.Type.EMBEDDED:\n                rval += \" (Embedded PDV)\";\n                break;\n            case asn1.Type.UTF8:\n                rval += \" (UTF8)\";\n                break;\n            case asn1.Type.ROID:\n                rval += \" (Relative Object Identifier)\";\n                break;\n            case asn1.Type.SEQUENCE:\n                rval += \" (Sequence)\";\n                break;\n            case asn1.Type.SET:\n                rval += \" (Set)\";\n                break;\n            case asn1.Type.PRINTABLESTRING:\n                rval += \" (Printable String)\";\n                break;\n            case asn1.Type.IA5String:\n                rval += \" (IA5String (ASCII))\";\n                break;\n            case asn1.Type.UTCTIME:\n                rval += \" (UTC time)\";\n                break;\n            case asn1.Type.GENERALIZEDTIME:\n                rval += \" (Generalized time)\";\n                break;\n            case asn1.Type.BMPSTRING:\n                rval += \" (BMP String)\";\n                break;\n        }\n    } else {\n        rval += obj.type;\n    }\n    rval += \"\\n\";\n    rval += indent + \"Constructed: \" + obj.constructed + \"\\n\";\n    if (obj.composed) {\n        var subvalues = 0;\n        var sub = \"\";\n        for(var i = 0; i < obj.value.length; ++i){\n            if (obj.value[i] !== undefined) {\n                subvalues += 1;\n                sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);\n                if (i + 1 < obj.value.length) {\n                    sub += \",\";\n                }\n            }\n        }\n        rval += indent + \"Sub values: \" + subvalues + sub;\n    } else {\n        rval += indent + \"Value: \";\n        if (obj.type === asn1.Type.OID) {\n            var oid = asn1.derToOid(obj.value);\n            rval += oid;\n            if (forge.pki && forge.pki.oids) {\n                if (oid in forge.pki.oids) {\n                    rval += \" (\" + forge.pki.oids[oid] + \") \";\n                }\n            }\n        }\n        if (obj.type === asn1.Type.INTEGER) {\n            try {\n                rval += asn1.derToInteger(obj.value);\n            } catch (ex) {\n                rval += \"0x\" + forge.util.bytesToHex(obj.value);\n            }\n        } else if (obj.type === asn1.Type.BITSTRING) {\n            // TODO: shift bits as needed to display without padding\n            if (obj.value.length > 1) {\n                // remove unused bits field\n                rval += \"0x\" + forge.util.bytesToHex(obj.value.slice(1));\n            } else {\n                rval += \"(none)\";\n            }\n            // show unused bit count\n            if (obj.value.length > 0) {\n                var unused = obj.value.charCodeAt(0);\n                if (unused == 1) {\n                    rval += \" (1 unused bit shown)\";\n                } else if (unused > 1) {\n                    rval += \" (\" + unused + \" unused bits shown)\";\n                }\n            }\n        } else if (obj.type === asn1.Type.OCTETSTRING) {\n            if (!_nonLatinRegex.test(obj.value)) {\n                rval += \"(\" + obj.value + \") \";\n            }\n            rval += \"0x\" + forge.util.bytesToHex(obj.value);\n        } else if (obj.type === asn1.Type.UTF8) {\n            try {\n                rval += forge.util.decodeUtf8(obj.value);\n            } catch (e) {\n                if (e.message === \"URI malformed\") {\n                    rval += \"0x\" + forge.util.bytesToHex(obj.value) + \" (malformed UTF8)\";\n                } else {\n                    throw e;\n                }\n            }\n        } else if (obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String) {\n            rval += obj.value;\n        } else if (_nonLatinRegex.test(obj.value)) {\n            rval += \"0x\" + forge.util.bytesToHex(obj.value);\n        } else if (obj.value.length === 0) {\n            rval += \"[null]\";\n        } else {\n            rval += obj.value;\n        }\n    }\n    return rval;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/asn1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/baseN.js":
/*!**********************************************!*\
  !*** ./node_modules/node-forge/lib/baseN.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */ \nvar api = {};\nmodule.exports = api;\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */ api.encode = function(input, alphabet, maxline) {\n    if (typeof alphabet !== \"string\") {\n        throw new TypeError('\"alphabet\" must be a string.');\n    }\n    if (maxline !== undefined && typeof maxline !== \"number\") {\n        throw new TypeError('\"maxline\" must be a number.');\n    }\n    var output = \"\";\n    if (!(input instanceof Uint8Array)) {\n        // assume forge byte buffer\n        output = _encodeWithByteBuffer(input, alphabet);\n    } else {\n        var i = 0;\n        var base = alphabet.length;\n        var first = alphabet.charAt(0);\n        var digits = [\n            0\n        ];\n        for(i = 0; i < input.length; ++i){\n            for(var j = 0, carry = input[i]; j < digits.length; ++j){\n                carry += digits[j] << 8;\n                digits[j] = carry % base;\n                carry = carry / base | 0;\n            }\n            while(carry > 0){\n                digits.push(carry % base);\n                carry = carry / base | 0;\n            }\n        }\n        // deal with leading zeros\n        for(i = 0; input[i] === 0 && i < input.length - 1; ++i){\n            output += first;\n        }\n        // convert digits to a string\n        for(i = digits.length - 1; i >= 0; --i){\n            output += alphabet[digits[i]];\n        }\n    }\n    if (maxline) {\n        var regex = new RegExp(\".{1,\" + maxline + \"}\", \"g\");\n        output = output.match(regex).join(\"\\r\\n\");\n    }\n    return output;\n};\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */ api.decode = function(input, alphabet) {\n    if (typeof input !== \"string\") {\n        throw new TypeError('\"input\" must be a string.');\n    }\n    if (typeof alphabet !== \"string\") {\n        throw new TypeError('\"alphabet\" must be a string.');\n    }\n    var table = _reverseAlphabets[alphabet];\n    if (!table) {\n        // compute reverse alphabet\n        table = _reverseAlphabets[alphabet] = [];\n        for(var i = 0; i < alphabet.length; ++i){\n            table[alphabet.charCodeAt(i)] = i;\n        }\n    }\n    // remove whitespace characters\n    input = input.replace(/\\s/g, \"\");\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var bytes = [\n        0\n    ];\n    for(var i = 0; i < input.length; i++){\n        var value = table[input.charCodeAt(i)];\n        if (value === undefined) {\n            return;\n        }\n        for(var j = 0, carry = value; j < bytes.length; ++j){\n            carry += bytes[j] * base;\n            bytes[j] = carry & 0xff;\n            carry >>= 8;\n        }\n        while(carry > 0){\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n    // deal with leading zeros\n    for(var k = 0; input[k] === first && k < input.length - 1; ++k){\n        bytes.push(0);\n    }\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(bytes.reverse());\n    }\n    return new Uint8Array(bytes.reverse());\n};\nfunction _encodeWithByteBuffer(input, alphabet) {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [\n        0\n    ];\n    for(i = 0; i < input.length(); ++i){\n        for(var j = 0, carry = input.at(i); j < digits.length; ++j){\n            carry += digits[j] << 8;\n            digits[j] = carry % base;\n            carry = carry / base | 0;\n        }\n        while(carry > 0){\n            digits.push(carry % base);\n            carry = carry / base | 0;\n        }\n    }\n    var output = \"\";\n    // deal with leading zeros\n    for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i){\n        output += first;\n    }\n    // convert digits to a string\n    for(i = digits.length - 1; i >= 0; --i){\n        output += alphabet[digits[i]];\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/baseN.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/cipher.js":
/*!***********************************************!*\
  !*** ./node_modules/node-forge/lib/cipher.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Cipher base API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nmodule.exports = forge.cipher = forge.cipher || {};\n// registered algorithms\nforge.cipher.algorithms = forge.cipher.algorithms || {};\n/**\n * Creates a cipher object that can be used to encrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */ forge.cipher.createCipher = function(algorithm, key) {\n    var api = algorithm;\n    if (typeof api === \"string\") {\n        api = forge.cipher.getAlgorithm(api);\n        if (api) {\n            api = api();\n        }\n    }\n    if (!api) {\n        throw new Error(\"Unsupported algorithm: \" + algorithm);\n    }\n    // assume block cipher\n    return new forge.cipher.BlockCipher({\n        algorithm: api,\n        key: key,\n        decrypt: false\n    });\n};\n/**\n * Creates a decipher object that can be used to decrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */ forge.cipher.createDecipher = function(algorithm, key) {\n    var api = algorithm;\n    if (typeof api === \"string\") {\n        api = forge.cipher.getAlgorithm(api);\n        if (api) {\n            api = api();\n        }\n    }\n    if (!api) {\n        throw new Error(\"Unsupported algorithm: \" + algorithm);\n    }\n    // assume block cipher\n    return new forge.cipher.BlockCipher({\n        algorithm: api,\n        key: key,\n        decrypt: true\n    });\n};\n/**\n * Registers an algorithm by name. If the name was already registered, the\n * algorithm API object will be overwritten.\n *\n * @param name the name of the algorithm.\n * @param algorithm the algorithm API object.\n */ forge.cipher.registerAlgorithm = function(name, algorithm) {\n    name = name.toUpperCase();\n    forge.cipher.algorithms[name] = algorithm;\n};\n/**\n * Gets a registered algorithm by name.\n *\n * @param name the name of the algorithm.\n *\n * @return the algorithm, if found, null if not.\n */ forge.cipher.getAlgorithm = function(name) {\n    name = name.toUpperCase();\n    if (name in forge.cipher.algorithms) {\n        return forge.cipher.algorithms[name];\n    }\n    return null;\n};\nvar BlockCipher = forge.cipher.BlockCipher = function(options) {\n    this.algorithm = options.algorithm;\n    this.mode = this.algorithm.mode;\n    this.blockSize = this.mode.blockSize;\n    this._finish = false;\n    this._input = null;\n    this.output = null;\n    this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;\n    this._decrypt = options.decrypt;\n    this.algorithm.initialize(options);\n};\n/**\n * Starts or restarts the encryption or decryption process, whichever\n * was previously configured.\n *\n * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array\n * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in\n * bytes, then it must be Nb (16) bytes in length. If the IV is given in as\n * 32-bit integers, then it must be 4 integers long.\n *\n * Note: an IV is not required or used in ECB mode.\n *\n * For GCM-mode, the IV must be given as a binary-encoded string of bytes or\n * a byte buffer. The number of bytes should be 12 (96 bits) as recommended\n * by NIST SP-800-38D but another length may be given.\n *\n * @param options the options to use:\n *          iv the initialization vector to use as a binary-encoded string of\n *            bytes, null to reuse the last ciphered block from a previous\n *            update() (this \"residue\" method is for legacy support only).\n *          additionalData additional authentication data as a binary-encoded\n *            string of bytes, for 'GCM' mode, (default: none).\n *          tagLength desired length of authentication tag, in bits, for\n *            'GCM' mode (0-128, default: 128).\n *          tag the authentication tag to check if decrypting, as a\n *             binary-encoded string of bytes.\n *          output the output the buffer to write to, null to create one.\n */ BlockCipher.prototype.start = function(options) {\n    options = options || {};\n    var opts = {};\n    for(var key in options){\n        opts[key] = options[key];\n    }\n    opts.decrypt = this._decrypt;\n    this._finish = false;\n    this._input = forge.util.createBuffer();\n    this.output = options.output || forge.util.createBuffer();\n    this.mode.start(opts);\n};\n/**\n * Updates the next block according to the cipher mode.\n *\n * @param input the buffer to read from.\n */ BlockCipher.prototype.update = function(input) {\n    if (input) {\n        // input given, so empty it into the input buffer\n        this._input.putBuffer(input);\n    }\n    // do cipher operation until it needs more input and not finished\n    while(!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish){}\n    // free consumed memory from input buffer\n    this._input.compact();\n};\n/**\n * Finishes encrypting or decrypting.\n *\n * @param pad a padding function to use in CBC mode, null for default,\n *          signature(blockSize, buffer, decrypt).\n *\n * @return true if successful, false on error.\n */ BlockCipher.prototype.finish = function(pad) {\n    // backwards-compatibility w/deprecated padding API\n    // Note: will overwrite padding functions even after another start() call\n    if (pad && (this.mode.name === \"ECB\" || this.mode.name === \"CBC\")) {\n        this.mode.pad = function(input) {\n            return pad(this.blockSize, input, false);\n        };\n        this.mode.unpad = function(output) {\n            return pad(this.blockSize, output, true);\n        };\n    }\n    // build options for padding and afterFinish functions\n    var options = {};\n    options.decrypt = this._decrypt;\n    // get # of bytes that won't fill a block\n    options.overflow = this._input.length() % this.blockSize;\n    if (!this._decrypt && this.mode.pad) {\n        if (!this.mode.pad(this._input, options)) {\n            return false;\n        }\n    }\n    // do final update\n    this._finish = true;\n    this.update();\n    if (this._decrypt && this.mode.unpad) {\n        if (!this.mode.unpad(this.output, options)) {\n            return false;\n        }\n    }\n    if (this.mode.afterFinish) {\n        if (!this.mode.afterFinish(this.output, options)) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/cipher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/cipherModes.js":
/*!****************************************************!*\
  !*** ./node_modules/node-forge/lib/cipherModes.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Supported cipher modes.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nforge.cipher = forge.cipher || {};\n// supported cipher modes\nvar modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};\n/** Electronic codebook (ECB) (Don't use this; it's not secure) **/ modes.ecb = function(options) {\n    options = options || {};\n    this.name = \"ECB\";\n    this.cipher = options.cipher;\n    this.blockSize = options.blockSize || 16;\n    this._ints = this.blockSize / 4;\n    this._inBlock = new Array(this._ints);\n    this._outBlock = new Array(this._ints);\n};\nmodes.ecb.prototype.start = function(options) {};\nmodes.ecb.prototype.encrypt = function(input, output, finish) {\n    // not enough input to encrypt\n    if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n    }\n    // get next block\n    for(var i = 0; i < this._ints; ++i){\n        this._inBlock[i] = input.getInt32();\n    }\n    // encrypt block\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // write output\n    for(var i = 0; i < this._ints; ++i){\n        output.putInt32(this._outBlock[i]);\n    }\n};\nmodes.ecb.prototype.decrypt = function(input, output, finish) {\n    // not enough input to decrypt\n    if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n    }\n    // get next block\n    for(var i = 0; i < this._ints; ++i){\n        this._inBlock[i] = input.getInt32();\n    }\n    // decrypt block\n    this.cipher.decrypt(this._inBlock, this._outBlock);\n    // write output\n    for(var i = 0; i < this._ints; ++i){\n        output.putInt32(this._outBlock[i]);\n    }\n};\nmodes.ecb.prototype.pad = function(input, options) {\n    // add PKCS#7 padding to block (each pad byte is the\n    // value of the number of pad bytes)\n    var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();\n    input.fillWithByte(padding, padding);\n    return true;\n};\nmodes.ecb.prototype.unpad = function(output, options) {\n    // check for error: input data not a multiple of blockSize\n    if (options.overflow > 0) {\n        return false;\n    }\n    // ensure padding byte count is valid\n    var len = output.length();\n    var count = output.at(len - 1);\n    if (count > this.blockSize << 2) {\n        return false;\n    }\n    // trim off padding bytes\n    output.truncate(count);\n    return true;\n};\n/** Cipher-block Chaining (CBC) **/ modes.cbc = function(options) {\n    options = options || {};\n    this.name = \"CBC\";\n    this.cipher = options.cipher;\n    this.blockSize = options.blockSize || 16;\n    this._ints = this.blockSize / 4;\n    this._inBlock = new Array(this._ints);\n    this._outBlock = new Array(this._ints);\n};\nmodes.cbc.prototype.start = function(options) {\n    // Note: legacy support for using IV residue (has security flaws)\n    // if IV is null, reuse block from previous processing\n    if (options.iv === null) {\n        // must have a previous block\n        if (!this._prev) {\n            throw new Error(\"Invalid IV parameter.\");\n        }\n        this._iv = this._prev.slice(0);\n    } else if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n    } else {\n        // save IV as \"previous\" block\n        this._iv = transformIV(options.iv, this.blockSize);\n        this._prev = this._iv.slice(0);\n    }\n};\nmodes.cbc.prototype.encrypt = function(input, output, finish) {\n    // not enough input to encrypt\n    if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n    }\n    // get next block\n    // CBC XOR's IV (or previous block) with plaintext\n    for(var i = 0; i < this._ints; ++i){\n        this._inBlock[i] = this._prev[i] ^ input.getInt32();\n    }\n    // encrypt block\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // write output, save previous block\n    for(var i = 0; i < this._ints; ++i){\n        output.putInt32(this._outBlock[i]);\n    }\n    this._prev = this._outBlock;\n};\nmodes.cbc.prototype.decrypt = function(input, output, finish) {\n    // not enough input to decrypt\n    if (input.length() < this.blockSize && !(finish && input.length() > 0)) {\n        return true;\n    }\n    // get next block\n    for(var i = 0; i < this._ints; ++i){\n        this._inBlock[i] = input.getInt32();\n    }\n    // decrypt block\n    this.cipher.decrypt(this._inBlock, this._outBlock);\n    // write output, save previous ciphered block\n    // CBC XOR's IV (or previous block) with ciphertext\n    for(var i = 0; i < this._ints; ++i){\n        output.putInt32(this._prev[i] ^ this._outBlock[i]);\n    }\n    this._prev = this._inBlock.slice(0);\n};\nmodes.cbc.prototype.pad = function(input, options) {\n    // add PKCS#7 padding to block (each pad byte is the\n    // value of the number of pad bytes)\n    var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();\n    input.fillWithByte(padding, padding);\n    return true;\n};\nmodes.cbc.prototype.unpad = function(output, options) {\n    // check for error: input data not a multiple of blockSize\n    if (options.overflow > 0) {\n        return false;\n    }\n    // ensure padding byte count is valid\n    var len = output.length();\n    var count = output.at(len - 1);\n    if (count > this.blockSize << 2) {\n        return false;\n    }\n    // trim off padding bytes\n    output.truncate(count);\n    return true;\n};\n/** Cipher feedback (CFB) **/ modes.cfb = function(options) {\n    options = options || {};\n    this.name = \"CFB\";\n    this.cipher = options.cipher;\n    this.blockSize = options.blockSize || 16;\n    this._ints = this.blockSize / 4;\n    this._inBlock = null;\n    this._outBlock = new Array(this._ints);\n    this._partialBlock = new Array(this._ints);\n    this._partialOutput = forge.util.createBuffer();\n    this._partialBytes = 0;\n};\nmodes.cfb.prototype.start = function(options) {\n    if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n    }\n    // use IV as first input\n    this._iv = transformIV(options.iv, this.blockSize);\n    this._inBlock = this._iv.slice(0);\n    this._partialBytes = 0;\n};\nmodes.cfb.prototype.encrypt = function(input, output, finish) {\n    // not enough input to encrypt\n    var inputLength = input.length();\n    if (inputLength === 0) {\n        return true;\n    }\n    // encrypt block\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // handle full block\n    if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        // XOR input with output, write input as output\n        for(var i = 0; i < this._ints; ++i){\n            this._inBlock[i] = input.getInt32() ^ this._outBlock[i];\n            output.putInt32(this._inBlock[i]);\n        }\n        return;\n    }\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if (partialBytes > 0) {\n        partialBytes = this.blockSize - partialBytes;\n    }\n    // XOR input with output, write input as partial output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i){\n        this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];\n        this._partialOutput.putInt32(this._partialBlock[i]);\n    }\n    if (partialBytes > 0) {\n        // block still incomplete, restore input buffer\n        input.read -= this.blockSize;\n    } else {\n        // block complete, update input block\n        for(var i = 0; i < this._ints; ++i){\n            this._inBlock[i] = this._partialBlock[i];\n        }\n    }\n    // skip any previous partial bytes\n    if (this._partialBytes > 0) {\n        this._partialOutput.getBytes(this._partialBytes);\n    }\n    if (partialBytes > 0 && !finish) {\n        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));\n        this._partialBytes = partialBytes;\n        return true;\n    }\n    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));\n    this._partialBytes = 0;\n};\nmodes.cfb.prototype.decrypt = function(input, output, finish) {\n    // not enough input to decrypt\n    var inputLength = input.length();\n    if (inputLength === 0) {\n        return true;\n    }\n    // encrypt block (CFB always uses encryption mode)\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // handle full block\n    if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        // XOR input with output, write input as output\n        for(var i = 0; i < this._ints; ++i){\n            this._inBlock[i] = input.getInt32();\n            output.putInt32(this._inBlock[i] ^ this._outBlock[i]);\n        }\n        return;\n    }\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if (partialBytes > 0) {\n        partialBytes = this.blockSize - partialBytes;\n    }\n    // XOR input with output, write input as partial output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i){\n        this._partialBlock[i] = input.getInt32();\n        this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);\n    }\n    if (partialBytes > 0) {\n        // block still incomplete, restore input buffer\n        input.read -= this.blockSize;\n    } else {\n        // block complete, update input block\n        for(var i = 0; i < this._ints; ++i){\n            this._inBlock[i] = this._partialBlock[i];\n        }\n    }\n    // skip any previous partial bytes\n    if (this._partialBytes > 0) {\n        this._partialOutput.getBytes(this._partialBytes);\n    }\n    if (partialBytes > 0 && !finish) {\n        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));\n        this._partialBytes = partialBytes;\n        return true;\n    }\n    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));\n    this._partialBytes = 0;\n};\n/** Output feedback (OFB) **/ modes.ofb = function(options) {\n    options = options || {};\n    this.name = \"OFB\";\n    this.cipher = options.cipher;\n    this.blockSize = options.blockSize || 16;\n    this._ints = this.blockSize / 4;\n    this._inBlock = null;\n    this._outBlock = new Array(this._ints);\n    this._partialOutput = forge.util.createBuffer();\n    this._partialBytes = 0;\n};\nmodes.ofb.prototype.start = function(options) {\n    if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n    }\n    // use IV as first input\n    this._iv = transformIV(options.iv, this.blockSize);\n    this._inBlock = this._iv.slice(0);\n    this._partialBytes = 0;\n};\nmodes.ofb.prototype.encrypt = function(input, output, finish) {\n    // not enough input to encrypt\n    var inputLength = input.length();\n    if (input.length() === 0) {\n        return true;\n    }\n    // encrypt block (OFB always uses encryption mode)\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // handle full block\n    if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        // XOR input with output and update next input\n        for(var i = 0; i < this._ints; ++i){\n            output.putInt32(input.getInt32() ^ this._outBlock[i]);\n            this._inBlock[i] = this._outBlock[i];\n        }\n        return;\n    }\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if (partialBytes > 0) {\n        partialBytes = this.blockSize - partialBytes;\n    }\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i){\n        this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n    if (partialBytes > 0) {\n        // block still incomplete, restore input buffer\n        input.read -= this.blockSize;\n    } else {\n        // block complete, update input block\n        for(var i = 0; i < this._ints; ++i){\n            this._inBlock[i] = this._outBlock[i];\n        }\n    }\n    // skip any previous partial bytes\n    if (this._partialBytes > 0) {\n        this._partialOutput.getBytes(this._partialBytes);\n    }\n    if (partialBytes > 0 && !finish) {\n        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));\n        this._partialBytes = partialBytes;\n        return true;\n    }\n    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));\n    this._partialBytes = 0;\n};\nmodes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;\n/** Counter (CTR) **/ modes.ctr = function(options) {\n    options = options || {};\n    this.name = \"CTR\";\n    this.cipher = options.cipher;\n    this.blockSize = options.blockSize || 16;\n    this._ints = this.blockSize / 4;\n    this._inBlock = null;\n    this._outBlock = new Array(this._ints);\n    this._partialOutput = forge.util.createBuffer();\n    this._partialBytes = 0;\n};\nmodes.ctr.prototype.start = function(options) {\n    if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n    }\n    // use IV as first input\n    this._iv = transformIV(options.iv, this.blockSize);\n    this._inBlock = this._iv.slice(0);\n    this._partialBytes = 0;\n};\nmodes.ctr.prototype.encrypt = function(input, output, finish) {\n    // not enough input to encrypt\n    var inputLength = input.length();\n    if (inputLength === 0) {\n        return true;\n    }\n    // encrypt block (CTR always uses encryption mode)\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // handle full block\n    if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        // XOR input with output\n        for(var i = 0; i < this._ints; ++i){\n            output.putInt32(input.getInt32() ^ this._outBlock[i]);\n        }\n    } else {\n        // handle partial block\n        var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n        if (partialBytes > 0) {\n            partialBytes = this.blockSize - partialBytes;\n        }\n        // XOR input with output\n        this._partialOutput.clear();\n        for(var i = 0; i < this._ints; ++i){\n            this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n        }\n        if (partialBytes > 0) {\n            // block still incomplete, restore input buffer\n            input.read -= this.blockSize;\n        }\n        // skip any previous partial bytes\n        if (this._partialBytes > 0) {\n            this._partialOutput.getBytes(this._partialBytes);\n        }\n        if (partialBytes > 0 && !finish) {\n            output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));\n            this._partialBytes = partialBytes;\n            return true;\n        }\n        output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));\n        this._partialBytes = 0;\n    }\n    // block complete, increment counter (input block)\n    inc32(this._inBlock);\n};\nmodes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;\n/** Galois/Counter Mode (GCM) **/ modes.gcm = function(options) {\n    options = options || {};\n    this.name = \"GCM\";\n    this.cipher = options.cipher;\n    this.blockSize = options.blockSize || 16;\n    this._ints = this.blockSize / 4;\n    this._inBlock = new Array(this._ints);\n    this._outBlock = new Array(this._ints);\n    this._partialOutput = forge.util.createBuffer();\n    this._partialBytes = 0;\n    // R is actually this value concatenated with 120 more zero bits, but\n    // we only XOR against R so the other zeros have no effect -- we just\n    // apply this value to the first integer in a block\n    this._R = 0xE1000000;\n};\nmodes.gcm.prototype.start = function(options) {\n    if (!(\"iv\" in options)) {\n        throw new Error(\"Invalid IV parameter.\");\n    }\n    // ensure IV is a byte buffer\n    var iv = forge.util.createBuffer(options.iv);\n    // no ciphered data processed yet\n    this._cipherLength = 0;\n    // default additional data is none\n    var additionalData;\n    if (\"additionalData\" in options) {\n        additionalData = forge.util.createBuffer(options.additionalData);\n    } else {\n        additionalData = forge.util.createBuffer();\n    }\n    // default tag length is 128 bits\n    if (\"tagLength\" in options) {\n        this._tagLength = options.tagLength;\n    } else {\n        this._tagLength = 128;\n    }\n    // if tag is given, ensure tag matches tag length\n    this._tag = null;\n    if (options.decrypt) {\n        // save tag to check later\n        this._tag = forge.util.createBuffer(options.tag).getBytes();\n        if (this._tag.length !== this._tagLength / 8) {\n            throw new Error(\"Authentication tag does not match tag length.\");\n        }\n    }\n    // create tmp storage for hash calculation\n    this._hashBlock = new Array(this._ints);\n    // no tag generated yet\n    this.tag = null;\n    // generate hash subkey\n    // (apply block cipher to \"zero\" block)\n    this._hashSubkey = new Array(this._ints);\n    this.cipher.encrypt([\n        0,\n        0,\n        0,\n        0\n    ], this._hashSubkey);\n    // generate table M\n    // use 4-bit tables (32 component decomposition of a 16 byte value)\n    // 8-bit tables take more space and are known to have security\n    // vulnerabilities (in native implementations)\n    this.componentBits = 4;\n    this._m = this.generateHashTable(this._hashSubkey, this.componentBits);\n    // Note: support IV length different from 96 bits? (only supporting\n    // 96 bits is recommended by NIST SP-800-38D)\n    // generate J_0\n    var ivLength = iv.length();\n    if (ivLength === 12) {\n        // 96-bit IV\n        this._j0 = [\n            iv.getInt32(),\n            iv.getInt32(),\n            iv.getInt32(),\n            1\n        ];\n    } else {\n        // IV is NOT 96-bits\n        this._j0 = [\n            0,\n            0,\n            0,\n            0\n        ];\n        while(iv.length() > 0){\n            this._j0 = this.ghash(this._hashSubkey, this._j0, [\n                iv.getInt32(),\n                iv.getInt32(),\n                iv.getInt32(),\n                iv.getInt32()\n            ]);\n        }\n        this._j0 = this.ghash(this._hashSubkey, this._j0, [\n            0,\n            0\n        ].concat(from64To32(ivLength * 8)));\n    }\n    // generate ICB (initial counter block)\n    this._inBlock = this._j0.slice(0);\n    inc32(this._inBlock);\n    this._partialBytes = 0;\n    // consume authentication data\n    additionalData = forge.util.createBuffer(additionalData);\n    // save additional data length as a BE 64-bit number\n    this._aDataLength = from64To32(additionalData.length() * 8);\n    // pad additional data to 128 bit (16 byte) block size\n    var overflow = additionalData.length() % this.blockSize;\n    if (overflow) {\n        additionalData.fillWithByte(0, this.blockSize - overflow);\n    }\n    this._s = [\n        0,\n        0,\n        0,\n        0\n    ];\n    while(additionalData.length() > 0){\n        this._s = this.ghash(this._hashSubkey, this._s, [\n            additionalData.getInt32(),\n            additionalData.getInt32(),\n            additionalData.getInt32(),\n            additionalData.getInt32()\n        ]);\n    }\n};\nmodes.gcm.prototype.encrypt = function(input, output, finish) {\n    // not enough input to encrypt\n    var inputLength = input.length();\n    if (inputLength === 0) {\n        return true;\n    }\n    // encrypt block\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // handle full block\n    if (this._partialBytes === 0 && inputLength >= this.blockSize) {\n        // XOR input with output\n        for(var i = 0; i < this._ints; ++i){\n            output.putInt32(this._outBlock[i] ^= input.getInt32());\n        }\n        this._cipherLength += this.blockSize;\n    } else {\n        // handle partial block\n        var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n        if (partialBytes > 0) {\n            partialBytes = this.blockSize - partialBytes;\n        }\n        // XOR input with output\n        this._partialOutput.clear();\n        for(var i = 0; i < this._ints; ++i){\n            this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n        }\n        if (partialBytes <= 0 || finish) {\n            // handle overflow prior to hashing\n            if (finish) {\n                // get block overflow\n                var overflow = inputLength % this.blockSize;\n                this._cipherLength += overflow;\n                // truncate for hash function\n                this._partialOutput.truncate(this.blockSize - overflow);\n            } else {\n                this._cipherLength += this.blockSize;\n            }\n            // get output block for hashing\n            for(var i = 0; i < this._ints; ++i){\n                this._outBlock[i] = this._partialOutput.getInt32();\n            }\n            this._partialOutput.read -= this.blockSize;\n        }\n        // skip any previous partial bytes\n        if (this._partialBytes > 0) {\n            this._partialOutput.getBytes(this._partialBytes);\n        }\n        if (partialBytes > 0 && !finish) {\n            // block still incomplete, restore input buffer, get partial output,\n            // and return early\n            input.read -= this.blockSize;\n            output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));\n            this._partialBytes = partialBytes;\n            return true;\n        }\n        output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));\n        this._partialBytes = 0;\n    }\n    // update hash block S\n    this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);\n    // increment counter (input block)\n    inc32(this._inBlock);\n};\nmodes.gcm.prototype.decrypt = function(input, output, finish) {\n    // not enough input to decrypt\n    var inputLength = input.length();\n    if (inputLength < this.blockSize && !(finish && inputLength > 0)) {\n        return true;\n    }\n    // encrypt block (GCM always uses encryption mode)\n    this.cipher.encrypt(this._inBlock, this._outBlock);\n    // increment counter (input block)\n    inc32(this._inBlock);\n    // update hash block S\n    this._hashBlock[0] = input.getInt32();\n    this._hashBlock[1] = input.getInt32();\n    this._hashBlock[2] = input.getInt32();\n    this._hashBlock[3] = input.getInt32();\n    this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);\n    // XOR hash input with output\n    for(var i = 0; i < this._ints; ++i){\n        output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);\n    }\n    // increment cipher data length\n    if (inputLength < this.blockSize) {\n        this._cipherLength += inputLength % this.blockSize;\n    } else {\n        this._cipherLength += this.blockSize;\n    }\n};\nmodes.gcm.prototype.afterFinish = function(output, options) {\n    var rval = true;\n    // handle overflow\n    if (options.decrypt && options.overflow) {\n        output.truncate(this.blockSize - options.overflow);\n    }\n    // handle authentication tag\n    this.tag = forge.util.createBuffer();\n    // concatenate additional data length with cipher length\n    var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));\n    // include lengths in hash\n    this._s = this.ghash(this._hashSubkey, this._s, lengths);\n    // do GCTR(J_0, S)\n    var tag = [];\n    this.cipher.encrypt(this._j0, tag);\n    for(var i = 0; i < this._ints; ++i){\n        this.tag.putInt32(this._s[i] ^ tag[i]);\n    }\n    // trim tag to length\n    this.tag.truncate(this.tag.length() % (this._tagLength / 8));\n    // check authentication tag\n    if (options.decrypt && this.tag.bytes() !== this._tag) {\n        rval = false;\n    }\n    return rval;\n};\n/**\n * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois\n * field multiplication. The field, GF(2^128), is defined by the polynomial:\n *\n * x^128 + x^7 + x^2 + x + 1\n *\n * Which is represented in little-endian binary form as: 11100001 (0xe1). When\n * the value of a coefficient is 1, a bit is set. The value R, is the\n * concatenation of this value and 120 zero bits, yielding a 128-bit value\n * which matches the block size.\n *\n * This function will multiply two elements (vectors of bytes), X and Y, in\n * the field GF(2^128). The result is initialized to zero. For each bit of\n * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)\n * by the current value of Y. For each bit, the value of Y will be raised by\n * a power of x (multiplied by the polynomial x). This can be achieved by\n * shifting Y once to the right. If the current value of Y, prior to being\n * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.\n * Otherwise, we must divide by R after shifting to find the remainder.\n *\n * @param x the first block to multiply by the second.\n * @param y the second block to multiply by the first.\n *\n * @return the block result of the multiplication.\n */ modes.gcm.prototype.multiply = function(x, y) {\n    var z_i = [\n        0,\n        0,\n        0,\n        0\n    ];\n    var v_i = y.slice(0);\n    // calculate Z_128 (block has 128 bits)\n    for(var i = 0; i < 128; ++i){\n        // if x_i is 0, Z_{i+1} = Z_i (unchanged)\n        // else Z_{i+1} = Z_i ^ V_i\n        // get x_i by finding 32-bit int position, then left shift 1 by remainder\n        var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;\n        if (x_i) {\n            z_i[0] ^= v_i[0];\n            z_i[1] ^= v_i[1];\n            z_i[2] ^= v_i[2];\n            z_i[3] ^= v_i[3];\n        }\n        // if LSB(V_i) is 1, V_i = V_i >> 1\n        // else V_i = (V_i >> 1) ^ R\n        this.pow(v_i, v_i);\n    }\n    return z_i;\n};\nmodes.gcm.prototype.pow = function(x, out) {\n    // if LSB(x) is 1, x = x >>> 1\n    // else x = (x >>> 1) ^ R\n    var lsb = x[3] & 1;\n    // always do x >>> 1:\n    // starting with the rightmost integer, shift each integer to the right\n    // one bit, pulling in the bit from the integer to the left as its top\n    // most bit (do this for the last 3 integers)\n    for(var i = 3; i > 0; --i){\n        out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;\n    }\n    // shift the first integer normally\n    out[0] = x[0] >>> 1;\n    // if lsb was not set, then polynomial had a degree of 127 and doesn't\n    // need to divided; otherwise, XOR with R to find the remainder; we only\n    // need to XOR the first integer since R technically ends w/120 zero bits\n    if (lsb) {\n        out[0] ^= this._R;\n    }\n};\nmodes.gcm.prototype.tableMultiply = function(x) {\n    // assumes 4-bit tables are used\n    var z = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for(var i = 0; i < 32; ++i){\n        var idx = i / 8 | 0;\n        var x_i = x[idx] >>> (7 - i % 8) * 4 & 0xF;\n        var ah = this._m[i][x_i];\n        z[0] ^= ah[0];\n        z[1] ^= ah[1];\n        z[2] ^= ah[2];\n        z[3] ^= ah[3];\n    }\n    return z;\n};\n/**\n * A continuing version of the GHASH algorithm that operates on a single\n * block. The hash block, last hash value (Ym) and the new block to hash\n * are given.\n *\n * @param h the hash block.\n * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.\n * @param x the block to hash.\n *\n * @return the hashed value (Ym).\n */ modes.gcm.prototype.ghash = function(h, y, x) {\n    y[0] ^= x[0];\n    y[1] ^= x[1];\n    y[2] ^= x[2];\n    y[3] ^= x[3];\n    return this.tableMultiply(y);\n//return this.multiply(y, h);\n};\n/**\n * Precomputes a table for multiplying against the hash subkey. This\n * mechanism provides a substantial speed increase over multiplication\n * performed without a table. The table-based multiplication this table is\n * for solves X * H by multiplying each component of X by H and then\n * composing the results together using XOR.\n *\n * This function can be used to generate tables with different bit sizes\n * for the components, however, this implementation assumes there are\n * 32 components of X (which is a 16 byte vector), therefore each component\n * takes 4-bits (so the table is constructed with bits=4).\n *\n * @param h the hash subkey.\n * @param bits the bit size for a component.\n */ modes.gcm.prototype.generateHashTable = function(h, bits) {\n    // TODO: There are further optimizations that would use only the\n    // first table M_0 (or some variant) along with a remainder table;\n    // this can be explored in the future\n    var multiplier = 8 / bits;\n    var perInt = 4 * multiplier;\n    var size = 16 * multiplier;\n    var m = new Array(size);\n    for(var i = 0; i < size; ++i){\n        var tmp = [\n            0,\n            0,\n            0,\n            0\n        ];\n        var idx = i / perInt | 0;\n        var shft = (perInt - 1 - i % perInt) * bits;\n        tmp[idx] = 1 << bits - 1 << shft;\n        m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);\n    }\n    return m;\n};\n/**\n * Generates a table for multiplying against the hash subkey for one\n * particular component (out of all possible component values).\n *\n * @param mid the pre-multiplied value for the middle key of the table.\n * @param bits the bit size for a component.\n */ modes.gcm.prototype.generateSubHashTable = function(mid, bits) {\n    // compute the table quickly by minimizing the number of\n    // POW operations -- they only need to be performed for powers of 2,\n    // all other entries can be composed from those powers using XOR\n    var size = 1 << bits;\n    var half = size >>> 1;\n    var m = new Array(size);\n    m[half] = mid.slice(0);\n    var i = half >>> 1;\n    while(i > 0){\n        // raise m0[2 * i] and store in m0[i]\n        this.pow(m[2 * i], m[i] = []);\n        i >>= 1;\n    }\n    i = 2;\n    while(i < half){\n        for(var j = 1; j < i; ++j){\n            var m_i = m[i];\n            var m_j = m[j];\n            m[i + j] = [\n                m_i[0] ^ m_j[0],\n                m_i[1] ^ m_j[1],\n                m_i[2] ^ m_j[2],\n                m_i[3] ^ m_j[3]\n            ];\n        }\n        i *= 2;\n    }\n    m[0] = [\n        0,\n        0,\n        0,\n        0\n    ];\n    /* Note: We could avoid storing these by doing composition during multiply\n  calculate top half using composition by speed is preferred. */ for(i = half + 1; i < size; ++i){\n        var c = m[i ^ half];\n        m[i] = [\n            mid[0] ^ c[0],\n            mid[1] ^ c[1],\n            mid[2] ^ c[2],\n            mid[3] ^ c[3]\n        ];\n    }\n    return m;\n};\n/** Utility functions */ function transformIV(iv, blockSize) {\n    if (typeof iv === \"string\") {\n        // convert iv string into byte buffer\n        iv = forge.util.createBuffer(iv);\n    }\n    if (forge.util.isArray(iv) && iv.length > 4) {\n        // convert iv byte array into byte buffer\n        var tmp = iv;\n        iv = forge.util.createBuffer();\n        for(var i = 0; i < tmp.length; ++i){\n            iv.putByte(tmp[i]);\n        }\n    }\n    if (iv.length() < blockSize) {\n        throw new Error(\"Invalid IV length; got \" + iv.length() + \" bytes and expected \" + blockSize + \" bytes.\");\n    }\n    if (!forge.util.isArray(iv)) {\n        // convert iv byte buffer into 32-bit integer array\n        var ints = [];\n        var blocks = blockSize / 4;\n        for(var i = 0; i < blocks; ++i){\n            ints.push(iv.getInt32());\n        }\n        iv = ints;\n    }\n    return iv;\n}\nfunction inc32(block) {\n    // increment last 32 bits of block only\n    block[block.length - 1] = block[block.length - 1] + 1 & 0xFFFFFFFF;\n}\nfunction from64To32(num) {\n    // convert 64-bit number to two BE Int32s\n    return [\n        num / 0x100000000 | 0,\n        num & 0xFFFFFFFF\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/cipherModes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/des.js":
/*!********************************************!*\
  !*** ./node_modules/node-forge/lib/des.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * DES (Data Encryption Standard) implementation.\n *\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\n * It is based on the BSD-licensed implementation by Paul Tero:\n *\n * Paul Tero, July 2001\n * http://www.tero.co.uk/des/\n *\n * Optimised for performance with large blocks by\n * Michael Hayworth, November 2001\n * http://www.netdealing.com\n *\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./cipher */ \"(ssr)/./node_modules/node-forge/lib/cipher.js\");\n__webpack_require__(/*! ./cipherModes */ \"(ssr)/./node_modules/node-forge/lib/cipherModes.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n/* DES API */ module.exports = forge.des = forge.des || {};\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n * cipher.start({iv: iv});\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */ forge.des.startEncrypting = function(key, iv, output, mode) {\n    var cipher = _createCipher({\n        key: key,\n        output: output,\n        decrypt: false,\n        mode: mode || (iv === null ? \"ECB\" : \"CBC\")\n    });\n    cipher.start(iv);\n    return cipher;\n};\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ forge.des.createEncryptionCipher = function(key, mode) {\n    return _createCipher({\n        key: key,\n        output: null,\n        decrypt: false,\n        mode: mode\n    });\n};\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n * decipher.start({iv: iv});\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */ forge.des.startDecrypting = function(key, iv, output, mode) {\n    var cipher = _createCipher({\n        key: key,\n        output: output,\n        decrypt: true,\n        mode: mode || (iv === null ? \"ECB\" : \"CBC\")\n    });\n    cipher.start(iv);\n    return cipher;\n};\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ forge.des.createDecryptionCipher = function(key, mode) {\n    return _createCipher({\n        key: key,\n        output: null,\n        decrypt: true,\n        mode: mode\n    });\n};\n/**\n * Creates a new DES cipher algorithm object.\n *\n * @param name the name of the algorithm.\n * @param mode the mode factory function.\n *\n * @return the DES algorithm object.\n */ forge.des.Algorithm = function(name, mode) {\n    var self = this;\n    self.name = name;\n    self.mode = new mode({\n        blockSize: 8,\n        cipher: {\n            encrypt: function(inBlock, outBlock) {\n                return _updateBlock(self._keys, inBlock, outBlock, false);\n            },\n            decrypt: function(inBlock, outBlock) {\n                return _updateBlock(self._keys, inBlock, outBlock, true);\n            }\n        }\n    });\n    self._init = false;\n};\n/**\n * Initializes this DES algorithm by expanding its key.\n *\n * @param options the options to use.\n *          key the key to use with this algorithm.\n *          decrypt true if the algorithm should be initialized for decryption,\n *            false for encryption.\n */ forge.des.Algorithm.prototype.initialize = function(options) {\n    if (this._init) {\n        return;\n    }\n    var key = forge.util.createBuffer(options.key);\n    if (this.name.indexOf(\"3DES\") === 0) {\n        if (key.length() !== 24) {\n            throw new Error(\"Invalid Triple-DES key size: \" + key.length() * 8);\n        }\n    }\n    // do key expansion to 16 or 48 subkeys (single or triple DES)\n    this._keys = _createKeys(key);\n    this._init = true;\n};\n/** Register DES algorithms **/ registerAlgorithm(\"DES-ECB\", forge.cipher.modes.ecb);\nregisterAlgorithm(\"DES-CBC\", forge.cipher.modes.cbc);\nregisterAlgorithm(\"DES-CFB\", forge.cipher.modes.cfb);\nregisterAlgorithm(\"DES-OFB\", forge.cipher.modes.ofb);\nregisterAlgorithm(\"DES-CTR\", forge.cipher.modes.ctr);\nregisterAlgorithm(\"3DES-ECB\", forge.cipher.modes.ecb);\nregisterAlgorithm(\"3DES-CBC\", forge.cipher.modes.cbc);\nregisterAlgorithm(\"3DES-CFB\", forge.cipher.modes.cfb);\nregisterAlgorithm(\"3DES-OFB\", forge.cipher.modes.ofb);\nregisterAlgorithm(\"3DES-CTR\", forge.cipher.modes.ctr);\nfunction registerAlgorithm(name, mode) {\n    var factory = function() {\n        return new forge.des.Algorithm(name, mode);\n    };\n    forge.cipher.registerAlgorithm(name, factory);\n}\n/** DES implementation **/ var spfunction1 = [\n    0x1010400,\n    0,\n    0x10000,\n    0x1010404,\n    0x1010004,\n    0x10404,\n    0x4,\n    0x10000,\n    0x400,\n    0x1010400,\n    0x1010404,\n    0x400,\n    0x1000404,\n    0x1010004,\n    0x1000000,\n    0x4,\n    0x404,\n    0x1000400,\n    0x1000400,\n    0x10400,\n    0x10400,\n    0x1010000,\n    0x1010000,\n    0x1000404,\n    0x10004,\n    0x1000004,\n    0x1000004,\n    0x10004,\n    0,\n    0x404,\n    0x10404,\n    0x1000000,\n    0x10000,\n    0x1010404,\n    0x4,\n    0x1010000,\n    0x1010400,\n    0x1000000,\n    0x1000000,\n    0x400,\n    0x1010004,\n    0x10000,\n    0x10400,\n    0x1000004,\n    0x400,\n    0x4,\n    0x1000404,\n    0x10404,\n    0x1010404,\n    0x10004,\n    0x1010000,\n    0x1000404,\n    0x1000004,\n    0x404,\n    0x10404,\n    0x1010400,\n    0x404,\n    0x1000400,\n    0x1000400,\n    0,\n    0x10004,\n    0x10400,\n    0,\n    0x1010004\n];\nvar spfunction2 = [\n    -0x7fef7fe0,\n    -0x7fff8000,\n    0x8000,\n    0x108020,\n    0x100000,\n    0x20,\n    -0x7fefffe0,\n    -0x7fff7fe0,\n    -0x7fffffe0,\n    -0x7fef7fe0,\n    -0x7fef8000,\n    -0x80000000,\n    -0x7fff8000,\n    0x100000,\n    0x20,\n    -0x7fefffe0,\n    0x108000,\n    0x100020,\n    -0x7fff7fe0,\n    0,\n    -0x80000000,\n    0x8000,\n    0x108020,\n    -0x7ff00000,\n    0x100020,\n    -0x7fffffe0,\n    0,\n    0x108000,\n    0x8020,\n    -0x7fef8000,\n    -0x7ff00000,\n    0x8020,\n    0,\n    0x108020,\n    -0x7fefffe0,\n    0x100000,\n    -0x7fff7fe0,\n    -0x7ff00000,\n    -0x7fef8000,\n    0x8000,\n    -0x7ff00000,\n    -0x7fff8000,\n    0x20,\n    -0x7fef7fe0,\n    0x108020,\n    0x20,\n    0x8000,\n    -0x80000000,\n    0x8020,\n    -0x7fef8000,\n    0x100000,\n    -0x7fffffe0,\n    0x100020,\n    -0x7fff7fe0,\n    -0x7fffffe0,\n    0x100020,\n    0x108000,\n    0,\n    -0x7fff8000,\n    0x8020,\n    -0x80000000,\n    -0x7fefffe0,\n    -0x7fef7fe0,\n    0x108000\n];\nvar spfunction3 = [\n    0x208,\n    0x8020200,\n    0,\n    0x8020008,\n    0x8000200,\n    0,\n    0x20208,\n    0x8000200,\n    0x20008,\n    0x8000008,\n    0x8000008,\n    0x20000,\n    0x8020208,\n    0x20008,\n    0x8020000,\n    0x208,\n    0x8000000,\n    0x8,\n    0x8020200,\n    0x200,\n    0x20200,\n    0x8020000,\n    0x8020008,\n    0x20208,\n    0x8000208,\n    0x20200,\n    0x20000,\n    0x8000208,\n    0x8,\n    0x8020208,\n    0x200,\n    0x8000000,\n    0x8020200,\n    0x8000000,\n    0x20008,\n    0x208,\n    0x20000,\n    0x8020200,\n    0x8000200,\n    0,\n    0x200,\n    0x20008,\n    0x8020208,\n    0x8000200,\n    0x8000008,\n    0x200,\n    0,\n    0x8020008,\n    0x8000208,\n    0x20000,\n    0x8000000,\n    0x8020208,\n    0x8,\n    0x20208,\n    0x20200,\n    0x8000008,\n    0x8020000,\n    0x8000208,\n    0x208,\n    0x8020000,\n    0x20208,\n    0x8,\n    0x8020008,\n    0x20200\n];\nvar spfunction4 = [\n    0x802001,\n    0x2081,\n    0x2081,\n    0x80,\n    0x802080,\n    0x800081,\n    0x800001,\n    0x2001,\n    0,\n    0x802000,\n    0x802000,\n    0x802081,\n    0x81,\n    0,\n    0x800080,\n    0x800001,\n    0x1,\n    0x2000,\n    0x800000,\n    0x802001,\n    0x80,\n    0x800000,\n    0x2001,\n    0x2080,\n    0x800081,\n    0x1,\n    0x2080,\n    0x800080,\n    0x2000,\n    0x802080,\n    0x802081,\n    0x81,\n    0x800080,\n    0x800001,\n    0x802000,\n    0x802081,\n    0x81,\n    0,\n    0,\n    0x802000,\n    0x2080,\n    0x800080,\n    0x800081,\n    0x1,\n    0x802001,\n    0x2081,\n    0x2081,\n    0x80,\n    0x802081,\n    0x81,\n    0x1,\n    0x2000,\n    0x800001,\n    0x2001,\n    0x802080,\n    0x800081,\n    0x2001,\n    0x2080,\n    0x800000,\n    0x802001,\n    0x80,\n    0x800000,\n    0x2000,\n    0x802080\n];\nvar spfunction5 = [\n    0x100,\n    0x2080100,\n    0x2080000,\n    0x42000100,\n    0x80000,\n    0x100,\n    0x40000000,\n    0x2080000,\n    0x40080100,\n    0x80000,\n    0x2000100,\n    0x40080100,\n    0x42000100,\n    0x42080000,\n    0x80100,\n    0x40000000,\n    0x2000000,\n    0x40080000,\n    0x40080000,\n    0,\n    0x40000100,\n    0x42080100,\n    0x42080100,\n    0x2000100,\n    0x42080000,\n    0x40000100,\n    0,\n    0x42000000,\n    0x2080100,\n    0x2000000,\n    0x42000000,\n    0x80100,\n    0x80000,\n    0x42000100,\n    0x100,\n    0x2000000,\n    0x40000000,\n    0x2080000,\n    0x42000100,\n    0x40080100,\n    0x2000100,\n    0x40000000,\n    0x42080000,\n    0x2080100,\n    0x40080100,\n    0x100,\n    0x2000000,\n    0x42080000,\n    0x42080100,\n    0x80100,\n    0x42000000,\n    0x42080100,\n    0x2080000,\n    0,\n    0x40080000,\n    0x42000000,\n    0x80100,\n    0x2000100,\n    0x40000100,\n    0x80000,\n    0,\n    0x40080000,\n    0x2080100,\n    0x40000100\n];\nvar spfunction6 = [\n    0x20000010,\n    0x20400000,\n    0x4000,\n    0x20404010,\n    0x20400000,\n    0x10,\n    0x20404010,\n    0x400000,\n    0x20004000,\n    0x404010,\n    0x400000,\n    0x20000010,\n    0x400010,\n    0x20004000,\n    0x20000000,\n    0x4010,\n    0,\n    0x400010,\n    0x20004010,\n    0x4000,\n    0x404000,\n    0x20004010,\n    0x10,\n    0x20400010,\n    0x20400010,\n    0,\n    0x404010,\n    0x20404000,\n    0x4010,\n    0x404000,\n    0x20404000,\n    0x20000000,\n    0x20004000,\n    0x10,\n    0x20400010,\n    0x404000,\n    0x20404010,\n    0x400000,\n    0x4010,\n    0x20000010,\n    0x400000,\n    0x20004000,\n    0x20000000,\n    0x4010,\n    0x20000010,\n    0x20404010,\n    0x404000,\n    0x20400000,\n    0x404010,\n    0x20404000,\n    0,\n    0x20400010,\n    0x10,\n    0x4000,\n    0x20400000,\n    0x404010,\n    0x4000,\n    0x400010,\n    0x20004010,\n    0,\n    0x20404000,\n    0x20000000,\n    0x400010,\n    0x20004010\n];\nvar spfunction7 = [\n    0x200000,\n    0x4200002,\n    0x4000802,\n    0,\n    0x800,\n    0x4000802,\n    0x200802,\n    0x4200800,\n    0x4200802,\n    0x200000,\n    0,\n    0x4000002,\n    0x2,\n    0x4000000,\n    0x4200002,\n    0x802,\n    0x4000800,\n    0x200802,\n    0x200002,\n    0x4000800,\n    0x4000002,\n    0x4200000,\n    0x4200800,\n    0x200002,\n    0x4200000,\n    0x800,\n    0x802,\n    0x4200802,\n    0x200800,\n    0x2,\n    0x4000000,\n    0x200800,\n    0x4000000,\n    0x200800,\n    0x200000,\n    0x4000802,\n    0x4000802,\n    0x4200002,\n    0x4200002,\n    0x2,\n    0x200002,\n    0x4000000,\n    0x4000800,\n    0x200000,\n    0x4200800,\n    0x802,\n    0x200802,\n    0x4200800,\n    0x802,\n    0x4000002,\n    0x4200802,\n    0x4200000,\n    0x200800,\n    0,\n    0x2,\n    0x4200802,\n    0,\n    0x200802,\n    0x4200000,\n    0x800,\n    0x4000002,\n    0x4000800,\n    0x800,\n    0x200002\n];\nvar spfunction8 = [\n    0x10001040,\n    0x1000,\n    0x40000,\n    0x10041040,\n    0x10000000,\n    0x10001040,\n    0x40,\n    0x10000000,\n    0x40040,\n    0x10040000,\n    0x10041040,\n    0x41000,\n    0x10041000,\n    0x41040,\n    0x1000,\n    0x40,\n    0x10040000,\n    0x10000040,\n    0x10001000,\n    0x1040,\n    0x41000,\n    0x40040,\n    0x10040040,\n    0x10041000,\n    0x1040,\n    0,\n    0,\n    0x10040040,\n    0x10000040,\n    0x10001000,\n    0x41040,\n    0x40000,\n    0x41040,\n    0x40000,\n    0x10041000,\n    0x1000,\n    0x40,\n    0x10040040,\n    0x1000,\n    0x41040,\n    0x10001000,\n    0x40,\n    0x10000040,\n    0x10040000,\n    0x10040040,\n    0x10000000,\n    0x40000,\n    0x10001040,\n    0,\n    0x10041040,\n    0x40040,\n    0x10000040,\n    0x10040000,\n    0x10001000,\n    0x10001040,\n    0,\n    0x10041040,\n    0x41000,\n    0x41000,\n    0x1040,\n    0x1040,\n    0x40040,\n    0x10000000,\n    0x10041000\n];\n/**\n * Create necessary sub keys.\n *\n * @param key the 64-bit or 192-bit key.\n *\n * @return the expanded keys.\n */ function _createKeys(key) {\n    var pc2bytes0 = [\n        0,\n        0x4,\n        0x20000000,\n        0x20000004,\n        0x10000,\n        0x10004,\n        0x20010000,\n        0x20010004,\n        0x200,\n        0x204,\n        0x20000200,\n        0x20000204,\n        0x10200,\n        0x10204,\n        0x20010200,\n        0x20010204\n    ], pc2bytes1 = [\n        0,\n        0x1,\n        0x100000,\n        0x100001,\n        0x4000000,\n        0x4000001,\n        0x4100000,\n        0x4100001,\n        0x100,\n        0x101,\n        0x100100,\n        0x100101,\n        0x4000100,\n        0x4000101,\n        0x4100100,\n        0x4100101\n    ], pc2bytes2 = [\n        0,\n        0x8,\n        0x800,\n        0x808,\n        0x1000000,\n        0x1000008,\n        0x1000800,\n        0x1000808,\n        0,\n        0x8,\n        0x800,\n        0x808,\n        0x1000000,\n        0x1000008,\n        0x1000800,\n        0x1000808\n    ], pc2bytes3 = [\n        0,\n        0x200000,\n        0x8000000,\n        0x8200000,\n        0x2000,\n        0x202000,\n        0x8002000,\n        0x8202000,\n        0x20000,\n        0x220000,\n        0x8020000,\n        0x8220000,\n        0x22000,\n        0x222000,\n        0x8022000,\n        0x8222000\n    ], pc2bytes4 = [\n        0,\n        0x40000,\n        0x10,\n        0x40010,\n        0,\n        0x40000,\n        0x10,\n        0x40010,\n        0x1000,\n        0x41000,\n        0x1010,\n        0x41010,\n        0x1000,\n        0x41000,\n        0x1010,\n        0x41010\n    ], pc2bytes5 = [\n        0,\n        0x400,\n        0x20,\n        0x420,\n        0,\n        0x400,\n        0x20,\n        0x420,\n        0x2000000,\n        0x2000400,\n        0x2000020,\n        0x2000420,\n        0x2000000,\n        0x2000400,\n        0x2000020,\n        0x2000420\n    ], pc2bytes6 = [\n        0,\n        0x10000000,\n        0x80000,\n        0x10080000,\n        0x2,\n        0x10000002,\n        0x80002,\n        0x10080002,\n        0,\n        0x10000000,\n        0x80000,\n        0x10080000,\n        0x2,\n        0x10000002,\n        0x80002,\n        0x10080002\n    ], pc2bytes7 = [\n        0,\n        0x10000,\n        0x800,\n        0x10800,\n        0x20000000,\n        0x20010000,\n        0x20000800,\n        0x20010800,\n        0x20000,\n        0x30000,\n        0x20800,\n        0x30800,\n        0x20020000,\n        0x20030000,\n        0x20020800,\n        0x20030800\n    ], pc2bytes8 = [\n        0,\n        0x40000,\n        0,\n        0x40000,\n        0x2,\n        0x40002,\n        0x2,\n        0x40002,\n        0x2000000,\n        0x2040000,\n        0x2000000,\n        0x2040000,\n        0x2000002,\n        0x2040002,\n        0x2000002,\n        0x2040002\n    ], pc2bytes9 = [\n        0,\n        0x10000000,\n        0x8,\n        0x10000008,\n        0,\n        0x10000000,\n        0x8,\n        0x10000008,\n        0x400,\n        0x10000400,\n        0x408,\n        0x10000408,\n        0x400,\n        0x10000400,\n        0x408,\n        0x10000408\n    ], pc2bytes10 = [\n        0,\n        0x20,\n        0,\n        0x20,\n        0x100000,\n        0x100020,\n        0x100000,\n        0x100020,\n        0x2000,\n        0x2020,\n        0x2000,\n        0x2020,\n        0x102000,\n        0x102020,\n        0x102000,\n        0x102020\n    ], pc2bytes11 = [\n        0,\n        0x1000000,\n        0x200,\n        0x1000200,\n        0x200000,\n        0x1200000,\n        0x200200,\n        0x1200200,\n        0x4000000,\n        0x5000000,\n        0x4000200,\n        0x5000200,\n        0x4200000,\n        0x5200000,\n        0x4200200,\n        0x5200200\n    ], pc2bytes12 = [\n        0,\n        0x1000,\n        0x8000000,\n        0x8001000,\n        0x80000,\n        0x81000,\n        0x8080000,\n        0x8081000,\n        0x10,\n        0x1010,\n        0x8000010,\n        0x8001010,\n        0x80010,\n        0x81010,\n        0x8080010,\n        0x8081010\n    ], pc2bytes13 = [\n        0,\n        0x4,\n        0x100,\n        0x104,\n        0,\n        0x4,\n        0x100,\n        0x104,\n        0x1,\n        0x5,\n        0x101,\n        0x105,\n        0x1,\n        0x5,\n        0x101,\n        0x105\n    ];\n    // how many iterations (1 for des, 3 for triple des)\n    // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n    var iterations = key.length() > 8 ? 3 : 1;\n    // stores the return keys\n    var keys = [];\n    // now define the left shifts which need to be done\n    var shifts = [\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0\n    ];\n    var n = 0, tmp;\n    for(var j = 0; j < iterations; j++){\n        var left = key.getInt32();\n        var right = key.getInt32();\n        tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n        right ^= tmp;\n        left ^= tmp << 4;\n        tmp = (right >>> -16 ^ left) & 0x0000ffff;\n        left ^= tmp;\n        right ^= tmp << -16;\n        tmp = (left >>> 2 ^ right) & 0x33333333;\n        right ^= tmp;\n        left ^= tmp << 2;\n        tmp = (right >>> -16 ^ left) & 0x0000ffff;\n        left ^= tmp;\n        right ^= tmp << -16;\n        tmp = (left >>> 1 ^ right) & 0x55555555;\n        right ^= tmp;\n        left ^= tmp << 1;\n        tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n        left ^= tmp;\n        right ^= tmp << 8;\n        tmp = (left >>> 1 ^ right) & 0x55555555;\n        right ^= tmp;\n        left ^= tmp << 1;\n        // right needs to be shifted and OR'd with last four bits of left\n        tmp = left << 8 | right >>> 20 & 0x000000f0;\n        // left needs to be put upside down\n        left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;\n        right = tmp;\n        // now go through and perform these shifts on the left and right keys\n        for(var i = 0; i < shifts.length; ++i){\n            //shift the keys either one or two bits to the left\n            if (shifts[i]) {\n                left = left << 2 | left >>> 26;\n                right = right << 2 | right >>> 26;\n            } else {\n                left = left << 1 | left >>> 27;\n                right = right << 1 | right >>> 27;\n            }\n            left &= -0xf;\n            right &= -0xf;\n            // now apply PC-2, in such a way that E is easier when encrypting or\n            // decrypting this conversion will look like PC-2 except only the last 6\n            // bits of each byte are used rather than 48 consecutive bits and the\n            // order of lines will be according to how the S selection functions will\n            // be applied: S2, S4, S6, S8, S1, S3, S5, S7\n            var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];\n            var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];\n            tmp = (righttmp >>> 16 ^ lefttmp) & 0x0000ffff;\n            keys[n++] = lefttmp ^ tmp;\n            keys[n++] = righttmp ^ tmp << 16;\n        }\n    }\n    return keys;\n}\n/**\n * Updates a single block (1 byte) using DES. The update will either\n * encrypt or decrypt the block.\n *\n * @param keys the expanded keys.\n * @param input the input block (an array of 32-bit words).\n * @param output the updated output block.\n * @param decrypt true to decrypt the block, false to encrypt it.\n */ function _updateBlock(keys, input, output, decrypt) {\n    // set up loops for single or triple DES\n    var iterations = keys.length === 32 ? 3 : 9;\n    var looping;\n    if (iterations === 3) {\n        looping = decrypt ? [\n            30,\n            -2,\n            -2\n        ] : [\n            0,\n            32,\n            2\n        ];\n    } else {\n        looping = decrypt ? [\n            94,\n            62,\n            -2,\n            32,\n            64,\n            2,\n            30,\n            -2,\n            -2\n        ] : [\n            0,\n            32,\n            2,\n            62,\n            30,\n            -2,\n            64,\n            96,\n            2\n        ];\n    }\n    var tmp;\n    var left = input[0];\n    var right = input[1];\n    // first each 64 bit chunk of the message must be permuted according to IP\n    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= tmp << 4;\n    tmp = (left >>> 16 ^ right) & 0x0000ffff;\n    right ^= tmp;\n    left ^= tmp << 16;\n    tmp = (right >>> 2 ^ left) & 0x33333333;\n    left ^= tmp;\n    right ^= tmp << 2;\n    tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= tmp << 8;\n    tmp = (left >>> 1 ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= tmp << 1;\n    // rotate left 1 bit\n    left = left << 1 | left >>> 31;\n    right = right << 1 | right >>> 31;\n    for(var j = 0; j < iterations; j += 3){\n        var endloop = looping[j + 1];\n        var loopinc = looping[j + 2];\n        // now go through and perform the encryption or decryption\n        for(var i = looping[j]; i != endloop; i += loopinc){\n            var right1 = right ^ keys[i];\n            var right2 = (right >>> 4 | right << 28) ^ keys[i + 1];\n            // passing these bytes through the S selection functions\n            tmp = left;\n            left = right;\n            right = tmp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);\n        }\n        // unreverse left and right\n        tmp = left;\n        left = right;\n        right = tmp;\n    }\n    // rotate right 1 bit\n    left = left >>> 1 | left << 31;\n    right = right >>> 1 | right << 31;\n    // now perform IP-1, which is IP in the opposite direction\n    tmp = (left >>> 1 ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= tmp << 1;\n    tmp = (right >>> 8 ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= tmp << 8;\n    tmp = (right >>> 2 ^ left) & 0x33333333;\n    left ^= tmp;\n    right ^= tmp << 2;\n    tmp = (left >>> 16 ^ right) & 0x0000ffff;\n    right ^= tmp;\n    left ^= tmp << 16;\n    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= tmp << 4;\n    output[0] = left;\n    output[1] = right;\n}\n/**\n * Deprecated. Instead, use:\n *\n * forge.cipher.createCipher('DES-<mode>', key);\n * forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates a deprecated DES cipher object. This object's mode will default to\n * CBC (cipher-block-chaining).\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param options the options to use.\n *          key the symmetric key to use (64 or 192 bits).\n *          output the buffer to write to.\n *          decrypt true for decryption, false for encryption.\n *          mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */ function _createCipher(options) {\n    options = options || {};\n    var mode = (options.mode || \"CBC\").toUpperCase();\n    var algorithm = \"DES-\" + mode;\n    var cipher;\n    if (options.decrypt) {\n        cipher = forge.cipher.createDecipher(algorithm, options.key);\n    } else {\n        cipher = forge.cipher.createCipher(algorithm, options.key);\n    }\n    // backwards compatible start API\n    var start = cipher.start;\n    cipher.start = function(iv, options) {\n        // backwards compatibility: support second arg as output buffer\n        var output = null;\n        if (options instanceof forge.util.ByteBuffer) {\n            output = options;\n            options = {};\n        }\n        options = options || {};\n        options.output = output;\n        options.iv = iv;\n        start.call(cipher, options);\n    };\n    return cipher;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/des.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/forge.js":
/*!**********************************************!*\
  !*** ./node_modules/node-forge/lib/forge.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/**\n * Node.js module for Forge.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2016 Digital Bazaar, Inc.\n */ \nmodule.exports = {\n    // default options\n    options: {\n        usePureJavaScript: false\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1mb3JnZS9saWIvZm9yZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DO0FBQ0RBLE9BQU9DLE9BQU8sR0FBRztJQUNmLGtCQUFrQjtJQUNsQkMsU0FBUztRQUNQQyxtQkFBbUI7SUFDckI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL25vZGUtZm9yZ2UvbGliL2ZvcmdlLmpzPzA0MGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBOb2RlLmpzIG1vZHVsZSBmb3IgRm9yZ2UuXG4gKlxuICogQGF1dGhvciBEYXZlIExvbmdsZXlcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IERpZ2l0YWwgQmF6YWFyLCBJbmMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgb3B0aW9uczoge1xuICAgIHVzZVB1cmVKYXZhU2NyaXB0OiBmYWxzZVxuICB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwidXNlUHVyZUphdmFTY3JpcHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/forge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/hmac.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/hmac.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Hash-based Message Authentication Code implementation. Requires a message\n * digest object that can be obtained, for example, from forge.md.sha1 or\n * forge.md.md5.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./md */ \"(ssr)/./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n/* HMAC API */ var hmac = module.exports = forge.hmac = forge.hmac || {};\n/**\n * Creates an HMAC object that uses the given message digest object.\n *\n * @return an HMAC object.\n */ hmac.create = function() {\n    // the hmac key to use\n    var _key = null;\n    // the message digest to use\n    var _md = null;\n    // the inner padding\n    var _ipadding = null;\n    // the outer padding\n    var _opadding = null;\n    // hmac context\n    var ctx = {};\n    /**\n   * Starts or restarts the HMAC with the given key and message digest.\n   *\n   * @param md the message digest to use, null to reuse the previous one,\n   *           a string to use builtin 'sha1', 'md5', 'sha256'.\n   * @param key the key to use as a string, array of bytes, byte buffer,\n   *           or null to reuse the previous key.\n   */ ctx.start = function(md, key) {\n        if (md !== null) {\n            if (typeof md === \"string\") {\n                // create builtin message digest\n                md = md.toLowerCase();\n                if (md in forge.md.algorithms) {\n                    _md = forge.md.algorithms[md].create();\n                } else {\n                    throw new Error('Unknown hash algorithm \"' + md + '\"');\n                }\n            } else {\n                // store message digest\n                _md = md;\n            }\n        }\n        if (key === null) {\n            // reuse previous key\n            key = _key;\n        } else {\n            if (typeof key === \"string\") {\n                // convert string into byte buffer\n                key = forge.util.createBuffer(key);\n            } else if (forge.util.isArray(key)) {\n                // convert byte array into byte buffer\n                var tmp = key;\n                key = forge.util.createBuffer();\n                for(var i = 0; i < tmp.length; ++i){\n                    key.putByte(tmp[i]);\n                }\n            }\n            // if key is longer than blocksize, hash it\n            var keylen = key.length();\n            if (keylen > _md.blockLength) {\n                _md.start();\n                _md.update(key.bytes());\n                key = _md.digest();\n            }\n            // mix key into inner and outer padding\n            // ipadding = [0x36 * blocksize] ^ key\n            // opadding = [0x5C * blocksize] ^ key\n            _ipadding = forge.util.createBuffer();\n            _opadding = forge.util.createBuffer();\n            keylen = key.length();\n            for(var i = 0; i < keylen; ++i){\n                var tmp = key.at(i);\n                _ipadding.putByte(0x36 ^ tmp);\n                _opadding.putByte(0x5C ^ tmp);\n            }\n            // if key is shorter than blocksize, add additional padding\n            if (keylen < _md.blockLength) {\n                var tmp = _md.blockLength - keylen;\n                for(var i = 0; i < tmp; ++i){\n                    _ipadding.putByte(0x36);\n                    _opadding.putByte(0x5C);\n                }\n            }\n            _key = key;\n            _ipadding = _ipadding.bytes();\n            _opadding = _opadding.bytes();\n        }\n        // digest is done like so: hash(opadding | hash(ipadding | message))\n        // prepare to do inner hash\n        // hash(ipadding | message)\n        _md.start();\n        _md.update(_ipadding);\n    };\n    /**\n   * Updates the HMAC with the given message bytes.\n   *\n   * @param bytes the bytes to update with.\n   */ ctx.update = function(bytes) {\n        _md.update(bytes);\n    };\n    /**\n   * Produces the Message Authentication Code (MAC).\n   *\n   * @return a byte buffer containing the digest value.\n   */ ctx.getMac = function() {\n        // digest is done like so: hash(opadding | hash(ipadding | message))\n        // here we do the outer hashing\n        var inner = _md.digest().bytes();\n        _md.start();\n        _md.update(_opadding);\n        _md.update(inner);\n        return _md.digest();\n    };\n    // alias for getMac\n    ctx.digest = ctx.getMac;\n    return ctx;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/jsbn.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/jsbn.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Basic JavaScript BN library - subset useful for RSA encryption.\n/*\nLicensing (LICENSE)\n-------------------\n\nThis software is covered under the following copyright:\n*/ /*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */ /*\nAddress all questions regarding this license to:\n\n  Tom Wu\n  tjw@cs.Stanford.EDU\n*/ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\nmodule.exports = forge.jsbn = forge.jsbn || {};\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe;\n// (public) Constructor\nfunction BigInteger(a, b, c) {\n    this.data = [];\n    if (a != null) if (\"number\" == typeof a) this.fromNumber(a, b, c);\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n    else this.fromString(a, b);\n}\nforge.jsbn.BigInteger = BigInteger;\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null);\n}\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while(--n >= 0){\n        var v = x * this.data[i++] + w.data[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w.data[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff, xh = x >> 15;\n    while(--n >= 0){\n        var l = this.data[i] & 0x7fff;\n        var h = this.data[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w.data[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w.data[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff, xh = x >> 14;\n    while(--n >= 0){\n        var l = this.data[i] & 0x3fff;\n        var h = this.data[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w.data[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w.data[j++] = l & 0xfffffff;\n    }\n    return c;\n}\n// node.js (no browser)\nif (typeof navigator === \"undefined\") {\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n} else if (j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n} else if (j_lm && navigator.appName != \"Netscape\") {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n} else {\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for(var i = this.t - 1; i >= 0; --i)r.data[i] = this.data[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0) this.data[0] = x;\n    else if (x < -1) this.data[0] = x + this.DV;\n    else this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 256) k = 8; // byte array\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else {\n        this.fromRadix(s, b);\n        return;\n    }\n    this.t = 0;\n    this.s = 0;\n    var i = s.length, mi = false, sh = 0;\n    while(--i >= 0){\n        var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\") mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh == 0) this.data[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n            this.data[this.t++] = x >> this.DB - sh;\n        } else this.data[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB) sh -= this.DB;\n    }\n    if (k == 8 && (s[0] & 0x80) != 0) {\n        this.s = -1;\n        if (sh > 0) this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    var c = this.s & this.DM;\n    while(this.t > 0 && this.data[this.t - 1] == c)--this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else return this.toRadix(b);\n    var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n    var p = this.DB - i * this.DB % k;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this.data[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while(i >= 0){\n            if (p < k) {\n                d = (this.data[i] & (1 << p) - 1) << k - p;\n                d |= this.data[--i] >> (p += this.DB - k);\n            } else {\n                d = this.data[i] >> (p -= k) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0) m = true;\n            if (m) r += int2char(d);\n        }\n    }\n    return m ? r : \"0\";\n}\n// (public) -this\nfunction bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n// (public) |this|\nfunction bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return this.s < 0 ? -r : r;\n    while(--i >= 0)if ((r = this.data[i] - a.data[i]) != 0) return r;\n    return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1, t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    var i;\n    for(i = this.t - 1; i >= 0; --i)r.data[i + n] = this.data[i];\n    for(i = n - 1; i >= 0; --i)r.data[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for(var i = n; i < this.t; ++i)r.data[i - n] = this.data[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;\n    for(i = this.t - 1; i >= 0; --i){\n        r.data[i + ds + 1] = this.data[i] >> cbs | c;\n        c = (this.data[i] & bm) << bs;\n    }\n    for(i = ds - 1; i >= 0; --i)r.data[i] = 0;\n    r.data[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r.data[0] = this.data[ds] >> bs;\n    for(var i = ds + 1; i < this.t; ++i){\n        r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;\n        r.data[i - ds] = this.data[i] >> bs;\n    }\n    if (bs > 0) r.data[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while(i < m){\n        c += this.data[i] - a.data[i];\n        r.data[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while(i < this.t){\n            c += this.data[i];\n            r.data[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    } else {\n        c += this.s;\n        while(i < a.t){\n            c -= a.data[i];\n            r.data[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1) r.data[i++] = this.DV + c;\n    else if (c > 0) r.data[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    var x = this.abs(), y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while(--i >= 0)r.data[i] = 0;\n    for(i = 0; i < y.t; ++i)r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while(--i >= 0)r.data[i] = 0;\n    for(i = 0; i < x.t - 1; ++i){\n        var c = x.am(i, x.data[i], r, 2 * i, 0, 1);\n        if ((r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n            r.data[i + x.t] -= x.DV;\n            r.data[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0) r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null) q.fromInt(0);\n        if (r != null) this.copyTo(r);\n        return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(), ts = this.s, ms = m.s;\n    var nsh = this.DB - nbits(pm.data[pm.t - 1]); // normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    } else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y.data[ys - 1];\n    if (y0 == 0) return;\n    var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n    var i = r.t, j = i - ys, t = q == null ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r.data[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n    while(y.t < ys)y.data[y.t++] = 0;\n    while(--j >= 0){\n        // Estimate quotient digit\n        var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);\n        if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while(r.data[i] < --qd)r.subTo(t, r);\n        }\n    }\n    if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n}\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n    this.m = m;\n}\nfunction cConvert(x) {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n    else return x;\n}\nfunction cRevert(x) {\n    return x;\n}\nfunction cReduce(x) {\n    x.divRemTo(this.m, null, x);\n}\nfunction cMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nfunction cSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1) return 0;\n    var x = this.data[0];\n    if ((x & 1) == 0) return 0;\n    var y = x & 3; // y == 1/x mod 2^2\n    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? this.DV - y : -y;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << m.DB - 15) - 1;\n    this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while(x.t <= this.mt2)x.data[x.t++] = 0;\n    for(var i = 0; i < this.m.t; ++i){\n        // faster way of calculating u0 = x.data[i]*mp mod DV\n        var j = x.data[i] & 0x7fff;\n        var u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while(x.data[j] >= x.DV){\n            x.data[j] -= x.DV;\n            x.data[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (protected) true iff this is even\nfunction bnpIsEven() {\n    return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;\n}\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n    g.copyTo(r);\n    while(--i >= 0){\n        z.sqrTo(r, r2);\n        if ((e & 1 << i) > 0) z.mulTo(r2, g, r);\n        else {\n            var t = r;\n            r = r2;\n            r2 = t;\n        }\n    }\n    return z.revert(r);\n}\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n    var z;\n    if (e < 256 || m.isEven()) z = new Classic(m);\n    else z = new Montgomery(m);\n    return this.exp(e, z);\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n// jsbn2 lib\n//Copyright (c) 2005-2009  Tom Wu\n//All Rights Reserved.\n//See \"LICENSE\" for details (See jsbn.js for LICENSE).\n//Extended JavaScript BN functions, required for RSA private ops.\n//Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n//(public)\nfunction bnClone() {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n}\n//(public) return value as integer\nfunction bnIntValue() {\n    if (this.s < 0) {\n        if (this.t == 1) return this.data[0] - this.DV;\n        else if (this.t == 0) return -1;\n    } else if (this.t == 1) return this.data[0];\n    else if (this.t == 0) return 0;\n    // assumes 16 < DB < 32\n    return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];\n}\n//(public) return value as byte\nfunction bnByteValue() {\n    return this.t == 0 ? this.s : this.data[0] << 24 >> 24;\n}\n//(public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n    return this.t == 0 ? this.s : this.data[0] << 16 >> 16;\n}\n//(protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n}\n//(public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n    if (this.s < 0) return -1;\n    else if (this.t <= 0 || this.t == 1 && this.data[0] <= 0) return 0;\n    else return 1;\n}\n//(protected) convert to radix string\nfunction bnpToRadix(b) {\n    if (b == null) b = 10;\n    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n    this.divRemTo(d, y, z);\n    while(y.signum() > 0){\n        r = (a + z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n}\n//(protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n    for(var i = 0; i < s.length; ++i){\n        var x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n            continue;\n        }\n        w = b * w + x;\n        if (++j >= cs) {\n            this.dMultiply(d);\n            this.dAddOffset(w, 0);\n            j = 0;\n            w = 0;\n        }\n    }\n    if (j > 0) {\n        this.dMultiply(Math.pow(b, j));\n        this.dAddOffset(w, 0);\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n//(protected) alternate constructor\nfunction bnpFromNumber(a, b, c) {\n    if (\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if (a < 2) this.fromInt(1);\n        else {\n            this.fromNumber(a, c);\n            if (!this.testBit(a - 1)) this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n            if (this.isEven()) this.dAddOffset(1, 0); // force odd\n            while(!this.isProbablePrime(b)){\n                this.dAddOffset(2, 0);\n                if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n            }\n        }\n    } else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a & 7;\n        x.length = (a >> 3) + 1;\n        b.nextBytes(x);\n        if (t > 0) x[0] &= (1 << t) - 1;\n        else x[0] = 0;\n        this.fromString(x, 256);\n    }\n}\n//(public) convert to bigendian byte array\nfunction bnToByteArray() {\n    var i = this.t, r = new Array();\n    r[0] = this.s;\n    var p = this.DB - i * this.DB % 8, d, k = 0;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n        while(i >= 0){\n            if (p < 8) {\n                d = (this.data[i] & (1 << p) - 1) << 8 - p;\n                d |= this.data[--i] >> (p += this.DB - 8);\n            } else {\n                d = this.data[i] >> (p -= 8) & 0xff;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if ((d & 0x80) != 0) d |= -256;\n            if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n            if (k > 0 || d != this.s) r[k++] = d;\n        }\n    }\n    return r;\n}\nfunction bnEquals(a) {\n    return this.compareTo(a) == 0;\n}\nfunction bnMin(a) {\n    return this.compareTo(a) < 0 ? this : a;\n}\nfunction bnMax(a) {\n    return this.compareTo(a) > 0 ? this : a;\n}\n//(protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n    var i, f, m = Math.min(a.t, this.t);\n    for(i = 0; i < m; ++i)r.data[i] = op(this.data[i], a.data[i]);\n    if (a.t < this.t) {\n        f = a.s & this.DM;\n        for(i = m; i < this.t; ++i)r.data[i] = op(this.data[i], f);\n        r.t = this.t;\n    } else {\n        f = this.s & this.DM;\n        for(i = m; i < a.t; ++i)r.data[i] = op(f, a.data[i]);\n        r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n}\n//(public) this & a\nfunction op_and(x, y) {\n    return x & y;\n}\nfunction bnAnd(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n}\n//(public) this | a\nfunction op_or(x, y) {\n    return x | y;\n}\nfunction bnOr(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n}\n//(public) this ^ a\nfunction op_xor(x, y) {\n    return x ^ y;\n}\nfunction bnXor(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n}\n//(public) this & ~a\nfunction op_andnot(x, y) {\n    return x & ~y;\n}\nfunction bnAndNot(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n}\n//(public) ~this\nfunction bnNot() {\n    var r = nbi();\n    for(var i = 0; i < this.t; ++i)r.data[i] = this.DM & ~this.data[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n}\n//(public) this << n\nfunction bnShiftLeft(n) {\n    var r = nbi();\n    if (n < 0) this.rShiftTo(-n, r);\n    else this.lShiftTo(n, r);\n    return r;\n}\n//(public) this >> n\nfunction bnShiftRight(n) {\n    var r = nbi();\n    if (n < 0) this.lShiftTo(-n, r);\n    else this.rShiftTo(n, r);\n    return r;\n}\n//return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n    if (x == 0) return -1;\n    var r = 0;\n    if ((x & 0xffff) == 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) == 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) == 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) == 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) == 0) ++r;\n    return r;\n}\n//(public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n    for(var i = 0; i < this.t; ++i)if (this.data[i] != 0) return i * this.DB + lbit(this.data[i]);\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n}\n//return number of 1 bits in x\nfunction cbit(x) {\n    var r = 0;\n    while(x != 0){\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n//(public) return number of set bits\nfunction bnBitCount() {\n    var r = 0, x = this.s & this.DM;\n    for(var i = 0; i < this.t; ++i)r += cbit(this.data[i] ^ x);\n    return r;\n}\n//(public) true iff nth bit is set\nfunction bnTestBit(n) {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t) return this.s != 0;\n    return (this.data[j] & 1 << n % this.DB) != 0;\n}\n//(protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n}\n//(public) this | (1<<n)\nfunction bnSetBit(n) {\n    return this.changeBit(n, op_or);\n}\n//(public) this & ~(1<<n)\nfunction bnClearBit(n) {\n    return this.changeBit(n, op_andnot);\n}\n//(public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n    return this.changeBit(n, op_xor);\n}\n//(protected) r = this + a\nfunction bnpAddTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while(i < m){\n        c += this.data[i] + a.data[i];\n        r.data[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while(i < this.t){\n            c += this.data[i];\n            r.data[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    } else {\n        c += this.s;\n        while(i < a.t){\n            c += a.data[i];\n            r.data[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0) r.data[i++] = c;\n    else if (c < -1) r.data[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n//(public) this + a\nfunction bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n//(public) this - a\nfunction bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n//(public) this * a\nfunction bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n//(public) this / a\nfunction bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n//(public) this % a\nfunction bnRemainder(a) {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n}\n//(public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n    var q = nbi(), r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n}\n//(protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n    this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n}\n//(protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n    if (n == 0) return;\n    while(this.t <= w)this.data[this.t++] = 0;\n    this.data[w] += n;\n    while(this.data[w] >= this.DV){\n        this.data[w] -= this.DV;\n        if (++w >= this.t) this.data[this.t++] = 0;\n        ++this.data[w];\n    }\n}\n//A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) {\n    return x;\n}\nfunction nMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n}\nfunction nSqrTo(x, r) {\n    x.squareTo(r);\n}\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n//(public) this^e\nfunction bnPow(e) {\n    return this.exp(e, new NullExp());\n}\n//(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while(i > 0)r.data[--i] = 0;\n    var j;\n    for(j = r.t - this.t; i < j; ++i)r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);\n    for(j = Math.min(a.t, n); i < j; ++i)this.am(0, a.data[i], r, i, 0, n - i);\n    r.clamp();\n}\n//(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n    while(--i >= 0)r.data[i] = 0;\n    for(i = Math.max(n - this.t, 0); i < a.t; ++i)r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n}\n//Barrett modular reduction\nfunction Barrett(m) {\n    // setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n}\nfunction barrettConvert(x) {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n    else if (x.compareTo(this.m) < 0) return x;\n    else {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    }\n}\nfunction barrettRevert(x) {\n    return x;\n}\n//x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1) {\n        x.t = this.m.t + 1;\n        x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while(x.compareTo(this.r2) < 0)x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while(x.compareTo(this.m) >= 0)x.subTo(this.m, x);\n}\n//r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n//r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n//(public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n    var i = e.bitLength(), k, r = nbv(1), z;\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    if (i < 8) z = new Classic(m);\n    else if (m.isEven()) z = new Barrett(m);\n    else z = new Montgomery(m);\n    // precomputation\n    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while(n <= km){\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n    i = nbits(e.data[j]) - 1;\n    while(j >= 0){\n        if (i >= k1) w = e.data[j] >> i - k1 & km;\n        else {\n            w = (e.data[j] & (1 << i + 1) - 1) << k1 - i;\n            if (j > 0) w |= e.data[j - 1] >> this.DB + i - k1;\n        }\n        n = k;\n        while((w & 1) == 0){\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\n            g[w].copyTo(r);\n            is1 = false;\n        } else {\n            while(n > 1){\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0) z.sqrTo(r, r2);\n            else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n        while(j >= 0 && (e.data[j] & 1 << i) == 0){\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    return z.revert(r);\n}\n//(public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n    var x = this.s < 0 ? this.negate() : this.clone();\n    var y = a.s < 0 ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n    }\n    var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n    if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n    }\n    while(x.signum() > 0){\n        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n        if (x.compareTo(y) >= 0) {\n            x.subTo(y, x);\n            x.rShiftTo(1, x);\n        } else {\n            y.subTo(x, y);\n            y.rShiftTo(1, y);\n        }\n    }\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n}\n//(protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n    if (n <= 0) return 0;\n    var d = this.DV % n, r = this.s < 0 ? n - 1 : 0;\n    if (this.t > 0) if (d == 0) r = this.data[0] % n;\n    else for(var i = this.t - 1; i >= 0; --i)r = (d * r + this.data[i]) % n;\n    return r;\n}\n//(public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n    var ac = m.isEven();\n    if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;\n    var u = m.clone(), v = this.clone();\n    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n    while(u.signum() != 0){\n        while(u.isEven()){\n            u.rShiftTo(1, u);\n            if (ac) {\n                if (!a.isEven() || !b.isEven()) {\n                    a.addTo(this, a);\n                    b.subTo(m, b);\n                }\n                a.rShiftTo(1, a);\n            } else if (!b.isEven()) b.subTo(m, b);\n            b.rShiftTo(1, b);\n        }\n        while(v.isEven()){\n            v.rShiftTo(1, v);\n            if (ac) {\n                if (!c.isEven() || !d.isEven()) {\n                    c.addTo(this, c);\n                    d.subTo(m, d);\n                }\n                c.rShiftTo(1, c);\n            } else if (!d.isEven()) d.subTo(m, d);\n            d.rShiftTo(1, d);\n        }\n        if (u.compareTo(v) >= 0) {\n            u.subTo(v, u);\n            if (ac) a.subTo(c, a);\n            b.subTo(d, b);\n        } else {\n            v.subTo(u, v);\n            if (ac) c.subTo(a, c);\n            d.subTo(b, d);\n        }\n    }\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0) return d.subtract(m);\n    if (d.signum() < 0) d.addTo(m, d);\n    else return d;\n    if (d.signum() < 0) return d.add(m);\n    else return d;\n}\nvar lowprimes = [\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n    19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    53,\n    59,\n    61,\n    67,\n    71,\n    73,\n    79,\n    83,\n    89,\n    97,\n    101,\n    103,\n    107,\n    109,\n    113,\n    127,\n    131,\n    137,\n    139,\n    149,\n    151,\n    157,\n    163,\n    167,\n    173,\n    179,\n    181,\n    191,\n    193,\n    197,\n    199,\n    211,\n    223,\n    227,\n    229,\n    233,\n    239,\n    241,\n    251,\n    257,\n    263,\n    269,\n    271,\n    277,\n    281,\n    283,\n    293,\n    307,\n    311,\n    313,\n    317,\n    331,\n    337,\n    347,\n    349,\n    353,\n    359,\n    367,\n    373,\n    379,\n    383,\n    389,\n    397,\n    401,\n    409,\n    419,\n    421,\n    431,\n    433,\n    439,\n    443,\n    449,\n    457,\n    461,\n    463,\n    467,\n    479,\n    487,\n    491,\n    499,\n    503,\n    509\n];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n//(public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n    var i, x = this.abs();\n    if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {\n        for(i = 0; i < lowprimes.length; ++i)if (x.data[0] == lowprimes[i]) return true;\n        return false;\n    }\n    if (x.isEven()) return false;\n    i = 1;\n    while(i < lowprimes.length){\n        var m = lowprimes[i], j = i + 1;\n        while(j < lowprimes.length && m < lplim)m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j)if (m % lowprimes[i++] == 0) return false;\n    }\n    return x.millerRabin(t);\n}\n//(protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0) return false;\n    var r = n1.shiftRight(k);\n    var prng = bnGetPrng();\n    var a;\n    for(var i = 0; i < t; ++i){\n        // select witness 'a' at random from between 1 and n1\n        do {\n            a = new BigInteger(this.bitLength(), prng);\n        }while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);\n        var y = a.modPow(r, this);\n        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n            var j = 1;\n            while(j++ < k && y.compareTo(n1) != 0){\n                y = y.modPowInt(2, this);\n                if (y.compareTo(BigInteger.ONE) == 0) return false;\n            }\n            if (y.compareTo(n1) != 0) return false;\n        }\n    }\n    return true;\n}\n// get pseudo random number generator\nfunction bnGetPrng() {\n    // create prng with api that matches BigInteger secure random\n    return {\n        // x is an array to fill with bytes\n        nextBytes: function(x) {\n            for(var i = 0; i < x.length; ++i){\n                x[i] = Math.floor(Math.random() * 0x0100);\n            }\n        }\n    };\n}\n//protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n//public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime; //BigInteger interfaces not implemented in jsbn:\n //BigInteger(int signum, byte[] magnitude)\n //double doubleValue()\n //float floatValue()\n //int hashCode()\n //long longValue()\n //static BigInteger valueOf(long val)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/jsbn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/md.js":
/*!*******************************************!*\
  !*** ./node_modules/node-forge/lib/md.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Node.js module for Forge message digests.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2017 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\nmodule.exports = forge.md = forge.md || {};\nforge.md.algorithms = forge.md.algorithms || {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1mb3JnZS9saWIvbWQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DO0FBQ0QsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEJDLE9BQU9DLE9BQU8sR0FBR0gsTUFBTUksRUFBRSxHQUFHSixNQUFNSSxFQUFFLElBQUksQ0FBQztBQUN6Q0osTUFBTUksRUFBRSxDQUFDQyxVQUFVLEdBQUdMLE1BQU1JLEVBQUUsQ0FBQ0MsVUFBVSxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9ub2RlLWZvcmdlL2xpYi9tZC5qcz8yMDQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTm9kZS5qcyBtb2R1bGUgZm9yIEZvcmdlIG1lc3NhZ2UgZGlnZXN0cy5cbiAqXG4gKiBAYXV0aG9yIERhdmUgTG9uZ2xleVxuICpcbiAqIENvcHlyaWdodCAyMDExLTIwMTcgRGlnaXRhbCBCYXphYXIsIEluYy5cbiAqL1xudmFyIGZvcmdlID0gcmVxdWlyZSgnLi9mb3JnZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcmdlLm1kID0gZm9yZ2UubWQgfHwge307XG5mb3JnZS5tZC5hbGdvcml0aG1zID0gZm9yZ2UubWQuYWxnb3JpdGhtcyB8fCB7fTtcbiJdLCJuYW1lcyI6WyJmb3JnZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibWQiLCJhbGdvcml0aG1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/oids.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/oids.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Object IDs for ASN.1.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\nforge.pki = forge.pki || {};\nvar oids = module.exports = forge.pki.oids = forge.oids = forge.oids || {};\n// set id to name mapping and name to id mapping\nfunction _IN(id, name) {\n    oids[id] = name;\n    oids[name] = id;\n}\n// set id to name mapping only\nfunction _I_(id, name) {\n    oids[id] = name;\n}\n// algorithm OIDs\n_IN(\"1.2.840.113549.1.1.1\", \"rsaEncryption\");\n// Note: md2 & md4 not implemented\n//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');\n//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');\n_IN(\"1.2.840.113549.1.1.4\", \"md5WithRSAEncryption\");\n_IN(\"1.2.840.113549.1.1.5\", \"sha1WithRSAEncryption\");\n_IN(\"1.2.840.113549.1.1.7\", \"RSAES-OAEP\");\n_IN(\"1.2.840.113549.1.1.8\", \"mgf1\");\n_IN(\"1.2.840.113549.1.1.9\", \"pSpecified\");\n_IN(\"1.2.840.113549.1.1.10\", \"RSASSA-PSS\");\n_IN(\"1.2.840.113549.1.1.11\", \"sha256WithRSAEncryption\");\n_IN(\"1.2.840.113549.1.1.12\", \"sha384WithRSAEncryption\");\n_IN(\"1.2.840.113549.1.1.13\", \"sha512WithRSAEncryption\");\n// Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519\n_IN(\"1.3.101.112\", \"EdDSA25519\");\n_IN(\"1.2.840.10040.4.3\", \"dsa-with-sha1\");\n_IN(\"1.3.14.3.2.7\", \"desCBC\");\n_IN(\"1.3.14.3.2.26\", \"sha1\");\n// Deprecated equivalent of sha1WithRSAEncryption\n_IN(\"1.3.14.3.2.29\", \"sha1WithRSASignature\");\n_IN(\"2.16.840.1.101.3.4.2.1\", \"sha256\");\n_IN(\"2.16.840.1.101.3.4.2.2\", \"sha384\");\n_IN(\"2.16.840.1.101.3.4.2.3\", \"sha512\");\n_IN(\"2.16.840.1.101.3.4.2.4\", \"sha224\");\n_IN(\"2.16.840.1.101.3.4.2.5\", \"sha512-224\");\n_IN(\"2.16.840.1.101.3.4.2.6\", \"sha512-256\");\n_IN(\"1.2.840.113549.2.2\", \"md2\");\n_IN(\"1.2.840.113549.2.5\", \"md5\");\n// pkcs#7 content types\n_IN(\"1.2.840.113549.1.7.1\", \"data\");\n_IN(\"1.2.840.113549.1.7.2\", \"signedData\");\n_IN(\"1.2.840.113549.1.7.3\", \"envelopedData\");\n_IN(\"1.2.840.113549.1.7.4\", \"signedAndEnvelopedData\");\n_IN(\"1.2.840.113549.1.7.5\", \"digestedData\");\n_IN(\"1.2.840.113549.1.7.6\", \"encryptedData\");\n// pkcs#9 oids\n_IN(\"1.2.840.113549.1.9.1\", \"emailAddress\");\n_IN(\"1.2.840.113549.1.9.2\", \"unstructuredName\");\n_IN(\"1.2.840.113549.1.9.3\", \"contentType\");\n_IN(\"1.2.840.113549.1.9.4\", \"messageDigest\");\n_IN(\"1.2.840.113549.1.9.5\", \"signingTime\");\n_IN(\"1.2.840.113549.1.9.6\", \"counterSignature\");\n_IN(\"1.2.840.113549.1.9.7\", \"challengePassword\");\n_IN(\"1.2.840.113549.1.9.8\", \"unstructuredAddress\");\n_IN(\"1.2.840.113549.1.9.14\", \"extensionRequest\");\n_IN(\"1.2.840.113549.1.9.20\", \"friendlyName\");\n_IN(\"1.2.840.113549.1.9.21\", \"localKeyId\");\n_IN(\"1.2.840.113549.1.9.22.1\", \"x509Certificate\");\n// pkcs#12 safe bags\n_IN(\"1.2.840.113549.1.12.10.1.1\", \"keyBag\");\n_IN(\"1.2.840.113549.1.12.10.1.2\", \"pkcs8ShroudedKeyBag\");\n_IN(\"1.2.840.113549.1.12.10.1.3\", \"certBag\");\n_IN(\"1.2.840.113549.1.12.10.1.4\", \"crlBag\");\n_IN(\"1.2.840.113549.1.12.10.1.5\", \"secretBag\");\n_IN(\"1.2.840.113549.1.12.10.1.6\", \"safeContentsBag\");\n// password-based-encryption for pkcs#12\n_IN(\"1.2.840.113549.1.5.13\", \"pkcs5PBES2\");\n_IN(\"1.2.840.113549.1.5.12\", \"pkcs5PBKDF2\");\n_IN(\"1.2.840.113549.1.12.1.1\", \"pbeWithSHAAnd128BitRC4\");\n_IN(\"1.2.840.113549.1.12.1.2\", \"pbeWithSHAAnd40BitRC4\");\n_IN(\"1.2.840.113549.1.12.1.3\", \"pbeWithSHAAnd3-KeyTripleDES-CBC\");\n_IN(\"1.2.840.113549.1.12.1.4\", \"pbeWithSHAAnd2-KeyTripleDES-CBC\");\n_IN(\"1.2.840.113549.1.12.1.5\", \"pbeWithSHAAnd128BitRC2-CBC\");\n_IN(\"1.2.840.113549.1.12.1.6\", \"pbewithSHAAnd40BitRC2-CBC\");\n// hmac OIDs\n_IN(\"1.2.840.113549.2.7\", \"hmacWithSHA1\");\n_IN(\"1.2.840.113549.2.8\", \"hmacWithSHA224\");\n_IN(\"1.2.840.113549.2.9\", \"hmacWithSHA256\");\n_IN(\"1.2.840.113549.2.10\", \"hmacWithSHA384\");\n_IN(\"1.2.840.113549.2.11\", \"hmacWithSHA512\");\n// symmetric key algorithm oids\n_IN(\"1.2.840.113549.3.7\", \"des-EDE3-CBC\");\n_IN(\"2.16.840.1.101.3.4.1.2\", \"aes128-CBC\");\n_IN(\"2.16.840.1.101.3.4.1.22\", \"aes192-CBC\");\n_IN(\"2.16.840.1.101.3.4.1.42\", \"aes256-CBC\");\n// certificate issuer/subject OIDs\n_IN(\"2.5.4.3\", \"commonName\");\n_IN(\"2.5.4.4\", \"surname\");\n_IN(\"2.5.4.5\", \"serialNumber\");\n_IN(\"2.5.4.6\", \"countryName\");\n_IN(\"2.5.4.7\", \"localityName\");\n_IN(\"2.5.4.8\", \"stateOrProvinceName\");\n_IN(\"2.5.4.9\", \"streetAddress\");\n_IN(\"2.5.4.10\", \"organizationName\");\n_IN(\"2.5.4.11\", \"organizationalUnitName\");\n_IN(\"2.5.4.12\", \"title\");\n_IN(\"2.5.4.13\", \"description\");\n_IN(\"2.5.4.15\", \"businessCategory\");\n_IN(\"2.5.4.17\", \"postalCode\");\n_IN(\"2.5.4.42\", \"givenName\");\n_IN(\"1.3.6.1.4.1.311.60.2.1.2\", \"jurisdictionOfIncorporationStateOrProvinceName\");\n_IN(\"1.3.6.1.4.1.311.60.2.1.3\", \"jurisdictionOfIncorporationCountryName\");\n// X.509 extension OIDs\n_IN(\"2.16.840.1.113730.1.1\", \"nsCertType\");\n_IN(\"2.16.840.1.113730.1.13\", \"nsComment\"); // deprecated in theory; still widely used\n_I_(\"2.5.29.1\", \"authorityKeyIdentifier\"); // deprecated, use .35\n_I_(\"2.5.29.2\", \"keyAttributes\"); // obsolete use .37 or .15\n_I_(\"2.5.29.3\", \"certificatePolicies\"); // deprecated, use .32\n_I_(\"2.5.29.4\", \"keyUsageRestriction\"); // obsolete use .37 or .15\n_I_(\"2.5.29.5\", \"policyMapping\"); // deprecated use .33\n_I_(\"2.5.29.6\", \"subtreesConstraint\"); // obsolete use .30\n_I_(\"2.5.29.7\", \"subjectAltName\"); // deprecated use .17\n_I_(\"2.5.29.8\", \"issuerAltName\"); // deprecated use .18\n_I_(\"2.5.29.9\", \"subjectDirectoryAttributes\");\n_I_(\"2.5.29.10\", \"basicConstraints\"); // deprecated use .19\n_I_(\"2.5.29.11\", \"nameConstraints\"); // deprecated use .30\n_I_(\"2.5.29.12\", \"policyConstraints\"); // deprecated use .36\n_I_(\"2.5.29.13\", \"basicConstraints\"); // deprecated use .19\n_IN(\"2.5.29.14\", \"subjectKeyIdentifier\");\n_IN(\"2.5.29.15\", \"keyUsage\");\n_I_(\"2.5.29.16\", \"privateKeyUsagePeriod\");\n_IN(\"2.5.29.17\", \"subjectAltName\");\n_IN(\"2.5.29.18\", \"issuerAltName\");\n_IN(\"2.5.29.19\", \"basicConstraints\");\n_I_(\"2.5.29.20\", \"cRLNumber\");\n_I_(\"2.5.29.21\", \"cRLReason\");\n_I_(\"2.5.29.22\", \"expirationDate\");\n_I_(\"2.5.29.23\", \"instructionCode\");\n_I_(\"2.5.29.24\", \"invalidityDate\");\n_I_(\"2.5.29.25\", \"cRLDistributionPoints\"); // deprecated use .31\n_I_(\"2.5.29.26\", \"issuingDistributionPoint\"); // deprecated use .28\n_I_(\"2.5.29.27\", \"deltaCRLIndicator\");\n_I_(\"2.5.29.28\", \"issuingDistributionPoint\");\n_I_(\"2.5.29.29\", \"certificateIssuer\");\n_I_(\"2.5.29.30\", \"nameConstraints\");\n_IN(\"2.5.29.31\", \"cRLDistributionPoints\");\n_IN(\"2.5.29.32\", \"certificatePolicies\");\n_I_(\"2.5.29.33\", \"policyMappings\");\n_I_(\"2.5.29.34\", \"policyConstraints\"); // deprecated use .36\n_IN(\"2.5.29.35\", \"authorityKeyIdentifier\");\n_I_(\"2.5.29.36\", \"policyConstraints\");\n_IN(\"2.5.29.37\", \"extKeyUsage\");\n_I_(\"2.5.29.46\", \"freshestCRL\");\n_I_(\"2.5.29.54\", \"inhibitAnyPolicy\");\n// extKeyUsage purposes\n_IN(\"1.3.6.1.4.1.11129.2.4.2\", \"timestampList\");\n_IN(\"1.3.6.1.5.5.7.1.1\", \"authorityInfoAccess\");\n_IN(\"1.3.6.1.5.5.7.3.1\", \"serverAuth\");\n_IN(\"1.3.6.1.5.5.7.3.2\", \"clientAuth\");\n_IN(\"1.3.6.1.5.5.7.3.3\", \"codeSigning\");\n_IN(\"1.3.6.1.5.5.7.3.4\", \"emailProtection\");\n_IN(\"1.3.6.1.5.5.7.3.8\", \"timeStamping\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/oids.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/pbe.js":
/*!********************************************!*\
  !*** ./node_modules/node-forge/lib/pbe.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./aes */ \"(ssr)/./node_modules/node-forge/lib/aes.js\");\n__webpack_require__(/*! ./asn1 */ \"(ssr)/./node_modules/node-forge/lib/asn1.js\");\n__webpack_require__(/*! ./des */ \"(ssr)/./node_modules/node-forge/lib/des.js\");\n__webpack_require__(/*! ./md */ \"(ssr)/./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./oids */ \"(ssr)/./node_modules/node-forge/lib/oids.js\");\n__webpack_require__(/*! ./pbkdf2 */ \"(ssr)/./node_modules/node-forge/lib/pbkdf2.js\");\n__webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/node-forge/lib/pem.js\");\n__webpack_require__(/*! ./random */ \"(ssr)/./node_modules/node-forge/lib/random.js\");\n__webpack_require__(/*! ./rc2 */ \"(ssr)/./node_modules/node-forge/lib/rc2.js\");\n__webpack_require__(/*! ./rsa */ \"(ssr)/./node_modules/node-forge/lib/rsa.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nif (typeof BigInteger === \"undefined\") {\n    var BigInteger = forge.jsbn.BigInteger;\n}\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n/* Password-based encryption implementation. */ var pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n    name: \"EncryptedPrivateKeyInfo\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            name: \"EncryptedPrivateKeyInfo.encryptionAlgorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [\n                {\n                    name: \"AlgorithmIdentifier.algorithm\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OID,\n                    constructed: false,\n                    capture: \"encryptionOid\"\n                },\n                {\n                    name: \"AlgorithmIdentifier.parameters\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.SEQUENCE,\n                    constructed: true,\n                    captureAsn1: \"encryptionParams\"\n                }\n            ]\n        },\n        {\n            // encryptedData\n            name: \"EncryptedPrivateKeyInfo.encryptedData\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OCTETSTRING,\n            constructed: false,\n            capture: \"encryptedData\"\n        }\n    ]\n};\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n    name: \"PBES2Algorithms\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            name: \"PBES2Algorithms.keyDerivationFunc\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [\n                {\n                    name: \"PBES2Algorithms.keyDerivationFunc.oid\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OID,\n                    constructed: false,\n                    capture: \"kdfOid\"\n                },\n                {\n                    name: \"PBES2Algorithms.params\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.SEQUENCE,\n                    constructed: true,\n                    value: [\n                        {\n                            name: \"PBES2Algorithms.params.salt\",\n                            tagClass: asn1.Class.UNIVERSAL,\n                            type: asn1.Type.OCTETSTRING,\n                            constructed: false,\n                            capture: \"kdfSalt\"\n                        },\n                        {\n                            name: \"PBES2Algorithms.params.iterationCount\",\n                            tagClass: asn1.Class.UNIVERSAL,\n                            type: asn1.Type.INTEGER,\n                            constructed: false,\n                            capture: \"kdfIterationCount\"\n                        },\n                        {\n                            name: \"PBES2Algorithms.params.keyLength\",\n                            tagClass: asn1.Class.UNIVERSAL,\n                            type: asn1.Type.INTEGER,\n                            constructed: false,\n                            optional: true,\n                            capture: \"keyLength\"\n                        },\n                        {\n                            // prf\n                            name: \"PBES2Algorithms.params.prf\",\n                            tagClass: asn1.Class.UNIVERSAL,\n                            type: asn1.Type.SEQUENCE,\n                            constructed: true,\n                            optional: true,\n                            value: [\n                                {\n                                    name: \"PBES2Algorithms.params.prf.algorithm\",\n                                    tagClass: asn1.Class.UNIVERSAL,\n                                    type: asn1.Type.OID,\n                                    constructed: false,\n                                    capture: \"prfOid\"\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            name: \"PBES2Algorithms.encryptionScheme\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [\n                {\n                    name: \"PBES2Algorithms.encryptionScheme.oid\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OID,\n                    constructed: false,\n                    capture: \"encOid\"\n                },\n                {\n                    name: \"PBES2Algorithms.encryptionScheme.iv\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OCTETSTRING,\n                    constructed: false,\n                    capture: \"encIv\"\n                }\n            ]\n        }\n    ]\n};\nvar pkcs12PbeParamsValidator = {\n    name: \"pkcs-12PbeParams\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            name: \"pkcs-12PbeParams.salt\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OCTETSTRING,\n            constructed: false,\n            capture: \"salt\"\n        },\n        {\n            name: \"pkcs-12PbeParams.iterations\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"iterations\"\n        }\n    ]\n};\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */ pki.encryptPrivateKeyInfo = function(obj, password, options) {\n    // set default options\n    options = options || {};\n    options.saltSize = options.saltSize || 8;\n    options.count = options.count || 2048;\n    options.algorithm = options.algorithm || \"aes128\";\n    options.prfAlgorithm = options.prfAlgorithm || \"sha1\";\n    // generate PBE params\n    var salt = forge.random.getBytesSync(options.saltSize);\n    var count = options.count;\n    var countBytes = asn1.integerToDer(count);\n    var dkLen;\n    var encryptionAlgorithm;\n    var encryptedData;\n    if (options.algorithm.indexOf(\"aes\") === 0 || options.algorithm === \"des\") {\n        // do PBES2\n        var ivLen, encOid, cipherFn;\n        switch(options.algorithm){\n            case \"aes128\":\n                dkLen = 16;\n                ivLen = 16;\n                encOid = oids[\"aes128-CBC\"];\n                cipherFn = forge.aes.createEncryptionCipher;\n                break;\n            case \"aes192\":\n                dkLen = 24;\n                ivLen = 16;\n                encOid = oids[\"aes192-CBC\"];\n                cipherFn = forge.aes.createEncryptionCipher;\n                break;\n            case \"aes256\":\n                dkLen = 32;\n                ivLen = 16;\n                encOid = oids[\"aes256-CBC\"];\n                cipherFn = forge.aes.createEncryptionCipher;\n                break;\n            case \"des\":\n                dkLen = 8;\n                ivLen = 8;\n                encOid = oids[\"desCBC\"];\n                cipherFn = forge.des.createEncryptionCipher;\n                break;\n            default:\n                var error = new Error(\"Cannot encrypt private key. Unknown encryption algorithm.\");\n                error.algorithm = options.algorithm;\n                throw error;\n        }\n        // get PRF message digest\n        var prfAlgorithm = \"hmacWith\" + options.prfAlgorithm.toUpperCase();\n        var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n        // encrypt private key using pbe SHA-1 and AES/DES\n        var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n        var iv = forge.random.getBytesSync(ivLen);\n        var cipher = cipherFn(dk);\n        cipher.start(iv);\n        cipher.update(asn1.toDer(obj));\n        cipher.finish();\n        encryptedData = cipher.output.getBytes();\n        // get PBKDF2-params\n        var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n        encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids[\"pkcs5PBES2\"]).getBytes()),\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                // keyDerivationFunc\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids[\"pkcs5PBKDF2\"]).getBytes()),\n                    // PBKDF2-params\n                    params\n                ]),\n                // encryptionScheme\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(encOid).getBytes()),\n                    // iv\n                    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\n                ])\n            ])\n        ]);\n    } else if (options.algorithm === \"3des\") {\n        // Do PKCS12 PBE\n        dkLen = 24;\n        var saltBytes = new forge.util.ByteBuffer(salt);\n        var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n        var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n        var cipher = forge.des.createEncryptionCipher(dk);\n        cipher.start(iv);\n        cipher.update(asn1.toDer(obj));\n        cipher.finish();\n        encryptedData = cipher.output.getBytes();\n        encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids[\"pbeWithSHAAnd3-KeyTripleDES-CBC\"]).getBytes()),\n            // pkcs-12PbeParams\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n                // salt\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n                // iteration count\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())\n            ])\n        ]);\n    } else {\n        var error = new Error(\"Cannot encrypt private key. Unknown encryption algorithm.\");\n        error.algorithm = options.algorithm;\n        throw error;\n    }\n    // EncryptedPrivateKeyInfo\n    var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // encryptionAlgorithm\n        encryptionAlgorithm,\n        // encryptedData\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\n    ]);\n    return rval;\n};\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */ pki.decryptPrivateKeyInfo = function(obj, password) {\n    var rval = null;\n    // get PBE params\n    var capture = {};\n    var errors = [];\n    if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n        var error = new Error(\"Cannot read encrypted private key. \" + \"ASN.1 object is not a supported EncryptedPrivateKeyInfo.\");\n        error.errors = errors;\n        throw error;\n    }\n    // get cipher\n    var oid = asn1.derToOid(capture.encryptionOid);\n    var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n    // get encrypted data\n    var encrypted = forge.util.createBuffer(capture.encryptedData);\n    cipher.update(encrypted);\n    if (cipher.finish()) {\n        rval = asn1.fromDer(cipher.output);\n    }\n    return rval;\n};\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */ pki.encryptedPrivateKeyToPem = function(epki, maxline) {\n    // convert to DER, then PEM-encode\n    var msg = {\n        type: \"ENCRYPTED PRIVATE KEY\",\n        body: asn1.toDer(epki).getBytes()\n    };\n    return forge.pem.encode(msg, {\n        maxline: maxline\n    });\n};\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */ pki.encryptedPrivateKeyFromPem = function(pem) {\n    var msg = forge.pem.decode(pem)[0];\n    if (msg.type !== \"ENCRYPTED PRIVATE KEY\") {\n        var error = new Error(\"Could not convert encrypted private key from PEM; \" + 'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n        error.headerType = msg.type;\n        throw error;\n    }\n    if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        throw new Error(\"Could not convert encrypted private key from PEM; \" + \"PEM is encrypted.\");\n    }\n    // convert DER to ASN.1 object\n    return asn1.fromDer(msg.body);\n};\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */ pki.encryptRsaPrivateKey = function(rsaKey, password, options) {\n    // standard PKCS#8\n    options = options || {};\n    if (!options.legacy) {\n        // encrypt PrivateKeyInfo\n        var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n        rval = pki.encryptPrivateKeyInfo(rval, password, options);\n        return pki.encryptedPrivateKeyToPem(rval);\n    }\n    // legacy non-PKCS#8\n    var algorithm;\n    var iv;\n    var dkLen;\n    var cipherFn;\n    switch(options.algorithm){\n        case \"aes128\":\n            algorithm = \"AES-128-CBC\";\n            dkLen = 16;\n            iv = forge.random.getBytesSync(16);\n            cipherFn = forge.aes.createEncryptionCipher;\n            break;\n        case \"aes192\":\n            algorithm = \"AES-192-CBC\";\n            dkLen = 24;\n            iv = forge.random.getBytesSync(16);\n            cipherFn = forge.aes.createEncryptionCipher;\n            break;\n        case \"aes256\":\n            algorithm = \"AES-256-CBC\";\n            dkLen = 32;\n            iv = forge.random.getBytesSync(16);\n            cipherFn = forge.aes.createEncryptionCipher;\n            break;\n        case \"3des\":\n            algorithm = \"DES-EDE3-CBC\";\n            dkLen = 24;\n            iv = forge.random.getBytesSync(8);\n            cipherFn = forge.des.createEncryptionCipher;\n            break;\n        case \"des\":\n            algorithm = \"DES-CBC\";\n            dkLen = 8;\n            iv = forge.random.getBytesSync(8);\n            cipherFn = forge.des.createEncryptionCipher;\n            break;\n        default:\n            var error = new Error(\"Could not encrypt RSA private key; unsupported \" + 'encryption algorithm \"' + options.algorithm + '\".');\n            error.algorithm = options.algorithm;\n            throw error;\n    }\n    // encrypt private key using OpenSSL legacy key derivation\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n    cipher.finish();\n    var msg = {\n        type: \"RSA PRIVATE KEY\",\n        procType: {\n            version: \"4\",\n            type: \"ENCRYPTED\"\n        },\n        dekInfo: {\n            algorithm: algorithm,\n            parameters: forge.util.bytesToHex(iv).toUpperCase()\n        },\n        body: cipher.output.getBytes()\n    };\n    return forge.pem.encode(msg);\n};\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */ pki.decryptRsaPrivateKey = function(pem, password) {\n    var rval = null;\n    var msg = forge.pem.decode(pem)[0];\n    if (msg.type !== \"ENCRYPTED PRIVATE KEY\" && msg.type !== \"PRIVATE KEY\" && msg.type !== \"RSA PRIVATE KEY\") {\n        var error = new Error(\"Could not convert private key from PEM; PEM header type \" + 'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n        error.headerType = error;\n        throw error;\n    }\n    if (msg.procType && msg.procType.type === \"ENCRYPTED\") {\n        var dkLen;\n        var cipherFn;\n        switch(msg.dekInfo.algorithm){\n            case \"DES-CBC\":\n                dkLen = 8;\n                cipherFn = forge.des.createDecryptionCipher;\n                break;\n            case \"DES-EDE3-CBC\":\n                dkLen = 24;\n                cipherFn = forge.des.createDecryptionCipher;\n                break;\n            case \"AES-128-CBC\":\n                dkLen = 16;\n                cipherFn = forge.aes.createDecryptionCipher;\n                break;\n            case \"AES-192-CBC\":\n                dkLen = 24;\n                cipherFn = forge.aes.createDecryptionCipher;\n                break;\n            case \"AES-256-CBC\":\n                dkLen = 32;\n                cipherFn = forge.aes.createDecryptionCipher;\n                break;\n            case \"RC2-40-CBC\":\n                dkLen = 5;\n                cipherFn = function(key) {\n                    return forge.rc2.createDecryptionCipher(key, 40);\n                };\n                break;\n            case \"RC2-64-CBC\":\n                dkLen = 8;\n                cipherFn = function(key) {\n                    return forge.rc2.createDecryptionCipher(key, 64);\n                };\n                break;\n            case \"RC2-128-CBC\":\n                dkLen = 16;\n                cipherFn = function(key) {\n                    return forge.rc2.createDecryptionCipher(key, 128);\n                };\n                break;\n            default:\n                var error = new Error(\"Could not decrypt private key; unsupported \" + 'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n                error.algorithm = msg.dekInfo.algorithm;\n                throw error;\n        }\n        // use OpenSSL legacy key derivation\n        var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n        var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n        var cipher = cipherFn(dk);\n        cipher.start(iv);\n        cipher.update(forge.util.createBuffer(msg.body));\n        if (cipher.finish()) {\n            rval = cipher.output.getBytes();\n        } else {\n            return rval;\n        }\n    } else {\n        rval = msg.body;\n    }\n    if (msg.type === \"ENCRYPTED PRIVATE KEY\") {\n        rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n    } else {\n        // decryption already performed above\n        rval = asn1.fromDer(rval);\n    }\n    if (rval !== null) {\n        rval = pki.privateKeyFromAsn1(rval);\n    }\n    return rval;\n};\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */ pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n    var j, l;\n    if (typeof md === \"undefined\" || md === null) {\n        if (!(\"sha1\" in forge.md)) {\n            throw new Error('\"sha1\" hash algorithm unavailable.');\n        }\n        md = forge.md.sha1.create();\n    }\n    var u = md.digestLength;\n    var v = md.blockLength;\n    var result = new forge.util.ByteBuffer();\n    /* Convert password to Unicode byte buffer + trailing 0-byte. */ var passBuf = new forge.util.ByteBuffer();\n    if (password !== null && password !== undefined) {\n        for(l = 0; l < password.length; l++){\n            passBuf.putInt16(password.charCodeAt(l));\n        }\n        passBuf.putInt16(0);\n    }\n    /* Length of salt and password in BYTES. */ var p = passBuf.length();\n    var s = salt.length();\n    /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */ var D = new forge.util.ByteBuffer();\n    D.fillWithByte(id, v);\n    /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */ var Slen = v * Math.ceil(s / v);\n    var S = new forge.util.ByteBuffer();\n    for(l = 0; l < Slen; l++){\n        S.putByte(salt.at(l % s));\n    }\n    /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */ var Plen = v * Math.ceil(p / v);\n    var P = new forge.util.ByteBuffer();\n    for(l = 0; l < Plen; l++){\n        P.putByte(passBuf.at(l % p));\n    }\n    /* 4. Set I=S||P to be the concatenation of S and P. */ var I = S;\n    I.putBuffer(P);\n    /* 5. Set c=ceil(n / u). */ var c = Math.ceil(n / u);\n    /* 6. For i=1, 2, ..., c, do the following: */ for(var i = 1; i <= c; i++){\n        /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */ var buf = new forge.util.ByteBuffer();\n        buf.putBytes(D.bytes());\n        buf.putBytes(I.bytes());\n        for(var round = 0; round < iter; round++){\n            md.start();\n            md.update(buf.getBytes());\n            buf = md.digest();\n        }\n        /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */ var B = new forge.util.ByteBuffer();\n        for(l = 0; l < v; l++){\n            B.putByte(buf.at(l % u));\n        }\n        /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */ var k = Math.ceil(s / v) + Math.ceil(p / v);\n        var Inew = new forge.util.ByteBuffer();\n        for(j = 0; j < k; j++){\n            var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n            var x = 0x1ff;\n            for(l = B.length() - 1; l >= 0; l--){\n                x = x >> 8;\n                x += B.at(l) + chunk.at(l);\n                chunk.setAt(l, x & 0xff);\n            }\n            Inew.putBuffer(chunk);\n        }\n        I = Inew;\n        /* Add Ai to A. */ result.putBuffer(buf);\n    }\n    result.truncate(result.length() - n);\n    return result;\n};\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */ pki.pbe.getCipher = function(oid, params, password) {\n    switch(oid){\n        case pki.oids[\"pkcs5PBES2\"]:\n            return pki.pbe.getCipherForPBES2(oid, params, password);\n        case pki.oids[\"pbeWithSHAAnd3-KeyTripleDES-CBC\"]:\n        case pki.oids[\"pbewithSHAAnd40BitRC2-CBC\"]:\n            return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n        default:\n            var error = new Error(\"Cannot read encrypted PBE data block. Unsupported OID.\");\n            error.oid = oid;\n            error.supportedOids = [\n                \"pkcs5PBES2\",\n                \"pbeWithSHAAnd3-KeyTripleDES-CBC\",\n                \"pbewithSHAAnd40BitRC2-CBC\"\n            ];\n            throw error;\n    }\n};\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */ pki.pbe.getCipherForPBES2 = function(oid, params, password) {\n    // get PBE params\n    var capture = {};\n    var errors = [];\n    if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n        var error = new Error(\"Cannot read password-based-encryption algorithm \" + \"parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.\");\n        error.errors = errors;\n        throw error;\n    }\n    // check oids\n    oid = asn1.derToOid(capture.kdfOid);\n    if (oid !== pki.oids[\"pkcs5PBKDF2\"]) {\n        var error = new Error(\"Cannot read encrypted private key. \" + \"Unsupported key derivation function OID.\");\n        error.oid = oid;\n        error.supportedOids = [\n            \"pkcs5PBKDF2\"\n        ];\n        throw error;\n    }\n    oid = asn1.derToOid(capture.encOid);\n    if (oid !== pki.oids[\"aes128-CBC\"] && oid !== pki.oids[\"aes192-CBC\"] && oid !== pki.oids[\"aes256-CBC\"] && oid !== pki.oids[\"des-EDE3-CBC\"] && oid !== pki.oids[\"desCBC\"]) {\n        var error = new Error(\"Cannot read encrypted private key. \" + \"Unsupported encryption scheme OID.\");\n        error.oid = oid;\n        error.supportedOids = [\n            \"aes128-CBC\",\n            \"aes192-CBC\",\n            \"aes256-CBC\",\n            \"des-EDE3-CBC\",\n            \"desCBC\"\n        ];\n        throw error;\n    }\n    // set PBE params\n    var salt = capture.kdfSalt;\n    var count = forge.util.createBuffer(capture.kdfIterationCount);\n    count = count.getInt(count.length() << 3);\n    var dkLen;\n    var cipherFn;\n    switch(pki.oids[oid]){\n        case \"aes128-CBC\":\n            dkLen = 16;\n            cipherFn = forge.aes.createDecryptionCipher;\n            break;\n        case \"aes192-CBC\":\n            dkLen = 24;\n            cipherFn = forge.aes.createDecryptionCipher;\n            break;\n        case \"aes256-CBC\":\n            dkLen = 32;\n            cipherFn = forge.aes.createDecryptionCipher;\n            break;\n        case \"des-EDE3-CBC\":\n            dkLen = 24;\n            cipherFn = forge.des.createDecryptionCipher;\n            break;\n        case \"desCBC\":\n            dkLen = 8;\n            cipherFn = forge.des.createDecryptionCipher;\n            break;\n    }\n    // get PRF message digest\n    var md = prfOidToMessageDigest(capture.prfOid);\n    // decrypt private key using pbe with chosen PRF and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = capture.encIv;\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    return cipher;\n};\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */ pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n    // get PBE params\n    var capture = {};\n    var errors = [];\n    if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n        var error = new Error(\"Cannot read password-based-encryption algorithm \" + \"parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.\");\n        error.errors = errors;\n        throw error;\n    }\n    var salt = forge.util.createBuffer(capture.salt);\n    var count = forge.util.createBuffer(capture.iterations);\n    count = count.getInt(count.length() << 3);\n    var dkLen, dIvLen, cipherFn;\n    switch(oid){\n        case pki.oids[\"pbeWithSHAAnd3-KeyTripleDES-CBC\"]:\n            dkLen = 24;\n            dIvLen = 8;\n            cipherFn = forge.des.startDecrypting;\n            break;\n        case pki.oids[\"pbewithSHAAnd40BitRC2-CBC\"]:\n            dkLen = 5;\n            dIvLen = 8;\n            cipherFn = function(key, iv) {\n                var cipher = forge.rc2.createDecryptionCipher(key, 40);\n                cipher.start(iv, null);\n                return cipher;\n            };\n            break;\n        default:\n            var error = new Error(\"Cannot read PKCS #12 PBE data block. Unsupported OID.\");\n            error.oid = oid;\n            throw error;\n    }\n    // get PRF message digest\n    var md = prfOidToMessageDigest(capture.prfOid);\n    var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n    md.start();\n    var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n    return cipherFn(key, iv);\n};\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */ pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n    if (typeof md === \"undefined\" || md === null) {\n        if (!(\"md5\" in forge.md)) {\n            throw new Error('\"md5\" hash algorithm unavailable.');\n        }\n        md = forge.md.md5.create();\n    }\n    if (salt === null) {\n        salt = \"\";\n    }\n    var digests = [\n        hash(md, password + salt)\n    ];\n    for(var length = 16, i = 1; length < dkLen; ++i, length += 16){\n        digests.push(hash(md, digests[i - 1] + password + salt));\n    }\n    return digests.join(\"\").substr(0, dkLen);\n};\nfunction hash(md, bytes) {\n    return md.start().update(bytes).digest().getBytes();\n}\nfunction prfOidToMessageDigest(prfOid) {\n    // get PRF algorithm, default to SHA-1\n    var prfAlgorithm;\n    if (!prfOid) {\n        prfAlgorithm = \"hmacWithSHA1\";\n    } else {\n        prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n        if (!prfAlgorithm) {\n            var error = new Error(\"Unsupported PRF OID.\");\n            error.oid = prfOid;\n            error.supported = [\n                \"hmacWithSHA1\",\n                \"hmacWithSHA224\",\n                \"hmacWithSHA256\",\n                \"hmacWithSHA384\",\n                \"hmacWithSHA512\"\n            ];\n            throw error;\n        }\n    }\n    return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n    var factory = forge.md;\n    switch(prfAlgorithm){\n        case \"hmacWithSHA224\":\n            factory = forge.md.sha512;\n        case \"hmacWithSHA1\":\n        case \"hmacWithSHA256\":\n        case \"hmacWithSHA384\":\n        case \"hmacWithSHA512\":\n            prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n            break;\n        default:\n            var error = new Error(\"Unsupported PRF algorithm.\");\n            error.algorithm = prfAlgorithm;\n            error.supported = [\n                \"hmacWithSHA1\",\n                \"hmacWithSHA224\",\n                \"hmacWithSHA256\",\n                \"hmacWithSHA384\",\n                \"hmacWithSHA512\"\n            ];\n            throw error;\n    }\n    if (!factory || !(prfAlgorithm in factory)) {\n        throw new Error(\"Unknown hash algorithm: \" + prfAlgorithm);\n    }\n    return factory[prfAlgorithm].create();\n}\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n    var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n        // iteration count\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())\n    ]);\n    // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n    if (prfAlgorithm !== \"hmacWithSHA1\") {\n        params.value.push(// key length\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(dkLen.toString(16))), // AlgorithmIdentifier\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // algorithm\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n            // parameters (null)\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ]));\n    }\n    return params;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/pbe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/pbkdf2.js":
/*!***********************************************!*\
  !*** ./node_modules/node-forge/lib/pbkdf2.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Password-Based Key-Derivation Function #2 implementation.\n *\n * See RFC 2898 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./hmac */ \"(ssr)/./node_modules/node-forge/lib/hmac.js\");\n__webpack_require__(/*! ./md */ \"(ssr)/./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nvar pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\nvar crypto;\nif (forge.util.isNodejs && !forge.options.usePureJavaScript) {\n    crypto = __webpack_require__(/*! crypto */ \"crypto\");\n}\n/**\n * Derives a key from a password.\n *\n * @param p the password as a binary-encoded string of bytes.\n * @param s the salt as a binary-encoded string of bytes.\n * @param c the iteration count, a positive integer.\n * @param dkLen the intended length, in bytes, of the derived key,\n *          (max: 2^32 - 1) * hash length of the PRF.\n * @param [md] the message digest (or algorithm identifier as a string) to use\n *          in the PRF, defaults to SHA-1.\n * @param [callback(err, key)] presence triggers asynchronous version, called\n *          once the operation completes.\n *\n * @return the derived key, as a binary-encoded string of bytes, for the\n *           synchronous version (if no callback is specified).\n */ module.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(p, s, c, dkLen, md, callback) {\n    if (typeof md === \"function\") {\n        callback = md;\n        md = null;\n    }\n    // use native implementation if possible and not disabled, note that\n    // some node versions only support SHA-1, others allow digest to be changed\n    if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto.pbkdf2 && (md === null || typeof md !== \"object\") && (crypto.pbkdf2Sync.length > 4 || !md || md === \"sha1\")) {\n        if (typeof md !== \"string\") {\n            // default prf to SHA-1\n            md = \"sha1\";\n        }\n        p = Buffer.from(p, \"binary\");\n        s = Buffer.from(s, \"binary\");\n        if (!callback) {\n            if (crypto.pbkdf2Sync.length === 4) {\n                return crypto.pbkdf2Sync(p, s, c, dkLen).toString(\"binary\");\n            }\n            return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString(\"binary\");\n        }\n        if (crypto.pbkdf2Sync.length === 4) {\n            return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {\n                if (err) {\n                    return callback(err);\n                }\n                callback(null, key.toString(\"binary\"));\n            });\n        }\n        return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {\n            if (err) {\n                return callback(err);\n            }\n            callback(null, key.toString(\"binary\"));\n        });\n    }\n    if (typeof md === \"undefined\" || md === null) {\n        // default prf to SHA-1\n        md = \"sha1\";\n    }\n    if (typeof md === \"string\") {\n        if (!(md in forge.md.algorithms)) {\n            throw new Error(\"Unknown hash algorithm: \" + md);\n        }\n        md = forge.md[md].create();\n    }\n    var hLen = md.digestLength;\n    /* 1. If dkLen > (2^32 - 1) * hLen, output \"derived key too long\" and\n    stop. */ if (dkLen > 0xFFFFFFFF * hLen) {\n        var err = new Error(\"Derived key is too long.\");\n        if (callback) {\n            return callback(err);\n        }\n        throw err;\n    }\n    /* 2. Let len be the number of hLen-octet blocks in the derived key,\n    rounding up, and let r be the number of octets in the last\n    block:\n\n    len = CEIL(dkLen / hLen),\n    r = dkLen - (len - 1) * hLen. */ var len = Math.ceil(dkLen / hLen);\n    var r = dkLen - (len - 1) * hLen;\n    /* 3. For each block of the derived key apply the function F defined\n    below to the password P, the salt S, the iteration count c, and\n    the block index to compute the block:\n\n    T_1 = F(P, S, c, 1),\n    T_2 = F(P, S, c, 2),\n    ...\n    T_len = F(P, S, c, len),\n\n    where the function F is defined as the exclusive-or sum of the\n    first c iterates of the underlying pseudorandom function PRF\n    applied to the password P and the concatenation of the salt S\n    and the block index i:\n\n    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c\n\n    where\n\n    u_1 = PRF(P, S || INT(i)),\n    u_2 = PRF(P, u_1),\n    ...\n    u_c = PRF(P, u_{c-1}).\n\n    Here, INT(i) is a four-octet encoding of the integer i, most\n    significant octet first. */ var prf = forge.hmac.create();\n    prf.start(md, p);\n    var dk = \"\";\n    var xor, u_c, u_c1;\n    // sync version\n    if (!callback) {\n        for(var i = 1; i <= len; ++i){\n            // PRF(P, S || INT(i)) (first iteration)\n            prf.start(null, null);\n            prf.update(s);\n            prf.update(forge.util.int32ToBytes(i));\n            xor = u_c1 = prf.digest().getBytes();\n            // PRF(P, u_{c-1}) (other iterations)\n            for(var j = 2; j <= c; ++j){\n                prf.start(null, null);\n                prf.update(u_c1);\n                u_c = prf.digest().getBytes();\n                // F(p, s, c, i)\n                xor = forge.util.xorBytes(xor, u_c, hLen);\n                u_c1 = u_c;\n            }\n            /* 4. Concatenate the blocks and extract the first dkLen octets to\n        produce a derived key DK:\n\n        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */ dk += i < len ? xor : xor.substr(0, r);\n        }\n        /* 5. Output the derived key DK. */ return dk;\n    }\n    // async version\n    var i = 1, j;\n    function outer() {\n        if (i > len) {\n            // done\n            return callback(null, dk);\n        }\n        // PRF(P, S || INT(i)) (first iteration)\n        prf.start(null, null);\n        prf.update(s);\n        prf.update(forge.util.int32ToBytes(i));\n        xor = u_c1 = prf.digest().getBytes();\n        // PRF(P, u_{c-1}) (other iterations)\n        j = 2;\n        inner();\n    }\n    function inner() {\n        if (j <= c) {\n            prf.start(null, null);\n            prf.update(u_c1);\n            u_c = prf.digest().getBytes();\n            // F(p, s, c, i)\n            xor = forge.util.xorBytes(xor, u_c, hLen);\n            u_c1 = u_c;\n            ++j;\n            return forge.util.setImmediate(inner);\n        }\n        /* 4. Concatenate the blocks and extract the first dkLen octets to\n      produce a derived key DK:\n\n      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */ dk += i < len ? xor : xor.substr(0, r);\n        ++i;\n        outer();\n    }\n    outer();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/pbkdf2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/pem.js":
/*!********************************************!*\
  !*** ./node_modules/node-forge/lib/pem.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.\n *\n * See: RFC 1421.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n *\n * A Forge PEM object has the following fields:\n *\n * type: identifies the type of message (eg: \"RSA PRIVATE KEY\").\n *\n * procType: identifies the type of processing performed on the message,\n *   it has two subfields: version and type, eg: 4,ENCRYPTED.\n *\n * contentDomain: identifies the type of content in the message, typically\n *   only uses the value: \"RFC822\".\n *\n * dekInfo: identifies the message encryption algorithm and mode and includes\n *   any parameters for the algorithm, it has two subfields: algorithm and\n *   parameters, eg: DES-CBC,F8143EDE5960C597.\n *\n * headers: contains all other PEM encapsulated headers -- where order is\n *   significant (for pairing data like recipient ID + key info).\n *\n * body: the binary-encoded body.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n// shortcut for pem API\nvar pem = module.exports = forge.pem = forge.pem || {};\n/**\n * Encodes (serializes) the given PEM object.\n *\n * @param msg the PEM message object to encode.\n * @param options the options to use:\n *          maxline the maximum characters per line for the body, (default: 64).\n *\n * @return the PEM-formatted string.\n */ pem.encode = function(msg, options) {\n    options = options || {};\n    var rval = \"-----BEGIN \" + msg.type + \"-----\\r\\n\";\n    // encode special headers\n    var header;\n    if (msg.procType) {\n        header = {\n            name: \"Proc-Type\",\n            values: [\n                String(msg.procType.version),\n                msg.procType.type\n            ]\n        };\n        rval += foldHeader(header);\n    }\n    if (msg.contentDomain) {\n        header = {\n            name: \"Content-Domain\",\n            values: [\n                msg.contentDomain\n            ]\n        };\n        rval += foldHeader(header);\n    }\n    if (msg.dekInfo) {\n        header = {\n            name: \"DEK-Info\",\n            values: [\n                msg.dekInfo.algorithm\n            ]\n        };\n        if (msg.dekInfo.parameters) {\n            header.values.push(msg.dekInfo.parameters);\n        }\n        rval += foldHeader(header);\n    }\n    if (msg.headers) {\n        // encode all other headers\n        for(var i = 0; i < msg.headers.length; ++i){\n            rval += foldHeader(msg.headers[i]);\n        }\n    }\n    // terminate header\n    if (msg.procType) {\n        rval += \"\\r\\n\";\n    }\n    // add body\n    rval += forge.util.encode64(msg.body, options.maxline || 64) + \"\\r\\n\";\n    rval += \"-----END \" + msg.type + \"-----\\r\\n\";\n    return rval;\n};\n/**\n * Decodes (deserializes) all PEM messages found in the given string.\n *\n * @param str the PEM-formatted string to decode.\n *\n * @return the PEM message objects in an array.\n */ pem.decode = function(str) {\n    var rval = [];\n    // split string into PEM messages (be lenient w/EOF on BEGIN line)\n    var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n    var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n    var rCRLF = /\\r?\\n/;\n    var match;\n    while(true){\n        match = rMessage.exec(str);\n        if (!match) {\n            break;\n        }\n        // accept \"NEW CERTIFICATE REQUEST\" as \"CERTIFICATE REQUEST\"\n        // https://datatracker.ietf.org/doc/html/rfc7468#section-7\n        var type = match[1];\n        if (type === \"NEW CERTIFICATE REQUEST\") {\n            type = \"CERTIFICATE REQUEST\";\n        }\n        var msg = {\n            type: type,\n            procType: null,\n            contentDomain: null,\n            dekInfo: null,\n            headers: [],\n            body: forge.util.decode64(match[3])\n        };\n        rval.push(msg);\n        // no headers\n        if (!match[2]) {\n            continue;\n        }\n        // parse headers\n        var lines = match[2].split(rCRLF);\n        var li = 0;\n        while(match && li < lines.length){\n            // get line, trim any rhs whitespace\n            var line = lines[li].replace(/\\s+$/, \"\");\n            // RFC2822 unfold any following folded lines\n            for(var nl = li + 1; nl < lines.length; ++nl){\n                var next = lines[nl];\n                if (!/\\s/.test(next[0])) {\n                    break;\n                }\n                line += next;\n                li = nl;\n            }\n            // parse header\n            match = line.match(rHeader);\n            if (match) {\n                var header = {\n                    name: match[1],\n                    values: []\n                };\n                var values = match[2].split(\",\");\n                for(var vi = 0; vi < values.length; ++vi){\n                    header.values.push(ltrim(values[vi]));\n                }\n                // Proc-Type must be the first header\n                if (!msg.procType) {\n                    if (header.name !== \"Proc-Type\") {\n                        throw new Error(\"Invalid PEM formatted message. The first \" + 'encapsulated header must be \"Proc-Type\".');\n                    } else if (header.values.length !== 2) {\n                        throw new Error('Invalid PEM formatted message. The \"Proc-Type\" ' + \"header must have two subfields.\");\n                    }\n                    msg.procType = {\n                        version: values[0],\n                        type: values[1]\n                    };\n                } else if (!msg.contentDomain && header.name === \"Content-Domain\") {\n                    // special-case Content-Domain\n                    msg.contentDomain = values[0] || \"\";\n                } else if (!msg.dekInfo && header.name === \"DEK-Info\") {\n                    // special-case DEK-Info\n                    if (header.values.length === 0) {\n                        throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' + \"header must have at least one subfield.\");\n                    }\n                    msg.dekInfo = {\n                        algorithm: values[0],\n                        parameters: values[1] || null\n                    };\n                } else {\n                    msg.headers.push(header);\n                }\n            }\n            ++li;\n        }\n        if (msg.procType === \"ENCRYPTED\" && !msg.dekInfo) {\n            throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' + 'header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n        }\n    }\n    if (rval.length === 0) {\n        throw new Error(\"Invalid PEM formatted message.\");\n    }\n    return rval;\n};\nfunction foldHeader(header) {\n    var rval = header.name + \": \";\n    // ensure values with CRLF are folded\n    var values = [];\n    var insertSpace = function(match, $1) {\n        return \" \" + $1;\n    };\n    for(var i = 0; i < header.values.length; ++i){\n        values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n    }\n    rval += values.join(\",\") + \"\\r\\n\";\n    // do folding\n    var length = 0;\n    var candidate = -1;\n    for(var i = 0; i < rval.length; ++i, ++length){\n        if (length > 65 && candidate !== -1) {\n            var insert = rval[candidate];\n            if (insert === \",\") {\n                ++candidate;\n                rval = rval.substr(0, candidate) + \"\\r\\n \" + rval.substr(candidate);\n            } else {\n                rval = rval.substr(0, candidate) + \"\\r\\n\" + insert + rval.substr(candidate + 1);\n            }\n            length = i - candidate - 1;\n            candidate = -1;\n            ++i;\n        } else if (rval[i] === \" \" || rval[i] === \"\t\" || rval[i] === \",\") {\n            candidate = i;\n        }\n    }\n    return rval;\n}\nfunction ltrim(str) {\n    return str.replace(/^\\s+/, \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/pem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/pkcs1.js":
/*!**********************************************!*\
  !*** ./node_modules/node-forge/lib/pkcs1.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n__webpack_require__(/*! ./random */ \"(ssr)/./node_modules/node-forge/lib/random.js\");\n__webpack_require__(/*! ./sha1 */ \"(ssr)/./node_modules/node-forge/lib/sha1.js\");\n// shortcut for PKCS#1 API\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */ pkcs1.encode_rsa_oaep = function(key, message, options) {\n    // parse arguments\n    var label;\n    var seed;\n    var md;\n    var mgf1Md;\n    // legacy args (label, seed, md)\n    if (typeof options === \"string\") {\n        label = options;\n        seed = arguments[3] || undefined;\n        md = arguments[4] || undefined;\n    } else if (options) {\n        label = options.label || undefined;\n        seed = options.seed || undefined;\n        md = options.md || undefined;\n        if (options.mgf1 && options.mgf1.md) {\n            mgf1Md = options.mgf1.md;\n        }\n    }\n    // default OAEP to SHA-1 message digest\n    if (!md) {\n        md = forge.md.sha1.create();\n    } else {\n        md.start();\n    }\n    // default MGF-1 to same as OAEP\n    if (!mgf1Md) {\n        mgf1Md = md;\n    }\n    // compute length in bytes and check output\n    var keyLength = Math.ceil(key.n.bitLength() / 8);\n    var maxLength = keyLength - 2 * md.digestLength - 2;\n    if (message.length > maxLength) {\n        var error = new Error(\"RSAES-OAEP input message length is too long.\");\n        error.length = message.length;\n        error.maxLength = maxLength;\n        throw error;\n    }\n    if (!label) {\n        label = \"\";\n    }\n    md.update(label, \"raw\");\n    var lHash = md.digest();\n    var PS = \"\";\n    var PS_length = maxLength - message.length;\n    for(var i = 0; i < PS_length; i++){\n        PS += \"\\x00\";\n    }\n    var DB = lHash.getBytes() + PS + \"\\x01\" + message;\n    if (!seed) {\n        seed = forge.random.getBytes(md.digestLength);\n    } else if (seed.length !== md.digestLength) {\n        var error = new Error(\"Invalid RSAES-OAEP seed. The seed length must \" + \"match the digest length.\");\n        error.seedLength = seed.length;\n        error.digestLength = md.digestLength;\n        throw error;\n    }\n    var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n    var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n    var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n    var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n    // return encoded message\n    return \"\\x00\" + maskedSeed + maskedDB;\n};\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */ pkcs1.decode_rsa_oaep = function(key, em, options) {\n    // parse args\n    var label;\n    var md;\n    var mgf1Md;\n    // legacy args\n    if (typeof options === \"string\") {\n        label = options;\n        md = arguments[3] || undefined;\n    } else if (options) {\n        label = options.label || undefined;\n        md = options.md || undefined;\n        if (options.mgf1 && options.mgf1.md) {\n            mgf1Md = options.mgf1.md;\n        }\n    }\n    // compute length in bytes\n    var keyLength = Math.ceil(key.n.bitLength() / 8);\n    if (em.length !== keyLength) {\n        var error = new Error(\"RSAES-OAEP encoded message length is invalid.\");\n        error.length = em.length;\n        error.expectedLength = keyLength;\n        throw error;\n    }\n    // default OAEP to SHA-1 message digest\n    if (md === undefined) {\n        md = forge.md.sha1.create();\n    } else {\n        md.start();\n    }\n    // default MGF-1 to same as OAEP\n    if (!mgf1Md) {\n        mgf1Md = md;\n    }\n    if (keyLength < 2 * md.digestLength + 2) {\n        throw new Error(\"RSAES-OAEP key is too short for the hash function.\");\n    }\n    if (!label) {\n        label = \"\";\n    }\n    md.update(label, \"raw\");\n    var lHash = md.digest().getBytes();\n    // split the message into its parts\n    var y = em.charAt(0);\n    var maskedSeed = em.substring(1, md.digestLength + 1);\n    var maskedDB = em.substring(1 + md.digestLength);\n    var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n    var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n    var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n    var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n    var lHashPrime = db.substring(0, md.digestLength);\n    // constant time check that all values match what is expected\n    var error = y !== \"\\x00\";\n    // constant time check lHash vs lHashPrime\n    for(var i = 0; i < md.digestLength; ++i){\n        error |= lHash.charAt(i) !== lHashPrime.charAt(i);\n    }\n    // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n    // message\n    // TODO: It must be possible to do this in a better/smarter way?\n    var in_ps = 1;\n    var index = md.digestLength;\n    for(var j = md.digestLength; j < db.length; j++){\n        var code = db.charCodeAt(j);\n        var is_0 = code & 0x1 ^ 0x1;\n        // non-zero if not 0 or 1 in the ps section\n        var error_mask = in_ps ? 0xfffe : 0x0000;\n        error |= code & error_mask;\n        // latch in_ps to zero after we find 0x1\n        in_ps = in_ps & is_0;\n        index += in_ps;\n    }\n    if (error || db.charCodeAt(index) !== 0x1) {\n        throw new Error(\"Invalid RSAES-OAEP padding.\");\n    }\n    return db.substring(index + 1);\n};\nfunction rsa_mgf1(seed, maskLength, hash) {\n    // default to SHA-1 message digest\n    if (!hash) {\n        hash = forge.md.sha1.create();\n    }\n    var t = \"\";\n    var count = Math.ceil(maskLength / hash.digestLength);\n    for(var i = 0; i < count; ++i){\n        var c = String.fromCharCode(i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF);\n        hash.start();\n        hash.update(seed + c);\n        t += hash.digest().getBytes();\n    }\n    return t.substring(0, maskLength);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/pkcs1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/prime.js":
/*!**********************************************!*\
  !*** ./node_modules/node-forge/lib/prime.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Prime number generation API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n__webpack_require__(/*! ./jsbn */ \"(ssr)/./node_modules/node-forge/lib/jsbn.js\");\n__webpack_require__(/*! ./random */ \"(ssr)/./node_modules/node-forge/lib/random.js\");\n(function() {\n    // forge.prime already defined\n    if (forge.prime) {\n        module.exports = forge.prime;\n        return;\n    }\n    /* PRIME API */ var prime = module.exports = forge.prime = forge.prime || {};\n    var BigInteger = forge.jsbn.BigInteger;\n    // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\n    var GCD_30_DELTA = [\n        6,\n        4,\n        2,\n        4,\n        2,\n        4,\n        6,\n        2\n    ];\n    var THIRTY = new BigInteger(null);\n    THIRTY.fromInt(30);\n    var op_or = function(x, y) {\n        return x | y;\n    };\n    /**\n * Generates a random probable prime with the given number of bits.\n *\n * Alternative algorithms can be specified by name as a string or as an\n * object with custom options like so:\n *\n * {\n *   name: 'PRIMEINC',\n *   options: {\n *     maxBlockTime: <the maximum amount of time to block the main\n *       thread before allowing I/O other JS to run>,\n *     millerRabinTests: <the number of miller-rabin tests to run>,\n *     workerScript: <the worker script URL>,\n *     workers: <the number of web workers (if supported) to use,\n *       -1 to use estimated cores minus one>.\n *     workLoad: the size of the work load, ie: number of possible prime\n *       numbers for each web worker to check per work assignment,\n *       (default: 100).\n *   }\n * }\n *\n * @param bits the number of bits for the prime number.\n * @param options the options to use.\n *          [algorithm] the algorithm to use (default: 'PRIMEINC').\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *\n * @return callback(err, num) called once the operation completes.\n */ prime.generateProbablePrime = function(bits, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        }\n        options = options || {};\n        // default to PRIMEINC algorithm\n        var algorithm = options.algorithm || \"PRIMEINC\";\n        if (typeof algorithm === \"string\") {\n            algorithm = {\n                name: algorithm\n            };\n        }\n        algorithm.options = algorithm.options || {};\n        // create prng with api that matches BigInteger secure random\n        var prng = options.prng || forge.random;\n        var rng = {\n            // x is an array to fill with bytes\n            nextBytes: function(x) {\n                var b = prng.getBytesSync(x.length);\n                for(var i = 0; i < x.length; ++i){\n                    x[i] = b.charCodeAt(i);\n                }\n            }\n        };\n        if (algorithm.name === \"PRIMEINC\") {\n            return primeincFindPrime(bits, rng, algorithm.options, callback);\n        }\n        throw new Error(\"Invalid prime generation algorithm: \" + algorithm.name);\n    };\n    function primeincFindPrime(bits, rng, options, callback) {\n        if (\"workers\" in options) {\n            return primeincFindPrimeWithWorkers(bits, rng, options, callback);\n        }\n        return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n    }\n    function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {\n        // initialize random number\n        var num = generateRandom(bits, rng);\n        /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The\n  number we are given is always aligned at 30k + 1. Each time the number is\n  determined not to be prime we add to get to the next 'i', eg: if the number\n  was at 30k + 1 we add 6. */ var deltaIdx = 0;\n        // get required number of MR tests\n        var mrTests = getMillerRabinTests(num.bitLength());\n        if (\"millerRabinTests\" in options) {\n            mrTests = options.millerRabinTests;\n        }\n        // find prime nearest to 'num' for maxBlockTime ms\n        // 10 ms gives 5ms of leeway for other calculations before dropping\n        // below 60fps (1000/60 == 16.67), but in reality, the number will\n        // likely be higher due to an 'atomic' big int modPow\n        var maxBlockTime = 10;\n        if (\"maxBlockTime\" in options) {\n            maxBlockTime = options.maxBlockTime;\n        }\n        _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n    }\n    function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {\n        var start = +new Date();\n        do {\n            // overflow, regenerate random number\n            if (num.bitLength() > bits) {\n                num = generateRandom(bits, rng);\n            }\n            // do primality test\n            if (num.isProbablePrime(mrTests)) {\n                return callback(null, num);\n            }\n            // get next potential prime\n            num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        }while (maxBlockTime < 0 || +new Date() - start < maxBlockTime);\n        // keep trying later\n        forge.util.setImmediate(function() {\n            _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n        });\n    }\n    // NOTE: This algorithm is indeterminate in nature because workers\n    // run in parallel looking at different segments of numbers. Even if this\n    // algorithm is run twice with the same input from a predictable RNG, it\n    // may produce different outputs.\n    function primeincFindPrimeWithWorkers(bits, rng, options, callback) {\n        // web workers unavailable\n        if (typeof Worker === \"undefined\") {\n            return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n        }\n        // initialize random number\n        var num = generateRandom(bits, rng);\n        // use web workers to generate keys\n        var numWorkers = options.workers;\n        var workLoad = options.workLoad || 100;\n        var range = workLoad * 30 / 8;\n        var workerScript = options.workerScript || \"forge/prime.worker.js\";\n        if (numWorkers === -1) {\n            return forge.util.estimateCores(function(err, cores) {\n                if (err) {\n                    // default to 2\n                    cores = 2;\n                }\n                numWorkers = cores - 1;\n                generate();\n            });\n        }\n        generate();\n        function generate() {\n            // require at least 1 worker\n            numWorkers = Math.max(1, numWorkers);\n            // TODO: consider optimizing by starting workers outside getPrime() ...\n            // note that in order to clean up they will have to be made internally\n            // asynchronous which may actually be slower\n            // start workers immediately\n            var workers = [];\n            for(var i = 0; i < numWorkers; ++i){\n                // FIXME: fix path or use blob URLs\n                workers[i] = new Worker(workerScript);\n            }\n            var running = numWorkers;\n            // listen for requests from workers and assign ranges to find prime\n            for(var i = 0; i < numWorkers; ++i){\n                workers[i].addEventListener(\"message\", workerMessage);\n            }\n            /* Note: The distribution of random numbers is unknown. Therefore, each\n    web worker is continuously allocated a range of numbers to check for a\n    random number until one is found.\n\n    Every 30 numbers will be checked just 8 times, because prime numbers\n    have the form:\n\n    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)\n\n    Therefore, if we want a web worker to run N checks before asking for\n    a new range of numbers, each range must contain N*30/8 numbers.\n\n    For 100 checks (workLoad), this is a range of 375. */ var found = false;\n            function workerMessage(e) {\n                // ignore message, prime already found\n                if (found) {\n                    return;\n                }\n                --running;\n                var data = e.data;\n                if (data.found) {\n                    // terminate all workers\n                    for(var i = 0; i < workers.length; ++i){\n                        workers[i].terminate();\n                    }\n                    found = true;\n                    return callback(null, new BigInteger(data.prime, 16));\n                }\n                // overflow, regenerate random number\n                if (num.bitLength() > bits) {\n                    num = generateRandom(bits, rng);\n                }\n                // assign new range to check\n                var hex = num.toString(16);\n                // start prime search\n                e.target.postMessage({\n                    hex: hex,\n                    workLoad: workLoad\n                });\n                num.dAddOffset(range, 0);\n            }\n        }\n    }\n    /**\n * Generates a random number using the given number of bits and RNG.\n *\n * @param bits the number of bits for the number.\n * @param rng the random number generator to use.\n *\n * @return the random number.\n */ function generateRandom(bits, rng) {\n        var num = new BigInteger(bits, rng);\n        // force MSB set\n        var bits1 = bits - 1;\n        if (!num.testBit(bits1)) {\n            num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);\n        }\n        // align number on 30k+1 boundary\n        num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);\n        return num;\n    }\n    /**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */ function getMillerRabinTests(bits) {\n        if (bits <= 100) return 27;\n        if (bits <= 150) return 18;\n        if (bits <= 200) return 15;\n        if (bits <= 250) return 12;\n        if (bits <= 300) return 9;\n        if (bits <= 350) return 8;\n        if (bits <= 400) return 7;\n        if (bits <= 500) return 6;\n        if (bits <= 600) return 5;\n        if (bits <= 800) return 4;\n        if (bits <= 1250) return 3;\n        return 2;\n    }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/prime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/prng.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/prng.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * A javascript implementation of a cryptographically-secure\n * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed\n * here though the use of SHA-256 is not enforced; when generating an\n * a PRNG context, the hashing algorithm and block cipher used for\n * the generator are specified via a plugin.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nvar _crypto = null;\nif (forge.util.isNodejs && !forge.options.usePureJavaScript && !process.versions[\"node-webkit\"]) {\n    _crypto = __webpack_require__(/*! crypto */ \"crypto\");\n}\n/* PRNG API */ var prng = module.exports = forge.prng = forge.prng || {};\n/**\n * Creates a new PRNG context.\n *\n * A PRNG plugin must be passed in that will provide:\n *\n * 1. A function that initializes the key and seed of a PRNG context. It\n *   will be given a 16 byte key and a 16 byte seed. Any key expansion\n *   or transformation of the seed from a byte string into an array of\n *   integers (or similar) should be performed.\n * 2. The cryptographic function used by the generator. It takes a key and\n *   a seed.\n * 3. A seed increment function. It takes the seed and returns seed + 1.\n * 4. An api to create a message digest.\n *\n * For an example, see random.js.\n *\n * @param plugin the PRNG plugin to use.\n */ prng.create = function(plugin) {\n    var ctx = {\n        plugin: plugin,\n        key: null,\n        seed: null,\n        time: null,\n        // number of reseeds so far\n        reseeds: 0,\n        // amount of data generated so far\n        generated: 0,\n        // no initial key bytes\n        keyBytes: \"\"\n    };\n    // create 32 entropy pools (each is a message digest)\n    var md = plugin.md;\n    var pools = new Array(32);\n    for(var i = 0; i < 32; ++i){\n        pools[i] = md.create();\n    }\n    ctx.pools = pools;\n    // entropy pools are written to cyclically, starting at index 0\n    ctx.pool = 0;\n    /**\n   * Generates random bytes. The bytes may be generated synchronously or\n   * asynchronously. Web workers must use the asynchronous interface or\n   * else the behavior is undefined.\n   *\n   * @param count the number of random bytes to generate.\n   * @param [callback(err, bytes)] called once the operation completes.\n   *\n   * @return count random bytes as a string.\n   */ ctx.generate = function(count, callback) {\n        // do synchronously\n        if (!callback) {\n            return ctx.generateSync(count);\n        }\n        // simple generator using counter-based CBC\n        var cipher = ctx.plugin.cipher;\n        var increment = ctx.plugin.increment;\n        var formatKey = ctx.plugin.formatKey;\n        var formatSeed = ctx.plugin.formatSeed;\n        var b = forge.util.createBuffer();\n        // paranoid deviation from Fortuna:\n        // reset key for every request to protect previously\n        // generated random bytes should the key be discovered;\n        // there is no 100ms based reseeding because of this\n        // forced reseed for every `generate` call\n        ctx.key = null;\n        generate();\n        function generate(err) {\n            if (err) {\n                return callback(err);\n            }\n            // sufficient bytes generated\n            if (b.length() >= count) {\n                return callback(null, b.getBytes(count));\n            }\n            // if amount of data generated is greater than 1 MiB, trigger reseed\n            if (ctx.generated > 0xfffff) {\n                ctx.key = null;\n            }\n            if (ctx.key === null) {\n                // prevent stack overflow\n                return forge.util.nextTick(function() {\n                    _reseed(generate);\n                });\n            }\n            // generate the random bytes\n            var bytes = cipher(ctx.key, ctx.seed);\n            ctx.generated += bytes.length;\n            b.putBytes(bytes);\n            // generate bytes for a new key and seed\n            ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n            ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n            forge.util.setImmediate(generate);\n        }\n    };\n    /**\n   * Generates random bytes synchronously.\n   *\n   * @param count the number of random bytes to generate.\n   *\n   * @return count random bytes as a string.\n   */ ctx.generateSync = function(count) {\n        // simple generator using counter-based CBC\n        var cipher = ctx.plugin.cipher;\n        var increment = ctx.plugin.increment;\n        var formatKey = ctx.plugin.formatKey;\n        var formatSeed = ctx.plugin.formatSeed;\n        // paranoid deviation from Fortuna:\n        // reset key for every request to protect previously\n        // generated random bytes should the key be discovered;\n        // there is no 100ms based reseeding because of this\n        // forced reseed for every `generateSync` call\n        ctx.key = null;\n        var b = forge.util.createBuffer();\n        while(b.length() < count){\n            // if amount of data generated is greater than 1 MiB, trigger reseed\n            if (ctx.generated > 0xfffff) {\n                ctx.key = null;\n            }\n            if (ctx.key === null) {\n                _reseedSync();\n            }\n            // generate the random bytes\n            var bytes = cipher(ctx.key, ctx.seed);\n            ctx.generated += bytes.length;\n            b.putBytes(bytes);\n            // generate bytes for a new key and seed\n            ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n            ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n        }\n        return b.getBytes(count);\n    };\n    /**\n   * Private function that asynchronously reseeds a generator.\n   *\n   * @param callback(err) called once the operation completes.\n   */ function _reseed(callback) {\n        if (ctx.pools[0].messageLength >= 32) {\n            _seed();\n            return callback();\n        }\n        // not enough seed data...\n        var needed = 32 - ctx.pools[0].messageLength << 5;\n        ctx.seedFile(needed, function(err, bytes) {\n            if (err) {\n                return callback(err);\n            }\n            ctx.collect(bytes);\n            _seed();\n            callback();\n        });\n    }\n    /**\n   * Private function that synchronously reseeds a generator.\n   */ function _reseedSync() {\n        if (ctx.pools[0].messageLength >= 32) {\n            return _seed();\n        }\n        // not enough seed data...\n        var needed = 32 - ctx.pools[0].messageLength << 5;\n        ctx.collect(ctx.seedFileSync(needed));\n        _seed();\n    }\n    /**\n   * Private function that seeds a generator once enough bytes are available.\n   */ function _seed() {\n        // update reseed count\n        ctx.reseeds = ctx.reseeds === 0xffffffff ? 0 : ctx.reseeds + 1;\n        // goal is to update `key` via:\n        // key = hash(key + s)\n        //   where 's' is all collected entropy from selected pools, then...\n        // create a plugin-based message digest\n        var md = ctx.plugin.md.create();\n        // consume current key bytes\n        md.update(ctx.keyBytes);\n        // digest the entropy of pools whose index k meet the\n        // condition 'n mod 2^k == 0' where n is the number of reseeds\n        var _2powK = 1;\n        for(var k = 0; k < 32; ++k){\n            if (ctx.reseeds % _2powK === 0) {\n                md.update(ctx.pools[k].digest().getBytes());\n                ctx.pools[k].start();\n            }\n            _2powK = _2powK << 1;\n        }\n        // get digest for key bytes\n        ctx.keyBytes = md.digest().getBytes();\n        // paranoid deviation from Fortuna:\n        // update `seed` via `seed = hash(key)`\n        // instead of initializing to zero once and only\n        // ever incrementing it\n        md.start();\n        md.update(ctx.keyBytes);\n        var seedBytes = md.digest().getBytes();\n        // update state\n        ctx.key = ctx.plugin.formatKey(ctx.keyBytes);\n        ctx.seed = ctx.plugin.formatSeed(seedBytes);\n        ctx.generated = 0;\n    }\n    /**\n   * The built-in default seedFile. This seedFile is used when entropy\n   * is needed immediately.\n   *\n   * @param needed the number of bytes that are needed.\n   *\n   * @return the random bytes.\n   */ function defaultSeedFile(needed) {\n        // use window.crypto.getRandomValues strong source of entropy if available\n        var getRandomValues = null;\n        var globalScope = forge.util.globalScope;\n        var _crypto = globalScope.crypto || globalScope.msCrypto;\n        if (_crypto && _crypto.getRandomValues) {\n            getRandomValues = function(arr) {\n                return _crypto.getRandomValues(arr);\n            };\n        }\n        var b = forge.util.createBuffer();\n        if (getRandomValues) {\n            while(b.length() < needed){\n                // max byte length is 65536 before QuotaExceededError is thrown\n                // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues\n                var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);\n                var entropy = new Uint32Array(Math.floor(count));\n                try {\n                    getRandomValues(entropy);\n                    for(var i = 0; i < entropy.length; ++i){\n                        b.putInt32(entropy[i]);\n                    }\n                } catch (e) {\n                    /* only ignore QuotaExceededError */ if (!(typeof QuotaExceededError !== \"undefined\" && e instanceof QuotaExceededError)) {\n                        throw e;\n                    }\n                }\n            }\n        }\n        // be sad and add some weak random data\n        if (b.length() < needed) {\n            /* Draws from Park-Miller \"minimal standard\" 31 bit PRNG,\n      implemented with David G. Carta's optimization: with 32 bit math\n      and without division (Public Domain). */ var hi, lo, next;\n            var seed = Math.floor(Math.random() * 0x010000);\n            while(b.length() < needed){\n                lo = 16807 * (seed & 0xFFFF);\n                hi = 16807 * (seed >> 16);\n                lo += (hi & 0x7FFF) << 16;\n                lo += hi >> 15;\n                lo = (lo & 0x7FFFFFFF) + (lo >> 31);\n                seed = lo & 0xFFFFFFFF;\n                // consume lower 3 bytes of seed\n                for(var i = 0; i < 3; ++i){\n                    // throw in more pseudo random\n                    next = seed >>> (i << 3);\n                    next ^= Math.floor(Math.random() * 0x0100);\n                    b.putByte(next & 0xFF);\n                }\n            }\n        }\n        return b.getBytes(needed);\n    }\n    // initialize seed file APIs\n    if (_crypto) {\n        // use nodejs async API\n        ctx.seedFile = function(needed, callback) {\n            _crypto.randomBytes(needed, function(err, bytes) {\n                if (err) {\n                    return callback(err);\n                }\n                callback(null, bytes.toString());\n            });\n        };\n        // use nodejs sync API\n        ctx.seedFileSync = function(needed) {\n            return _crypto.randomBytes(needed).toString();\n        };\n    } else {\n        ctx.seedFile = function(needed, callback) {\n            try {\n                callback(null, defaultSeedFile(needed));\n            } catch (e) {\n                callback(e);\n            }\n        };\n        ctx.seedFileSync = defaultSeedFile;\n    }\n    /**\n   * Adds entropy to a prng ctx's accumulator.\n   *\n   * @param bytes the bytes of entropy as a string.\n   */ ctx.collect = function(bytes) {\n        // iterate over pools distributing entropy cyclically\n        var count = bytes.length;\n        for(var i = 0; i < count; ++i){\n            ctx.pools[ctx.pool].update(bytes.substr(i, 1));\n            ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;\n        }\n    };\n    /**\n   * Collects an integer of n bits.\n   *\n   * @param i the integer entropy.\n   * @param n the number of bits in the integer.\n   */ ctx.collectInt = function(i, n) {\n        var bytes = \"\";\n        for(var x = 0; x < n; x += 8){\n            bytes += String.fromCharCode(i >> x & 0xFF);\n        }\n        ctx.collect(bytes);\n    };\n    /**\n   * Registers a Web Worker to receive immediate entropy from the main thread.\n   * This method is required until Web Workers can access the native crypto\n   * API. This method should be called twice for each created worker, once in\n   * the main thread, and once in the worker itself.\n   *\n   * @param worker the worker to register.\n   */ ctx.registerWorker = function(worker) {\n        // worker receives random bytes\n        if (worker === self) {\n            ctx.seedFile = function(needed, callback) {\n                function listener(e) {\n                    var data = e.data;\n                    if (data.forge && data.forge.prng) {\n                        self.removeEventListener(\"message\", listener);\n                        callback(data.forge.prng.err, data.forge.prng.bytes);\n                    }\n                }\n                self.addEventListener(\"message\", listener);\n                self.postMessage({\n                    forge: {\n                        prng: {\n                            needed: needed\n                        }\n                    }\n                });\n            };\n        } else {\n            // main thread sends random bytes upon request\n            var listener = function(e) {\n                var data = e.data;\n                if (data.forge && data.forge.prng) {\n                    ctx.seedFile(data.forge.prng.needed, function(err, bytes) {\n                        worker.postMessage({\n                            forge: {\n                                prng: {\n                                    err: err,\n                                    bytes: bytes\n                                }\n                            }\n                        });\n                    });\n                }\n            };\n            // TODO: do we need to remove the event listener when the worker dies?\n            worker.addEventListener(\"message\", listener);\n        }\n    };\n    return ctx;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/prng.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/random.js":
/*!***********************************************!*\
  !*** ./node_modules/node-forge/lib/random.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * An API for getting cryptographically-secure random bytes. The bytes are\n * generated using the Fortuna algorithm devised by Bruce Schneier and\n * Niels Ferguson.\n *\n * Getting strong random bytes is not yet easy to do in javascript. The only\n * truish random entropy that can be collected is from the mouse, keyboard, or\n * from timing with respect to page loads, etc. This generator makes a poor\n * attempt at providing random bytes when those sources haven't yet provided\n * enough entropy to initially seed or to reseed the PRNG.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2009-2014 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./aes */ \"(ssr)/./node_modules/node-forge/lib/aes.js\");\n__webpack_require__(/*! ./sha256 */ \"(ssr)/./node_modules/node-forge/lib/sha256.js\");\n__webpack_require__(/*! ./prng */ \"(ssr)/./node_modules/node-forge/lib/prng.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n(function() {\n    // forge.random already defined\n    if (forge.random && forge.random.getBytes) {\n        module.exports = forge.random;\n        return;\n    }\n    (function(jQuery1) {\n        // the default prng plugin, uses AES-128\n        var prng_aes = {};\n        var _prng_aes_output = new Array(4);\n        var _prng_aes_buffer = forge.util.createBuffer();\n        prng_aes.formatKey = function(key) {\n            // convert the key into 32-bit integers\n            var tmp = forge.util.createBuffer(key);\n            key = new Array(4);\n            key[0] = tmp.getInt32();\n            key[1] = tmp.getInt32();\n            key[2] = tmp.getInt32();\n            key[3] = tmp.getInt32();\n            // return the expanded key\n            return forge.aes._expandKey(key, false);\n        };\n        prng_aes.formatSeed = function(seed) {\n            // convert seed into 32-bit integers\n            var tmp = forge.util.createBuffer(seed);\n            seed = new Array(4);\n            seed[0] = tmp.getInt32();\n            seed[1] = tmp.getInt32();\n            seed[2] = tmp.getInt32();\n            seed[3] = tmp.getInt32();\n            return seed;\n        };\n        prng_aes.cipher = function(key, seed) {\n            forge.aes._updateBlock(key, seed, _prng_aes_output, false);\n            _prng_aes_buffer.putInt32(_prng_aes_output[0]);\n            _prng_aes_buffer.putInt32(_prng_aes_output[1]);\n            _prng_aes_buffer.putInt32(_prng_aes_output[2]);\n            _prng_aes_buffer.putInt32(_prng_aes_output[3]);\n            return _prng_aes_buffer.getBytes();\n        };\n        prng_aes.increment = function(seed) {\n            // FIXME: do we care about carry or signed issues?\n            ++seed[3];\n            return seed;\n        };\n        prng_aes.md = forge.md.sha256;\n        /**\n * Creates a new PRNG.\n */ function spawnPrng() {\n            var ctx = forge.prng.create(prng_aes);\n            /**\n   * Gets random bytes. If a native secure crypto API is unavailable, this\n   * method tries to make the bytes more unpredictable by drawing from data that\n   * can be collected from the user of the browser, eg: mouse movement.\n   *\n   * If a callback is given, this method will be called asynchronously.\n   *\n   * @param count the number of random bytes to get.\n   * @param [callback(err, bytes)] called once the operation completes.\n   *\n   * @return the random bytes in a string.\n   */ ctx.getBytes = function(count, callback) {\n                return ctx.generate(count, callback);\n            };\n            /**\n   * Gets random bytes asynchronously. If a native secure crypto API is\n   * unavailable, this method tries to make the bytes more unpredictable by\n   * drawing from data that can be collected from the user of the browser,\n   * eg: mouse movement.\n   *\n   * @param count the number of random bytes to get.\n   *\n   * @return the random bytes in a string.\n   */ ctx.getBytesSync = function(count) {\n                return ctx.generate(count);\n            };\n            return ctx;\n        }\n        // create default prng context\n        var _ctx = spawnPrng();\n        // add other sources of entropy only if window.crypto.getRandomValues is not\n        // available -- otherwise this source will be automatically used by the prng\n        var getRandomValues = null;\n        var globalScope = forge.util.globalScope;\n        var _crypto = globalScope.crypto || globalScope.msCrypto;\n        if (_crypto && _crypto.getRandomValues) {\n            getRandomValues = function(arr) {\n                return _crypto.getRandomValues(arr);\n            };\n        }\n        if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {\n            // if this is a web worker, do not use weak entropy, instead register to\n            // receive strong entropy asynchronously from the main thread\n            if (true) {\n            // FIXME:\n            }\n            // get load time entropy\n            _ctx.collectInt(+new Date(), 32);\n            // add some entropy from navigator object\n            if (typeof navigator !== \"undefined\") {\n                var _navBytes = \"\";\n                for(var key in navigator){\n                    try {\n                        if (typeof navigator[key] == \"string\") {\n                            _navBytes += navigator[key];\n                        }\n                    } catch (e) {\n                    /* Some navigator keys might not be accessible, e.g. the geolocation\n          attribute throws an exception if touched in Mozilla chrome://\n          context.\n\n          Silently ignore this and just don't use this as a source of\n          entropy. */ }\n                }\n                _ctx.collect(_navBytes);\n                _navBytes = null;\n            }\n            // add mouse and keyboard collectors if jquery is available\n            if (jQuery1) {\n                // set up mouse entropy capture\n                jQuery1().mousemove(function(e) {\n                    // add mouse coords\n                    _ctx.collectInt(e.clientX, 16);\n                    _ctx.collectInt(e.clientY, 16);\n                });\n                // set up keyboard entropy capture\n                jQuery1().keypress(function(e) {\n                    _ctx.collectInt(e.charCode, 8);\n                });\n            }\n        }\n        /* Random API */ if (!forge.random) {\n            forge.random = _ctx;\n        } else {\n            // extend forge.random with _ctx\n            for(var key in _ctx){\n                forge.random[key] = _ctx[key];\n            }\n        }\n        // expose spawn PRNG\n        forge.random.createInstance = spawnPrng;\n        module.exports = forge.random;\n    })(typeof jQuery !== \"undefined\" ? jQuery : null);\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/random.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/rc2.js":
/*!********************************************!*\
  !*** ./node_modules/node-forge/lib/rc2.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * RC2 implementation.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * Information on the RC2 cipher is available from RFC #2268,\n * http://www.ietf.org/rfc/rfc2268.txt\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nvar piTable = [\n    0xd9,\n    0x78,\n    0xf9,\n    0xc4,\n    0x19,\n    0xdd,\n    0xb5,\n    0xed,\n    0x28,\n    0xe9,\n    0xfd,\n    0x79,\n    0x4a,\n    0xa0,\n    0xd8,\n    0x9d,\n    0xc6,\n    0x7e,\n    0x37,\n    0x83,\n    0x2b,\n    0x76,\n    0x53,\n    0x8e,\n    0x62,\n    0x4c,\n    0x64,\n    0x88,\n    0x44,\n    0x8b,\n    0xfb,\n    0xa2,\n    0x17,\n    0x9a,\n    0x59,\n    0xf5,\n    0x87,\n    0xb3,\n    0x4f,\n    0x13,\n    0x61,\n    0x45,\n    0x6d,\n    0x8d,\n    0x09,\n    0x81,\n    0x7d,\n    0x32,\n    0xbd,\n    0x8f,\n    0x40,\n    0xeb,\n    0x86,\n    0xb7,\n    0x7b,\n    0x0b,\n    0xf0,\n    0x95,\n    0x21,\n    0x22,\n    0x5c,\n    0x6b,\n    0x4e,\n    0x82,\n    0x54,\n    0xd6,\n    0x65,\n    0x93,\n    0xce,\n    0x60,\n    0xb2,\n    0x1c,\n    0x73,\n    0x56,\n    0xc0,\n    0x14,\n    0xa7,\n    0x8c,\n    0xf1,\n    0xdc,\n    0x12,\n    0x75,\n    0xca,\n    0x1f,\n    0x3b,\n    0xbe,\n    0xe4,\n    0xd1,\n    0x42,\n    0x3d,\n    0xd4,\n    0x30,\n    0xa3,\n    0x3c,\n    0xb6,\n    0x26,\n    0x6f,\n    0xbf,\n    0x0e,\n    0xda,\n    0x46,\n    0x69,\n    0x07,\n    0x57,\n    0x27,\n    0xf2,\n    0x1d,\n    0x9b,\n    0xbc,\n    0x94,\n    0x43,\n    0x03,\n    0xf8,\n    0x11,\n    0xc7,\n    0xf6,\n    0x90,\n    0xef,\n    0x3e,\n    0xe7,\n    0x06,\n    0xc3,\n    0xd5,\n    0x2f,\n    0xc8,\n    0x66,\n    0x1e,\n    0xd7,\n    0x08,\n    0xe8,\n    0xea,\n    0xde,\n    0x80,\n    0x52,\n    0xee,\n    0xf7,\n    0x84,\n    0xaa,\n    0x72,\n    0xac,\n    0x35,\n    0x4d,\n    0x6a,\n    0x2a,\n    0x96,\n    0x1a,\n    0xd2,\n    0x71,\n    0x5a,\n    0x15,\n    0x49,\n    0x74,\n    0x4b,\n    0x9f,\n    0xd0,\n    0x5e,\n    0x04,\n    0x18,\n    0xa4,\n    0xec,\n    0xc2,\n    0xe0,\n    0x41,\n    0x6e,\n    0x0f,\n    0x51,\n    0xcb,\n    0xcc,\n    0x24,\n    0x91,\n    0xaf,\n    0x50,\n    0xa1,\n    0xf4,\n    0x70,\n    0x39,\n    0x99,\n    0x7c,\n    0x3a,\n    0x85,\n    0x23,\n    0xb8,\n    0xb4,\n    0x7a,\n    0xfc,\n    0x02,\n    0x36,\n    0x5b,\n    0x25,\n    0x55,\n    0x97,\n    0x31,\n    0x2d,\n    0x5d,\n    0xfa,\n    0x98,\n    0xe3,\n    0x8a,\n    0x92,\n    0xae,\n    0x05,\n    0xdf,\n    0x29,\n    0x10,\n    0x67,\n    0x6c,\n    0xba,\n    0xc9,\n    0xd3,\n    0x00,\n    0xe6,\n    0xcf,\n    0xe1,\n    0x9e,\n    0xa8,\n    0x2c,\n    0x63,\n    0x16,\n    0x01,\n    0x3f,\n    0x58,\n    0xe2,\n    0x89,\n    0xa9,\n    0x0d,\n    0x38,\n    0x34,\n    0x1b,\n    0xab,\n    0x33,\n    0xff,\n    0xb0,\n    0xbb,\n    0x48,\n    0x0c,\n    0x5f,\n    0xb9,\n    0xb1,\n    0xcd,\n    0x2e,\n    0xc5,\n    0xf3,\n    0xdb,\n    0x47,\n    0xe5,\n    0xa5,\n    0x9c,\n    0x77,\n    0x0a,\n    0xa6,\n    0x20,\n    0x68,\n    0xfe,\n    0x7f,\n    0xc1,\n    0xad\n];\nvar s = [\n    1,\n    2,\n    3,\n    5\n];\n/**\n * Rotate a word left by given number of bits.\n *\n * Bits that are shifted out on the left are put back in on the right\n * hand side.\n *\n * @param word The word to shift left.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */ var rol = function(word, bits) {\n    return word << bits & 0xffff | (word & 0xffff) >> 16 - bits;\n};\n/**\n * Rotate a word right by given number of bits.\n *\n * Bits that are shifted out on the right are put back in on the left\n * hand side.\n *\n * @param word The word to shift right.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */ var ror = function(word, bits) {\n    return (word & 0xffff) >> bits | word << 16 - bits & 0xffff;\n};\n/* RC2 API */ module.exports = forge.rc2 = forge.rc2 || {};\n/**\n * Perform RC2 key expansion as per RFC #2268, section 2.\n *\n * @param key variable-length user key (between 1 and 128 bytes)\n * @param effKeyBits number of effective key bits (default: 128)\n * @return the expanded RC2 key (ByteBuffer of 128 bytes)\n */ forge.rc2.expandKey = function(key, effKeyBits) {\n    if (typeof key === \"string\") {\n        key = forge.util.createBuffer(key);\n    }\n    effKeyBits = effKeyBits || 128;\n    /* introduce variables that match the names used in RFC #2268 */ var L = key;\n    var T = key.length();\n    var T1 = effKeyBits;\n    var T8 = Math.ceil(T1 / 8);\n    var TM = 0xff >> (T1 & 0x07);\n    var i;\n    for(i = T; i < 128; i++){\n        L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 0xff]);\n    }\n    L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\n    for(i = 127 - T8; i >= 0; i--){\n        L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\n    }\n    return L;\n};\n/**\n * Creates a RC2 cipher object.\n *\n * @param key the symmetric key to use (as base for key generation).\n * @param bits the number of effective key bits.\n * @param encrypt false for decryption, true for encryption.\n *\n * @return the cipher.\n */ var createCipher = function(key, bits, encrypt) {\n    var _finish = false, _input = null, _output = null, _iv = null;\n    var mixRound, mashRound;\n    var i, j, K = [];\n    /* Expand key and fill into K[] Array */ key = forge.rc2.expandKey(key, bits);\n    for(i = 0; i < 64; i++){\n        K.push(key.getInt16Le());\n    }\n    if (encrypt) {\n        /**\n     * Perform one mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */ mixRound = function(R) {\n            for(i = 0; i < 4; i++){\n                R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);\n                R[i] = rol(R[i], s[i]);\n                j++;\n            }\n        };\n        /**\n     * Perform one mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */ mashRound = function(R) {\n            for(i = 0; i < 4; i++){\n                R[i] += K[R[(i + 3) % 4] & 63];\n            }\n        };\n    } else {\n        /**\n     * Perform one r-mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */ mixRound = function(R) {\n            for(i = 3; i >= 0; i--){\n                R[i] = ror(R[i], s[i]);\n                R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);\n                j--;\n            }\n        };\n        /**\n     * Perform one r-mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */ mashRound = function(R) {\n            for(i = 3; i >= 0; i--){\n                R[i] -= K[R[(i + 3) % 4] & 63];\n            }\n        };\n    }\n    /**\n   * Run the specified cipher execution plan.\n   *\n   * This function takes four words from the input buffer, applies the IV on\n   * it (if requested) and runs the provided execution plan.\n   *\n   * The plan must be put together in form of a array of arrays.  Where the\n   * outer one is simply a list of steps to perform and the inner one needs\n   * to have two elements: the first one telling how many rounds to perform,\n   * the second one telling what to do (i.e. the function to call).\n   *\n   * @param {Array} plan The plan to execute.\n   */ var runPlan = function(plan) {\n        var R = [];\n        /* Get data from input buffer and fill the four words into R */ for(i = 0; i < 4; i++){\n            var val = _input.getInt16Le();\n            if (_iv !== null) {\n                if (encrypt) {\n                    /* We're encrypting, apply the IV first. */ val ^= _iv.getInt16Le();\n                } else {\n                    /* We're decryption, keep cipher text for next block. */ _iv.putInt16Le(val);\n                }\n            }\n            R.push(val & 0xffff);\n        }\n        /* Reset global \"j\" variable as per spec. */ j = encrypt ? 0 : 63;\n        /* Run execution plan. */ for(var ptr = 0; ptr < plan.length; ptr++){\n            for(var ctr = 0; ctr < plan[ptr][0]; ctr++){\n                plan[ptr][1](R);\n            }\n        }\n        /* Write back result to output buffer. */ for(i = 0; i < 4; i++){\n            if (_iv !== null) {\n                if (encrypt) {\n                    /* We're encrypting in CBC-mode, feed back encrypted bytes into\n             IV buffer to carry it forward to next block. */ _iv.putInt16Le(R[i]);\n                } else {\n                    R[i] ^= _iv.getInt16Le();\n                }\n            }\n            _output.putInt16Le(R[i]);\n        }\n    };\n    /* Create cipher object */ var cipher = null;\n    cipher = {\n        /**\n     * Starts or restarts the encryption or decryption process, whichever\n     * was previously configured.\n     *\n     * To use the cipher in CBC mode, iv may be given either as a string\n     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\n     *\n     * @param iv the initialization vector to use, null for ECB mode.\n     * @param output the output the buffer to write to, null to create one.\n     */ start: function(iv, output) {\n            if (iv) {\n                /* CBC mode */ if (typeof iv === \"string\") {\n                    iv = forge.util.createBuffer(iv);\n                }\n            }\n            _finish = false;\n            _input = forge.util.createBuffer();\n            _output = output || new forge.util.createBuffer();\n            _iv = iv;\n            cipher.output = _output;\n        },\n        /**\n     * Updates the next block.\n     *\n     * @param input the buffer to read from.\n     */ update: function(input) {\n            if (!_finish) {\n                // not finishing, so fill the input buffer with more input\n                _input.putBuffer(input);\n            }\n            while(_input.length() >= 8){\n                runPlan([\n                    [\n                        5,\n                        mixRound\n                    ],\n                    [\n                        1,\n                        mashRound\n                    ],\n                    [\n                        6,\n                        mixRound\n                    ],\n                    [\n                        1,\n                        mashRound\n                    ],\n                    [\n                        5,\n                        mixRound\n                    ]\n                ]);\n            }\n        },\n        /**\n     * Finishes encrypting or decrypting.\n     *\n     * @param pad a padding function to use, null for PKCS#7 padding,\n     *           signature(blockSize, buffer, decrypt).\n     *\n     * @return true if successful, false on error.\n     */ finish: function(pad) {\n            var rval = true;\n            if (encrypt) {\n                if (pad) {\n                    rval = pad(8, _input, !encrypt);\n                } else {\n                    // add PKCS#7 padding to block (each pad byte is the\n                    // value of the number of pad bytes)\n                    var padding = _input.length() === 8 ? 8 : 8 - _input.length();\n                    _input.fillWithByte(padding, padding);\n                }\n            }\n            if (rval) {\n                // do final update\n                _finish = true;\n                cipher.update();\n            }\n            if (!encrypt) {\n                // check for error: input data not a multiple of block size\n                rval = _input.length() === 0;\n                if (rval) {\n                    if (pad) {\n                        rval = pad(8, _output, !encrypt);\n                    } else {\n                        // ensure padding byte count is valid\n                        var len = _output.length();\n                        var count = _output.at(len - 1);\n                        if (count > len) {\n                            rval = false;\n                        } else {\n                            // trim off padding bytes\n                            _output.truncate(count);\n                        }\n                    }\n                }\n            }\n            return rval;\n        }\n    };\n    return cipher;\n};\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */ forge.rc2.startEncrypting = function(key, iv, output) {\n    var cipher = forge.rc2.createEncryptionCipher(key, 128);\n    cipher.start(iv, output);\n    return cipher;\n};\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start encrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */ forge.rc2.createEncryptionCipher = function(key, bits) {\n    return createCipher(key, bits, true);\n};\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */ forge.rc2.startDecrypting = function(key, iv, output) {\n    var cipher = forge.rc2.createDecryptionCipher(key, 128);\n    cipher.start(iv, output);\n    return cipher;\n};\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start decrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */ forge.rc2.createDecryptionCipher = function(key, bits) {\n    return createCipher(key, bits, false);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/rc2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/rsa.js":
/*!********************************************!*\
  !*** ./node_modules/node-forge/lib/rsa.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Javascript implementation of basic RSA algorithms.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n *\n * The only algorithm currently supported for PKI is RSA.\n *\n * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo\n * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier\n * and a subjectPublicKey of type bit string.\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of RSA, there aren't any.\n *\n * SubjectPublicKeyInfo ::= SEQUENCE {\n *   algorithm AlgorithmIdentifier,\n *   subjectPublicKey BIT STRING\n * }\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *   algorithm OBJECT IDENTIFIER,\n *   parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * For an RSA public key, the subjectPublicKey is:\n *\n * RSAPublicKey ::= SEQUENCE {\n *   modulus            INTEGER,    -- n\n *   publicExponent     INTEGER     -- e\n * }\n *\n * PrivateKeyInfo ::= SEQUENCE {\n *   version                   Version,\n *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n *   privateKey                PrivateKey,\n *   attributes           [0]  IMPLICIT Attributes OPTIONAL\n * }\n *\n * Version ::= INTEGER\n * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n * PrivateKey ::= OCTET STRING\n * Attributes ::= SET OF Attribute\n *\n * An RSA private key as the following structure:\n *\n * RSAPrivateKey ::= SEQUENCE {\n *   version Version,\n *   modulus INTEGER, -- n\n *   publicExponent INTEGER, -- e\n *   privateExponent INTEGER, -- d\n *   prime1 INTEGER, -- p\n *   prime2 INTEGER, -- q\n *   exponent1 INTEGER, -- d mod (p-1)\n *   exponent2 INTEGER, -- d mod (q-1)\n *   coefficient INTEGER -- (inverse of q) mod p\n * }\n *\n * Version ::= INTEGER\n *\n * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./asn1 */ \"(ssr)/./node_modules/node-forge/lib/asn1.js\");\n__webpack_require__(/*! ./jsbn */ \"(ssr)/./node_modules/node-forge/lib/jsbn.js\");\n__webpack_require__(/*! ./oids */ \"(ssr)/./node_modules/node-forge/lib/oids.js\");\n__webpack_require__(/*! ./pkcs1 */ \"(ssr)/./node_modules/node-forge/lib/pkcs1.js\");\n__webpack_require__(/*! ./prime */ \"(ssr)/./node_modules/node-forge/lib/prime.js\");\n__webpack_require__(/*! ./random */ \"(ssr)/./node_modules/node-forge/lib/random.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nif (typeof BigInteger === \"undefined\") {\n    var BigInteger = forge.jsbn.BigInteger;\n}\nvar _crypto = forge.util.isNodejs ? __webpack_require__(/*! crypto */ \"crypto\") : null;\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n// shortcut for util API\nvar util = forge.util;\n/*\n * RSA encryption and decryption, see RFC 2313.\n */ forge.pki = forge.pki || {};\nmodule.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};\nvar pki = forge.pki;\n// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [\n    6,\n    4,\n    2,\n    4,\n    2,\n    4,\n    6,\n    2\n];\n// validator for a PrivateKeyInfo structure\nvar privateKeyValidator = {\n    // PrivateKeyInfo\n    name: \"PrivateKeyInfo\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            // Version (INTEGER)\n            name: \"PrivateKeyInfo.version\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyVersion\"\n        },\n        {\n            // privateKeyAlgorithm\n            name: \"PrivateKeyInfo.privateKeyAlgorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [\n                {\n                    name: \"AlgorithmIdentifier.algorithm\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OID,\n                    constructed: false,\n                    capture: \"privateKeyOid\"\n                }\n            ]\n        },\n        {\n            // PrivateKey\n            name: \"PrivateKeyInfo\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OCTETSTRING,\n            constructed: false,\n            capture: \"privateKey\"\n        }\n    ]\n};\n// validator for an RSA private key\nvar rsaPrivateKeyValidator = {\n    // RSAPrivateKey\n    name: \"RSAPrivateKey\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            // Version (INTEGER)\n            name: \"RSAPrivateKey.version\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyVersion\"\n        },\n        {\n            // modulus (n)\n            name: \"RSAPrivateKey.modulus\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyModulus\"\n        },\n        {\n            // publicExponent (e)\n            name: \"RSAPrivateKey.publicExponent\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyPublicExponent\"\n        },\n        {\n            // privateExponent (d)\n            name: \"RSAPrivateKey.privateExponent\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyPrivateExponent\"\n        },\n        {\n            // prime1 (p)\n            name: \"RSAPrivateKey.prime1\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyPrime1\"\n        },\n        {\n            // prime2 (q)\n            name: \"RSAPrivateKey.prime2\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyPrime2\"\n        },\n        {\n            // exponent1 (d mod (p-1))\n            name: \"RSAPrivateKey.exponent1\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyExponent1\"\n        },\n        {\n            // exponent2 (d mod (q-1))\n            name: \"RSAPrivateKey.exponent2\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyExponent2\"\n        },\n        {\n            // coefficient ((inverse of q) mod p)\n            name: \"RSAPrivateKey.coefficient\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"privateKeyCoefficient\"\n        }\n    ]\n};\n// validator for an RSA public key\nvar rsaPublicKeyValidator = {\n    // RSAPublicKey\n    name: \"RSAPublicKey\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            // modulus (n)\n            name: \"RSAPublicKey.modulus\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"publicKeyModulus\"\n        },\n        {\n            // publicExponent (e)\n            name: \"RSAPublicKey.exponent\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.INTEGER,\n            constructed: false,\n            capture: \"publicKeyExponent\"\n        }\n    ]\n};\n// validator for an SubjectPublicKeyInfo structure\n// Note: Currently only works with an RSA public key\nvar publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n    name: \"SubjectPublicKeyInfo\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    captureAsn1: \"subjectPublicKeyInfo\",\n    value: [\n        {\n            name: \"SubjectPublicKeyInfo.AlgorithmIdentifier\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [\n                {\n                    name: \"AlgorithmIdentifier.algorithm\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OID,\n                    constructed: false,\n                    capture: \"publicKeyOid\"\n                }\n            ]\n        },\n        {\n            // subjectPublicKey\n            name: \"SubjectPublicKeyInfo.subjectPublicKey\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.BITSTRING,\n            constructed: false,\n            value: [\n                {\n                    // RSAPublicKey\n                    name: \"SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.SEQUENCE,\n                    constructed: true,\n                    optional: true,\n                    captureAsn1: \"rsaPublicKey\"\n                }\n            ]\n        }\n    ]\n};\n// validator for a DigestInfo structure\nvar digestInfoValidator = {\n    name: \"DigestInfo\",\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [\n        {\n            name: \"DigestInfo.DigestAlgorithm\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.SEQUENCE,\n            constructed: true,\n            value: [\n                {\n                    name: \"DigestInfo.DigestAlgorithm.algorithmIdentifier\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.OID,\n                    constructed: false,\n                    capture: \"algorithmIdentifier\"\n                },\n                {\n                    // NULL paramters\n                    name: \"DigestInfo.DigestAlgorithm.parameters\",\n                    tagClass: asn1.Class.UNIVERSAL,\n                    type: asn1.Type.NULL,\n                    // captured only to check existence for md2 and md5\n                    capture: \"parameters\",\n                    optional: true,\n                    constructed: false\n                }\n            ]\n        },\n        {\n            // digest\n            name: \"DigestInfo.digest\",\n            tagClass: asn1.Class.UNIVERSAL,\n            type: asn1.Type.OCTETSTRING,\n            constructed: false,\n            capture: \"digest\"\n        }\n    ]\n};\n/**\n * Wrap digest in DigestInfo object.\n *\n * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n * Digest ::= OCTET STRING\n *\n * @param md the message digest object with the hash to sign.\n *\n * @return the encoded message (ready for RSA encrytion)\n */ var emsaPkcs1v15encode = function(md) {\n    // get the oid for the algorithm\n    var oid;\n    if (md.algorithm in pki.oids) {\n        oid = pki.oids[md.algorithm];\n    } else {\n        var error = new Error(\"Unknown message digest algorithm.\");\n        error.algorithm = md.algorithm;\n        throw error;\n    }\n    var oidBytes = asn1.oidToDer(oid).getBytes();\n    // create the digest info\n    var digestInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n    var digestAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n    digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));\n    digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\"));\n    var digest = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, md.digest().getBytes());\n    digestInfo.value.push(digestAlgorithm);\n    digestInfo.value.push(digest);\n    // encode digest info\n    return asn1.toDer(digestInfo).getBytes();\n};\n/**\n * Performs x^c mod n (RSA encryption or decryption operation).\n *\n * @param x the number to raise and mod.\n * @param key the key to use.\n * @param pub true if the key is public, false if private.\n *\n * @return the result of x^c mod n.\n */ var _modPow = function(x, key, pub) {\n    if (pub) {\n        return x.modPow(key.e, key.n);\n    }\n    if (!key.p || !key.q) {\n        // allow calculation without CRT params (slow)\n        return x.modPow(key.d, key.n);\n    }\n    // pre-compute dP, dQ, and qInv if necessary\n    if (!key.dP) {\n        key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n    }\n    if (!key.dQ) {\n        key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n    }\n    if (!key.qInv) {\n        key.qInv = key.q.modInverse(key.p);\n    }\n    /* Chinese remainder theorem (CRT) states:\n\n    Suppose n1, n2, ..., nk are positive integers which are pairwise\n    coprime (n1 and n2 have no common factors other than 1). For any\n    integers x1, x2, ..., xk there exists an integer x solving the\n    system of simultaneous congruences (where ~= means modularly\n    congruent so a ~= b mod n means a mod n = b mod n):\n\n    x ~= x1 mod n1\n    x ~= x2 mod n2\n    ...\n    x ~= xk mod nk\n\n    This system of congruences has a single simultaneous solution x\n    between 0 and n - 1. Furthermore, each xk solution and x itself\n    is congruent modulo the product n = n1*n2*...*nk.\n    So x1 mod n = x2 mod n = xk mod n = x mod n.\n\n    The single simultaneous solution x can be solved with the following\n    equation:\n\n    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.\n\n    Where x is less than n, xi = x mod ni.\n\n    For RSA we are only concerned with k = 2. The modulus n = pq, where\n    p and q are coprime. The RSA decryption algorithm is:\n\n    y = x^d mod n\n\n    Given the above:\n\n    x1 = x^d mod p\n    r1 = n/p = q\n    s1 = q^-1 mod p\n    x2 = x^d mod q\n    r2 = n/q = p\n    s2 = p^-1 mod q\n\n    So y = (x1r1s1 + x2r2s2) mod n\n         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n\n\n    According to Fermat's Little Theorem, if the modulus P is prime,\n    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.\n    Since A is not divisible by P it follows that if:\n    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:\n\n    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort\n    to calculate). In order to calculate x^d mod p more quickly the\n    exponent d mod (p - 1) is stored in the RSA private key (the same\n    is done for x^d mod q). These values are referred to as dP and dQ\n    respectively. Therefore we now have:\n\n    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n\n\n    Since we'll be reducing x^dP by modulo p (same for q) we can also\n    reduce x by p (and q respectively) before hand. Therefore, let\n\n    xp = ((x mod p)^dP mod p), and\n    xq = ((x mod q)^dQ mod q), yielding:\n\n    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n\n\n    This can be further reduced to a simple algorithm that only\n    requires 1 inverse (the q inverse is used) to be used and stored.\n    The algorithm is called Garner's algorithm. If qInv is the\n    inverse of q, we simply calculate:\n\n    y = (qInv*(xp - xq) mod p) * q + xq\n\n    However, there are two further complications. First, we need to\n    ensure that xp > xq to prevent signed BigIntegers from being used\n    so we add p until this is true (since we will be mod'ing with\n    p anyway). Then, there is a known timing attack on algorithms\n    using the CRT. To mitigate this risk, \"cryptographic blinding\"\n    should be used. This requires simply generating a random number r\n    between 0 and n-1 and its inverse and multiplying x by r^e before\n    calculating y and then multiplying y by r^-1 afterwards. Note that\n    r must be coprime with n (gcd(r, n) === 1) in order to have an\n    inverse.\n  */ // cryptographic blinding\n    var r;\n    do {\n        r = new BigInteger(forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)), 16);\n    }while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));\n    x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);\n    // calculate xp and xq\n    var xp = x.mod(key.p).modPow(key.dP, key.p);\n    var xq = x.mod(key.q).modPow(key.dQ, key.q);\n    // xp must be larger than xq to avoid signed bit usage\n    while(xp.compareTo(xq) < 0){\n        xp = xp.add(key.p);\n    }\n    // do last step\n    var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq);\n    // remove effect of random for cryptographic blinding\n    y = y.multiply(r.modInverse(key.n)).mod(key.n);\n    return y;\n};\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n * 'encrypt' on a public key object instead.\n *\n * Performs RSA encryption.\n *\n * The parameter bt controls whether to put padding bytes before the\n * message passed in. Set bt to either true or false to disable padding\n * completely (in order to handle e.g. EMSA-PSS encoding seperately before),\n * signaling whether the encryption operation is a public key operation\n * (i.e. encrypting data) or not, i.e. private key operation (data signing).\n *\n * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n * (for signing) or 0x02 (for encryption). The key operation mode (private\n * or public) is derived from this flag in that case).\n *\n * @param m the message to encrypt as a byte string.\n * @param key the RSA key to use.\n * @param bt for PKCS#1 v1.5 padding, the block type to use\n *   (0x01 for private key, 0x02 for public),\n *   to disable padding: true = public key, false = private key.\n *\n * @return the encrypted bytes as a string.\n */ pki.rsa.encrypt = function(m, key, bt) {\n    var pub = bt;\n    var eb;\n    // get the length of the modulus in bytes\n    var k = Math.ceil(key.n.bitLength() / 8);\n    if (bt !== false && bt !== true) {\n        // legacy, default to PKCS#1 v1.5 padding\n        pub = bt === 0x02;\n        eb = _encodePkcs1_v1_5(m, key, bt);\n    } else {\n        eb = forge.util.createBuffer();\n        eb.putBytes(m);\n    }\n    // load encryption block as big integer 'x'\n    // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n    var x = new BigInteger(eb.toHex(), 16);\n    // do RSA encryption\n    var y = _modPow(x, key, pub);\n    // convert y into the encrypted data byte string, if y is shorter in\n    // bytes than k, then prepend zero bytes to fill up ed\n    // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n    var yhex = y.toString(16);\n    var ed = forge.util.createBuffer();\n    var zeros = k - Math.ceil(yhex.length / 2);\n    while(zeros > 0){\n        ed.putByte(0x00);\n        --zeros;\n    }\n    ed.putBytes(forge.util.hexToBytes(yhex));\n    return ed.getBytes();\n};\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n * 'verify' on a public key object instead.\n *\n * Performs RSA decryption.\n *\n * The parameter ml controls whether to apply PKCS#1 v1.5 padding\n * or not.  Set ml = false to disable padding removal completely\n * (in order to handle e.g. EMSA-PSS later on) and simply pass back\n * the RSA encryption block.\n *\n * @param ed the encrypted data to decrypt in as a byte string.\n * @param key the RSA key to use.\n * @param pub true for a public key operation, false for private.\n * @param ml the message length, if known, false to disable padding.\n *\n * @return the decrypted message as a byte string.\n */ pki.rsa.decrypt = function(ed, key, pub, ml) {\n    // get the length of the modulus in bytes\n    var k = Math.ceil(key.n.bitLength() / 8);\n    // error if the length of the encrypted data ED is not k\n    if (ed.length !== k) {\n        var error = new Error(\"Encrypted message length is invalid.\");\n        error.length = ed.length;\n        error.expected = k;\n        throw error;\n    }\n    // convert encrypted data into a big integer\n    // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n    var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n    // y must be less than the modulus or it wasn't the result of\n    // a previous mod operation (encryption) using that modulus\n    if (y.compareTo(key.n) >= 0) {\n        throw new Error(\"Encrypted message is invalid.\");\n    }\n    // do RSA decryption\n    var x = _modPow(y, key, pub);\n    // create the encryption block, if x is shorter in bytes than k, then\n    // prepend zero bytes to fill up eb\n    // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n    var xhex = x.toString(16);\n    var eb = forge.util.createBuffer();\n    var zeros = k - Math.ceil(xhex.length / 2);\n    while(zeros > 0){\n        eb.putByte(0x00);\n        --zeros;\n    }\n    eb.putBytes(forge.util.hexToBytes(xhex));\n    if (ml !== false) {\n        // legacy, default to PKCS#1 v1.5 padding\n        return _decodePkcs1_v1_5(eb.getBytes(), key, pub);\n    }\n    // return message\n    return eb.getBytes();\n};\n/**\n * Creates an RSA key-pair generation state object. It is used to allow\n * key-generation to be performed in steps. It also allows for a UI to\n * display progress updates.\n *\n * @param bits the size for the private key in bits, defaults to 2048.\n * @param e the public exponent to use, defaults to 65537 (0x10001).\n * @param [options] the options to use.\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n *\n * @return the state object to use to generate the key-pair.\n */ pki.rsa.createKeyPairGenerationState = function(bits, e, options) {\n    // TODO: migrate step-based prime generation code to forge.prime\n    // set default bits\n    if (typeof bits === \"string\") {\n        bits = parseInt(bits, 10);\n    }\n    bits = bits || 2048;\n    // create prng with api that matches BigInteger secure random\n    options = options || {};\n    var prng = options.prng || forge.random;\n    var rng = {\n        // x is an array to fill with bytes\n        nextBytes: function(x) {\n            var b = prng.getBytesSync(x.length);\n            for(var i = 0; i < x.length; ++i){\n                x[i] = b.charCodeAt(i);\n            }\n        }\n    };\n    var algorithm = options.algorithm || \"PRIMEINC\";\n    // create PRIMEINC algorithm state\n    var rval;\n    if (algorithm === \"PRIMEINC\") {\n        rval = {\n            algorithm: algorithm,\n            state: 0,\n            bits: bits,\n            rng: rng,\n            eInt: e || 65537,\n            e: new BigInteger(null),\n            p: null,\n            q: null,\n            qBits: bits >> 1,\n            pBits: bits - (bits >> 1),\n            pqState: 0,\n            num: null,\n            keys: null\n        };\n        rval.e.fromInt(rval.eInt);\n    } else {\n        throw new Error(\"Invalid key generation algorithm: \" + algorithm);\n    }\n    return rval;\n};\n/**\n * Attempts to runs the key-generation algorithm for at most n seconds\n * (approximately) using the given state. When key-generation has completed,\n * the keys will be stored in state.keys.\n *\n * To use this function to update a UI while generating a key or to prevent\n * causing browser lockups/warnings, set \"n\" to a value other than 0. A\n * simple pattern for generating a key and showing a progress indicator is:\n *\n * var state = pki.rsa.createKeyPairGenerationState(2048);\n * var step = function() {\n *   // step key-generation, run algorithm for 100 ms, repeat\n *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n *     setTimeout(step, 1);\n *   } else {\n *     // key-generation complete\n *     // TODO: turn off progress indicator here\n *     // TODO: use the generated key-pair in \"state.keys\"\n *   }\n * };\n * // TODO: turn on progress indicator here\n * setTimeout(step, 0);\n *\n * @param state the state to use.\n * @param n the maximum number of milliseconds to run the algorithm for, 0\n *          to run the algorithm to completion.\n *\n * @return true if the key-generation completed, false if not.\n */ pki.rsa.stepKeyPairGenerationState = function(state, n) {\n    // set default algorithm if not set\n    if (!(\"algorithm\" in state)) {\n        state.algorithm = \"PRIMEINC\";\n    }\n    // TODO: migrate step-based prime generation code to forge.prime\n    // TODO: abstract as PRIMEINC algorithm\n    // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)\n    // with some minor optimizations and designed to run in steps\n    // local state vars\n    var THIRTY = new BigInteger(null);\n    THIRTY.fromInt(30);\n    var deltaIdx = 0;\n    var op_or = function(x, y) {\n        return x | y;\n    };\n    // keep stepping until time limit is reached or done\n    var t1 = +new Date();\n    var t2;\n    var total = 0;\n    while(state.keys === null && (n <= 0 || total < n)){\n        // generate p or q\n        if (state.state === 0) {\n            /* Note: All primes are of the form:\n\n        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i\n\n        When we generate a random number, we always align it at 30k + 1. Each\n        time the number is determined not to be prime we add to get to the\n        next 'i', eg: if the number was at 30k + 1 we add 6. */ var bits = state.p === null ? state.pBits : state.qBits;\n            var bits1 = bits - 1;\n            // get a random number\n            if (state.pqState === 0) {\n                state.num = new BigInteger(bits, state.rng);\n                // force MSB set\n                if (!state.num.testBit(bits1)) {\n                    state.num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, state.num);\n                }\n                // align number on 30k+1 boundary\n                state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n                deltaIdx = 0;\n                ++state.pqState;\n            } else if (state.pqState === 1) {\n                // try to make the number a prime\n                if (state.num.bitLength() > bits) {\n                    // overflow, try again\n                    state.pqState = 0;\n                // do primality test\n                } else if (state.num.isProbablePrime(_getMillerRabinTests(state.num.bitLength()))) {\n                    ++state.pqState;\n                } else {\n                    // get next potential prime\n                    state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n                }\n            } else if (state.pqState === 2) {\n                // ensure number is coprime with e\n                state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;\n            } else if (state.pqState === 3) {\n                // store p or q\n                state.pqState = 0;\n                if (state.p === null) {\n                    state.p = state.num;\n                } else {\n                    state.q = state.num;\n                }\n                // advance state if both p and q are ready\n                if (state.p !== null && state.q !== null) {\n                    ++state.state;\n                }\n                state.num = null;\n            }\n        } else if (state.state === 1) {\n            // ensure p is larger than q (swap them if not)\n            if (state.p.compareTo(state.q) < 0) {\n                state.num = state.p;\n                state.p = state.q;\n                state.q = state.num;\n            }\n            ++state.state;\n        } else if (state.state === 2) {\n            // compute phi: (p - 1)(q - 1) (Euler's totient function)\n            state.p1 = state.p.subtract(BigInteger.ONE);\n            state.q1 = state.q.subtract(BigInteger.ONE);\n            state.phi = state.p1.multiply(state.q1);\n            ++state.state;\n        } else if (state.state === 3) {\n            // ensure e and phi are coprime\n            if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n                // phi and e are coprime, advance\n                ++state.state;\n            } else {\n                // phi and e aren't coprime, so generate a new p and q\n                state.p = null;\n                state.q = null;\n                state.state = 0;\n            }\n        } else if (state.state === 4) {\n            // create n, ensure n is has the right number of bits\n            state.n = state.p.multiply(state.q);\n            // ensure n is right number of bits\n            if (state.n.bitLength() === state.bits) {\n                // success, advance\n                ++state.state;\n            } else {\n                // failed, get new q\n                state.q = null;\n                state.state = 0;\n            }\n        } else if (state.state === 5) {\n            // set keys\n            var d = state.e.modInverse(state.phi);\n            state.keys = {\n                privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),\n                publicKey: pki.rsa.setPublicKey(state.n, state.e)\n            };\n        }\n        // update timing\n        t2 = +new Date();\n        total += t2 - t1;\n        t1 = t2;\n    }\n    return state.keys !== null;\n};\n/**\n * Generates an RSA public-private key pair in a single call.\n *\n * To generate a key-pair in steps (to allow for progress updates and to\n * prevent blocking or warnings in slow browsers) then use the key-pair\n * generation state functions.\n *\n * To generate a key-pair asynchronously (either through web-workers, if\n * available, or by breaking up the work on the main thread), pass a\n * callback function.\n *\n * @param [bits] the size for the private key in bits, defaults to 2048.\n * @param [e] the public exponent to use, defaults to 65537.\n * @param [options] options for key-pair generation, if given then 'bits'\n *            and 'e' must *not* be given:\n *          bits the size for the private key in bits, (default: 2048).\n *          e the public exponent to use, (default: 65537 (0x10001)).\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\". Disables use of native APIs.\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n * @param [callback(err, keypair)] called once the operation completes.\n *\n * @return an object with privateKey and publicKey properties.\n */ pki.rsa.generateKeyPair = function(bits, e, options, callback) {\n    // (bits), (options), (callback)\n    if (arguments.length === 1) {\n        if (typeof bits === \"object\") {\n            options = bits;\n            bits = undefined;\n        } else if (typeof bits === \"function\") {\n            callback = bits;\n            bits = undefined;\n        }\n    } else if (arguments.length === 2) {\n        // (bits, e), (bits, options), (bits, callback), (options, callback)\n        if (typeof bits === \"number\") {\n            if (typeof e === \"function\") {\n                callback = e;\n                e = undefined;\n            } else if (typeof e !== \"number\") {\n                options = e;\n                e = undefined;\n            }\n        } else {\n            options = bits;\n            callback = e;\n            bits = undefined;\n            e = undefined;\n        }\n    } else if (arguments.length === 3) {\n        // (bits, e, options), (bits, e, callback), (bits, options, callback)\n        if (typeof e === \"number\") {\n            if (typeof options === \"function\") {\n                callback = options;\n                options = undefined;\n            }\n        } else {\n            callback = options;\n            options = e;\n            e = undefined;\n        }\n    }\n    options = options || {};\n    if (bits === undefined) {\n        bits = options.bits || 2048;\n    }\n    if (e === undefined) {\n        e = options.e || 0x10001;\n    }\n    // use native code if permitted, available, and parameters are acceptable\n    if (!forge.options.usePureJavaScript && !options.prng && bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {\n        if (callback) {\n            // try native async\n            if (_detectNodeCrypto(\"generateKeyPair\")) {\n                return _crypto.generateKeyPair(\"rsa\", {\n                    modulusLength: bits,\n                    publicExponent: e,\n                    publicKeyEncoding: {\n                        type: \"spki\",\n                        format: \"pem\"\n                    },\n                    privateKeyEncoding: {\n                        type: \"pkcs8\",\n                        format: \"pem\"\n                    }\n                }, function(err, pub, priv) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    callback(null, {\n                        privateKey: pki.privateKeyFromPem(priv),\n                        publicKey: pki.publicKeyFromPem(pub)\n                    });\n                });\n            }\n            if (_detectSubtleCrypto(\"generateKey\") && _detectSubtleCrypto(\"exportKey\")) {\n                // use standard native generateKey\n                return util.globalScope.crypto.subtle.generateKey({\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    modulusLength: bits,\n                    publicExponent: _intToUint8Array(e),\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                }, true, [\n                    \"sign\",\n                    \"verify\"\n                ]).then(function(pair) {\n                    return util.globalScope.crypto.subtle.exportKey(\"pkcs8\", pair.privateKey);\n                // avoiding catch(function(err) {...}) to support IE <= 8\n                }).then(undefined, function(err) {\n                    callback(err);\n                }).then(function(pkcs8) {\n                    if (pkcs8) {\n                        var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));\n                        callback(null, {\n                            privateKey: privateKey,\n                            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n                        });\n                    }\n                });\n            }\n            if (_detectSubtleMsCrypto(\"generateKey\") && _detectSubtleMsCrypto(\"exportKey\")) {\n                var genOp = util.globalScope.msCrypto.subtle.generateKey({\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    modulusLength: bits,\n                    publicExponent: _intToUint8Array(e),\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                }, true, [\n                    \"sign\",\n                    \"verify\"\n                ]);\n                genOp.oncomplete = function(e) {\n                    var pair = e.target.result;\n                    var exportOp = util.globalScope.msCrypto.subtle.exportKey(\"pkcs8\", pair.privateKey);\n                    exportOp.oncomplete = function(e) {\n                        var pkcs8 = e.target.result;\n                        var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));\n                        callback(null, {\n                            privateKey: privateKey,\n                            publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n                        });\n                    };\n                    exportOp.onerror = function(err) {\n                        callback(err);\n                    };\n                };\n                genOp.onerror = function(err) {\n                    callback(err);\n                };\n                return;\n            }\n        } else {\n            // try native sync\n            if (_detectNodeCrypto(\"generateKeyPairSync\")) {\n                var keypair = _crypto.generateKeyPairSync(\"rsa\", {\n                    modulusLength: bits,\n                    publicExponent: e,\n                    publicKeyEncoding: {\n                        type: \"spki\",\n                        format: \"pem\"\n                    },\n                    privateKeyEncoding: {\n                        type: \"pkcs8\",\n                        format: \"pem\"\n                    }\n                });\n                return {\n                    privateKey: pki.privateKeyFromPem(keypair.privateKey),\n                    publicKey: pki.publicKeyFromPem(keypair.publicKey)\n                };\n            }\n        }\n    }\n    // use JavaScript implementation\n    var state = pki.rsa.createKeyPairGenerationState(bits, e, options);\n    if (!callback) {\n        pki.rsa.stepKeyPairGenerationState(state, 0);\n        return state.keys;\n    }\n    _generateKeyPair(state, options, callback);\n};\n/**\n * Sets an RSA public key from BigIntegers modulus and exponent.\n *\n * @param n the modulus.\n * @param e the exponent.\n *\n * @return the public key.\n */ pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {\n    var key = {\n        n: n,\n        e: e\n    };\n    /**\n   * Encrypts the given data with this public key. Newer applications\n   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\n   * legacy applications.\n   *\n   * @param data the byte string to encrypt.\n   * @param scheme the encryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA encryption,\n   *          an object with an 'encode' property set to a function\n   *          with the signature 'function(data, key)' that returns\n   *          a binary-encoded string representing the encoded data.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the encrypted byte string.\n   */ key.encrypt = function(data, scheme, schemeOptions) {\n        if (typeof scheme === \"string\") {\n            scheme = scheme.toUpperCase();\n        } else if (scheme === undefined) {\n            scheme = \"RSAES-PKCS1-V1_5\";\n        }\n        if (scheme === \"RSAES-PKCS1-V1_5\") {\n            scheme = {\n                encode: function(m, key, pub) {\n                    return _encodePkcs1_v1_5(m, key, 0x02).getBytes();\n                }\n            };\n        } else if (scheme === \"RSA-OAEP\" || scheme === \"RSAES-OAEP\") {\n            scheme = {\n                encode: function(m, key) {\n                    return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);\n                }\n            };\n        } else if ([\n            \"RAW\",\n            \"NONE\",\n            \"NULL\",\n            null\n        ].indexOf(scheme) !== -1) {\n            scheme = {\n                encode: function(e) {\n                    return e;\n                }\n            };\n        } else if (typeof scheme === \"string\") {\n            throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n        }\n        // do scheme-based encoding then rsa encryption\n        var e = scheme.encode(data, key, true);\n        return pki.rsa.encrypt(e, key, true);\n    };\n    /**\n   * Verifies the given signature against the given digest.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\n   * signature is an OCTET STRING that holds a DigestInfo.\n   *\n   * DigestInfo ::= SEQUENCE {\n   *   digestAlgorithm DigestAlgorithmIdentifier,\n   *   digest Digest\n   * }\n   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   * Digest ::= OCTET STRING\n   *\n   * To perform PSS signature verification, provide an instance\n   * of Forge PSS object as the scheme parameter.\n   *\n   * @param digest the message digest hash to compare against the signature,\n   *          as a binary-encoded string.\n   * @param signature the signature to verify, as a binary-encoded string.\n   * @param scheme signature verification scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be expected, but\n   *            PKCS#1 v1.5 padding will still be used.\n   * @param options optional verify options\n   *          _parseAllDigestBytes testing flag to control parsing of all\n   *            digest bytes. Unsupported and not for general usage.\n   *            (default: true)\n   *\n   * @return true if the signature was verified, false if not.\n   */ key.verify = function(digest, signature, scheme, options) {\n        if (typeof scheme === \"string\") {\n            scheme = scheme.toUpperCase();\n        } else if (scheme === undefined) {\n            scheme = \"RSASSA-PKCS1-V1_5\";\n        }\n        if (options === undefined) {\n            options = {\n                _parseAllDigestBytes: true\n            };\n        }\n        if (!(\"_parseAllDigestBytes\" in options)) {\n            options._parseAllDigestBytes = true;\n        }\n        if (scheme === \"RSASSA-PKCS1-V1_5\") {\n            scheme = {\n                verify: function(digest, d) {\n                    // remove padding\n                    d = _decodePkcs1_v1_5(d, key, true);\n                    // d is ASN.1 BER-encoded DigestInfo\n                    var obj = asn1.fromDer(d, {\n                        parseAllBytes: options._parseAllDigestBytes\n                    });\n                    // validate DigestInfo\n                    var capture = {};\n                    var errors = [];\n                    if (!asn1.validate(obj, digestInfoValidator, capture, errors)) {\n                        var error = new Error(\"ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 \" + \"DigestInfo value.\");\n                        error.errors = errors;\n                        throw error;\n                    }\n                    // check hash algorithm identifier\n                    // see PKCS1-v1-5DigestAlgorithms in RFC 8017\n                    // FIXME: add support to vaidator for strict value choices\n                    var oid = asn1.derToOid(capture.algorithmIdentifier);\n                    if (!(oid === forge.oids.md2 || oid === forge.oids.md5 || oid === forge.oids.sha1 || oid === forge.oids.sha224 || oid === forge.oids.sha256 || oid === forge.oids.sha384 || oid === forge.oids.sha512 || oid === forge.oids[\"sha512-224\"] || oid === forge.oids[\"sha512-256\"])) {\n                        var error = new Error(\"Unknown RSASSA-PKCS1-v1_5 DigestAlgorithm identifier.\");\n                        error.oid = oid;\n                        throw error;\n                    }\n                    // special check for md2 and md5 that NULL parameters exist\n                    if (oid === forge.oids.md2 || oid === forge.oids.md5) {\n                        if (!(\"parameters\" in capture)) {\n                            throw new Error(\"ASN.1 object does not contain a valid RSASSA-PKCS1-v1_5 \" + \"DigestInfo value. \" + \"Missing algorithm identifer NULL parameters.\");\n                        }\n                    }\n                    // compare the given digest to the decrypted one\n                    return digest === capture.digest;\n                }\n            };\n        } else if (scheme === \"NONE\" || scheme === \"NULL\" || scheme === null) {\n            scheme = {\n                verify: function(digest, d) {\n                    // remove padding\n                    d = _decodePkcs1_v1_5(d, key, true);\n                    return digest === d;\n                }\n            };\n        }\n        // do rsa decryption w/o any decoding, then verify -- which does decoding\n        var d = pki.rsa.decrypt(signature, key, true, false);\n        return scheme.verify(digest, d, key.n.bitLength());\n    };\n    return key;\n};\n/**\n * Sets an RSA private key from BigIntegers modulus, exponent, primes,\n * prime exponents, and modular multiplicative inverse.\n *\n * @param n the modulus.\n * @param e the public exponent.\n * @param d the private exponent ((inverse of e) mod n).\n * @param p the first prime.\n * @param q the second prime.\n * @param dP exponent1 (d mod (p-1)).\n * @param dQ exponent2 (d mod (q-1)).\n * @param qInv ((inverse of q) mod p)\n *\n * @return the private key.\n */ pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(n, e, d, p, q, dP, dQ, qInv) {\n    var key = {\n        n: n,\n        e: e,\n        d: d,\n        p: p,\n        q: q,\n        dP: dP,\n        dQ: dQ,\n        qInv: qInv\n    };\n    /**\n   * Decrypts the given data with this private key. The decryption scheme\n   * must match the one used to encrypt the data.\n   *\n   * @param data the byte string to decrypt.\n   * @param scheme the decryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA decryption.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the decrypted byte string.\n   */ key.decrypt = function(data, scheme, schemeOptions) {\n        if (typeof scheme === \"string\") {\n            scheme = scheme.toUpperCase();\n        } else if (scheme === undefined) {\n            scheme = \"RSAES-PKCS1-V1_5\";\n        }\n        // do rsa decryption w/o any decoding\n        var d = pki.rsa.decrypt(data, key, false, false);\n        if (scheme === \"RSAES-PKCS1-V1_5\") {\n            scheme = {\n                decode: _decodePkcs1_v1_5\n            };\n        } else if (scheme === \"RSA-OAEP\" || scheme === \"RSAES-OAEP\") {\n            scheme = {\n                decode: function(d, key) {\n                    return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);\n                }\n            };\n        } else if ([\n            \"RAW\",\n            \"NONE\",\n            \"NULL\",\n            null\n        ].indexOf(scheme) !== -1) {\n            scheme = {\n                decode: function(d) {\n                    return d;\n                }\n            };\n        } else {\n            throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n        }\n        // decode according to scheme\n        return scheme.decode(d, key, false);\n    };\n    /**\n   * Signs the given digest, producing a signature.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\n   * an instance of Forge PSS object as the scheme parameter.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param scheme the signature scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be used but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return the signature as a byte string.\n   */ key.sign = function(md, scheme) {\n        /* Note: The internal implementation of RSA operations is being\n      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy\n      code like the use of an encoding block identifier 'bt' will eventually\n      be removed. */ // private key operation\n        var bt = false;\n        if (typeof scheme === \"string\") {\n            scheme = scheme.toUpperCase();\n        }\n        if (scheme === undefined || scheme === \"RSASSA-PKCS1-V1_5\") {\n            scheme = {\n                encode: emsaPkcs1v15encode\n            };\n            bt = 0x01;\n        } else if (scheme === \"NONE\" || scheme === \"NULL\" || scheme === null) {\n            scheme = {\n                encode: function() {\n                    return md;\n                }\n            };\n            bt = 0x01;\n        }\n        // encode and then encrypt\n        var d = scheme.encode(md, key.n.bitLength());\n        return pki.rsa.encrypt(d, key, bt);\n    };\n    return key;\n};\n/**\n * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.\n *\n * @param rsaKey the ASN.1 RSAPrivateKey.\n *\n * @return the ASN.1 PrivateKeyInfo.\n */ pki.wrapRsaPrivateKey = function(rsaKey) {\n    // PrivateKeyInfo\n    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version (0)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()),\n        // privateKeyAlgorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ]),\n        // PrivateKey\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(rsaKey).getBytes())\n    ]);\n};\n/**\n * Converts a private key from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a PrivateKeyInfo containing an\n *          RSAPrivateKey or an RSAPrivateKey.\n *\n * @return the private key.\n */ pki.privateKeyFromAsn1 = function(obj) {\n    // get PrivateKeyInfo\n    var capture = {};\n    var errors = [];\n    if (asn1.validate(obj, privateKeyValidator, capture, errors)) {\n        obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));\n    }\n    // get RSAPrivateKey\n    capture = {};\n    errors = [];\n    if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {\n        var error = new Error(\"Cannot read private key. \" + \"ASN.1 object does not contain an RSAPrivateKey.\");\n        error.errors = errors;\n        throw error;\n    }\n    // Note: Version is currently ignored.\n    // capture.privateKeyVersion\n    // FIXME: inefficient, get a BigInteger that uses byte strings\n    var n, e, d, p, q, dP, dQ, qInv;\n    n = forge.util.createBuffer(capture.privateKeyModulus).toHex();\n    e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();\n    d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();\n    p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();\n    q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();\n    dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();\n    dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();\n    qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();\n    // set private key\n    return pki.setRsaPrivateKey(new BigInteger(n, 16), new BigInteger(e, 16), new BigInteger(d, 16), new BigInteger(p, 16), new BigInteger(q, 16), new BigInteger(dP, 16), new BigInteger(dQ, 16), new BigInteger(qInv, 16));\n};\n/**\n * Converts a private key to an ASN.1 RSAPrivateKey.\n *\n * @param key the private key.\n *\n * @return the ASN.1 representation of an RSAPrivateKey.\n */ pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {\n    // RSAPrivateKey\n    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // version (0 = only 2 primes, 1 multiple primes)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()),\n        // modulus (n)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)),\n        // publicExponent (e)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e)),\n        // privateExponent (d)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.d)),\n        // privateKeyPrime1 (p)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.p)),\n        // privateKeyPrime2 (q)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.q)),\n        // privateKeyExponent1 (dP)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dP)),\n        // privateKeyExponent2 (dQ)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dQ)),\n        // coefficient (qInv)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.qInv))\n    ]);\n};\n/**\n * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @return the public key.\n */ pki.publicKeyFromAsn1 = function(obj) {\n    // get SubjectPublicKeyInfo\n    var capture = {};\n    var errors = [];\n    if (asn1.validate(obj, publicKeyValidator, capture, errors)) {\n        // get oid\n        var oid = asn1.derToOid(capture.publicKeyOid);\n        if (oid !== pki.oids.rsaEncryption) {\n            var error = new Error(\"Cannot read public key. Unknown OID.\");\n            error.oid = oid;\n            throw error;\n        }\n        obj = capture.rsaPublicKey;\n    }\n    // get RSA params\n    errors = [];\n    if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {\n        var error = new Error(\"Cannot read public key. \" + \"ASN.1 object does not contain an RSAPublicKey.\");\n        error.errors = errors;\n        throw error;\n    }\n    // FIXME: inefficient, get a BigInteger that uses byte strings\n    var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();\n    var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();\n    // set public key\n    return pki.setRsaPublicKey(new BigInteger(n, 16), new BigInteger(e, 16));\n};\n/**\n * Converts a public key to an ASN.1 SubjectPublicKeyInfo.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a SubjectPublicKeyInfo.\n */ pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {\n    // SubjectPublicKeyInfo\n    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // AlgorithmIdentifier\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // algorithm\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n            // parameters (null)\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, \"\")\n        ]),\n        // subjectPublicKey\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [\n            pki.publicKeyToRSAPublicKey(key)\n        ])\n    ]);\n};\n/**\n * Converts a public key to an ASN.1 RSAPublicKey.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a RSAPublicKey.\n */ pki.publicKeyToRSAPublicKey = function(key) {\n    // RSAPublicKey\n    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // modulus (n)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)),\n        // publicExponent (e)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e))\n    ]);\n};\n/**\n * Encodes a message using PKCS#1 v1.5 padding.\n *\n * @param m the message to encode.\n * @param key the RSA key to use.\n * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02\n *          (for encryption).\n *\n * @return the padded byte buffer.\n */ function _encodePkcs1_v1_5(m, key, bt) {\n    var eb = forge.util.createBuffer();\n    // get the length of the modulus in bytes\n    var k = Math.ceil(key.n.bitLength() / 8);\n    /* use PKCS#1 v1.5 padding */ if (m.length > k - 11) {\n        var error = new Error(\"Message is too long for PKCS#1 v1.5 padding.\");\n        error.length = m.length;\n        error.max = k - 11;\n        throw error;\n    }\n    /* A block type BT, a padding string PS, and the data D shall be\n    formatted into an octet string EB, the encryption block:\n\n    EB = 00 || BT || PS || 00 || D\n\n    The block type BT shall be a single octet indicating the structure of\n    the encryption block. For this version of the document it shall have\n    value 00, 01, or 02. For a private-key operation, the block type\n    shall be 00 or 01. For a public-key operation, it shall be 02.\n\n    The padding string PS shall consist of k-3-||D|| octets. For block\n    type 00, the octets shall have value 00; for block type 01, they\n    shall have value FF; and for block type 02, they shall be\n    pseudorandomly generated and nonzero. This makes the length of the\n    encryption block EB equal to k. */ // build the encryption block\n    eb.putByte(0x00);\n    eb.putByte(bt);\n    // create the padding\n    var padNum = k - 3 - m.length;\n    var padByte;\n    // private key op\n    if (bt === 0x00 || bt === 0x01) {\n        padByte = bt === 0x00 ? 0x00 : 0xFF;\n        for(var i = 0; i < padNum; ++i){\n            eb.putByte(padByte);\n        }\n    } else {\n        // public key op\n        // pad with random non-zero values\n        while(padNum > 0){\n            var numZeros = 0;\n            var padBytes = forge.random.getBytes(padNum);\n            for(var i = 0; i < padNum; ++i){\n                padByte = padBytes.charCodeAt(i);\n                if (padByte === 0) {\n                    ++numZeros;\n                } else {\n                    eb.putByte(padByte);\n                }\n            }\n            padNum = numZeros;\n        }\n    }\n    // zero followed by message\n    eb.putByte(0x00);\n    eb.putBytes(m);\n    return eb;\n}\n/**\n * Decodes a message using PKCS#1 v1.5 padding.\n *\n * @param em the message to decode.\n * @param key the RSA key to use.\n * @param pub true if the key is a public key, false if it is private.\n * @param ml the message length, if specified.\n *\n * @return the decoded bytes.\n */ function _decodePkcs1_v1_5(em, key, pub, ml) {\n    // get the length of the modulus in bytes\n    var k = Math.ceil(key.n.bitLength() / 8);\n    /* It is an error if any of the following conditions occurs:\n\n    1. The encryption block EB cannot be parsed unambiguously.\n    2. The padding string PS consists of fewer than eight octets\n      or is inconsisent with the block type BT.\n    3. The decryption process is a public-key operation and the block\n      type BT is not 00 or 01, or the decryption process is a\n      private-key operation and the block type is not 02.\n   */ // parse the encryption block\n    var eb = forge.util.createBuffer(em);\n    var first = eb.getByte();\n    var bt = eb.getByte();\n    if (first !== 0x00 || pub && bt !== 0x00 && bt !== 0x01 || !pub && bt != 0x02 || pub && bt === 0x00 && typeof ml === \"undefined\") {\n        throw new Error(\"Encryption block is invalid.\");\n    }\n    var padNum = 0;\n    if (bt === 0x00) {\n        // check all padding bytes for 0x00\n        padNum = k - 3 - ml;\n        for(var i = 0; i < padNum; ++i){\n            if (eb.getByte() !== 0x00) {\n                throw new Error(\"Encryption block is invalid.\");\n            }\n        }\n    } else if (bt === 0x01) {\n        // find the first byte that isn't 0xFF, should be after all padding\n        padNum = 0;\n        while(eb.length() > 1){\n            if (eb.getByte() !== 0xFF) {\n                --eb.read;\n                break;\n            }\n            ++padNum;\n        }\n    } else if (bt === 0x02) {\n        // look for 0x00 byte\n        padNum = 0;\n        while(eb.length() > 1){\n            if (eb.getByte() === 0x00) {\n                --eb.read;\n                break;\n            }\n            ++padNum;\n        }\n    }\n    // zero must be 0x00 and padNum must be (k - 3 - message length)\n    var zero = eb.getByte();\n    if (zero !== 0x00 || padNum !== k - 3 - eb.length()) {\n        throw new Error(\"Encryption block is invalid.\");\n    }\n    return eb.getBytes();\n}\n/**\n * Runs the key-generation algorithm asynchronously, either in the background\n * via Web Workers, or using the main thread and setImmediate.\n *\n * @param state the key-pair generation state.\n * @param [options] options for key-pair generation:\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2, -1 to use estimated cores minus one).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n * @param callback(err, keypair) called once the operation completes.\n */ function _generateKeyPair(state, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    options = options || {};\n    var opts = {\n        algorithm: {\n            name: options.algorithm || \"PRIMEINC\",\n            options: {\n                workers: options.workers || 2,\n                workLoad: options.workLoad || 100,\n                workerScript: options.workerScript\n            }\n        }\n    };\n    if (\"prng\" in options) {\n        opts.prng = options.prng;\n    }\n    generate();\n    function generate() {\n        // find p and then q (done in series to simplify)\n        getPrime(state.pBits, function(err, num) {\n            if (err) {\n                return callback(err);\n            }\n            state.p = num;\n            if (state.q !== null) {\n                return finish(err, state.q);\n            }\n            getPrime(state.qBits, finish);\n        });\n    }\n    function getPrime(bits, callback) {\n        forge.prime.generateProbablePrime(bits, opts, callback);\n    }\n    function finish(err, num) {\n        if (err) {\n            return callback(err);\n        }\n        // set q\n        state.q = num;\n        // ensure p is larger than q (swap them if not)\n        if (state.p.compareTo(state.q) < 0) {\n            var tmp = state.p;\n            state.p = state.q;\n            state.q = tmp;\n        }\n        // ensure p is coprime with e\n        if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n            state.p = null;\n            generate();\n            return;\n        }\n        // ensure q is coprime with e\n        if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n            state.q = null;\n            getPrime(state.qBits, finish);\n            return;\n        }\n        // compute phi: (p - 1)(q - 1) (Euler's totient function)\n        state.p1 = state.p.subtract(BigInteger.ONE);\n        state.q1 = state.q.subtract(BigInteger.ONE);\n        state.phi = state.p1.multiply(state.q1);\n        // ensure e and phi are coprime\n        if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n            // phi and e aren't coprime, so generate a new p and q\n            state.p = state.q = null;\n            generate();\n            return;\n        }\n        // create n, ensure n is has the right number of bits\n        state.n = state.p.multiply(state.q);\n        if (state.n.bitLength() !== state.bits) {\n            // failed, get new q\n            state.q = null;\n            getPrime(state.qBits, finish);\n            return;\n        }\n        // set keys\n        var d = state.e.modInverse(state.phi);\n        state.keys = {\n            privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),\n            publicKey: pki.rsa.setPublicKey(state.n, state.e)\n        };\n        callback(null, state.keys);\n    }\n}\n/**\n * Converts a positive BigInteger into 2's-complement big-endian bytes.\n *\n * @param b the big integer to convert.\n *\n * @return the bytes.\n */ function _bnToBytes(b) {\n    // prepend 0x00 if first byte >= 0x80\n    var hex = b.toString(16);\n    if (hex[0] >= \"8\") {\n        hex = \"00\" + hex;\n    }\n    var bytes = forge.util.hexToBytes(hex);\n    // ensure integer is minimally-encoded\n    if (bytes.length > 1 && // leading 0x00 for positive integer\n    (bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 0x80) === 0 || // leading 0xFF for negative integer\n    bytes.charCodeAt(0) === 0xFF && (bytes.charCodeAt(1) & 0x80) === 0x80)) {\n        return bytes.substr(1);\n    }\n    return bytes;\n}\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */ function _getMillerRabinTests(bits) {\n    if (bits <= 100) return 27;\n    if (bits <= 150) return 18;\n    if (bits <= 200) return 15;\n    if (bits <= 250) return 12;\n    if (bits <= 300) return 9;\n    if (bits <= 350) return 8;\n    if (bits <= 400) return 7;\n    if (bits <= 500) return 6;\n    if (bits <= 600) return 5;\n    if (bits <= 800) return 4;\n    if (bits <= 1250) return 3;\n    return 2;\n}\n/**\n * Performs feature detection on the Node crypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */ function _detectNodeCrypto(fn) {\n    return forge.util.isNodejs && typeof _crypto[fn] === \"function\";\n}\n/**\n * Performs feature detection on the SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */ function _detectSubtleCrypto(fn) {\n    return typeof util.globalScope !== \"undefined\" && typeof util.globalScope.crypto === \"object\" && typeof util.globalScope.crypto.subtle === \"object\" && typeof util.globalScope.crypto.subtle[fn] === \"function\";\n}\n/**\n * Performs feature detection on the deprecated Microsoft Internet Explorer\n * outdated SubtleCrypto interface. This function should only be used after\n * checking for the modern, standard SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */ function _detectSubtleMsCrypto(fn) {\n    return typeof util.globalScope !== \"undefined\" && typeof util.globalScope.msCrypto === \"object\" && typeof util.globalScope.msCrypto.subtle === \"object\" && typeof util.globalScope.msCrypto.subtle[fn] === \"function\";\n}\nfunction _intToUint8Array(x) {\n    var bytes = forge.util.hexToBytes(x.toString(16));\n    var buffer = new Uint8Array(bytes.length);\n    for(var i = 0; i < bytes.length; ++i){\n        buffer[i] = bytes.charCodeAt(i);\n    }\n    return buffer;\n}\nfunction _privateKeyFromJwk(jwk) {\n    if (jwk.kty !== \"RSA\") {\n        throw new Error('Unsupported key algorithm \"' + jwk.kty + '\"; algorithm must be \"RSA\".');\n    }\n    return pki.setRsaPrivateKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e), _base64ToBigInt(jwk.d), _base64ToBigInt(jwk.p), _base64ToBigInt(jwk.q), _base64ToBigInt(jwk.dp), _base64ToBigInt(jwk.dq), _base64ToBigInt(jwk.qi));\n}\nfunction _publicKeyFromJwk(jwk) {\n    if (jwk.kty !== \"RSA\") {\n        throw new Error('Key algorithm must be \"RSA\".');\n    }\n    return pki.setRsaPublicKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e));\n}\nfunction _base64ToBigInt(b64) {\n    return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/rsa.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/sha1.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/sha1.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./md */ \"(ssr)/./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nvar sha1 = module.exports = forge.sha1 = forge.sha1 || {};\nforge.md.sha1 = forge.md.algorithms.sha1 = sha1;\n/**\n * Creates a SHA-1 message digest object.\n *\n * @return a message digest object.\n */ sha1.create = function() {\n    // do initialization as necessary\n    if (!_initialized) {\n        _init();\n    }\n    // SHA-1 state contains five 32-bit integers\n    var _state = null;\n    // input buffer\n    var _input = forge.util.createBuffer();\n    // used for word storage\n    var _w = new Array(80);\n    // message digest object\n    var md = {\n        algorithm: \"sha1\",\n        blockLength: 64,\n        digestLength: 20,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 8\n    };\n    /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */ md.start = function() {\n        // up to 56-bit message length for convenience\n        md.messageLength = 0;\n        // full message length (set md.messageLength64 for backwards-compatibility)\n        md.fullMessageLength = md.messageLength64 = [];\n        var int32s = md.messageLengthSize / 4;\n        for(var i = 0; i < int32s; ++i){\n            md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _state = {\n            h0: 0x67452301,\n            h1: 0xEFCDAB89,\n            h2: 0x98BADCFE,\n            h3: 0x10325476,\n            h4: 0xC3D2E1F0\n        };\n        return md;\n    };\n    // start digest automatically for first time\n    md.start();\n    /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */ md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n            msg = forge.util.encodeUtf8(msg);\n        }\n        // update message length\n        var len = msg.length;\n        md.messageLength += len;\n        len = [\n            len / 0x100000000 >>> 0,\n            len >>> 0\n        ];\n        for(var i = md.fullMessageLength.length - 1; i >= 0; --i){\n            md.fullMessageLength[i] += len[1];\n            len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);\n            md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n            len[0] = len[1] / 0x100000000 >>> 0;\n        }\n        // add bytes to input buffer\n        _input.putBytes(msg);\n        // process bytes\n        _update(_state, _w, _input);\n        // compact input buffer every 2K or if empty\n        if (_input.read > 2048 || _input.length() === 0) {\n            _input.compact();\n        }\n        return md;\n    };\n    /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */ md.digest = function() {\n        /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-1 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */ /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */ var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        // compute remaining size to be digested (include message length size)\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        // add padding for overflow blockSize - overflow\n        // _padding starts with 1 byte with first bit is set (byte value 128), then\n        // there may be up to (blockSize - 1) other pad bytes\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        // serialize message length in bits in big-endian order; since length\n        // is stored in bytes we multiply by 8 and add carry from next int\n        var next, carry;\n        var bits = md.fullMessageLength[0] * 8;\n        for(var i = 0; i < md.fullMessageLength.length - 1; ++i){\n            next = md.fullMessageLength[i + 1] * 8;\n            carry = next / 0x100000000 >>> 0;\n            bits += carry;\n            finalBlock.putInt32(bits >>> 0);\n            bits = next >>> 0;\n        }\n        finalBlock.putInt32(bits);\n        var s2 = {\n            h0: _state.h0,\n            h1: _state.h1,\n            h2: _state.h2,\n            h3: _state.h3,\n            h4: _state.h4\n        };\n        _update(s2, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        rval.putInt32(s2.h0);\n        rval.putInt32(s2.h1);\n        rval.putInt32(s2.h2);\n        rval.putInt32(s2.h3);\n        rval.putInt32(s2.h4);\n        return rval;\n    };\n    return md;\n};\n// sha-1 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n/**\n * Initializes the constant tables.\n */ function _init() {\n    // create padding\n    _padding = String.fromCharCode(128);\n    _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n    // now initialized\n    _initialized = true;\n}\n/**\n * Updates a SHA-1 state with the given byte buffer.\n *\n * @param s the SHA-1 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */ function _update(s, w, bytes) {\n    // consume 512 bit (64 byte) chunks\n    var t, a, b, c, d, e, f, i;\n    var len = bytes.length();\n    while(len >= 64){\n        // the w array will be populated with sixteen 32-bit big-endian words\n        // and then extended into 80 32-bit words according to SHA-1 algorithm\n        // and for 32-79 using Max Locktyukhin's optimization\n        // initialize hash value for this chunk\n        a = s.h0;\n        b = s.h1;\n        c = s.h2;\n        d = s.h3;\n        e = s.h4;\n        // round 1\n        for(i = 0; i < 16; ++i){\n            t = bytes.getInt32();\n            w[i] = t;\n            f = d ^ b & (c ^ d);\n            t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;\n            e = d;\n            d = c;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            c = (b << 30 | b >>> 2) >>> 0;\n            b = a;\n            a = t;\n        }\n        for(; i < 20; ++i){\n            t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];\n            t = t << 1 | t >>> 31;\n            w[i] = t;\n            f = d ^ b & (c ^ d);\n            t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;\n            e = d;\n            d = c;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            c = (b << 30 | b >>> 2) >>> 0;\n            b = a;\n            a = t;\n        }\n        // round 2\n        for(; i < 32; ++i){\n            t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];\n            t = t << 1 | t >>> 31;\n            w[i] = t;\n            f = b ^ c ^ d;\n            t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;\n            e = d;\n            d = c;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            c = (b << 30 | b >>> 2) >>> 0;\n            b = a;\n            a = t;\n        }\n        for(; i < 40; ++i){\n            t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];\n            t = t << 2 | t >>> 30;\n            w[i] = t;\n            f = b ^ c ^ d;\n            t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;\n            e = d;\n            d = c;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            c = (b << 30 | b >>> 2) >>> 0;\n            b = a;\n            a = t;\n        }\n        // round 3\n        for(; i < 60; ++i){\n            t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];\n            t = t << 2 | t >>> 30;\n            w[i] = t;\n            f = b & c | d & (b ^ c);\n            t = (a << 5 | a >>> 27) + f + e + 0x8F1BBCDC + t;\n            e = d;\n            d = c;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            c = (b << 30 | b >>> 2) >>> 0;\n            b = a;\n            a = t;\n        }\n        // round 4\n        for(; i < 80; ++i){\n            t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];\n            t = t << 2 | t >>> 30;\n            w[i] = t;\n            f = b ^ c ^ d;\n            t = (a << 5 | a >>> 27) + f + e + 0xCA62C1D6 + t;\n            e = d;\n            d = c;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            c = (b << 30 | b >>> 2) >>> 0;\n            b = a;\n            a = t;\n        }\n        // update hash state\n        s.h0 = s.h0 + a | 0;\n        s.h1 = s.h1 + b | 0;\n        s.h2 = s.h2 + c | 0;\n        s.h3 = s.h3 + d | 0;\n        s.h4 = s.h4 + e | 0;\n        len -= 64;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/sha1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/sha256.js":
/*!***********************************************!*\
  !*** ./node_modules/node-forge/lib/sha256.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.\n *\n * See FIPS 180-2 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./md */ \"(ssr)/./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nvar sha256 = module.exports = forge.sha256 = forge.sha256 || {};\nforge.md.sha256 = forge.md.algorithms.sha256 = sha256;\n/**\n * Creates a SHA-256 message digest object.\n *\n * @return a message digest object.\n */ sha256.create = function() {\n    // do initialization as necessary\n    if (!_initialized) {\n        _init();\n    }\n    // SHA-256 state contains eight 32-bit integers\n    var _state = null;\n    // input buffer\n    var _input = forge.util.createBuffer();\n    // used for word storage\n    var _w = new Array(64);\n    // message digest object\n    var md = {\n        algorithm: \"sha256\",\n        blockLength: 64,\n        digestLength: 32,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 8\n    };\n    /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */ md.start = function() {\n        // up to 56-bit message length for convenience\n        md.messageLength = 0;\n        // full message length (set md.messageLength64 for backwards-compatibility)\n        md.fullMessageLength = md.messageLength64 = [];\n        var int32s = md.messageLengthSize / 4;\n        for(var i = 0; i < int32s; ++i){\n            md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _state = {\n            h0: 0x6A09E667,\n            h1: 0xBB67AE85,\n            h2: 0x3C6EF372,\n            h3: 0xA54FF53A,\n            h4: 0x510E527F,\n            h5: 0x9B05688C,\n            h6: 0x1F83D9AB,\n            h7: 0x5BE0CD19\n        };\n        return md;\n    };\n    // start digest automatically for first time\n    md.start();\n    /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */ md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n            msg = forge.util.encodeUtf8(msg);\n        }\n        // update message length\n        var len = msg.length;\n        md.messageLength += len;\n        len = [\n            len / 0x100000000 >>> 0,\n            len >>> 0\n        ];\n        for(var i = md.fullMessageLength.length - 1; i >= 0; --i){\n            md.fullMessageLength[i] += len[1];\n            len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);\n            md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n            len[0] = len[1] / 0x100000000 >>> 0;\n        }\n        // add bytes to input buffer\n        _input.putBytes(msg);\n        // process bytes\n        _update(_state, _w, _input);\n        // compact input buffer every 2K or if empty\n        if (_input.read > 2048 || _input.length() === 0) {\n            _input.compact();\n        }\n        return md;\n    };\n    /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */ md.digest = function() {\n        /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-256 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */ /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */ var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        // compute remaining size to be digested (include message length size)\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        // add padding for overflow blockSize - overflow\n        // _padding starts with 1 byte with first bit is set (byte value 128), then\n        // there may be up to (blockSize - 1) other pad bytes\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        // serialize message length in bits in big-endian order; since length\n        // is stored in bytes we multiply by 8 and add carry from next int\n        var next, carry;\n        var bits = md.fullMessageLength[0] * 8;\n        for(var i = 0; i < md.fullMessageLength.length - 1; ++i){\n            next = md.fullMessageLength[i + 1] * 8;\n            carry = next / 0x100000000 >>> 0;\n            bits += carry;\n            finalBlock.putInt32(bits >>> 0);\n            bits = next >>> 0;\n        }\n        finalBlock.putInt32(bits);\n        var s2 = {\n            h0: _state.h0,\n            h1: _state.h1,\n            h2: _state.h2,\n            h3: _state.h3,\n            h4: _state.h4,\n            h5: _state.h5,\n            h6: _state.h6,\n            h7: _state.h7\n        };\n        _update(s2, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        rval.putInt32(s2.h0);\n        rval.putInt32(s2.h1);\n        rval.putInt32(s2.h2);\n        rval.putInt32(s2.h3);\n        rval.putInt32(s2.h4);\n        rval.putInt32(s2.h5);\n        rval.putInt32(s2.h6);\n        rval.putInt32(s2.h7);\n        return rval;\n    };\n    return md;\n};\n// sha-256 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n// table of constants\nvar _k = null;\n/**\n * Initializes the constant tables.\n */ function _init() {\n    // create padding\n    _padding = String.fromCharCode(128);\n    _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n    // create K table for SHA-256\n    _k = [\n        0x428a2f98,\n        0x71374491,\n        0xb5c0fbcf,\n        0xe9b5dba5,\n        0x3956c25b,\n        0x59f111f1,\n        0x923f82a4,\n        0xab1c5ed5,\n        0xd807aa98,\n        0x12835b01,\n        0x243185be,\n        0x550c7dc3,\n        0x72be5d74,\n        0x80deb1fe,\n        0x9bdc06a7,\n        0xc19bf174,\n        0xe49b69c1,\n        0xefbe4786,\n        0x0fc19dc6,\n        0x240ca1cc,\n        0x2de92c6f,\n        0x4a7484aa,\n        0x5cb0a9dc,\n        0x76f988da,\n        0x983e5152,\n        0xa831c66d,\n        0xb00327c8,\n        0xbf597fc7,\n        0xc6e00bf3,\n        0xd5a79147,\n        0x06ca6351,\n        0x14292967,\n        0x27b70a85,\n        0x2e1b2138,\n        0x4d2c6dfc,\n        0x53380d13,\n        0x650a7354,\n        0x766a0abb,\n        0x81c2c92e,\n        0x92722c85,\n        0xa2bfe8a1,\n        0xa81a664b,\n        0xc24b8b70,\n        0xc76c51a3,\n        0xd192e819,\n        0xd6990624,\n        0xf40e3585,\n        0x106aa070,\n        0x19a4c116,\n        0x1e376c08,\n        0x2748774c,\n        0x34b0bcb5,\n        0x391c0cb3,\n        0x4ed8aa4a,\n        0x5b9cca4f,\n        0x682e6ff3,\n        0x748f82ee,\n        0x78a5636f,\n        0x84c87814,\n        0x8cc70208,\n        0x90befffa,\n        0xa4506ceb,\n        0xbef9a3f7,\n        0xc67178f2\n    ];\n    // now initialized\n    _initialized = true;\n}\n/**\n * Updates a SHA-256 state with the given byte buffer.\n *\n * @param s the SHA-256 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */ function _update(s, w, bytes) {\n    // consume 512 bit (64 byte) chunks\n    var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;\n    var len = bytes.length();\n    while(len >= 64){\n        // the w array will be populated with sixteen 32-bit big-endian words\n        // and then extended into 64 32-bit words according to SHA-256\n        for(i = 0; i < 16; ++i){\n            w[i] = bytes.getInt32();\n        }\n        for(; i < 64; ++i){\n            // XOR word 2 words ago rot right 17, rot right 19, shft right 10\n            t1 = w[i - 2];\n            t1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;\n            // XOR word 15 words ago rot right 7, rot right 18, shft right 3\n            t2 = w[i - 15];\n            t2 = (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3;\n            // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32\n            w[i] = t1 + w[i - 7] + t2 + w[i - 16] | 0;\n        }\n        // initialize hash value for this chunk\n        a = s.h0;\n        b = s.h1;\n        c = s.h2;\n        d = s.h3;\n        e = s.h4;\n        f = s.h5;\n        g = s.h6;\n        h = s.h7;\n        // round function\n        for(i = 0; i < 64; ++i){\n            // Sum1(e)\n            s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);\n            // Ch(e, f, g) (optimized the same way as SHA-1)\n            ch = g ^ e & (f ^ g);\n            // Sum0(a)\n            s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);\n            // Maj(a, b, c) (optimized the same way as SHA-1)\n            maj = a & b | c & (a ^ b);\n            // main algorithm\n            t1 = h + s1 + ch + _k[i] + w[i];\n            t2 = s0 + maj;\n            h = g;\n            g = f;\n            f = e;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            // can't truncate with `| 0`\n            e = d + t1 >>> 0;\n            d = c;\n            c = b;\n            b = a;\n            // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n            // can't truncate with `| 0`\n            a = t1 + t2 >>> 0;\n        }\n        // update hash state\n        s.h0 = s.h0 + a | 0;\n        s.h1 = s.h1 + b | 0;\n        s.h2 = s.h2 + c | 0;\n        s.h3 = s.h3 + d | 0;\n        s.h4 = s.h4 + e | 0;\n        s.h5 = s.h5 + f | 0;\n        s.h6 = s.h6 + g | 0;\n        s.h7 = s.h7 + h | 0;\n        len -= 64;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/sha512.js":
/*!***********************************************!*\
  !*** ./node_modules/node-forge/lib/sha512.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Secure Hash Algorithm with a 1024-bit block size implementation.\n *\n * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For\n * SHA-256 (block size 512 bits), see sha256.js.\n *\n * See FIPS 180-4 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2014-2015 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n__webpack_require__(/*! ./md */ \"(ssr)/./node_modules/node-forge/lib/md.js\");\n__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\nvar sha512 = module.exports = forge.sha512 = forge.sha512 || {};\n// SHA-512\nforge.md.sha512 = forge.md.algorithms.sha512 = sha512;\n// SHA-384\nvar sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};\nsha384.create = function() {\n    return sha512.create(\"SHA-384\");\n};\nforge.md.sha384 = forge.md.algorithms.sha384 = sha384;\n// SHA-512/256\nforge.sha512.sha256 = forge.sha512.sha256 || {\n    create: function() {\n        return sha512.create(\"SHA-512/256\");\n    }\n};\nforge.md[\"sha512/256\"] = forge.md.algorithms[\"sha512/256\"] = forge.sha512.sha256;\n// SHA-512/224\nforge.sha512.sha224 = forge.sha512.sha224 || {\n    create: function() {\n        return sha512.create(\"SHA-512/224\");\n    }\n};\nforge.md[\"sha512/224\"] = forge.md.algorithms[\"sha512/224\"] = forge.sha512.sha224;\n/**\n * Creates a SHA-2 message digest object.\n *\n * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,\n *          SHA-512/256).\n *\n * @return a message digest object.\n */ sha512.create = function(algorithm) {\n    // do initialization as necessary\n    if (!_initialized) {\n        _init();\n    }\n    if (typeof algorithm === \"undefined\") {\n        algorithm = \"SHA-512\";\n    }\n    if (!(algorithm in _states)) {\n        throw new Error(\"Invalid SHA-512 algorithm: \" + algorithm);\n    }\n    // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)\n    var _state = _states[algorithm];\n    var _h = null;\n    // input buffer\n    var _input = forge.util.createBuffer();\n    // used for 64-bit word storage\n    var _w = new Array(80);\n    for(var wi = 0; wi < 80; ++wi){\n        _w[wi] = new Array(2);\n    }\n    // determine digest length by algorithm name (default)\n    var digestLength = 64;\n    switch(algorithm){\n        case \"SHA-384\":\n            digestLength = 48;\n            break;\n        case \"SHA-512/256\":\n            digestLength = 32;\n            break;\n        case \"SHA-512/224\":\n            digestLength = 28;\n            break;\n    }\n    // message digest object\n    var md = {\n        // SHA-512 => sha512\n        algorithm: algorithm.replace(\"-\", \"\").toLowerCase(),\n        blockLength: 128,\n        digestLength: digestLength,\n        // 56-bit length of message so far (does not including padding)\n        messageLength: 0,\n        // true message length\n        fullMessageLength: null,\n        // size of message length in bytes\n        messageLengthSize: 16\n    };\n    /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */ md.start = function() {\n        // up to 56-bit message length for convenience\n        md.messageLength = 0;\n        // full message length (set md.messageLength128 for backwards-compatibility)\n        md.fullMessageLength = md.messageLength128 = [];\n        var int32s = md.messageLengthSize / 4;\n        for(var i = 0; i < int32s; ++i){\n            md.fullMessageLength.push(0);\n        }\n        _input = forge.util.createBuffer();\n        _h = new Array(_state.length);\n        for(var i = 0; i < _state.length; ++i){\n            _h[i] = _state[i].slice(0);\n        }\n        return md;\n    };\n    // start digest automatically for first time\n    md.start();\n    /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */ md.update = function(msg, encoding) {\n        if (encoding === \"utf8\") {\n            msg = forge.util.encodeUtf8(msg);\n        }\n        // update message length\n        var len = msg.length;\n        md.messageLength += len;\n        len = [\n            len / 0x100000000 >>> 0,\n            len >>> 0\n        ];\n        for(var i = md.fullMessageLength.length - 1; i >= 0; --i){\n            md.fullMessageLength[i] += len[1];\n            len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);\n            md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n            len[0] = len[1] / 0x100000000 >>> 0;\n        }\n        // add bytes to input buffer\n        _input.putBytes(msg);\n        // process bytes\n        _update(_h, _w, _input);\n        // compact input buffer every 2K or if empty\n        if (_input.read > 2048 || _input.length() === 0) {\n            _input.compact();\n        }\n        return md;\n    };\n    /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */ md.digest = function() {\n        /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-512 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */ /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 896 mod 1024. In other words,\n    the data to be digested must be a multiple of 1024 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 16 bytes (128\n    bits), that means that the last segment of the data must have 112 bytes\n    (896 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 896 mod 1024 because\n    1024 - 128 = 896.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 896 mod 1024, then 1024 padding bits must be added. */ var finalBlock = forge.util.createBuffer();\n        finalBlock.putBytes(_input.bytes());\n        // compute remaining size to be digested (include message length size)\n        var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize;\n        // add padding for overflow blockSize - overflow\n        // _padding starts with 1 byte with first bit is set (byte value 128), then\n        // there may be up to (blockSize - 1) other pad bytes\n        var overflow = remaining & md.blockLength - 1;\n        finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n        // serialize message length in bits in big-endian order; since length\n        // is stored in bytes we multiply by 8 and add carry from next int\n        var next, carry;\n        var bits = md.fullMessageLength[0] * 8;\n        for(var i = 0; i < md.fullMessageLength.length - 1; ++i){\n            next = md.fullMessageLength[i + 1] * 8;\n            carry = next / 0x100000000 >>> 0;\n            bits += carry;\n            finalBlock.putInt32(bits >>> 0);\n            bits = next >>> 0;\n        }\n        finalBlock.putInt32(bits);\n        var h = new Array(_h.length);\n        for(var i = 0; i < _h.length; ++i){\n            h[i] = _h[i].slice(0);\n        }\n        _update(h, _w, finalBlock);\n        var rval = forge.util.createBuffer();\n        var hlen;\n        if (algorithm === \"SHA-512\") {\n            hlen = h.length;\n        } else if (algorithm === \"SHA-384\") {\n            hlen = h.length - 2;\n        } else {\n            hlen = h.length - 4;\n        }\n        for(var i = 0; i < hlen; ++i){\n            rval.putInt32(h[i][0]);\n            if (i !== hlen - 1 || algorithm !== \"SHA-512/224\") {\n                rval.putInt32(h[i][1]);\n            }\n        }\n        return rval;\n    };\n    return md;\n};\n// sha-512 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n// table of constants\nvar _k = null;\n// initial hash states\nvar _states = null;\n/**\n * Initializes the constant tables.\n */ function _init() {\n    // create padding\n    _padding = String.fromCharCode(128);\n    _padding += forge.util.fillString(String.fromCharCode(0x00), 128);\n    // create K table for SHA-512\n    _k = [\n        [\n            0x428a2f98,\n            0xd728ae22\n        ],\n        [\n            0x71374491,\n            0x23ef65cd\n        ],\n        [\n            0xb5c0fbcf,\n            0xec4d3b2f\n        ],\n        [\n            0xe9b5dba5,\n            0x8189dbbc\n        ],\n        [\n            0x3956c25b,\n            0xf348b538\n        ],\n        [\n            0x59f111f1,\n            0xb605d019\n        ],\n        [\n            0x923f82a4,\n            0xaf194f9b\n        ],\n        [\n            0xab1c5ed5,\n            0xda6d8118\n        ],\n        [\n            0xd807aa98,\n            0xa3030242\n        ],\n        [\n            0x12835b01,\n            0x45706fbe\n        ],\n        [\n            0x243185be,\n            0x4ee4b28c\n        ],\n        [\n            0x550c7dc3,\n            0xd5ffb4e2\n        ],\n        [\n            0x72be5d74,\n            0xf27b896f\n        ],\n        [\n            0x80deb1fe,\n            0x3b1696b1\n        ],\n        [\n            0x9bdc06a7,\n            0x25c71235\n        ],\n        [\n            0xc19bf174,\n            0xcf692694\n        ],\n        [\n            0xe49b69c1,\n            0x9ef14ad2\n        ],\n        [\n            0xefbe4786,\n            0x384f25e3\n        ],\n        [\n            0x0fc19dc6,\n            0x8b8cd5b5\n        ],\n        [\n            0x240ca1cc,\n            0x77ac9c65\n        ],\n        [\n            0x2de92c6f,\n            0x592b0275\n        ],\n        [\n            0x4a7484aa,\n            0x6ea6e483\n        ],\n        [\n            0x5cb0a9dc,\n            0xbd41fbd4\n        ],\n        [\n            0x76f988da,\n            0x831153b5\n        ],\n        [\n            0x983e5152,\n            0xee66dfab\n        ],\n        [\n            0xa831c66d,\n            0x2db43210\n        ],\n        [\n            0xb00327c8,\n            0x98fb213f\n        ],\n        [\n            0xbf597fc7,\n            0xbeef0ee4\n        ],\n        [\n            0xc6e00bf3,\n            0x3da88fc2\n        ],\n        [\n            0xd5a79147,\n            0x930aa725\n        ],\n        [\n            0x06ca6351,\n            0xe003826f\n        ],\n        [\n            0x14292967,\n            0x0a0e6e70\n        ],\n        [\n            0x27b70a85,\n            0x46d22ffc\n        ],\n        [\n            0x2e1b2138,\n            0x5c26c926\n        ],\n        [\n            0x4d2c6dfc,\n            0x5ac42aed\n        ],\n        [\n            0x53380d13,\n            0x9d95b3df\n        ],\n        [\n            0x650a7354,\n            0x8baf63de\n        ],\n        [\n            0x766a0abb,\n            0x3c77b2a8\n        ],\n        [\n            0x81c2c92e,\n            0x47edaee6\n        ],\n        [\n            0x92722c85,\n            0x1482353b\n        ],\n        [\n            0xa2bfe8a1,\n            0x4cf10364\n        ],\n        [\n            0xa81a664b,\n            0xbc423001\n        ],\n        [\n            0xc24b8b70,\n            0xd0f89791\n        ],\n        [\n            0xc76c51a3,\n            0x0654be30\n        ],\n        [\n            0xd192e819,\n            0xd6ef5218\n        ],\n        [\n            0xd6990624,\n            0x5565a910\n        ],\n        [\n            0xf40e3585,\n            0x5771202a\n        ],\n        [\n            0x106aa070,\n            0x32bbd1b8\n        ],\n        [\n            0x19a4c116,\n            0xb8d2d0c8\n        ],\n        [\n            0x1e376c08,\n            0x5141ab53\n        ],\n        [\n            0x2748774c,\n            0xdf8eeb99\n        ],\n        [\n            0x34b0bcb5,\n            0xe19b48a8\n        ],\n        [\n            0x391c0cb3,\n            0xc5c95a63\n        ],\n        [\n            0x4ed8aa4a,\n            0xe3418acb\n        ],\n        [\n            0x5b9cca4f,\n            0x7763e373\n        ],\n        [\n            0x682e6ff3,\n            0xd6b2b8a3\n        ],\n        [\n            0x748f82ee,\n            0x5defb2fc\n        ],\n        [\n            0x78a5636f,\n            0x43172f60\n        ],\n        [\n            0x84c87814,\n            0xa1f0ab72\n        ],\n        [\n            0x8cc70208,\n            0x1a6439ec\n        ],\n        [\n            0x90befffa,\n            0x23631e28\n        ],\n        [\n            0xa4506ceb,\n            0xde82bde9\n        ],\n        [\n            0xbef9a3f7,\n            0xb2c67915\n        ],\n        [\n            0xc67178f2,\n            0xe372532b\n        ],\n        [\n            0xca273ece,\n            0xea26619c\n        ],\n        [\n            0xd186b8c7,\n            0x21c0c207\n        ],\n        [\n            0xeada7dd6,\n            0xcde0eb1e\n        ],\n        [\n            0xf57d4f7f,\n            0xee6ed178\n        ],\n        [\n            0x06f067aa,\n            0x72176fba\n        ],\n        [\n            0x0a637dc5,\n            0xa2c898a6\n        ],\n        [\n            0x113f9804,\n            0xbef90dae\n        ],\n        [\n            0x1b710b35,\n            0x131c471b\n        ],\n        [\n            0x28db77f5,\n            0x23047d84\n        ],\n        [\n            0x32caab7b,\n            0x40c72493\n        ],\n        [\n            0x3c9ebe0a,\n            0x15c9bebc\n        ],\n        [\n            0x431d67c4,\n            0x9c100d4c\n        ],\n        [\n            0x4cc5d4be,\n            0xcb3e42b6\n        ],\n        [\n            0x597f299c,\n            0xfc657e2a\n        ],\n        [\n            0x5fcb6fab,\n            0x3ad6faec\n        ],\n        [\n            0x6c44198c,\n            0x4a475817\n        ]\n    ];\n    // initial hash states\n    _states = {};\n    _states[\"SHA-512\"] = [\n        [\n            0x6a09e667,\n            0xf3bcc908\n        ],\n        [\n            0xbb67ae85,\n            0x84caa73b\n        ],\n        [\n            0x3c6ef372,\n            0xfe94f82b\n        ],\n        [\n            0xa54ff53a,\n            0x5f1d36f1\n        ],\n        [\n            0x510e527f,\n            0xade682d1\n        ],\n        [\n            0x9b05688c,\n            0x2b3e6c1f\n        ],\n        [\n            0x1f83d9ab,\n            0xfb41bd6b\n        ],\n        [\n            0x5be0cd19,\n            0x137e2179\n        ]\n    ];\n    _states[\"SHA-384\"] = [\n        [\n            0xcbbb9d5d,\n            0xc1059ed8\n        ],\n        [\n            0x629a292a,\n            0x367cd507\n        ],\n        [\n            0x9159015a,\n            0x3070dd17\n        ],\n        [\n            0x152fecd8,\n            0xf70e5939\n        ],\n        [\n            0x67332667,\n            0xffc00b31\n        ],\n        [\n            0x8eb44a87,\n            0x68581511\n        ],\n        [\n            0xdb0c2e0d,\n            0x64f98fa7\n        ],\n        [\n            0x47b5481d,\n            0xbefa4fa4\n        ]\n    ];\n    _states[\"SHA-512/256\"] = [\n        [\n            0x22312194,\n            0xFC2BF72C\n        ],\n        [\n            0x9F555FA3,\n            0xC84C64C2\n        ],\n        [\n            0x2393B86B,\n            0x6F53B151\n        ],\n        [\n            0x96387719,\n            0x5940EABD\n        ],\n        [\n            0x96283EE2,\n            0xA88EFFE3\n        ],\n        [\n            0xBE5E1E25,\n            0x53863992\n        ],\n        [\n            0x2B0199FC,\n            0x2C85B8AA\n        ],\n        [\n            0x0EB72DDC,\n            0x81C52CA2\n        ]\n    ];\n    _states[\"SHA-512/224\"] = [\n        [\n            0x8C3D37C8,\n            0x19544DA2\n        ],\n        [\n            0x73E19966,\n            0x89DCD4D6\n        ],\n        [\n            0x1DFAB7AE,\n            0x32FF9C82\n        ],\n        [\n            0x679DD514,\n            0x582F9FCF\n        ],\n        [\n            0x0F6D2B69,\n            0x7BD44DA8\n        ],\n        [\n            0x77E36F73,\n            0x04C48942\n        ],\n        [\n            0x3F9D85A8,\n            0x6A1D36C8\n        ],\n        [\n            0x1112E6AD,\n            0x91D692A1\n        ]\n    ];\n    // now initialized\n    _initialized = true;\n}\n/**\n * Updates a SHA-512 state with the given byte buffer.\n *\n * @param s the SHA-512 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */ function _update(s, w, bytes) {\n    // consume 512 bit (128 byte) chunks\n    var t1_hi, t1_lo;\n    var t2_hi, t2_lo;\n    var s0_hi, s0_lo;\n    var s1_hi, s1_lo;\n    var ch_hi, ch_lo;\n    var maj_hi, maj_lo;\n    var a_hi, a_lo;\n    var b_hi, b_lo;\n    var c_hi, c_lo;\n    var d_hi, d_lo;\n    var e_hi, e_lo;\n    var f_hi, f_lo;\n    var g_hi, g_lo;\n    var h_hi, h_lo;\n    var i, hi, lo, w2, w7, w15, w16;\n    var len = bytes.length();\n    while(len >= 128){\n        // the w array will be populated with sixteen 64-bit big-endian words\n        // and then extended into 64 64-bit words according to SHA-512\n        for(i = 0; i < 16; ++i){\n            w[i][0] = bytes.getInt32() >>> 0;\n            w[i][1] = bytes.getInt32() >>> 0;\n        }\n        for(; i < 80; ++i){\n            // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)\n            w2 = w[i - 2];\n            hi = w2[0];\n            lo = w2[1];\n            // high bits\n            t1_hi = ((hi >>> 19 | lo << 13) ^ // ROTR 19\n            (lo >>> 29 | hi << 3) ^ // ROTR 61/(swap + ROTR 29)\n            hi >>> 6) >>> 0; // SHR 6\n            // low bits\n            t1_lo = ((hi << 13 | lo >>> 19) ^ // ROTR 19\n            (lo << 3 | hi >>> 29) ^ // ROTR 61/(swap + ROTR 29)\n            (hi << 26 | lo >>> 6)) >>> 0; // SHR 6\n            // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)\n            w15 = w[i - 15];\n            hi = w15[0];\n            lo = w15[1];\n            // high bits\n            t2_hi = ((hi >>> 1 | lo << 31) ^ // ROTR 1\n            (hi >>> 8 | lo << 24) ^ // ROTR 8\n            hi >>> 7) >>> 0; // SHR 7\n            // low bits\n            t2_lo = ((hi << 31 | lo >>> 1) ^ // ROTR 1\n            (hi << 24 | lo >>> 8) ^ // ROTR 8\n            (hi << 25 | lo >>> 7)) >>> 0; // SHR 7\n            // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)\n            w7 = w[i - 7];\n            w16 = w[i - 16];\n            lo = t1_lo + w7[1] + t2_lo + w16[1];\n            w[i][0] = t1_hi + w7[0] + t2_hi + w16[0] + (lo / 0x100000000 >>> 0) >>> 0;\n            w[i][1] = lo >>> 0;\n        }\n        // initialize hash value for this chunk\n        a_hi = s[0][0];\n        a_lo = s[0][1];\n        b_hi = s[1][0];\n        b_lo = s[1][1];\n        c_hi = s[2][0];\n        c_lo = s[2][1];\n        d_hi = s[3][0];\n        d_lo = s[3][1];\n        e_hi = s[4][0];\n        e_lo = s[4][1];\n        f_hi = s[5][0];\n        f_lo = s[5][1];\n        g_hi = s[6][0];\n        g_lo = s[6][1];\n        h_hi = s[7][0];\n        h_lo = s[7][1];\n        // round function\n        for(i = 0; i < 80; ++i){\n            // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)\n            s1_hi = ((e_hi >>> 14 | e_lo << 18) ^ // ROTR 14\n            (e_hi >>> 18 | e_lo << 14) ^ // ROTR 18\n            (e_lo >>> 9 | e_hi << 23)) >>> 0; // ROTR 41/(swap + ROTR 9)\n            s1_lo = ((e_hi << 18 | e_lo >>> 14) ^ // ROTR 14\n            (e_hi << 14 | e_lo >>> 18) ^ // ROTR 18\n            (e_lo << 23 | e_hi >>> 9)) >>> 0; // ROTR 41/(swap + ROTR 9)\n            // Ch(e, f, g) (optimized the same way as SHA-1)\n            ch_hi = (g_hi ^ e_hi & (f_hi ^ g_hi)) >>> 0;\n            ch_lo = (g_lo ^ e_lo & (f_lo ^ g_lo)) >>> 0;\n            // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)\n            s0_hi = ((a_hi >>> 28 | a_lo << 4) ^ // ROTR 28\n            (a_lo >>> 2 | a_hi << 30) ^ // ROTR 34/(swap + ROTR 2)\n            (a_lo >>> 7 | a_hi << 25)) >>> 0; // ROTR 39/(swap + ROTR 7)\n            s0_lo = ((a_hi << 4 | a_lo >>> 28) ^ // ROTR 28\n            (a_lo << 30 | a_hi >>> 2) ^ // ROTR 34/(swap + ROTR 2)\n            (a_lo << 25 | a_hi >>> 7)) >>> 0; // ROTR 39/(swap + ROTR 7)\n            // Maj(a, b, c) (optimized the same way as SHA-1)\n            maj_hi = (a_hi & b_hi | c_hi & (a_hi ^ b_hi)) >>> 0;\n            maj_lo = (a_lo & b_lo | c_lo & (a_lo ^ b_lo)) >>> 0;\n            // main algorithm\n            // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)\n            lo = h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1];\n            t1_hi = h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] + (lo / 0x100000000 >>> 0) >>> 0;\n            t1_lo = lo >>> 0;\n            // t2 = s0 + maj modulo 2^64 (carry lo overflow)\n            lo = s0_lo + maj_lo;\n            t2_hi = s0_hi + maj_hi + (lo / 0x100000000 >>> 0) >>> 0;\n            t2_lo = lo >>> 0;\n            h_hi = g_hi;\n            h_lo = g_lo;\n            g_hi = f_hi;\n            g_lo = f_lo;\n            f_hi = e_hi;\n            f_lo = e_lo;\n            // e = (d + t1) modulo 2^64 (carry lo overflow)\n            lo = d_lo + t1_lo;\n            e_hi = d_hi + t1_hi + (lo / 0x100000000 >>> 0) >>> 0;\n            e_lo = lo >>> 0;\n            d_hi = c_hi;\n            d_lo = c_lo;\n            c_hi = b_hi;\n            c_lo = b_lo;\n            b_hi = a_hi;\n            b_lo = a_lo;\n            // a = (t1 + t2) modulo 2^64 (carry lo overflow)\n            lo = t1_lo + t2_lo;\n            a_hi = t1_hi + t2_hi + (lo / 0x100000000 >>> 0) >>> 0;\n            a_lo = lo >>> 0;\n        }\n        // update hash state (additional modulo 2^64)\n        lo = s[0][1] + a_lo;\n        s[0][0] = s[0][0] + a_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[0][1] = lo >>> 0;\n        lo = s[1][1] + b_lo;\n        s[1][0] = s[1][0] + b_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[1][1] = lo >>> 0;\n        lo = s[2][1] + c_lo;\n        s[2][0] = s[2][0] + c_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[2][1] = lo >>> 0;\n        lo = s[3][1] + d_lo;\n        s[3][0] = s[3][0] + d_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[3][1] = lo >>> 0;\n        lo = s[4][1] + e_lo;\n        s[4][0] = s[4][0] + e_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[4][1] = lo >>> 0;\n        lo = s[5][1] + f_lo;\n        s[5][0] = s[5][0] + f_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[5][1] = lo >>> 0;\n        lo = s[6][1] + g_lo;\n        s[6][0] = s[6][0] + g_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[6][1] = lo >>> 0;\n        lo = s[7][1] + h_lo;\n        s[7][0] = s[7][0] + h_hi + (lo / 0x100000000 >>> 0) >>> 0;\n        s[7][1] = lo >>> 0;\n        len -= 128;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/sha512.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-forge/lib/util.js":
/*!*********************************************!*\
  !*** ./node_modules/node-forge/lib/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Utility functions for web applications.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2018 Digital Bazaar, Inc.\n */ \nvar forge = __webpack_require__(/*! ./forge */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\nvar baseN = __webpack_require__(/*! ./baseN */ \"(ssr)/./node_modules/node-forge/lib/baseN.js\");\n/* Utilities API */ var util = module.exports = forge.util = forge.util || {};\n// define setImmediate and nextTick\n(function() {\n    // use native nextTick (unless we're in webpack)\n    // webpack (or better node-libs-browser polyfill) sets process.browser.\n    // this way we can detect webpack properly\n    if (typeof process !== \"undefined\" && process.nextTick && !false) {\n        util.nextTick = process.nextTick;\n        if (typeof setImmediate === \"function\") {\n            util.setImmediate = setImmediate;\n        } else {\n            // polyfill setImmediate with nextTick, older versions of node\n            // (those w/o setImmediate) won't totally starve IO\n            util.setImmediate = util.nextTick;\n        }\n        return;\n    }\n    // polyfill nextTick with native setImmediate\n    if (typeof setImmediate === \"function\") {\n        util.setImmediate = function() {\n            return setImmediate.apply(undefined, arguments);\n        };\n        util.nextTick = function(callback) {\n            return setImmediate(callback);\n        };\n        return;\n    }\n    /* Note: A polyfill upgrade pattern is used here to allow combining\n  polyfills. For example, MutationObserver is fast, but blocks UI updates,\n  so it needs to allow UI updates periodically, so it falls back on\n  postMessage or setTimeout. */ // polyfill with setTimeout\n    util.setImmediate = function(callback) {\n        setTimeout(callback, 0);\n    };\n    // upgrade polyfill to use postMessage\n    if (false) { var callbacks, msg; }\n    // upgrade polyfill to use MutationObserver\n    if (typeof MutationObserver !== \"undefined\") {\n        // polyfill with MutationObserver\n        var now = Date.now();\n        var attr = true;\n        var div = document.createElement(\"div\");\n        var callbacks = [];\n        new MutationObserver(function() {\n            var copy = callbacks.slice();\n            callbacks.length = 0;\n            copy.forEach(function(callback) {\n                callback();\n            });\n        }).observe(div, {\n            attributes: true\n        });\n        var oldSetImmediate = util.setImmediate;\n        util.setImmediate = function(callback) {\n            if (Date.now() - now > 15) {\n                now = Date.now();\n                oldSetImmediate(callback);\n            } else {\n                callbacks.push(callback);\n                // only trigger observer when it hasn't been triggered in\n                // the current turn of the event loop\n                if (callbacks.length === 1) {\n                    div.setAttribute(\"a\", attr = !attr);\n                }\n            }\n        };\n    }\n    util.nextTick = util.setImmediate;\n})();\n// check if running under Node.js\nutil.isNodejs = typeof process !== \"undefined\" && process.versions && process.versions.node;\n// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while\n// it will point to `window` in the main thread.\n// To remain compatible with older browsers, we fall back to 'window' if 'self'\n// is not available.\nutil.globalScope = function() {\n    if (util.isNodejs) {\n        return global;\n    }\n    return typeof self === \"undefined\" ? window : self;\n}();\n// define isArray\nutil.isArray = Array.isArray || function(x) {\n    return Object.prototype.toString.call(x) === \"[object Array]\";\n};\n// define isArrayBuffer\nutil.isArrayBuffer = function(x) {\n    return typeof ArrayBuffer !== \"undefined\" && x instanceof ArrayBuffer;\n};\n// define isArrayBufferView\nutil.isArrayBufferView = function(x) {\n    return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;\n};\n/**\n * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for\n * algorithms where bit manipulation, JavaScript limitations, and/or algorithm\n * design only allow for byte operations of a limited size.\n *\n * @param n number of bits.\n *\n * Throw Error if n invalid.\n */ function _checkBitsParam(n) {\n    if (!(n === 8 || n === 16 || n === 24 || n === 32)) {\n        throw new Error(\"Only 8, 16, 24, or 32 bits supported: \" + n);\n    }\n}\n// TODO: set ByteBuffer to best available backing\nutil.ByteBuffer = ByteStringBuffer;\n/** Buffer w/BinaryString backing */ /**\n * Constructor for a binary string backed byte buffer.\n *\n * @param [b] the bytes to wrap (either encoded as string, one byte per\n *          character, or as an ArrayBuffer or Typed Array).\n */ function ByteStringBuffer(b) {\n    // TODO: update to match DataBuffer API\n    // the data in this buffer\n    this.data = \"\";\n    // the pointer for reading from this buffer\n    this.read = 0;\n    if (typeof b === \"string\") {\n        this.data = b;\n    } else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {\n        if (typeof Buffer !== \"undefined\" && b instanceof Buffer) {\n            this.data = b.toString(\"binary\");\n        } else {\n            // convert native buffer to forge buffer\n            // FIXME: support native buffers internally instead\n            var arr = new Uint8Array(b);\n            try {\n                this.data = String.fromCharCode.apply(null, arr);\n            } catch (e) {\n                for(var i = 0; i < arr.length; ++i){\n                    this.putByte(arr[i]);\n                }\n            }\n        }\n    } else if (b instanceof ByteStringBuffer || typeof b === \"object\" && typeof b.data === \"string\" && typeof b.read === \"number\") {\n        // copy existing buffer\n        this.data = b.data;\n        this.read = b.read;\n    }\n    // used for v8 optimization\n    this._constructedStringLength = 0;\n}\nutil.ByteStringBuffer = ByteStringBuffer;\n/* Note: This is an optimization for V8-based browsers. When V8 concatenates\n  a string, the strings are only joined logically using a \"cons string\" or\n  \"constructed/concatenated string\". These containers keep references to one\n  another and can result in very large memory usage. For example, if a 2MB\n  string is constructed by concatenating 4 bytes together at a time, the\n  memory usage will be ~44MB; so ~22x increase. The strings are only joined\n  together when an operation requiring their joining takes place, such as\n  substr(). This function is called when adding data to this buffer to ensure\n  these types of strings are periodically joined to reduce the memory\n  footprint. */ var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;\nutil.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {\n    this._constructedStringLength += x;\n    if (this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {\n        // this substr() should cause the constructed string to join\n        this.data.substr(0, 1);\n        this._constructedStringLength = 0;\n    }\n};\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */ util.ByteStringBuffer.prototype.length = function() {\n    return this.data.length - this.read;\n};\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */ util.ByteStringBuffer.prototype.isEmpty = function() {\n    return this.length() <= 0;\n};\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putByte = function(b) {\n    return this.putBytes(String.fromCharCode(b));\n};\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {\n    b = String.fromCharCode(b);\n    var d = this.data;\n    while(n > 0){\n        if (n & 1) {\n            d += b;\n        }\n        n >>>= 1;\n        if (n > 0) {\n            b += b;\n        }\n    }\n    this.data = d;\n    this._optimizeConstructedString(n);\n    return this;\n};\n/**\n * Puts bytes in this buffer.\n *\n * @param bytes the bytes (as a binary encoded string) to put.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putBytes = function(bytes) {\n    this.data += bytes;\n    this._optimizeConstructedString(bytes.length);\n    return this;\n};\n/**\n * Puts a UTF-16 encoded string into this buffer.\n *\n * @param str the string to put.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putString = function(str) {\n    return this.putBytes(util.encodeUtf8(str));\n};\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt16 = function(i) {\n    return this.putBytes(String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));\n};\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt24 = function(i) {\n    return this.putBytes(String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));\n};\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt32 = function(i) {\n    return this.putBytes(String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));\n};\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt16Le = function(i) {\n    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF));\n};\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt24Le = function(i) {\n    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF));\n};\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt32Le = function(i) {\n    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 24 & 0xFF));\n};\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putInt = function(i, n) {\n    _checkBitsParam(n);\n    var bytes = \"\";\n    do {\n        n -= 8;\n        bytes += String.fromCharCode(i >> n & 0xFF);\n    }while (n > 0);\n    return this.putBytes(bytes);\n};\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {\n    // putInt checks n\n    if (i < 0) {\n        i += 2 << n - 1;\n    }\n    return this.putInt(i, n);\n};\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.putBuffer = function(buffer) {\n    return this.putBytes(buffer.getBytes());\n};\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */ util.ByteStringBuffer.prototype.getByte = function() {\n    return this.data.charCodeAt(this.read++);\n};\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */ util.ByteStringBuffer.prototype.getInt16 = function() {\n    var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);\n    this.read += 2;\n    return rval;\n};\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */ util.ByteStringBuffer.prototype.getInt24 = function() {\n    var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);\n    this.read += 3;\n    return rval;\n};\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */ util.ByteStringBuffer.prototype.getInt32 = function() {\n    var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);\n    this.read += 4;\n    return rval;\n};\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */ util.ByteStringBuffer.prototype.getInt16Le = function() {\n    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;\n    this.read += 2;\n    return rval;\n};\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */ util.ByteStringBuffer.prototype.getInt24Le = function() {\n    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;\n    this.read += 3;\n    return rval;\n};\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */ util.ByteStringBuffer.prototype.getInt32Le = function() {\n    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;\n    this.read += 4;\n    return rval;\n};\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by ceil(n/8).\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */ util.ByteStringBuffer.prototype.getInt = function(n) {\n    _checkBitsParam(n);\n    var rval = 0;\n    do {\n        // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n        rval = (rval << 8) + this.data.charCodeAt(this.read++);\n        n -= 8;\n    }while (n > 0);\n    return rval;\n};\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */ util.ByteStringBuffer.prototype.getSignedInt = function(n) {\n    // getInt checks n\n    var x = this.getInt(n);\n    var max = 2 << n - 2;\n    if (x >= max) {\n        x -= max << 1;\n    }\n    return x;\n};\n/**\n * Reads bytes out as a binary encoded string and clears them from the\n * buffer. Note that the resulting string is binary encoded (in node.js this\n * encoding is referred to as `binary`, it is *not* `utf8`).\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a binary encoded string of bytes.\n */ util.ByteStringBuffer.prototype.getBytes = function(count) {\n    var rval;\n    if (count) {\n        // read count bytes\n        count = Math.min(this.length(), count);\n        rval = this.data.slice(this.read, this.read + count);\n        this.read += count;\n    } else if (count === 0) {\n        rval = \"\";\n    } else {\n        // read all bytes, optimize to only copy when needed\n        rval = this.read === 0 ? this.data : this.data.slice(this.read);\n        this.clear();\n    }\n    return rval;\n};\n/**\n * Gets a binary encoded string of the bytes from this buffer without\n * modifying the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of binary encoded characters.\n */ util.ByteStringBuffer.prototype.bytes = function(count) {\n    return typeof count === \"undefined\" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);\n};\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */ util.ByteStringBuffer.prototype.at = function(i) {\n    return this.data.charCodeAt(this.read + i);\n};\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.setAt = function(i, b) {\n    this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);\n    return this;\n};\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */ util.ByteStringBuffer.prototype.last = function() {\n    return this.data.charCodeAt(this.data.length - 1);\n};\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */ util.ByteStringBuffer.prototype.copy = function() {\n    var c = util.createBuffer(this.data);\n    c.read = this.read;\n    return c;\n};\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.compact = function() {\n    if (this.read > 0) {\n        this.data = this.data.slice(this.read);\n        this.read = 0;\n    }\n    return this;\n};\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.clear = function() {\n    this.data = \"\";\n    this.read = 0;\n    return this;\n};\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */ util.ByteStringBuffer.prototype.truncate = function(count) {\n    var len = Math.max(0, this.length() - count);\n    this.data = this.data.substr(this.read, len);\n    this.read = 0;\n    return this;\n};\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */ util.ByteStringBuffer.prototype.toHex = function() {\n    var rval = \"\";\n    for(var i = this.read; i < this.data.length; ++i){\n        var b = this.data.charCodeAt(i);\n        if (b < 16) {\n            rval += \"0\";\n        }\n        rval += b.toString(16);\n    }\n    return rval;\n};\n/**\n * Converts this buffer to a UTF-16 string (standard JavaScript string).\n *\n * @return a UTF-16 string.\n */ util.ByteStringBuffer.prototype.toString = function() {\n    return util.decodeUtf8(this.bytes());\n};\n/** End Buffer w/BinaryString backing */ /** Buffer w/UInt8Array backing */ /**\n * FIXME: Experimental. Do not use yet.\n *\n * Constructor for an ArrayBuffer-backed byte buffer.\n *\n * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a\n * TypedArray.\n *\n * If a string is given, its encoding should be provided as an option,\n * otherwise it will default to 'binary'. A 'binary' string is encoded such\n * that each character is one byte in length and size.\n *\n * If an ArrayBuffer, DataView, or TypedArray is given, it will be used\n * *directly* without any copying. Note that, if a write to the buffer requires\n * more space, the buffer will allocate a new backing ArrayBuffer to\n * accommodate. The starting read and write offsets for the buffer may be\n * given as options.\n *\n * @param [b] the initial bytes for this buffer.\n * @param options the options to use:\n *          [readOffset] the starting read offset to use (default: 0).\n *          [writeOffset] the starting write offset to use (default: the\n *            length of the first parameter).\n *          [growSize] the minimum amount, in bytes, to grow the buffer by to\n *            accommodate writes (default: 1024).\n *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the\n *            first parameter, if it is a string (default: 'binary').\n */ function DataBuffer(b, options) {\n    // default options\n    options = options || {};\n    // pointers for read from/write to buffer\n    this.read = options.readOffset || 0;\n    this.growSize = options.growSize || 1024;\n    var isArrayBuffer = util.isArrayBuffer(b);\n    var isArrayBufferView = util.isArrayBufferView(b);\n    if (isArrayBuffer || isArrayBufferView) {\n        // use ArrayBuffer directly\n        if (isArrayBuffer) {\n            this.data = new DataView(b);\n        } else {\n            // TODO: adjust read/write offset based on the type of view\n            // or specify that this must be done in the options ... that the\n            // offsets are byte-based\n            this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);\n        }\n        this.write = \"writeOffset\" in options ? options.writeOffset : this.data.byteLength;\n        return;\n    }\n    // initialize to empty array buffer and add any given bytes using putBytes\n    this.data = new DataView(new ArrayBuffer(0));\n    this.write = 0;\n    if (b !== null && b !== undefined) {\n        this.putBytes(b);\n    }\n    if (\"writeOffset\" in options) {\n        this.write = options.writeOffset;\n    }\n}\nutil.DataBuffer = DataBuffer;\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */ util.DataBuffer.prototype.length = function() {\n    return this.write - this.read;\n};\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */ util.DataBuffer.prototype.isEmpty = function() {\n    return this.length() <= 0;\n};\n/**\n * Ensures this buffer has enough empty space to accommodate the given number\n * of bytes. An optional parameter may be given that indicates a minimum\n * amount to grow the buffer if necessary. If the parameter is not given,\n * the buffer will be grown by some previously-specified default amount\n * or heuristic.\n *\n * @param amount the number of bytes to accommodate.\n * @param [growSize] the minimum amount, in bytes, to grow the buffer by if\n *          necessary.\n */ util.DataBuffer.prototype.accommodate = function(amount, growSize) {\n    if (this.length() >= amount) {\n        return this;\n    }\n    growSize = Math.max(growSize || this.growSize, amount);\n    // grow buffer\n    var src = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\n    var dst = new Uint8Array(this.length() + growSize);\n    dst.set(src);\n    this.data = new DataView(dst.buffer);\n    return this;\n};\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putByte = function(b) {\n    this.accommodate(1);\n    this.data.setUint8(this.write++, b);\n    return this;\n};\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.fillWithByte = function(b, n) {\n    this.accommodate(n);\n    for(var i = 0; i < n; ++i){\n        this.data.setUint8(b);\n    }\n    return this;\n};\n/**\n * Puts bytes in this buffer. The bytes may be given as a string, an\n * ArrayBuffer, a DataView, or a TypedArray.\n *\n * @param bytes the bytes to put.\n * @param [encoding] the encoding for the first parameter ('binary', 'utf8',\n *          'utf16', 'hex'), if it is a string (default: 'binary').\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putBytes = function(bytes, encoding) {\n    if (util.isArrayBufferView(bytes)) {\n        var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n        var len = src.byteLength - src.byteOffset;\n        this.accommodate(len);\n        var dst = new Uint8Array(this.data.buffer, this.write);\n        dst.set(src);\n        this.write += len;\n        return this;\n    }\n    if (util.isArrayBuffer(bytes)) {\n        var src = new Uint8Array(bytes);\n        this.accommodate(src.byteLength);\n        var dst = new Uint8Array(this.data.buffer);\n        dst.set(src, this.write);\n        this.write += src.byteLength;\n        return this;\n    }\n    // bytes is a util.DataBuffer or equivalent\n    if (bytes instanceof util.DataBuffer || typeof bytes === \"object\" && typeof bytes.read === \"number\" && typeof bytes.write === \"number\" && util.isArrayBufferView(bytes.data)) {\n        var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());\n        this.accommodate(src.byteLength);\n        var dst = new Uint8Array(bytes.data.byteLength, this.write);\n        dst.set(src);\n        this.write += src.byteLength;\n        return this;\n    }\n    if (bytes instanceof util.ByteStringBuffer) {\n        // copy binary string and process as the same as a string parameter below\n        bytes = bytes.data;\n        encoding = \"binary\";\n    }\n    // string conversion\n    encoding = encoding || \"binary\";\n    if (typeof bytes === \"string\") {\n        var view;\n        // decode from string\n        if (encoding === \"hex\") {\n            this.accommodate(Math.ceil(bytes.length / 2));\n            view = new Uint8Array(this.data.buffer, this.write);\n            this.write += util.binary.hex.decode(bytes, view, this.write);\n            return this;\n        }\n        if (encoding === \"base64\") {\n            this.accommodate(Math.ceil(bytes.length / 4) * 3);\n            view = new Uint8Array(this.data.buffer, this.write);\n            this.write += util.binary.base64.decode(bytes, view, this.write);\n            return this;\n        }\n        // encode text as UTF-8 bytes\n        if (encoding === \"utf8\") {\n            // encode as UTF-8 then decode string as raw binary\n            bytes = util.encodeUtf8(bytes);\n            encoding = \"binary\";\n        }\n        // decode string as raw binary\n        if (encoding === \"binary\" || encoding === \"raw\") {\n            // one byte per character\n            this.accommodate(bytes.length);\n            view = new Uint8Array(this.data.buffer, this.write);\n            this.write += util.binary.raw.decode(view);\n            return this;\n        }\n        // encode text as UTF-16 bytes\n        if (encoding === \"utf16\") {\n            // two bytes per character\n            this.accommodate(bytes.length * 2);\n            view = new Uint16Array(this.data.buffer, this.write);\n            this.write += util.text.utf16.encode(view);\n            return this;\n        }\n        throw new Error(\"Invalid encoding: \" + encoding);\n    }\n    throw Error(\"Invalid parameter: \" + bytes);\n};\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putBuffer = function(buffer) {\n    this.putBytes(buffer);\n    buffer.clear();\n    return this;\n};\n/**\n * Puts a string into this buffer.\n *\n * @param str the string to put.\n * @param [encoding] the encoding for the string (default: 'utf16').\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putString = function(str) {\n    return this.putBytes(str, \"utf16\");\n};\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt16 = function(i) {\n    this.accommodate(2);\n    this.data.setInt16(this.write, i);\n    this.write += 2;\n    return this;\n};\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt24 = function(i) {\n    this.accommodate(3);\n    this.data.setInt16(this.write, i >> 8 & 0xFFFF);\n    this.data.setInt8(this.write, i >> 16 & 0xFF);\n    this.write += 3;\n    return this;\n};\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt32 = function(i) {\n    this.accommodate(4);\n    this.data.setInt32(this.write, i);\n    this.write += 4;\n    return this;\n};\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt16Le = function(i) {\n    this.accommodate(2);\n    this.data.setInt16(this.write, i, true);\n    this.write += 2;\n    return this;\n};\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt24Le = function(i) {\n    this.accommodate(3);\n    this.data.setInt8(this.write, i >> 16 & 0xFF);\n    this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);\n    this.write += 3;\n    return this;\n};\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt32Le = function(i) {\n    this.accommodate(4);\n    this.data.setInt32(this.write, i, true);\n    this.write += 4;\n    return this;\n};\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putInt = function(i, n) {\n    _checkBitsParam(n);\n    this.accommodate(n / 8);\n    do {\n        n -= 8;\n        this.data.setInt8(this.write++, i >> n & 0xFF);\n    }while (n > 0);\n    return this;\n};\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.putSignedInt = function(i, n) {\n    _checkBitsParam(n);\n    this.accommodate(n / 8);\n    if (i < 0) {\n        i += 2 << n - 1;\n    }\n    return this.putInt(i, n);\n};\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */ util.DataBuffer.prototype.getByte = function() {\n    return this.data.getInt8(this.read++);\n};\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */ util.DataBuffer.prototype.getInt16 = function() {\n    var rval = this.data.getInt16(this.read);\n    this.read += 2;\n    return rval;\n};\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */ util.DataBuffer.prototype.getInt24 = function() {\n    var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);\n    this.read += 3;\n    return rval;\n};\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */ util.DataBuffer.prototype.getInt32 = function() {\n    var rval = this.data.getInt32(this.read);\n    this.read += 4;\n    return rval;\n};\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */ util.DataBuffer.prototype.getInt16Le = function() {\n    var rval = this.data.getInt16(this.read, true);\n    this.read += 2;\n    return rval;\n};\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */ util.DataBuffer.prototype.getInt24Le = function() {\n    var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;\n    this.read += 3;\n    return rval;\n};\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */ util.DataBuffer.prototype.getInt32Le = function() {\n    var rval = this.data.getInt32(this.read, true);\n    this.read += 4;\n    return rval;\n};\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */ util.DataBuffer.prototype.getInt = function(n) {\n    _checkBitsParam(n);\n    var rval = 0;\n    do {\n        // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n        rval = (rval << 8) + this.data.getInt8(this.read++);\n        n -= 8;\n    }while (n > 0);\n    return rval;\n};\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */ util.DataBuffer.prototype.getSignedInt = function(n) {\n    // getInt checks n\n    var x = this.getInt(n);\n    var max = 2 << n - 2;\n    if (x >= max) {\n        x -= max << 1;\n    }\n    return x;\n};\n/**\n * Reads bytes out as a binary encoded string and clears them from the\n * buffer.\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a binary encoded string of bytes.\n */ util.DataBuffer.prototype.getBytes = function(count) {\n    // TODO: deprecate this method, it is poorly named and\n    // this.toString('binary') replaces it\n    // add a toTypedArray()/toArrayBuffer() function\n    var rval;\n    if (count) {\n        // read count bytes\n        count = Math.min(this.length(), count);\n        rval = this.data.slice(this.read, this.read + count);\n        this.read += count;\n    } else if (count === 0) {\n        rval = \"\";\n    } else {\n        // read all bytes, optimize to only copy when needed\n        rval = this.read === 0 ? this.data : this.data.slice(this.read);\n        this.clear();\n    }\n    return rval;\n};\n/**\n * Gets a binary encoded string of the bytes from this buffer without\n * modifying the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of binary encoded characters.\n */ util.DataBuffer.prototype.bytes = function(count) {\n    // TODO: deprecate this method, it is poorly named, add \"getString()\"\n    return typeof count === \"undefined\" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);\n};\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */ util.DataBuffer.prototype.at = function(i) {\n    return this.data.getUint8(this.read + i);\n};\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.setAt = function(i, b) {\n    this.data.setUint8(i, b);\n    return this;\n};\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */ util.DataBuffer.prototype.last = function() {\n    return this.data.getUint8(this.write - 1);\n};\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */ util.DataBuffer.prototype.copy = function() {\n    return new util.DataBuffer(this);\n};\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.compact = function() {\n    if (this.read > 0) {\n        var src = new Uint8Array(this.data.buffer, this.read);\n        var dst = new Uint8Array(src.byteLength);\n        dst.set(src);\n        this.data = new DataView(dst);\n        this.write -= this.read;\n        this.read = 0;\n    }\n    return this;\n};\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.clear = function() {\n    this.data = new DataView(new ArrayBuffer(0));\n    this.read = this.write = 0;\n    return this;\n};\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */ util.DataBuffer.prototype.truncate = function(count) {\n    this.write = Math.max(0, this.length() - count);\n    this.read = Math.min(this.read, this.write);\n    return this;\n};\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */ util.DataBuffer.prototype.toHex = function() {\n    var rval = \"\";\n    for(var i = this.read; i < this.data.byteLength; ++i){\n        var b = this.data.getUint8(i);\n        if (b < 16) {\n            rval += \"0\";\n        }\n        rval += b.toString(16);\n    }\n    return rval;\n};\n/**\n * Converts this buffer to a string, using the given encoding. If no\n * encoding is given, 'utf8' (UTF-8) is used.\n *\n * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',\n *          'base64' (default: 'utf8').\n *\n * @return a string representation of the bytes in this buffer.\n */ util.DataBuffer.prototype.toString = function(encoding) {\n    var view = new Uint8Array(this.data, this.read, this.length());\n    encoding = encoding || \"utf8\";\n    // encode to string\n    if (encoding === \"binary\" || encoding === \"raw\") {\n        return util.binary.raw.encode(view);\n    }\n    if (encoding === \"hex\") {\n        return util.binary.hex.encode(view);\n    }\n    if (encoding === \"base64\") {\n        return util.binary.base64.encode(view);\n    }\n    // decode to text\n    if (encoding === \"utf8\") {\n        return util.text.utf8.decode(view);\n    }\n    if (encoding === \"utf16\") {\n        return util.text.utf16.decode(view);\n    }\n    throw new Error(\"Invalid encoding: \" + encoding);\n};\n/** End Buffer w/UInt8Array backing */ /**\n * Creates a buffer that stores bytes. A value may be given to populate the\n * buffer with data. This value can either be string of encoded bytes or a\n * regular string of characters. When passing a string of binary encoded\n * bytes, the encoding `raw` should be given. This is also the default. When\n * passing a string of characters, the encoding `utf8` should be given.\n *\n * @param [input] a string with encoded bytes to store in the buffer.\n * @param [encoding] (default: 'raw', other: 'utf8').\n */ util.createBuffer = function(input, encoding) {\n    // TODO: deprecate, use new ByteBuffer() instead\n    encoding = encoding || \"raw\";\n    if (input !== undefined && encoding === \"utf8\") {\n        input = util.encodeUtf8(input);\n    }\n    return new util.ByteBuffer(input);\n};\n/**\n * Fills a string with a particular value. If you want the string to be a byte\n * string, pass in String.fromCharCode(theByte).\n *\n * @param c the character to fill the string with, use String.fromCharCode\n *          to fill the string with a byte value.\n * @param n the number of characters of value c to fill with.\n *\n * @return the filled string.\n */ util.fillString = function(c, n) {\n    var s = \"\";\n    while(n > 0){\n        if (n & 1) {\n            s += c;\n        }\n        n >>>= 1;\n        if (n > 0) {\n            c += c;\n        }\n    }\n    return s;\n};\n/**\n * Performs a per byte XOR between two byte strings and returns the result as a\n * string of bytes.\n *\n * @param s1 first string of bytes.\n * @param s2 second string of bytes.\n * @param n the number of bytes to XOR.\n *\n * @return the XOR'd result.\n */ util.xorBytes = function(s1, s2, n) {\n    var s3 = \"\";\n    var b = \"\";\n    var t = \"\";\n    var i = 0;\n    var c = 0;\n    for(; n > 0; --n, ++i){\n        b = s1.charCodeAt(i) ^ s2.charCodeAt(i);\n        if (c >= 10) {\n            s3 += t;\n            t = \"\";\n            c = 0;\n        }\n        t += String.fromCharCode(b);\n        ++c;\n    }\n    s3 += t;\n    return s3;\n};\n/**\n * Converts a hex string into a 'binary' encoded string of bytes.\n *\n * @param hex the hexadecimal string to convert.\n *\n * @return the binary-encoded string of bytes.\n */ util.hexToBytes = function(hex) {\n    // TODO: deprecate: \"Deprecated. Use util.binary.hex.decode instead.\"\n    var rval = \"\";\n    var i = 0;\n    if (hex.length & 1 == 1) {\n        // odd number of characters, convert first character alone\n        i = 1;\n        rval += String.fromCharCode(parseInt(hex[0], 16));\n    }\n    // convert 2 characters (1 byte) at a time\n    for(; i < hex.length; i += 2){\n        rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return rval;\n};\n/**\n * Converts a 'binary' encoded string of bytes to hex.\n *\n * @param bytes the byte string to convert.\n *\n * @return the string of hexadecimal characters.\n */ util.bytesToHex = function(bytes) {\n    // TODO: deprecate: \"Deprecated. Use util.binary.hex.encode instead.\"\n    return util.createBuffer(bytes).toHex();\n};\n/**\n * Converts an 32-bit integer to 4-big-endian byte string.\n *\n * @param i the integer.\n *\n * @return the byte string.\n */ util.int32ToBytes = function(i) {\n    return String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF);\n};\n// base64 characters, reverse mapping\nvar _base64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar _base64Idx = [\n    /*43 -43 = 0*/ /*'+',  1,  2,  3,'/' */ 62,\n    -1,\n    -1,\n    -1,\n    63,\n    /*'0','1','2','3','4','5','6','7','8','9' */ 52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    /*15, 16, 17,'=', 19, 20, 21 */ -1,\n    -1,\n    -1,\n    64,\n    -1,\n    -1,\n    -1,\n    /*65 - 43 = 22*/ /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */ 0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */ 13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    /*91 - 43 = 48 */ /*48, 49, 50, 51, 52, 53 */ -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    /*97 - 43 = 54*/ /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */ 26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */ 39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n    51\n];\n// base58 characters (Bitcoin alphabet)\nvar _base58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n/**\n * Base64 encodes a 'binary' encoded string of bytes.\n *\n * @param input the binary encoded string of bytes to base64-encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output.\n */ util.encode64 = function(input, maxline) {\n    // TODO: deprecate: \"Deprecated. Use util.binary.base64.encode instead.\"\n    var line = \"\";\n    var output = \"\";\n    var chr1, chr2, chr3;\n    var i = 0;\n    while(i < input.length){\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n        // encode 4 character group\n        line += _base64.charAt(chr1 >> 2);\n        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);\n        if (isNaN(chr2)) {\n            line += \"==\";\n        } else {\n            line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);\n            line += isNaN(chr3) ? \"=\" : _base64.charAt(chr3 & 63);\n        }\n        if (maxline && line.length > maxline) {\n            output += line.substr(0, maxline) + \"\\r\\n\";\n            line = line.substr(maxline);\n        }\n    }\n    output += line;\n    return output;\n};\n/**\n * Base64 decodes a string into a 'binary' encoded string of bytes.\n *\n * @param input the base64-encoded input.\n *\n * @return the binary encoded string.\n */ util.decode64 = function(input) {\n    // TODO: deprecate: \"Deprecated. Use util.binary.base64.decode instead.\"\n    // remove all non-base64 characters\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n    var output = \"\";\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    while(i < input.length){\n        enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n        output += String.fromCharCode(enc1 << 2 | enc2 >> 4);\n        if (enc3 !== 64) {\n            // decoded at least 2 bytes\n            output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);\n            if (enc4 !== 64) {\n                // decoded 3 bytes\n                output += String.fromCharCode((enc3 & 3) << 6 | enc4);\n            }\n        }\n    }\n    return output;\n};\n/**\n * Encodes the given string of characters (a standard JavaScript\n * string) as a binary encoded string where the bytes represent\n * a UTF-8 encoded string of characters. Non-ASCII characters will be\n * encoded as multiple bytes according to UTF-8.\n *\n * @param str a standard string of characters to encode.\n *\n * @return the binary encoded string.\n */ util.encodeUtf8 = function(str) {\n    return unescape(encodeURIComponent(str));\n};\n/**\n * Decodes a binary encoded string that contains bytes that\n * represent a UTF-8 encoded string of characters -- into a\n * string of characters (a standard JavaScript string).\n *\n * @param str the binary encoded string to decode.\n *\n * @return the resulting standard string of characters.\n */ util.decodeUtf8 = function(str) {\n    return decodeURIComponent(escape(str));\n};\n// binary encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.binary = {\n    raw: {},\n    hex: {},\n    base64: {},\n    base58: {},\n    baseN: {\n        encode: baseN.encode,\n        decode: baseN.decode\n    }\n};\n/**\n * Encodes a Uint8Array as a binary-encoded string. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param bytes the Uint8Array to encode.\n *\n * @return the binary-encoded string.\n */ util.binary.raw.encode = function(bytes) {\n    return String.fromCharCode.apply(null, bytes);\n};\n/**\n * Decodes a binary-encoded string to a Uint8Array. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param str the binary-encoded string to decode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */ util.binary.raw.decode = function(str, output, offset) {\n    var out = output;\n    if (!out) {\n        out = new Uint8Array(str.length);\n    }\n    offset = offset || 0;\n    var j = offset;\n    for(var i = 0; i < str.length; ++i){\n        out[j++] = str.charCodeAt(i);\n    }\n    return output ? j - offset : out;\n};\n/**\n * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or\n * ByteBuffer as a string of hexadecimal characters.\n *\n * @param bytes the bytes to convert.\n *\n * @return the string of hexadecimal characters.\n */ util.binary.hex.encode = util.bytesToHex;\n/**\n * Decodes a hex-encoded string to a Uint8Array.\n *\n * @param hex the hexadecimal string to convert.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */ util.binary.hex.decode = function(hex, output, offset) {\n    var out = output;\n    if (!out) {\n        out = new Uint8Array(Math.ceil(hex.length / 2));\n    }\n    offset = offset || 0;\n    var i = 0, j = offset;\n    if (hex.length & 1) {\n        // odd number of characters, convert first character alone\n        i = 1;\n        out[j++] = parseInt(hex[0], 16);\n    }\n    // convert 2 characters (1 byte) at a time\n    for(; i < hex.length; i += 2){\n        out[j++] = parseInt(hex.substr(i, 2), 16);\n    }\n    return output ? j - offset : out;\n};\n/**\n * Base64-encodes a Uint8Array.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output string.\n */ util.binary.base64.encode = function(input, maxline) {\n    var line = \"\";\n    var output = \"\";\n    var chr1, chr2, chr3;\n    var i = 0;\n    while(i < input.byteLength){\n        chr1 = input[i++];\n        chr2 = input[i++];\n        chr3 = input[i++];\n        // encode 4 character group\n        line += _base64.charAt(chr1 >> 2);\n        line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);\n        if (isNaN(chr2)) {\n            line += \"==\";\n        } else {\n            line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);\n            line += isNaN(chr3) ? \"=\" : _base64.charAt(chr3 & 63);\n        }\n        if (maxline && line.length > maxline) {\n            output += line.substr(0, maxline) + \"\\r\\n\";\n            line = line.substr(maxline);\n        }\n    }\n    output += line;\n    return output;\n};\n/**\n * Decodes a base64-encoded string to a Uint8Array.\n *\n * @param input the base64-encoded input string.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */ util.binary.base64.decode = function(input, output, offset) {\n    var out = output;\n    if (!out) {\n        out = new Uint8Array(Math.ceil(input.length / 4) * 3);\n    }\n    // remove all non-base64 characters\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n    offset = offset || 0;\n    var enc1, enc2, enc3, enc4;\n    var i = 0, j = offset;\n    while(i < input.length){\n        enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n        enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n        out[j++] = enc1 << 2 | enc2 >> 4;\n        if (enc3 !== 64) {\n            // decoded at least 2 bytes\n            out[j++] = (enc2 & 15) << 4 | enc3 >> 2;\n            if (enc4 !== 64) {\n                // decoded 3 bytes\n                out[j++] = (enc3 & 3) << 6 | enc4;\n            }\n        }\n    }\n    // make sure result is the exact decoded length\n    return output ? j - offset : out.subarray(0, j);\n};\n// add support for base58 encoding/decoding with Bitcoin alphabet\nutil.binary.base58.encode = function(input, maxline) {\n    return util.binary.baseN.encode(input, _base58, maxline);\n};\nutil.binary.base58.decode = function(input, maxline) {\n    return util.binary.baseN.decode(input, _base58, maxline);\n};\n// text encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.text = {\n    utf8: {},\n    utf16: {}\n};\n/**\n * Encodes the given string as UTF-8 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */ util.text.utf8.encode = function(str, output, offset) {\n    str = util.encodeUtf8(str);\n    var out = output;\n    if (!out) {\n        out = new Uint8Array(str.length);\n    }\n    offset = offset || 0;\n    var j = offset;\n    for(var i = 0; i < str.length; ++i){\n        out[j++] = str.charCodeAt(i);\n    }\n    return output ? j - offset : out;\n};\n/**\n * Decodes the UTF-8 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */ util.text.utf8.decode = function(bytes) {\n    return util.decodeUtf8(String.fromCharCode.apply(null, bytes));\n};\n/**\n * Encodes the given string as UTF-16 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */ util.text.utf16.encode = function(str, output, offset) {\n    var out = output;\n    if (!out) {\n        out = new Uint8Array(str.length * 2);\n    }\n    var view = new Uint16Array(out.buffer);\n    offset = offset || 0;\n    var j = offset;\n    var k = offset;\n    for(var i = 0; i < str.length; ++i){\n        view[k++] = str.charCodeAt(i);\n        j += 2;\n    }\n    return output ? j - offset : out;\n};\n/**\n * Decodes the UTF-16 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */ util.text.utf16.decode = function(bytes) {\n    return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n};\n/**\n * Deflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true to return only raw deflate data, false to include zlib\n *          header and trailer.\n *\n * @return the deflated data as a string.\n */ util.deflate = function(api, bytes, raw) {\n    bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);\n    // strip zlib header and trailer if necessary\n    if (raw) {\n        // zlib header is 2 bytes (CMF,FLG) where FLG indicates that\n        // there is a 4-byte DICT (alder-32) block before the data if\n        // its 5th bit is set\n        var start = 2;\n        var flg = bytes.charCodeAt(1);\n        if (flg & 0x20) {\n            start = 6;\n        }\n        // zlib trailer is 4 bytes of adler-32\n        bytes = bytes.substring(start, bytes.length - 4);\n    }\n    return bytes;\n};\n/**\n * Inflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true if the incoming data has no zlib header or trailer and is\n *          raw DEFLATE data.\n *\n * @return the inflated data as a string, null on error.\n */ util.inflate = function(api, bytes, raw) {\n    // TODO: add zlib header and trailer if necessary/possible\n    var rval = api.inflate(util.encode64(bytes)).rval;\n    return rval === null ? null : util.decode64(rval);\n};\n/**\n * Sets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param obj the storage object, null to remove.\n */ var _setStorageObject = function(api, id, obj) {\n    if (!api) {\n        throw new Error(\"WebStorage not available.\");\n    }\n    var rval;\n    if (obj === null) {\n        rval = api.removeItem(id);\n    } else {\n        // json-encode and base64-encode object\n        obj = util.encode64(JSON.stringify(obj));\n        rval = api.setItem(id, obj);\n    }\n    // handle potential flash error\n    if (typeof rval !== \"undefined\" && rval.rval !== true) {\n        var error = new Error(rval.error.message);\n        error.id = rval.error.id;\n        error.name = rval.error.name;\n        throw error;\n    }\n};\n/**\n * Gets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n *\n * @return the storage object entry or null if none exists.\n */ var _getStorageObject = function(api, id) {\n    if (!api) {\n        throw new Error(\"WebStorage not available.\");\n    }\n    // get the existing entry\n    var rval = api.getItem(id);\n    /* Note: We check api.init because we can't do (api == localStorage)\n    on IE because of \"Class doesn't support Automation\" exception. Only\n    the flash api has an init method so this works too, but we need a\n    better solution in the future. */ // flash returns item wrapped in an object, handle special case\n    if (api.init) {\n        if (rval.rval === null) {\n            if (rval.error) {\n                var error = new Error(rval.error.message);\n                error.id = rval.error.id;\n                error.name = rval.error.name;\n                throw error;\n            }\n            // no error, but also no item\n            rval = null;\n        } else {\n            rval = rval.rval;\n        }\n    }\n    // handle decoding\n    if (rval !== null) {\n        // base64-decode and json-decode data\n        rval = JSON.parse(util.decode64(rval));\n    }\n    return rval;\n};\n/**\n * Stores an item in local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n */ var _setItem = function(api, id, key, data) {\n    // get storage object\n    var obj = _getStorageObject(api, id);\n    if (obj === null) {\n        // create a new storage object\n        obj = {};\n    }\n    // update key\n    obj[key] = data;\n    // set storage object\n    _setStorageObject(api, id, obj);\n};\n/**\n * Gets an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n *\n * @return the item.\n */ var _getItem = function(api, id, key) {\n    // get storage object\n    var rval = _getStorageObject(api, id);\n    if (rval !== null) {\n        // return data at key\n        rval = key in rval ? rval[key] : null;\n    }\n    return rval;\n};\n/**\n * Removes an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n */ var _removeItem = function(api, id, key) {\n    // get storage object\n    var obj = _getStorageObject(api, id);\n    if (obj !== null && key in obj) {\n        // remove key\n        delete obj[key];\n        // see if entry has no keys remaining\n        var empty = true;\n        for(var prop in obj){\n            empty = false;\n            break;\n        }\n        if (empty) {\n            // remove entry entirely if no keys are left\n            obj = null;\n        }\n        // set storage object\n        _setStorageObject(api, id, obj);\n    }\n};\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n */ var _clearItems = function(api, id) {\n    _setStorageObject(api, id, null);\n};\n/**\n * Calls a storage function.\n *\n * @param func the function to call.\n * @param args the arguments for the function.\n * @param location the location argument.\n *\n * @return the return value from the function.\n */ var _callStorageFunction = function(func, args, location) {\n    var rval = null;\n    // default storage types\n    if (typeof location === \"undefined\") {\n        location = [\n            \"web\",\n            \"flash\"\n        ];\n    }\n    // apply storage types in order of preference\n    var type;\n    var done = false;\n    var exception = null;\n    for(var idx in location){\n        type = location[idx];\n        try {\n            if (type === \"flash\" || type === \"both\") {\n                if (args[0] === null) {\n                    throw new Error(\"Flash local storage not available.\");\n                }\n                rval = func.apply(this, args);\n                done = type === \"flash\";\n            }\n            if (type === \"web\" || type === \"both\") {\n                args[0] = localStorage;\n                rval = func.apply(this, args);\n                done = true;\n            }\n        } catch (ex) {\n            exception = ex;\n        }\n        if (done) {\n            break;\n        }\n    }\n    if (!done) {\n        throw exception;\n    }\n    return rval;\n};\n/**\n * Stores an item on local disk.\n *\n * The available types of local storage include 'flash', 'web', and 'both'.\n *\n * The type 'flash' refers to flash local storage (SharedObject). In order\n * to use flash local storage, the 'api' parameter must be valid. The type\n * 'web' refers to WebStorage, if supported by the browser. The type 'both'\n * refers to storing using both 'flash' and 'web', not just one or the\n * other.\n *\n * The location array should list the storage types to use in order of\n * preference:\n *\n * ['flash']: flash only storage\n * ['web']: web only storage\n * ['both']: try to store in both\n * ['flash','web']: store in flash first, but if not available, 'web'\n * ['web','flash']: store in web first, but if not available, 'flash'\n *\n * The location array defaults to: ['web', 'flash']\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n * @param location an array with the preferred types of storage to use.\n */ util.setItem = function(api, id, key, data, location) {\n    _callStorageFunction(_setItem, arguments, location);\n};\n/**\n * Gets an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n *\n * @return the item.\n */ util.getItem = function(api, id, key, location) {\n    return _callStorageFunction(_getItem, arguments, location);\n};\n/**\n * Removes an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n */ util.removeItem = function(api, id, key, location) {\n    _callStorageFunction(_removeItem, arguments, location);\n};\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface if flash is available.\n * @param id the storage ID to use.\n * @param location an array with the preferred types of storage to use.\n */ util.clearItems = function(api, id, location) {\n    _callStorageFunction(_clearItems, arguments, location);\n};\n/**\n * Check if an object is empty.\n *\n * Taken from:\n * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937\n *\n * @param object the object to check.\n */ util.isEmpty = function(obj) {\n    for(var prop in obj){\n        if (obj.hasOwnProperty(prop)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Format with simple printf-style interpolation.\n *\n * %%: literal '%'\n * %s,%o: convert next argument into a string.\n *\n * @param format the string to format.\n * @param ... arguments to interpolate into the format string.\n */ util.format = function(format) {\n    var re = /%./g;\n    // current match\n    var match;\n    // current part\n    var part;\n    // current arg index\n    var argi = 0;\n    // collected parts to recombine later\n    var parts = [];\n    // last index found\n    var last = 0;\n    // loop while matches remain\n    while(match = re.exec(format)){\n        part = format.substring(last, re.lastIndex - 2);\n        // don't add empty strings (ie, parts between %s%s)\n        if (part.length > 0) {\n            parts.push(part);\n        }\n        last = re.lastIndex;\n        // switch on % code\n        var code = match[0][1];\n        switch(code){\n            case \"s\":\n            case \"o\":\n                // check if enough arguments were given\n                if (argi < arguments.length) {\n                    parts.push(arguments[argi++ + 1]);\n                } else {\n                    parts.push(\"<?>\");\n                }\n                break;\n            // FIXME: do proper formating for numbers, etc\n            //case 'f':\n            //case 'd':\n            case \"%\":\n                parts.push(\"%\");\n                break;\n            default:\n                parts.push(\"<%\" + code + \"?>\");\n        }\n    }\n    // add trailing part of format string\n    parts.push(format.substring(last));\n    return parts.join(\"\");\n};\n/**\n * Formats a number.\n *\n * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/\n */ util.formatNumber = function(number, decimals, dec_point, thousands_sep) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +     bugfix by: Michael White (http://crestidg.com)\n    // +     bugfix by: Benjamin Lupton\n    // +     bugfix by: Allan Jensen (http://www.winternet.no)\n    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n    // *     example 1: number_format(1234.5678, 2, '.', '');\n    // *     returns 1: 1234.57\n    var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;\n    var d = dec_point === undefined ? \",\" : dec_point;\n    var t = thousands_sep === undefined ? \".\" : thousands_sep, s = n < 0 ? \"-\" : \"\";\n    var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + \"\";\n    var j = i.length > 3 ? i.length % 3 : 0;\n    return s + (j ? i.substr(0, j) + t : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : \"\");\n};\n/**\n * Formats a byte size.\n *\n * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/\n */ util.formatSize = function(size) {\n    if (size >= 1073741824) {\n        size = util.formatNumber(size / 1073741824, 2, \".\", \"\") + \" GiB\";\n    } else if (size >= 1048576) {\n        size = util.formatNumber(size / 1048576, 2, \".\", \"\") + \" MiB\";\n    } else if (size >= 1024) {\n        size = util.formatNumber(size / 1024, 0) + \" KiB\";\n    } else {\n        size = util.formatNumber(size, 0) + \" bytes\";\n    }\n    return size;\n};\n/**\n * Converts an IPv4 or IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv4 or IPv6 address to convert.\n *\n * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't\n *         be parsed.\n */ util.bytesFromIP = function(ip) {\n    if (ip.indexOf(\".\") !== -1) {\n        return util.bytesFromIPv4(ip);\n    }\n    if (ip.indexOf(\":\") !== -1) {\n        return util.bytesFromIPv6(ip);\n    }\n    return null;\n};\n/**\n * Converts an IPv4 string representation into bytes (in network order).\n *\n * @param ip the IPv4 address to convert.\n *\n * @return the 4-byte address or null if the address can't be parsed.\n */ util.bytesFromIPv4 = function(ip) {\n    ip = ip.split(\".\");\n    if (ip.length !== 4) {\n        return null;\n    }\n    var b = util.createBuffer();\n    for(var i = 0; i < ip.length; ++i){\n        var num = parseInt(ip[i], 10);\n        if (isNaN(num)) {\n            return null;\n        }\n        b.putByte(num);\n    }\n    return b.getBytes();\n};\n/**\n * Converts an IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv6 address to convert.\n *\n * @return the 16-byte address or null if the address can't be parsed.\n */ util.bytesFromIPv6 = function(ip) {\n    var blanks = 0;\n    ip = ip.split(\":\").filter(function(e) {\n        if (e.length === 0) ++blanks;\n        return true;\n    });\n    var zeros = (8 - ip.length + blanks) * 2;\n    var b = util.createBuffer();\n    for(var i = 0; i < 8; ++i){\n        if (!ip[i] || ip[i].length === 0) {\n            b.fillWithByte(0, zeros);\n            zeros = 0;\n            continue;\n        }\n        var bytes = util.hexToBytes(ip[i]);\n        if (bytes.length < 2) {\n            b.putByte(0);\n        }\n        b.putBytes(bytes);\n    }\n    return b.getBytes();\n};\n/**\n * Converts 4-bytes into an IPv4 string representation or 16-bytes into\n * an IPv6 string representation. The bytes must be in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,\n *         respectively, are given, otherwise null.\n */ util.bytesToIP = function(bytes) {\n    if (bytes.length === 4) {\n        return util.bytesToIPv4(bytes);\n    }\n    if (bytes.length === 16) {\n        return util.bytesToIPv6(bytes);\n    }\n    return null;\n};\n/**\n * Converts 4-bytes into an IPv4 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 string representation or null for an invalid # of bytes.\n */ util.bytesToIPv4 = function(bytes) {\n    if (bytes.length !== 4) {\n        return null;\n    }\n    var ip = [];\n    for(var i = 0; i < bytes.length; ++i){\n        ip.push(bytes.charCodeAt(i));\n    }\n    return ip.join(\".\");\n};\n/**\n * Converts 16-bytes into an IPv16 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv16 string representation or null for an invalid # of bytes.\n */ util.bytesToIPv6 = function(bytes) {\n    if (bytes.length !== 16) {\n        return null;\n    }\n    var ip = [];\n    var zeroGroups = [];\n    var zeroMaxGroup = 0;\n    for(var i = 0; i < bytes.length; i += 2){\n        var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);\n        // canonicalize zero representation\n        while(hex[0] === \"0\" && hex !== \"0\"){\n            hex = hex.substr(1);\n        }\n        if (hex === \"0\") {\n            var last = zeroGroups[zeroGroups.length - 1];\n            var idx = ip.length;\n            if (!last || idx !== last.end + 1) {\n                zeroGroups.push({\n                    start: idx,\n                    end: idx\n                });\n            } else {\n                last.end = idx;\n                if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) {\n                    zeroMaxGroup = zeroGroups.length - 1;\n                }\n            }\n        }\n        ip.push(hex);\n    }\n    if (zeroGroups.length > 0) {\n        var group = zeroGroups[zeroMaxGroup];\n        // only shorten group of length > 0\n        if (group.end - group.start > 0) {\n            ip.splice(group.start, group.end - group.start + 1, \"\");\n            if (group.start === 0) {\n                ip.unshift(\"\");\n            }\n            if (group.end === 7) {\n                ip.push(\"\");\n            }\n        }\n    }\n    return ip.join(\":\");\n};\n/**\n * Estimates the number of processes that can be run concurrently. If\n * creating Web Workers, keep in mind that the main JavaScript process needs\n * its own core.\n *\n * @param options the options to use:\n *          update true to force an update (not use the cached value).\n * @param callback(err, max) called once the operation completes.\n */ util.estimateCores = function(options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    }\n    options = options || {};\n    if (\"cores\" in util && !options.update) {\n        return callback(null, util.cores);\n    }\n    if (typeof navigator !== \"undefined\" && \"hardwareConcurrency\" in navigator && navigator.hardwareConcurrency > 0) {\n        util.cores = navigator.hardwareConcurrency;\n        return callback(null, util.cores);\n    }\n    if (typeof Worker === \"undefined\") {\n        // workers not available\n        util.cores = 1;\n        return callback(null, util.cores);\n    }\n    if (typeof Blob === \"undefined\") {\n        // can't estimate, default to 2\n        util.cores = 2;\n        return callback(null, util.cores);\n    }\n    // create worker concurrency estimation code as blob\n    var blobUrl = URL.createObjectURL(new Blob([\n        \"(\",\n        (function() {\n            self.addEventListener(\"message\", function(e) {\n                // run worker for 4 ms\n                var st = Date.now();\n                var et = st + 4;\n                while(Date.now() < et);\n                self.postMessage({\n                    st: st,\n                    et: et\n                });\n            });\n        }).toString(),\n        \")()\"\n    ], {\n        type: \"application/javascript\"\n    }));\n    // take 5 samples using 16 workers\n    sample([], 5, 16);\n    function sample(max, samples, numWorkers) {\n        if (samples === 0) {\n            // get overlap average\n            var avg = Math.floor(max.reduce(function(avg, x) {\n                return avg + x;\n            }, 0) / max.length);\n            util.cores = Math.max(1, avg);\n            URL.revokeObjectURL(blobUrl);\n            return callback(null, util.cores);\n        }\n        map(numWorkers, function(err, results) {\n            max.push(reduce(numWorkers, results));\n            sample(max, samples - 1, numWorkers);\n        });\n    }\n    function map(numWorkers, callback) {\n        var workers = [];\n        var results = [];\n        for(var i = 0; i < numWorkers; ++i){\n            var worker = new Worker(blobUrl);\n            worker.addEventListener(\"message\", function(e) {\n                results.push(e.data);\n                if (results.length === numWorkers) {\n                    for(var i = 0; i < numWorkers; ++i){\n                        workers[i].terminate();\n                    }\n                    callback(null, results);\n                }\n            });\n            workers.push(worker);\n        }\n        for(var i = 0; i < numWorkers; ++i){\n            workers[i].postMessage(i);\n        }\n    }\n    function reduce(numWorkers, results) {\n        // find overlapping time windows\n        var overlaps = [];\n        for(var n = 0; n < numWorkers; ++n){\n            var r1 = results[n];\n            var overlap = overlaps[n] = [];\n            for(var i = 0; i < numWorkers; ++i){\n                if (n === i) {\n                    continue;\n                }\n                var r2 = results[i];\n                if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) {\n                    overlap.push(i);\n                }\n            }\n        }\n        // get maximum overlaps ... don't include overlapping worker itself\n        // as the main JS process was also being scheduled during the work and\n        // would have to be subtracted from the estimate anyway\n        return overlaps.reduce(function(max, overlap) {\n            return Math.max(max, overlap.length);\n        }, 0);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-forge/lib/util.js\n");

/***/ })

};
;