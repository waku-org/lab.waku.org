"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/libp2p";
exports.ids = ["vendor-chunks/libp2p"];
exports.modules = {

/***/ "(ssr)/./node_modules/libp2p/dist/src/address-manager/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/address-manager/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAddressManager: () => (/* binding */ DefaultAddressManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/libp2p/dist/src/address-manager/utils.js\");\n\n\n\nconst defaultAddressFilter = (addrs)=>addrs;\n/**\n * If the passed multiaddr contains the passed peer id, remove it\n */ function stripPeerId(ma, peerId) {\n    const observedPeerIdStr = ma.getPeerId();\n    // strip our peer id if it has been passed\n    if (observedPeerIdStr != null) {\n        const observedPeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(observedPeerIdStr);\n        // use same encoding for comparison\n        if (observedPeerId.equals(peerId)) {\n            ma = ma.decapsulate((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(`/p2p/${peerId.toString()}`));\n        }\n    }\n    return ma;\n}\nclass DefaultAddressManager {\n    /**\n     * Responsible for managing the peer addresses.\n     * Peers can specify their listen and announce addresses.\n     * The listen addresses will be used by the libp2p transports to listen for new connections,\n     * while the announce addresses will be used for the peer addresses' to other peers in the network.\n     */ constructor(components, init = {}){\n        const { listen = [], announce = [] } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(\"libp2p:address-manager\");\n        this.listen = listen.map((ma)=>ma.toString());\n        this.announce = new Set(announce.map((ma)=>ma.toString()));\n        this.observed = new Map();\n        this.announceFilter = init.announceFilter ?? defaultAddressFilter;\n        // this method gets called repeatedly on startup when transports start listening so\n        // debounce it so we don't cause multiple self:peer:update events to be emitted\n        this._updatePeerStoreAddresses = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.debounce)(this._updatePeerStoreAddresses.bind(this), 1000);\n        // update our stored addresses when new transports listen\n        components.events.addEventListener(\"transport:listening\", ()=>{\n            this._updatePeerStoreAddresses();\n        });\n        // update our stored addresses when existing transports stop listening\n        components.events.addEventListener(\"transport:close\", ()=>{\n            this._updatePeerStoreAddresses();\n        });\n    }\n    _updatePeerStoreAddresses() {\n        // if announce addresses have been configured, ensure they make it into our peer\n        // record for things like identify\n        const addrs = this.getAnnounceAddrs().concat(this.components.transportManager.getAddrs()).concat([\n            ...this.observed.entries()\n        ].filter(([_, metadata])=>metadata.confident).map(([str])=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(str))).map((ma)=>{\n            // strip our peer id if it is present\n            if (ma.getPeerId() === this.components.peerId.toString()) {\n                return ma.decapsulate(`/p2p/${this.components.peerId.toString()}`);\n            }\n            return ma;\n        });\n        this.components.peerStore.patch(this.components.peerId, {\n            multiaddrs: addrs\n        }).catch((err)=>{\n            this.log.error(\"error updating addresses\", err);\n        });\n    }\n    /**\n     * Get peer listen multiaddrs\n     */ getListenAddrs() {\n        return Array.from(this.listen).map((a)=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a));\n    }\n    /**\n     * Get peer announcing multiaddrs\n     */ getAnnounceAddrs() {\n        return Array.from(this.announce).map((a)=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a));\n    }\n    /**\n     * Get observed multiaddrs\n     */ getObservedAddrs() {\n        return Array.from(this.observed).map(([a])=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a));\n    }\n    /**\n     * Add peer observed addresses\n     */ addObservedAddr(addr) {\n        addr = stripPeerId(addr, this.components.peerId);\n        const addrString = addr.toString();\n        // do not trigger the change:addresses event if we already know about this address\n        if (this.observed.has(addrString)) {\n            return;\n        }\n        this.observed.set(addrString, {\n            confident: false\n        });\n    }\n    confirmObservedAddr(addr) {\n        addr = stripPeerId(addr, this.components.peerId);\n        const addrString = addr.toString();\n        const metadata = this.observed.get(addrString) ?? {\n            confident: false\n        };\n        const startingConfidence = metadata.confident;\n        this.observed.set(addrString, {\n            confident: true\n        });\n        // only trigger the 'self:peer:update' event if our confidence in an address has changed\n        if (!startingConfidence) {\n            this._updatePeerStoreAddresses();\n        }\n    }\n    removeObservedAddr(addr) {\n        addr = stripPeerId(addr, this.components.peerId);\n        const addrString = addr.toString();\n        this.observed.delete(addrString);\n    }\n    getAddresses() {\n        let addrs = this.getAnnounceAddrs().map((ma)=>ma.toString());\n        if (addrs.length === 0) {\n            // no configured announce addrs, add configured listen addresses\n            addrs = this.components.transportManager.getAddrs().map((ma)=>ma.toString());\n        }\n        // add observed addresses we are confident in\n        addrs = addrs.concat(Array.from(this.observed).filter(([ma, metadata])=>metadata.confident).map(([ma])=>ma));\n        // dedupe multiaddrs\n        const addrSet = new Set(addrs);\n        // Create advertising list\n        return this.announceFilter(Array.from(addrSet).map((str)=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(str))).map((ma)=>{\n            // do not append our peer id to a path multiaddr as it will become invalid\n            if (ma.protos().pop()?.path === true) {\n                return ma;\n            }\n            if (ma.getPeerId() === this.components.peerId.toString()) {\n                return ma;\n            }\n            return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);\n        });\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/address-manager/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/address-manager/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/address-manager/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce)\n/* harmony export */ });\nfunction debounce(func, wait) {\n    let timeout;\n    return function() {\n        const later = function() {\n            timeout = undefined;\n            func();\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2FkZHJlc3MtbWFuYWdlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsU0FBU0MsSUFBSSxFQUFFQyxJQUFJO0lBQy9CLElBQUlDO0lBQ0osT0FBTztRQUNILE1BQU1DLFFBQVE7WUFDVkQsVUFBVUU7WUFDVko7UUFDSjtRQUNBSyxhQUFhSDtRQUNiQSxVQUFVSSxXQUFXSCxPQUFPRjtJQUNoQztBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2FkZHJlc3MtbWFuYWdlci91dGlscy5qcz80NTU3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0KSB7XG4gICAgbGV0IHRpbWVvdXQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICB9O1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJ0aW1lb3V0IiwibGF0ZXIiLCJ1bmRlZmluZWQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/address-manager/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/components.js":
/*!****************************************************!*\
  !*** ./node_modules/libp2p/dist/src/components.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/startable.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/logger */ \"(ssr)/./node_modules/@libp2p/logger/dist/src/index.js\");\n\n\n\nclass DefaultComponents {\n    constructor(init = {}){\n        this.components = {};\n        this._started = false;\n        this.components = {};\n        for (const [key, value] of Object.entries(init)){\n            this.components[key] = value;\n        }\n        if (this.components.logger == null) {\n            this.components.logger = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_0__.defaultLogger)();\n        }\n    }\n    isStarted() {\n        return this._started;\n    }\n    async _invokeStartableMethod(methodName) {\n        await Promise.all(Object.values(this.components).filter((obj)=>(0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.isStartable)(obj)).map(async (startable)=>{\n            await startable[methodName]?.();\n        }));\n    }\n    async beforeStart() {\n        await this._invokeStartableMethod(\"beforeStart\");\n    }\n    async start() {\n        await this._invokeStartableMethod(\"start\");\n        this._started = true;\n    }\n    async afterStart() {\n        await this._invokeStartableMethod(\"afterStart\");\n    }\n    async beforeStop() {\n        await this._invokeStartableMethod(\"beforeStop\");\n    }\n    async stop() {\n        await this._invokeStartableMethod(\"stop\");\n        this._started = false;\n    }\n    async afterStop() {\n        await this._invokeStartableMethod(\"afterStop\");\n    }\n}\nconst OPTIONAL_SERVICES = [\n    \"metrics\",\n    \"connectionProtector\",\n    \"dns\"\n];\nconst NON_SERVICE_PROPERTIES = [\n    \"components\",\n    \"isStarted\",\n    \"beforeStart\",\n    \"start\",\n    \"afterStart\",\n    \"beforeStop\",\n    \"stop\",\n    \"afterStop\",\n    \"then\",\n    \"_invokeStartableMethod\"\n];\nfunction defaultComponents(init = {}) {\n    const components = new DefaultComponents(init);\n    const proxy = new Proxy(components, {\n        get (target, prop, receiver) {\n            if (typeof prop === \"string\" && !NON_SERVICE_PROPERTIES.includes(prop)) {\n                const service = components.components[prop];\n                if (service == null && !OPTIONAL_SERVICES.includes(prop)) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`${prop} not set`, \"ERR_SERVICE_MISSING\");\n                }\n                return service;\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n        set (target, prop, value) {\n            if (typeof prop === \"string\") {\n                components.components[prop] = value;\n            } else {\n                Reflect.set(target, prop, value);\n            }\n            return true;\n        }\n    });\n    // @ts-expect-error component keys are proxied\n    return proxy;\n} //# sourceMappingURL=components.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2NvbXBvbmVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4QztBQUNFO0FBQ0Q7QUFDL0MsTUFBTUc7SUFHRkMsWUFBWUMsT0FBTyxDQUFDLENBQUMsQ0FBRTthQUZ2QkMsYUFBYSxDQUFDO2FBQ2RDLFdBQVc7UUFFUCxJQUFJLENBQUNELFVBQVUsR0FBRyxDQUFDO1FBQ25CLEtBQUssTUFBTSxDQUFDRSxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ04sTUFBTztZQUM3QyxJQUFJLENBQUNDLFVBQVUsQ0FBQ0UsSUFBSSxHQUFHQztRQUMzQjtRQUNBLElBQUksSUFBSSxDQUFDSCxVQUFVLENBQUNNLE1BQU0sSUFBSSxNQUFNO1lBQ2hDLElBQUksQ0FBQ04sVUFBVSxDQUFDTSxNQUFNLEdBQUdWLDZEQUFhQTtRQUMxQztJQUNKO0lBQ0FXLFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQ04sUUFBUTtJQUN4QjtJQUNBLE1BQU1PLHVCQUF1QkMsVUFBVSxFQUFFO1FBQ3JDLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ1AsT0FBT1EsTUFBTSxDQUFDLElBQUksQ0FBQ1osVUFBVSxFQUMxQ2EsTUFBTSxDQUFDQyxDQUFBQSxNQUFPbkIsOERBQVdBLENBQUNtQixNQUMxQkMsR0FBRyxDQUFDLE9BQU9DO1lBQ1osTUFBTUEsU0FBUyxDQUFDUCxXQUFXO1FBQy9CO0lBQ0o7SUFDQSxNQUFNUSxjQUFjO1FBQ2hCLE1BQU0sSUFBSSxDQUFDVCxzQkFBc0IsQ0FBQztJQUN0QztJQUNBLE1BQU1VLFFBQVE7UUFDVixNQUFNLElBQUksQ0FBQ1Ysc0JBQXNCLENBQUM7UUFDbEMsSUFBSSxDQUFDUCxRQUFRLEdBQUc7SUFDcEI7SUFDQSxNQUFNa0IsYUFBYTtRQUNmLE1BQU0sSUFBSSxDQUFDWCxzQkFBc0IsQ0FBQztJQUN0QztJQUNBLE1BQU1ZLGFBQWE7UUFDZixNQUFNLElBQUksQ0FBQ1osc0JBQXNCLENBQUM7SUFDdEM7SUFDQSxNQUFNYSxPQUFPO1FBQ1QsTUFBTSxJQUFJLENBQUNiLHNCQUFzQixDQUFDO1FBQ2xDLElBQUksQ0FBQ1AsUUFBUSxHQUFHO0lBQ3BCO0lBQ0EsTUFBTXFCLFlBQVk7UUFDZCxNQUFNLElBQUksQ0FBQ2Qsc0JBQXNCLENBQUM7SUFDdEM7QUFDSjtBQUNBLE1BQU1lLG9CQUFvQjtJQUN0QjtJQUNBO0lBQ0E7Q0FDSDtBQUNELE1BQU1DLHlCQUF5QjtJQUMzQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ00sU0FBU0Msa0JBQWtCMUIsT0FBTyxDQUFDLENBQUM7SUFDdkMsTUFBTUMsYUFBYSxJQUFJSCxrQkFBa0JFO0lBQ3pDLE1BQU0yQixRQUFRLElBQUlDLE1BQU0zQixZQUFZO1FBQ2hDNEIsS0FBSUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFFBQVE7WUFDdEIsSUFBSSxPQUFPRCxTQUFTLFlBQVksQ0FBQ04sdUJBQXVCUSxRQUFRLENBQUNGLE9BQU87Z0JBQ3BFLE1BQU1HLFVBQVVqQyxXQUFXQSxVQUFVLENBQUM4QixLQUFLO2dCQUMzQyxJQUFJRyxXQUFXLFFBQVEsQ0FBQ1Ysa0JBQWtCUyxRQUFRLENBQUNGLE9BQU87b0JBQ3RELE1BQU0sSUFBSXBDLHdEQUFTQSxDQUFDLENBQUMsRUFBRW9DLEtBQUssUUFBUSxDQUFDLEVBQUU7Z0JBQzNDO2dCQUNBLE9BQU9HO1lBQ1g7WUFDQSxPQUFPQyxRQUFRTixHQUFHLENBQUNDLFFBQVFDLE1BQU1DO1FBQ3JDO1FBQ0FJLEtBQUlOLE1BQU0sRUFBRUMsSUFBSSxFQUFFM0IsS0FBSztZQUNuQixJQUFJLE9BQU8yQixTQUFTLFVBQVU7Z0JBQzFCOUIsV0FBV0EsVUFBVSxDQUFDOEIsS0FBSyxHQUFHM0I7WUFDbEMsT0FDSztnQkFDRCtCLFFBQVFDLEdBQUcsQ0FBQ04sUUFBUUMsTUFBTTNCO1lBQzlCO1lBQ0EsT0FBTztRQUNYO0lBQ0o7SUFDQSw4Q0FBOEM7SUFDOUMsT0FBT3VCO0FBQ1gsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9saWJwMnAvZGlzdC9zcmMvY29tcG9uZW50cy5qcz9mZDRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvZGVFcnJvciB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmltcG9ydCB7IGlzU3RhcnRhYmxlIH0gZnJvbSAnQGxpYnAycC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgZGVmYXVsdExvZ2dlciB9IGZyb20gJ0BsaWJwMnAvbG9nZ2VyJztcbmNsYXNzIERlZmF1bHRDb21wb25lbnRzIHtcbiAgICBjb21wb25lbnRzID0ge307XG4gICAgX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3Rvcihpbml0ID0ge30pIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGluaXQpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudHMubG9nZ2VyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5sb2dnZXIgPSBkZWZhdWx0TG9nZ2VyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXNTdGFydGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcbiAgICB9XG4gICAgYXN5bmMgX2ludm9rZVN0YXJ0YWJsZU1ldGhvZChtZXRob2ROYW1lKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKE9iamVjdC52YWx1ZXModGhpcy5jb21wb25lbnRzKVxuICAgICAgICAgICAgLmZpbHRlcihvYmogPT4gaXNTdGFydGFibGUob2JqKSlcbiAgICAgICAgICAgIC5tYXAoYXN5bmMgKHN0YXJ0YWJsZSkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgc3RhcnRhYmxlW21ldGhvZE5hbWVdPy4oKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBhc3luYyBiZWZvcmVTdGFydCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5faW52b2tlU3RhcnRhYmxlTWV0aG9kKCdiZWZvcmVTdGFydCcpO1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5faW52b2tlU3RhcnRhYmxlTWV0aG9kKCdzdGFydCcpO1xuICAgICAgICB0aGlzLl9zdGFydGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgYWZ0ZXJTdGFydCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5faW52b2tlU3RhcnRhYmxlTWV0aG9kKCdhZnRlclN0YXJ0Jyk7XG4gICAgfVxuICAgIGFzeW5jIGJlZm9yZVN0b3AoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2ludm9rZVN0YXJ0YWJsZU1ldGhvZCgnYmVmb3JlU3RvcCcpO1xuICAgIH1cbiAgICBhc3luYyBzdG9wKCkge1xuICAgICAgICBhd2FpdCB0aGlzLl9pbnZva2VTdGFydGFibGVNZXRob2QoJ3N0b3AnKTtcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBhZnRlclN0b3AoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX2ludm9rZVN0YXJ0YWJsZU1ldGhvZCgnYWZ0ZXJTdG9wJyk7XG4gICAgfVxufVxuY29uc3QgT1BUSU9OQUxfU0VSVklDRVMgPSBbXG4gICAgJ21ldHJpY3MnLFxuICAgICdjb25uZWN0aW9uUHJvdGVjdG9yJyxcbiAgICAnZG5zJ1xuXTtcbmNvbnN0IE5PTl9TRVJWSUNFX1BST1BFUlRJRVMgPSBbXG4gICAgJ2NvbXBvbmVudHMnLFxuICAgICdpc1N0YXJ0ZWQnLFxuICAgICdiZWZvcmVTdGFydCcsXG4gICAgJ3N0YXJ0JyxcbiAgICAnYWZ0ZXJTdGFydCcsXG4gICAgJ2JlZm9yZVN0b3AnLFxuICAgICdzdG9wJyxcbiAgICAnYWZ0ZXJTdG9wJyxcbiAgICAndGhlbicsXG4gICAgJ19pbnZva2VTdGFydGFibGVNZXRob2QnXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb21wb25lbnRzKGluaXQgPSB7fSkge1xuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBuZXcgRGVmYXVsdENvbXBvbmVudHMoaW5pdCk7XG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoY29tcG9uZW50cywge1xuICAgICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJyAmJiAhTk9OX1NFUlZJQ0VfUFJPUEVSVElFUy5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBjb21wb25lbnRzLmNvbXBvbmVudHNbcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2UgPT0gbnVsbCAmJiAhT1BUSU9OQUxfU0VSVklDRVMuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihgJHtwcm9wfSBub3Qgc2V0YCwgJ0VSUl9TRVJWSUNFX01JU1NJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50cy5jb21wb25lbnRzW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBjb21wb25lbnQga2V5cyBhcmUgcHJveGllZFxuICAgIHJldHVybiBwcm94eTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudHMuanMubWFwIl0sIm5hbWVzIjpbIkNvZGVFcnJvciIsImlzU3RhcnRhYmxlIiwiZGVmYXVsdExvZ2dlciIsIkRlZmF1bHRDb21wb25lbnRzIiwiY29uc3RydWN0b3IiLCJpbml0IiwiY29tcG9uZW50cyIsIl9zdGFydGVkIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwibG9nZ2VyIiwiaXNTdGFydGVkIiwiX2ludm9rZVN0YXJ0YWJsZU1ldGhvZCIsIm1ldGhvZE5hbWUiLCJQcm9taXNlIiwiYWxsIiwidmFsdWVzIiwiZmlsdGVyIiwib2JqIiwibWFwIiwic3RhcnRhYmxlIiwiYmVmb3JlU3RhcnQiLCJzdGFydCIsImFmdGVyU3RhcnQiLCJiZWZvcmVTdG9wIiwic3RvcCIsImFmdGVyU3RvcCIsIk9QVElPTkFMX1NFUlZJQ0VTIiwiTk9OX1NFUlZJQ0VfUFJPUEVSVElFUyIsImRlZmF1bHRDb21wb25lbnRzIiwicHJveHkiLCJQcm94eSIsImdldCIsInRhcmdldCIsInByb3AiLCJyZWNlaXZlciIsImluY2x1ZGVzIiwic2VydmljZSIsIlJlZmxlY3QiLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/components.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/config.js":
/*!************************************************!*\
  !*** ./node_modules/libp2p/dist/src/config.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/utils/address-sort */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/address-sort.js\");\n/* harmony import */ var _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr/resolvers */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js\");\n/* harmony import */ var merge_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! merge-options */ \"(ssr)/./node_modules/merge-options/index.mjs\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\n\n\nconst DefaultConfig = {\n    addresses: {\n        listen: [],\n        announce: [],\n        noAnnounce: [],\n        announceFilter: (multiaddrs)=>multiaddrs\n    },\n    connectionManager: {\n        resolvers: {\n            dnsaddr: _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_0__.dnsaddrResolver\n        },\n        addressSorter: _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_2__.defaultAddressSort\n    },\n    transportManager: {\n        faultTolerance: _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.FaultTolerance.FATAL_ALL\n    }\n};\nasync function validateConfig(opts) {\n    const resultingOptions = (0,merge_options__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(DefaultConfig, opts);\n    if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_5__.messages.ERR_PROTECTOR_REQUIRED, _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_PROTECTOR_REQUIRED);\n    }\n    if (!(await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_6__.peerIdFromKeys)(resultingOptions.privateKey.public.bytes, resultingOptions.privateKey.bytes)).equals(resultingOptions.peerId)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(\"Private key doesn't match peer id\", _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_INVALID_KEY);\n    }\n    return resultingOptions;\n} //# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUE4RDtBQUNiO0FBQ2U7QUFDSTtBQUMzQjtBQUNLO0FBQzlDLE1BQU1RLGdCQUFnQjtJQUNsQkMsV0FBVztRQUNQQyxRQUFRLEVBQUU7UUFDVkMsVUFBVSxFQUFFO1FBQ1pDLFlBQVksRUFBRTtRQUNkQyxnQkFBZ0IsQ0FBQ0MsYUFBZUE7SUFDcEM7SUFDQUMsbUJBQW1CO1FBQ2ZDLFdBQVc7WUFDUEMsU0FBU2IsOEVBQWVBO1FBQzVCO1FBQ0FjLGVBQWVmLDBFQUFrQkE7SUFDckM7SUFDQWdCLGtCQUFrQjtRQUNkQyxnQkFBZ0JuQiw2REFBY0EsQ0FBQ29CLFNBQVM7SUFDNUM7QUFDSjtBQUNPLGVBQWVDLGVBQWVDLElBQUk7SUFDckMsTUFBTUMsbUJBQW1CbkIseURBQVlBLENBQUNHLGVBQWVlO0lBQ3JELElBQUlDLGlCQUFpQkMsbUJBQW1CLEtBQUssUUFBUUMsV0FBV0MsT0FBTyxFQUFFQyxLQUFLQyxxQkFBcUIsTUFBTTtRQUNyRyxNQUFNLElBQUk3Qix3REFBU0EsQ0FBQ08sZ0RBQVFBLENBQUN1QixzQkFBc0IsRUFBRXhCLDZDQUFLQSxDQUFDd0Isc0JBQXNCO0lBQ3JGO0lBQ0EsSUFBSSxDQUFDLENBQUMsTUFBTTVCLCtEQUFjQSxDQUFDc0IsaUJBQWlCTyxVQUFVLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFVCxpQkFBaUJPLFVBQVUsQ0FBQ0UsS0FBSyxHQUFHQyxNQUFNLENBQUNWLGlCQUFpQlcsTUFBTSxHQUFHO1FBQ3RJLE1BQU0sSUFBSW5DLHdEQUFTQSxDQUFDLHFDQUFzQ00sNkNBQUtBLENBQUM4QixlQUFlO0lBQ25GO0lBQ0EsT0FBT1o7QUFDWCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL2xpYnAycC9kaXN0L3NyYy9jb25maWcuanM/MTM3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlRXJyb3IsIEZhdWx0VG9sZXJhbmNlIH0gZnJvbSAnQGxpYnAycC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcGVlcklkRnJvbUtleXMgfSBmcm9tICdAbGlicDJwL3BlZXItaWQnO1xuaW1wb3J0IHsgZGVmYXVsdEFkZHJlc3NTb3J0IH0gZnJvbSAnQGxpYnAycC91dGlscy9hZGRyZXNzLXNvcnQnO1xuaW1wb3J0IHsgZG5zYWRkclJlc29sdmVyIH0gZnJvbSAnQG11bHRpZm9ybWF0cy9tdWx0aWFkZHIvcmVzb2x2ZXJzJztcbmltcG9ydCBtZXJnZU9wdGlvbnMgZnJvbSAnbWVyZ2Utb3B0aW9ucyc7XG5pbXBvcnQgeyBjb2RlcywgbWVzc2FnZXMgfSBmcm9tICcuL2Vycm9ycy5qcyc7XG5jb25zdCBEZWZhdWx0Q29uZmlnID0ge1xuICAgIGFkZHJlc3Nlczoge1xuICAgICAgICBsaXN0ZW46IFtdLFxuICAgICAgICBhbm5vdW5jZTogW10sXG4gICAgICAgIG5vQW5ub3VuY2U6IFtdLFxuICAgICAgICBhbm5vdW5jZUZpbHRlcjogKG11bHRpYWRkcnMpID0+IG11bHRpYWRkcnNcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25NYW5hZ2VyOiB7XG4gICAgICAgIHJlc29sdmVyczoge1xuICAgICAgICAgICAgZG5zYWRkcjogZG5zYWRkclJlc29sdmVyXG4gICAgICAgIH0sXG4gICAgICAgIGFkZHJlc3NTb3J0ZXI6IGRlZmF1bHRBZGRyZXNzU29ydFxuICAgIH0sXG4gICAgdHJhbnNwb3J0TWFuYWdlcjoge1xuICAgICAgICBmYXVsdFRvbGVyYW5jZTogRmF1bHRUb2xlcmFuY2UuRkFUQUxfQUxMXG4gICAgfVxufTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZyhvcHRzKSB7XG4gICAgY29uc3QgcmVzdWx0aW5nT3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhEZWZhdWx0Q29uZmlnLCBvcHRzKTtcbiAgICBpZiAocmVzdWx0aW5nT3B0aW9ucy5jb25uZWN0aW9uUHJvdGVjdG9yID09PSBudWxsICYmIGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5MSUJQMlBfRk9SQ0VfUE5FVCAhPSBudWxsKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihtZXNzYWdlcy5FUlJfUFJPVEVDVE9SX1JFUVVJUkVELCBjb2Rlcy5FUlJfUFJPVEVDVE9SX1JFUVVJUkVEKTtcbiAgICB9XG4gICAgaWYgKCEoYXdhaXQgcGVlcklkRnJvbUtleXMocmVzdWx0aW5nT3B0aW9ucy5wcml2YXRlS2V5LnB1YmxpYy5ieXRlcywgcmVzdWx0aW5nT3B0aW9ucy5wcml2YXRlS2V5LmJ5dGVzKSkuZXF1YWxzKHJlc3VsdGluZ09wdGlvbnMucGVlcklkKSkge1xuICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdQcml2YXRlIGtleSBkb2VzblxcJ3QgbWF0Y2ggcGVlciBpZCcsIGNvZGVzLkVSUl9JTlZBTElEX0tFWSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRpbmdPcHRpb25zO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6WyJDb2RlRXJyb3IiLCJGYXVsdFRvbGVyYW5jZSIsInBlZXJJZEZyb21LZXlzIiwiZGVmYXVsdEFkZHJlc3NTb3J0IiwiZG5zYWRkclJlc29sdmVyIiwibWVyZ2VPcHRpb25zIiwiY29kZXMiLCJtZXNzYWdlcyIsIkRlZmF1bHRDb25maWciLCJhZGRyZXNzZXMiLCJsaXN0ZW4iLCJhbm5vdW5jZSIsIm5vQW5ub3VuY2UiLCJhbm5vdW5jZUZpbHRlciIsIm11bHRpYWRkcnMiLCJjb25uZWN0aW9uTWFuYWdlciIsInJlc29sdmVycyIsImRuc2FkZHIiLCJhZGRyZXNzU29ydGVyIiwidHJhbnNwb3J0TWFuYWdlciIsImZhdWx0VG9sZXJhbmNlIiwiRkFUQUxfQUxMIiwidmFsaWRhdGVDb25maWciLCJvcHRzIiwicmVzdWx0aW5nT3B0aW9ucyIsImNvbm5lY3Rpb25Qcm90ZWN0b3IiLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImVudiIsIkxJQlAyUF9GT1JDRV9QTkVUIiwiRVJSX1BST1RFQ1RPUl9SRVFVSVJFRCIsInByaXZhdGVLZXkiLCJwdWJsaWMiLCJieXRlcyIsImVxdWFscyIsInBlZXJJZCIsIkVSUl9JTlZBTElEX0tFWSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/config/connection-gater.js":
/*!*****************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/config/connection-gater.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectionGater: () => (/* binding */ connectionGater)\n/* harmony export */ });\n/**\n * Returns a default connection gater implementation that allows everything\n */ function connectionGater(gater = {}) {\n    return {\n        denyDialPeer: async ()=>false,\n        denyDialMultiaddr: async ()=>false,\n        denyInboundConnection: async ()=>false,\n        denyOutboundConnection: async ()=>false,\n        denyInboundEncryptedConnection: async ()=>false,\n        denyOutboundEncryptedConnection: async ()=>false,\n        denyInboundUpgradedConnection: async ()=>false,\n        denyOutboundUpgradedConnection: async ()=>false,\n        filterMultiaddrForPeer: async ()=>true,\n        ...gater\n    };\n} //# sourceMappingURL=connection-gater.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2NvbmZpZy9jb25uZWN0aW9uLWdhdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLFNBQVNBLGdCQUFnQkMsUUFBUSxDQUFDLENBQUM7SUFDdEMsT0FBTztRQUNIQyxjQUFjLFVBQVk7UUFDMUJDLG1CQUFtQixVQUFZO1FBQy9CQyx1QkFBdUIsVUFBWTtRQUNuQ0Msd0JBQXdCLFVBQVk7UUFDcENDLGdDQUFnQyxVQUFZO1FBQzVDQyxpQ0FBaUMsVUFBWTtRQUM3Q0MsK0JBQStCLFVBQVk7UUFDM0NDLGdDQUFnQyxVQUFZO1FBQzVDQyx3QkFBd0IsVUFBWTtRQUNwQyxHQUFHVCxLQUFLO0lBQ1o7QUFDSixFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL2xpYnAycC9kaXN0L3NyYy9jb25maWcvY29ubmVjdGlvbi1nYXRlci5qcz84MWVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJucyBhIGRlZmF1bHQgY29ubmVjdGlvbiBnYXRlciBpbXBsZW1lbnRhdGlvbiB0aGF0IGFsbG93cyBldmVyeXRoaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0aW9uR2F0ZXIoZ2F0ZXIgPSB7fSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbnlEaWFsUGVlcjogYXN5bmMgKCkgPT4gZmFsc2UsXG4gICAgICAgIGRlbnlEaWFsTXVsdGlhZGRyOiBhc3luYyAoKSA9PiBmYWxzZSxcbiAgICAgICAgZGVueUluYm91bmRDb25uZWN0aW9uOiBhc3luYyAoKSA9PiBmYWxzZSxcbiAgICAgICAgZGVueU91dGJvdW5kQ29ubmVjdGlvbjogYXN5bmMgKCkgPT4gZmFsc2UsXG4gICAgICAgIGRlbnlJbmJvdW5kRW5jcnlwdGVkQ29ubmVjdGlvbjogYXN5bmMgKCkgPT4gZmFsc2UsXG4gICAgICAgIGRlbnlPdXRib3VuZEVuY3J5cHRlZENvbm5lY3Rpb246IGFzeW5jICgpID0+IGZhbHNlLFxuICAgICAgICBkZW55SW5ib3VuZFVwZ3JhZGVkQ29ubmVjdGlvbjogYXN5bmMgKCkgPT4gZmFsc2UsXG4gICAgICAgIGRlbnlPdXRib3VuZFVwZ3JhZGVkQ29ubmVjdGlvbjogYXN5bmMgKCkgPT4gZmFsc2UsXG4gICAgICAgIGZpbHRlck11bHRpYWRkckZvclBlZXI6IGFzeW5jICgpID0+IHRydWUsXG4gICAgICAgIC4uLmdhdGVyXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3Rpb24tZ2F0ZXIuanMubWFwIl0sIm5hbWVzIjpbImNvbm5lY3Rpb25HYXRlciIsImdhdGVyIiwiZGVueURpYWxQZWVyIiwiZGVueURpYWxNdWx0aWFkZHIiLCJkZW55SW5ib3VuZENvbm5lY3Rpb24iLCJkZW55T3V0Ym91bmRDb25uZWN0aW9uIiwiZGVueUluYm91bmRFbmNyeXB0ZWRDb25uZWN0aW9uIiwiZGVueU91dGJvdW5kRW5jcnlwdGVkQ29ubmVjdGlvbiIsImRlbnlJbmJvdW5kVXBncmFkZWRDb25uZWN0aW9uIiwiZGVueU91dGJvdW5kVXBncmFkZWRDb25uZWN0aW9uIiwiZmlsdGVyTXVsdGlhZGRyRm9yUGVlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/config/connection-gater.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/auto-dial.js":
/*!**********************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/auto-dial.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoDial: () => (/* binding */ AutoDial)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/utils/peer-queue */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/peer-queue.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n\n\n\n\nconst defaultOptions = {\n    minConnections: _constants_js__WEBPACK_IMPORTED_MODULE_1__.MIN_CONNECTIONS,\n    maxQueueLength: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_MAX_QUEUE_LENGTH,\n    autoDialConcurrency: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_CONCURRENCY,\n    autoDialPriority: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_PRIORITY,\n    autoDialInterval: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_INTERVAL,\n    autoDialPeerRetryThreshold: _constants_js__WEBPACK_IMPORTED_MODULE_1__.AUTO_DIAL_PEER_RETRY_THRESHOLD,\n    autoDialDiscoveredPeersDebounce: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE\n};\nclass AutoDial {\n    /**\n     * Proactively tries to connect to known peers stored in the PeerStore.\n     * It will keep the number of connections below the upper limit and sort\n     * the peers to connect based on whether we know their keys and protocols.\n     */ constructor(components, init){\n        this.connectionManager = components.connectionManager;\n        this.peerStore = components.peerStore;\n        this.minConnections = init.minConnections ?? defaultOptions.minConnections;\n        this.autoDialPriority = init.autoDialPriority ?? defaultOptions.autoDialPriority;\n        this.autoDialIntervalMs = init.autoDialInterval ?? defaultOptions.autoDialInterval;\n        this.autoDialMaxQueueLength = init.maxQueueLength ?? defaultOptions.maxQueueLength;\n        this.autoDialPeerRetryThresholdMs = init.autoDialPeerRetryThreshold ?? defaultOptions.autoDialPeerRetryThreshold;\n        this.autoDialDiscoveredPeersDebounce = init.autoDialDiscoveredPeersDebounce ?? defaultOptions.autoDialDiscoveredPeersDebounce;\n        this.log = components.logger.forComponent(\"libp2p:connection-manager:auto-dial\");\n        this.started = false;\n        this.running = false;\n        this.queue = new _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_3__.PeerQueue({\n            concurrency: init.autoDialConcurrency ?? defaultOptions.autoDialConcurrency,\n            metricName: \"libp2p_autodial_queue\",\n            metrics: components.metrics\n        });\n        this.queue.addEventListener(\"error\", (evt)=>{\n            this.log.error(\"error during auto-dial\", evt.detail);\n        });\n        // check the min connection limit whenever a peer disconnects\n        components.events.addEventListener(\"connection:close\", ()=>{\n            this.autoDial().catch((err)=>{\n                this.log.error(err);\n            });\n        });\n        // sometimes peers are discovered in quick succession so add a small\n        // debounce to ensure all eligible peers are autodialed\n        let debounce;\n        // when new peers are discovered, dial them if we don't have\n        // enough connections\n        components.events.addEventListener(\"peer:discovery\", ()=>{\n            clearTimeout(debounce);\n            debounce = setTimeout(()=>{\n                this.autoDial().catch((err)=>{\n                    this.log.error(err);\n                });\n            }, this.autoDialDiscoveredPeersDebounce);\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    afterStart() {\n        this.autoDial().catch((err)=>{\n            this.log.error(\"error while autodialing\", err);\n        });\n    }\n    stop() {\n        // clear the queue\n        this.queue.clear();\n        clearTimeout(this.autoDialInterval);\n        this.started = false;\n        this.running = false;\n    }\n    async autoDial() {\n        if (!this.started || this.running) {\n            return;\n        }\n        const connections = this.connectionManager.getConnectionsMap();\n        const numConnections = connections.size;\n        // already have enough connections\n        if (numConnections >= this.minConnections) {\n            if (this.minConnections > 0) {\n                this.log.trace(\"have enough connections %d/%d\", numConnections, this.minConnections);\n            }\n            // no need to schedule next autodial as it will be run when on\n            // connection:close event\n            return;\n        }\n        if (this.queue.size > this.autoDialMaxQueueLength) {\n            this.log(\"not enough connections %d/%d but auto dial queue is full\", numConnections, this.minConnections);\n            this.sheduleNextAutodial();\n            return;\n        }\n        this.running = true;\n        this.log(\"not enough connections %d/%d - will dial peers to increase the number of connections\", numConnections, this.minConnections);\n        const dialQueue = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__.PeerSet(// @ts-expect-error boolean filter removes falsy peer IDs\n        this.connectionManager.getDialQueue().map((queue)=>queue.peerId).filter(Boolean));\n        // sort peers on whether we know protocols or public keys for them\n        const peers = await this.peerStore.all({\n            filters: [\n                // remove some peers\n                (peer)=>{\n                    // remove peers without addresses\n                    if (peer.addresses.length === 0) {\n                        this.log.trace(\"not autodialing %p because they have no addresses\", peer.id);\n                        return false;\n                    }\n                    // remove peers we are already connected to\n                    if (connections.has(peer.id)) {\n                        this.log.trace(\"not autodialing %p because they are already connected\", peer.id);\n                        return false;\n                    }\n                    // remove peers we are already dialling\n                    if (dialQueue.has(peer.id)) {\n                        this.log.trace(\"not autodialing %p because they are already being dialed\", peer.id);\n                        return false;\n                    }\n                    // remove peers already in the autodial queue\n                    if (this.queue.has(peer.id)) {\n                        this.log.trace(\"not autodialing %p because they are already being autodialed\", peer.id);\n                        return false;\n                    }\n                    return true;\n                }\n            ]\n        });\n        // shuffle the peers - this is so peers with the same tag values will be\n        // dialled in a different order each time\n        const shuffledPeers = peers.sort(()=>Math.random() > 0.5 ? 1 : -1);\n        // sort shuffled peers by tag value\n        const peerValues = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__.PeerMap();\n        for (const peer of shuffledPeers){\n            if (peerValues.has(peer.id)) {\n                continue;\n            }\n            // sum all tag values\n            peerValues.set(peer.id, [\n                ...peer.tags.values()\n            ].reduce((acc, curr)=>{\n                return acc + curr.value;\n            }, 0));\n        }\n        // sort by value, highest to lowest\n        const sortedPeers = shuffledPeers.sort((a, b)=>{\n            const peerAValue = peerValues.get(a.id) ?? 0;\n            const peerBValue = peerValues.get(b.id) ?? 0;\n            if (peerAValue > peerBValue) {\n                return -1;\n            }\n            if (peerAValue < peerBValue) {\n                return 1;\n            }\n            return 0;\n        });\n        const peersThatHaveNotFailed = sortedPeers.filter((peer)=>{\n            const lastDialFailure = peer.metadata.get(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LAST_DIAL_FAILURE_KEY);\n            if (lastDialFailure == null) {\n                return true;\n            }\n            const lastDialFailureTimestamp = parseInt((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(lastDialFailure));\n            if (isNaN(lastDialFailureTimestamp)) {\n                return true;\n            }\n            // only dial if the time since the last failure is above the retry threshold\n            return Date.now() - lastDialFailureTimestamp > this.autoDialPeerRetryThresholdMs;\n        });\n        this.log(\"selected %d/%d peers to dial\", peersThatHaveNotFailed.length, peers.length);\n        for (const peer of peersThatHaveNotFailed){\n            this.queue.add(async ()=>{\n                const numConnections = this.connectionManager.getConnectionsMap().size;\n                // Check to see if we still need to auto dial\n                if (numConnections >= this.minConnections) {\n                    this.log(\"got enough connections now %d/%d\", numConnections, this.minConnections);\n                    this.queue.clear();\n                    return;\n                }\n                this.log(\"connecting to a peerStore stored peer %p\", peer.id);\n                await this.connectionManager.openConnection(peer.id, {\n                    priority: this.autoDialPriority\n                });\n            }, {\n                peerId: peer.id\n            }).catch((err)=>{\n                this.log.error(\"could not connect to peerStore stored peer\", err);\n            });\n        }\n        this.running = false;\n        this.sheduleNextAutodial();\n    }\n    sheduleNextAutodial() {\n        if (!this.started) {\n            return;\n        }\n        this.autoDialInterval = setTimeout(()=>{\n            this.autoDial().catch((err)=>{\n                this.log.error(\"error while autodialing\", err);\n            });\n        }, this.autoDialIntervalMs);\n    }\n} //# sourceMappingURL=auto-dial.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/auto-dial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js":
/*!******************************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionPruner: () => (/* binding */ ConnectionPruner)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.js\");\n\n\nconst defaultOptions = {\n    maxConnections: _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_CONNECTIONS,\n    allow: []\n};\n/**\n * If we go over the max connections limit, choose some connections to close\n */ class ConnectionPruner {\n    constructor(components, init = {}){\n        this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections;\n        this.allow = init.allow ?? defaultOptions.allow;\n        this.connectionManager = components.connectionManager;\n        this.peerStore = components.peerStore;\n        this.events = components.events;\n        this.log = components.logger.forComponent(\"libp2p:connection-manager:connection-pruner\");\n        // check the max connection limit whenever a peer connects\n        components.events.addEventListener(\"connection:open\", ()=>{\n            this.maybePruneConnections().catch((err)=>{\n                this.log.error(err);\n            });\n        });\n    }\n    /**\n     * If we have more connections than our maximum, select some excess connections\n     * to prune based on peer value\n     */ async maybePruneConnections() {\n        const connections = this.connectionManager.getConnections();\n        const numConnections = connections.length;\n        const toPrune = Math.max(numConnections - this.maxConnections, 0);\n        this.log(\"checking max connections limit %d/%d\", numConnections, this.maxConnections);\n        if (numConnections <= this.maxConnections) {\n            return;\n        }\n        this.log(\"max connections limit exceeded %d/%d, pruning %d connection(s)\", numConnections, this.maxConnections, toPrune);\n        const peerValues = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_1__.PeerMap();\n        // work out peer values\n        for (const connection of connections){\n            const remotePeer = connection.remotePeer;\n            if (peerValues.has(remotePeer)) {\n                continue;\n            }\n            peerValues.set(remotePeer, 0);\n            try {\n                const peer = await this.peerStore.get(remotePeer);\n                // sum all tag values\n                peerValues.set(remotePeer, [\n                    ...peer.tags.values()\n                ].reduce((acc, curr)=>{\n                    return acc + curr.value;\n                }, 0));\n            } catch (err) {\n                if (err.code !== \"ERR_NOT_FOUND\") {\n                    this.log.error(\"error loading peer tags\", err);\n                }\n            }\n        }\n        // sort by value, lowest to highest\n        const sortedConnections = connections.sort((a, b)=>{\n            const peerAValue = peerValues.get(a.remotePeer) ?? 0;\n            const peerBValue = peerValues.get(b.remotePeer) ?? 0;\n            if (peerAValue > peerBValue) {\n                return 1;\n            }\n            if (peerAValue < peerBValue) {\n                return -1;\n            }\n            // if the peers have an equal tag value then we want to close short-lived connections first\n            const connectionALifespan = a.timeline.open;\n            const connectionBLifespan = b.timeline.open;\n            if (connectionALifespan < connectionBLifespan) {\n                return 1;\n            }\n            if (connectionALifespan > connectionBLifespan) {\n                return -1;\n            }\n            return 0;\n        });\n        // close some connections\n        const toClose = [];\n        for (const connection of sortedConnections){\n            this.log(\"too many connections open - closing a connection to %p\", connection.remotePeer);\n            // check allow list\n            const connectionInAllowList = this.allow.some((ma)=>{\n                return connection.remoteAddr.toString().startsWith(ma.toString());\n            });\n            // Connections in the allow list should be excluded from pruning\n            if (!connectionInAllowList) {\n                toClose.push(connection);\n            }\n            if (toClose.length === toPrune) {\n                break;\n            }\n        }\n        // close connections\n        await Promise.all(toClose.map(async (connection)=>{\n            try {\n                await connection.close();\n            } catch (err) {\n                this.log.error(err);\n            }\n        }));\n        // despatch prune event\n        this.events.safeDispatchEvent(\"connection:prune\", {\n            detail: toClose\n        });\n    }\n} //# sourceMappingURL=connection-pruner.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_DIAL_CONCURRENCY: () => (/* binding */ AUTO_DIAL_CONCURRENCY),\n/* harmony export */   AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE: () => (/* binding */ AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE),\n/* harmony export */   AUTO_DIAL_INTERVAL: () => (/* binding */ AUTO_DIAL_INTERVAL),\n/* harmony export */   AUTO_DIAL_MAX_QUEUE_LENGTH: () => (/* binding */ AUTO_DIAL_MAX_QUEUE_LENGTH),\n/* harmony export */   AUTO_DIAL_PRIORITY: () => (/* binding */ AUTO_DIAL_PRIORITY),\n/* harmony export */   DIAL_TIMEOUT: () => (/* binding */ DIAL_TIMEOUT),\n/* harmony export */   INBOUND_CONNECTION_THRESHOLD: () => (/* binding */ INBOUND_CONNECTION_THRESHOLD),\n/* harmony export */   INBOUND_UPGRADE_TIMEOUT: () => (/* binding */ INBOUND_UPGRADE_TIMEOUT),\n/* harmony export */   LAST_DIAL_FAILURE_KEY: () => (/* binding */ LAST_DIAL_FAILURE_KEY),\n/* harmony export */   MAX_DIAL_QUEUE_LENGTH: () => (/* binding */ MAX_DIAL_QUEUE_LENGTH),\n/* harmony export */   MAX_INCOMING_PENDING_CONNECTIONS: () => (/* binding */ MAX_INCOMING_PENDING_CONNECTIONS),\n/* harmony export */   MAX_PEER_ADDRS_TO_DIAL: () => (/* binding */ MAX_PEER_ADDRS_TO_DIAL)\n/* harmony export */ });\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#dialTimeout\n */ const DIAL_TIMEOUT = 5e3;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundUpgradeTimeout\n */ const INBOUND_UPGRADE_TIMEOUT = 2e3;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxPeerAddrsToDial\n */ const MAX_PEER_ADDRS_TO_DIAL = 25;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialInterval\n */ const AUTO_DIAL_INTERVAL = 5000;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialConcurrency\n */ const AUTO_DIAL_CONCURRENCY = 25;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialPriority\n */ const AUTO_DIAL_PRIORITY = 0;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialMaxQueueLength\n */ const AUTO_DIAL_MAX_QUEUE_LENGTH = 100;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/libp2p.index.unknown.ConnectionManagerInit.html#autoDialDiscoveredPeersDebounce\n */ const AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE = 10;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundConnectionThreshold\n */ const INBOUND_CONNECTION_THRESHOLD = 5;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxIncomingPendingConnections\n */ const MAX_INCOMING_PENDING_CONNECTIONS = 10;\n/**\n * Store as part of the peer store metadata for a given peer, the value for this\n * key is a timestamp of the last time a dial attempted failed with the relevant\n * peer stored as a string.\n *\n * Used to insure we do not endlessly try to auto dial peers we have recently\n * failed to dial.\n */ const LAST_DIAL_FAILURE_KEY = \"last-dial-failure\";\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxDialQueueLength\n */ const MAX_DIAL_QUEUE_LENGTH = 500; //# sourceMappingURL=constants.defaults.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2Nvbm5lY3Rpb24tbWFuYWdlci9jb25zdGFudHMuZGVmYXVsdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDTSxNQUFNQSxlQUFlLElBQUk7QUFDaEM7O0NBRUMsR0FDTSxNQUFNQywwQkFBMEIsSUFBSTtBQUMzQzs7Q0FFQyxHQUNNLE1BQU1DLHlCQUF5QixHQUFHO0FBQ3pDOztDQUVDLEdBQ00sTUFBTUMscUJBQXFCLEtBQUs7QUFDdkM7O0NBRUMsR0FDTSxNQUFNQyx3QkFBd0IsR0FBRztBQUN4Qzs7Q0FFQyxHQUNNLE1BQU1DLHFCQUFxQixFQUFFO0FBQ3BDOztDQUVDLEdBQ00sTUFBTUMsNkJBQTZCLElBQUk7QUFDOUM7O0NBRUMsR0FDTSxNQUFNQyxzQ0FBc0MsR0FBRztBQUN0RDs7Q0FFQyxHQUNNLE1BQU1DLCtCQUErQixFQUFFO0FBQzlDOztDQUVDLEdBQ00sTUFBTUMsbUNBQW1DLEdBQUc7QUFDbkQ7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1DLHdCQUF3QixvQkFBb0I7QUFDekQ7O0NBRUMsR0FDTSxNQUFNQyx3QkFBd0IsSUFBSSxDQUN6Qyw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9saWJwMnAvZGlzdC9zcmMvY29ubmVjdGlvbi1tYW5hZ2VyL2NvbnN0YW50cy5kZWZhdWx0cy5qcz8wZDg3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHNlZSBodHRwczovL2xpYnAycC5naXRodWIuaW8vanMtbGlicDJwL2ludGVyZmFjZXMvaW5kZXguX2ludGVybmFsXy5Db25uZWN0aW9uTWFuYWdlckNvbmZpZy5odG1sI2RpYWxUaW1lb3V0XG4gKi9cbmV4cG9ydCBjb25zdCBESUFMX1RJTUVPVVQgPSA1ZTM7XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9saWJwMnAuZ2l0aHViLmlvL2pzLWxpYnAycC9pbnRlcmZhY2VzL2luZGV4Ll9pbnRlcm5hbF8uQ29ubmVjdGlvbk1hbmFnZXJDb25maWcuaHRtbCNpbmJvdW5kVXBncmFkZVRpbWVvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IElOQk9VTkRfVVBHUkFERV9USU1FT1VUID0gMmUzO1xuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbGlicDJwLmdpdGh1Yi5pby9qcy1saWJwMnAvaW50ZXJmYWNlcy9pbmRleC5faW50ZXJuYWxfLkNvbm5lY3Rpb25NYW5hZ2VyQ29uZmlnLmh0bWwjbWF4UGVlckFkZHJzVG9EaWFsXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfUEVFUl9BRERSU19UT19ESUFMID0gMjU7XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9saWJwMnAuZ2l0aHViLmlvL2pzLWxpYnAycC9pbnRlcmZhY2VzL2luZGV4Ll9pbnRlcm5hbF8uQ29ubmVjdGlvbk1hbmFnZXJDb25maWcuaHRtbCNhdXRvRGlhbEludGVydmFsXG4gKi9cbmV4cG9ydCBjb25zdCBBVVRPX0RJQUxfSU5URVJWQUwgPSA1MDAwO1xuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbGlicDJwLmdpdGh1Yi5pby9qcy1saWJwMnAvaW50ZXJmYWNlcy9pbmRleC5faW50ZXJuYWxfLkNvbm5lY3Rpb25NYW5hZ2VyQ29uZmlnLmh0bWwjYXV0b0RpYWxDb25jdXJyZW5jeVxuICovXG5leHBvcnQgY29uc3QgQVVUT19ESUFMX0NPTkNVUlJFTkNZID0gMjU7XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9saWJwMnAuZ2l0aHViLmlvL2pzLWxpYnAycC9pbnRlcmZhY2VzL2luZGV4Ll9pbnRlcm5hbF8uQ29ubmVjdGlvbk1hbmFnZXJDb25maWcuaHRtbCNhdXRvRGlhbFByaW9yaXR5XG4gKi9cbmV4cG9ydCBjb25zdCBBVVRPX0RJQUxfUFJJT1JJVFkgPSAwO1xuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbGlicDJwLmdpdGh1Yi5pby9qcy1saWJwMnAvaW50ZXJmYWNlcy9pbmRleC5faW50ZXJuYWxfLkNvbm5lY3Rpb25NYW5hZ2VyQ29uZmlnLmh0bWwjYXV0b0RpYWxNYXhRdWV1ZUxlbmd0aFxuICovXG5leHBvcnQgY29uc3QgQVVUT19ESUFMX01BWF9RVUVVRV9MRU5HVEggPSAxMDA7XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9saWJwMnAuZ2l0aHViLmlvL2pzLWxpYnAycC9pbnRlcmZhY2VzL2xpYnAycC5pbmRleC51bmtub3duLkNvbm5lY3Rpb25NYW5hZ2VySW5pdC5odG1sI2F1dG9EaWFsRGlzY292ZXJlZFBlZXJzRGVib3VuY2VcbiAqL1xuZXhwb3J0IGNvbnN0IEFVVE9fRElBTF9ESVNDT1ZFUkVEX1BFRVJTX0RFQk9VTkNFID0gMTA7XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9saWJwMnAuZ2l0aHViLmlvL2pzLWxpYnAycC9pbnRlcmZhY2VzL2luZGV4Ll9pbnRlcm5hbF8uQ29ubmVjdGlvbk1hbmFnZXJDb25maWcuaHRtbCNpbmJvdW5kQ29ubmVjdGlvblRocmVzaG9sZFxuICovXG5leHBvcnQgY29uc3QgSU5CT1VORF9DT05ORUNUSU9OX1RIUkVTSE9MRCA9IDU7XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9saWJwMnAuZ2l0aHViLmlvL2pzLWxpYnAycC9pbnRlcmZhY2VzL2luZGV4Ll9pbnRlcm5hbF8uQ29ubmVjdGlvbk1hbmFnZXJDb25maWcuaHRtbCNtYXhJbmNvbWluZ1BlbmRpbmdDb25uZWN0aW9uc1xuICovXG5leHBvcnQgY29uc3QgTUFYX0lOQ09NSU5HX1BFTkRJTkdfQ09OTkVDVElPTlMgPSAxMDtcbi8qKlxuICogU3RvcmUgYXMgcGFydCBvZiB0aGUgcGVlciBzdG9yZSBtZXRhZGF0YSBmb3IgYSBnaXZlbiBwZWVyLCB0aGUgdmFsdWUgZm9yIHRoaXNcbiAqIGtleSBpcyBhIHRpbWVzdGFtcCBvZiB0aGUgbGFzdCB0aW1lIGEgZGlhbCBhdHRlbXB0ZWQgZmFpbGVkIHdpdGggdGhlIHJlbGV2YW50XG4gKiBwZWVyIHN0b3JlZCBhcyBhIHN0cmluZy5cbiAqXG4gKiBVc2VkIHRvIGluc3VyZSB3ZSBkbyBub3QgZW5kbGVzc2x5IHRyeSB0byBhdXRvIGRpYWwgcGVlcnMgd2UgaGF2ZSByZWNlbnRseVxuICogZmFpbGVkIHRvIGRpYWwuXG4gKi9cbmV4cG9ydCBjb25zdCBMQVNUX0RJQUxfRkFJTFVSRV9LRVkgPSAnbGFzdC1kaWFsLWZhaWx1cmUnO1xuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbGlicDJwLmdpdGh1Yi5pby9qcy1saWJwMnAvaW50ZXJmYWNlcy9pbmRleC5faW50ZXJuYWxfLkNvbm5lY3Rpb25NYW5hZ2VyQ29uZmlnLmh0bWwjbWF4RGlhbFF1ZXVlTGVuZ3RoXG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfRElBTF9RVUVVRV9MRU5HVEggPSA1MDA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuZGVmYXVsdHMuanMubWFwIl0sIm5hbWVzIjpbIkRJQUxfVElNRU9VVCIsIklOQk9VTkRfVVBHUkFERV9USU1FT1VUIiwiTUFYX1BFRVJfQUREUlNfVE9fRElBTCIsIkFVVE9fRElBTF9JTlRFUlZBTCIsIkFVVE9fRElBTF9DT05DVVJSRU5DWSIsIkFVVE9fRElBTF9QUklPUklUWSIsIkFVVE9fRElBTF9NQVhfUVVFVUVfTEVOR1RIIiwiQVVUT19ESUFMX0RJU0NPVkVSRURfUEVFUlNfREVCT1VOQ0UiLCJJTkJPVU5EX0NPTk5FQ1RJT05fVEhSRVNIT0xEIiwiTUFYX0lOQ09NSU5HX1BFTkRJTkdfQ09OTkVDVElPTlMiLCJMQVNUX0RJQUxfRkFJTFVSRV9LRVkiLCJNQVhfRElBTF9RVUVVRV9MRU5HVEgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/constants.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_DIAL_CONCURRENCY: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_CONCURRENCY),\n/* harmony export */   AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE),\n/* harmony export */   AUTO_DIAL_INTERVAL: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_INTERVAL),\n/* harmony export */   AUTO_DIAL_MAX_QUEUE_LENGTH: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_MAX_QUEUE_LENGTH),\n/* harmony export */   AUTO_DIAL_PEER_RETRY_THRESHOLD: () => (/* binding */ AUTO_DIAL_PEER_RETRY_THRESHOLD),\n/* harmony export */   AUTO_DIAL_PRIORITY: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_PRIORITY),\n/* harmony export */   DIAL_TIMEOUT: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.DIAL_TIMEOUT),\n/* harmony export */   INBOUND_CONNECTION_THRESHOLD: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.INBOUND_CONNECTION_THRESHOLD),\n/* harmony export */   INBOUND_UPGRADE_TIMEOUT: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.INBOUND_UPGRADE_TIMEOUT),\n/* harmony export */   LAST_DIAL_FAILURE_KEY: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.LAST_DIAL_FAILURE_KEY),\n/* harmony export */   MAX_CONNECTIONS: () => (/* binding */ MAX_CONNECTIONS),\n/* harmony export */   MAX_DIAL_QUEUE_LENGTH: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.MAX_DIAL_QUEUE_LENGTH),\n/* harmony export */   MAX_INCOMING_PENDING_CONNECTIONS: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INCOMING_PENDING_CONNECTIONS),\n/* harmony export */   MAX_PARALLEL_DIALS: () => (/* binding */ MAX_PARALLEL_DIALS),\n/* harmony export */   MAX_PEER_ADDRS_TO_DIAL: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.MAX_PEER_ADDRS_TO_DIAL),\n/* harmony export */   MIN_CONNECTIONS: () => (/* binding */ MIN_CONNECTIONS)\n/* harmony export */ });\n/* harmony import */ var _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.defaults.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#minConnections\n */ const MIN_CONNECTIONS = 50;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxConnections\n */ const MAX_CONNECTIONS = 300;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelDials\n */ const MAX_PARALLEL_DIALS = 100;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/libp2p.index.unknown.ConnectionManagerInit.html#autoDialPeerRetryThreshold\n */ const AUTO_DIAL_PEER_RETRY_THRESHOLD = 1000 * 60; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2Nvbm5lY3Rpb24tbWFuYWdlci9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDeEM7O0NBRUMsR0FDTSxNQUFNQSxrQkFBa0IsR0FBRztBQUNsQzs7Q0FFQyxHQUNNLE1BQU1DLGtCQUFrQixJQUFJO0FBQ25DOztDQUVDLEdBQ00sTUFBTUMscUJBQXFCLElBQUk7QUFDdEM7O0NBRUMsR0FDTSxNQUFNQyxpQ0FBaUMsT0FBTyxHQUFHLENBQ3hELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL2xpYnAycC9kaXN0L3NyYy9jb25uZWN0aW9uLW1hbmFnZXIvY29uc3RhbnRzLmpzP2Y2NzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMuZGVmYXVsdHMuanMnO1xuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbGlicDJwLmdpdGh1Yi5pby9qcy1saWJwMnAvaW50ZXJmYWNlcy9pbmRleC5faW50ZXJuYWxfLkNvbm5lY3Rpb25NYW5hZ2VyQ29uZmlnLmh0bWwjbWluQ29ubmVjdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IE1JTl9DT05ORUNUSU9OUyA9IDUwO1xuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbGlicDJwLmdpdGh1Yi5pby9qcy1saWJwMnAvaW50ZXJmYWNlcy9pbmRleC5faW50ZXJuYWxfLkNvbm5lY3Rpb25NYW5hZ2VyQ29uZmlnLmh0bWwjbWF4Q29ubmVjdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9DT05ORUNUSU9OUyA9IDMwMDtcbi8qKlxuICogQHNlZSBodHRwczovL2xpYnAycC5naXRodWIuaW8vanMtbGlicDJwL2ludGVyZmFjZXMvaW5kZXguX2ludGVybmFsXy5Db25uZWN0aW9uTWFuYWdlckNvbmZpZy5odG1sI21heFBhcmFsbGVsRGlhbHNcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9QQVJBTExFTF9ESUFMUyA9IDEwMDtcbi8qKlxuICogQHNlZSBodHRwczovL2xpYnAycC5naXRodWIuaW8vanMtbGlicDJwL2ludGVyZmFjZXMvbGlicDJwLmluZGV4LnVua25vd24uQ29ubmVjdGlvbk1hbmFnZXJJbml0Lmh0bWwjYXV0b0RpYWxQZWVyUmV0cnlUaHJlc2hvbGRcbiAqL1xuZXhwb3J0IGNvbnN0IEFVVE9fRElBTF9QRUVSX1JFVFJZX1RIUkVTSE9MRCA9IDEwMDAgKiA2MDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiTUlOX0NPTk5FQ1RJT05TIiwiTUFYX0NPTk5FQ1RJT05TIiwiTUFYX1BBUkFMTEVMX0RJQUxTIiwiQVVUT19ESUFMX1BFRVJfUkVUUllfVEhSRVNIT0xEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/dial-queue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/dial-queue.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DialQueue: () => (/* binding */ DialQueue)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/utils/address-sort */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/address-sort.js\");\n/* harmony import */ var _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/utils/queue */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/queue/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr/resolvers */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"(ssr)/./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! any-signal */ \"(ssr)/./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _get_peer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../get-peer.js */ \"(ssr)/./node_modules/libp2p/dist/src/get-peer.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/utils.js\");\n/* eslint-disable max-depth */ \n\n\n\n\n\n\n\n\n\n\n\n\nconst defaultOptions = {\n    addressSorter: _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_5__.defaultAddressSort,\n    maxParallelDials: _constants_js__WEBPACK_IMPORTED_MODULE_6__.MAX_PARALLEL_DIALS,\n    maxDialQueueLength: _constants_js__WEBPACK_IMPORTED_MODULE_7__.MAX_DIAL_QUEUE_LENGTH,\n    maxPeerAddrsToDial: _constants_js__WEBPACK_IMPORTED_MODULE_7__.MAX_PEER_ADDRS_TO_DIAL,\n    dialTimeout: _constants_js__WEBPACK_IMPORTED_MODULE_7__.DIAL_TIMEOUT,\n    resolvers: {\n        dnsaddr: _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__.dnsaddrResolver\n    }\n};\nclass DialQueue {\n    constructor(components, init = {}){\n        this.addressSorter = init.addressSorter ?? defaultOptions.addressSorter;\n        this.maxPeerAddrsToDial = init.maxPeerAddrsToDial ?? defaultOptions.maxPeerAddrsToDial;\n        this.maxDialQueueLength = init.maxDialQueueLength ?? defaultOptions.maxDialQueueLength;\n        this.dialTimeout = init.dialTimeout ?? defaultOptions.dialTimeout;\n        this.connections = init.connections ?? new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_8__.PeerMap();\n        this.log = components.logger.forComponent(\"libp2p:connection-manager:dial-queue\");\n        this.components = components;\n        this.shutDownController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, this.shutDownController.signal);\n        for (const [key, value] of Object.entries(init.resolvers ?? {})){\n            _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.resolvers.set(key, value);\n        }\n        // controls dial concurrency\n        this.queue = new _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_10__.Queue({\n            concurrency: init.maxParallelDials ?? defaultOptions.maxParallelDials,\n            metricName: \"libp2p_dial_queue\",\n            metrics: components.metrics\n        });\n        // a started job errored\n        this.queue.addEventListener(\"error\", (event)=>{\n            this.log.error(\"error in dial queue\", event.detail);\n        });\n    }\n    start() {\n        this.shutDownController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, this.shutDownController.signal);\n    }\n    /**\n     * Clears any pending dials\n     */ stop() {\n        this.shutDownController.abort();\n        this.queue.abort();\n    }\n    /**\n     * Connects to a given peer, multiaddr or list of multiaddrs.\n     *\n     * If a peer is passed, all known multiaddrs will be tried. If a multiaddr or\n     * multiaddrs are passed only those will be dialled.\n     *\n     * Where a list of multiaddrs is passed, if any contain a peer id then all\n     * multiaddrs in the list must contain the same peer id.\n     *\n     * The dial to the first address that is successfully able to upgrade a\n     * connection will be used, all other dials will be aborted when that happens.\n     */ async dial(peerIdOrMultiaddr, options = {}) {\n        const { peerId, multiaddrs } = (0,_get_peer_js__WEBPACK_IMPORTED_MODULE_11__.getPeerAddress)(peerIdOrMultiaddr);\n        // make sure we don't have an existing connection to any of the addresses we\n        // are about to dial\n        const existingConnection = Array.from(this.connections.values()).flat().find((conn)=>{\n            if (options.force === true) {\n                return false;\n            }\n            if (conn.remotePeer.equals(peerId)) {\n                return true;\n            }\n            return multiaddrs.find((addr)=>{\n                return addr.equals(conn.remoteAddr);\n            });\n        });\n        if (existingConnection != null) {\n            this.log(\"already connected to %a\", existingConnection.remoteAddr);\n            return existingConnection;\n        }\n        // ready to dial, all async work finished - make sure we don't have any\n        // pending dials in progress for this peer or set of multiaddrs\n        const existingDial = this.queue.queue.find((job)=>{\n            if (peerId?.equals(job.options.peerId) === true) {\n                return true;\n            }\n            // does the dial contain any of the target multiaddrs?\n            const addresses = job.options.multiaddrs;\n            if (addresses == null) {\n                return false;\n            }\n            for (const multiaddr of multiaddrs){\n                if (addresses.has(multiaddr.toString())) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        if (existingDial != null) {\n            this.log(\"joining existing dial target for %p\", peerId);\n            // add all multiaddrs to the dial target\n            for (const multiaddr of multiaddrs){\n                existingDial.options.multiaddrs.add(multiaddr.toString());\n            }\n            return existingDial.join(options);\n        }\n        if (this.queue.size >= this.maxDialQueueLength) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(\"Dial queue is full\", \"ERR_DIAL_QUEUE_FULL\");\n        }\n        this.log(\"creating dial target for %p\", peerId, multiaddrs.map((ma)=>ma.toString()));\n        return this.queue.add(async (options)=>{\n            // create abort conditions - need to do this before `calculateMultiaddrs` as\n            // we may be about to resolve a dns addr which can time out\n            const signal = this.createDialAbortController(options?.signal);\n            let addrsToDial;\n            try {\n                // load addresses from address book, resolve and dnsaddrs, filter\n                // undiallables, add peer IDs, etc\n                addrsToDial = await this.calculateMultiaddrs(peerId, options?.multiaddrs, {\n                    ...options,\n                    signal\n                });\n                addrsToDial.map(({ multiaddr })=>multiaddr.toString()).forEach((addr)=>{\n                    options?.multiaddrs.add(addr);\n                });\n            } catch (err) {\n                signal.clear();\n                throw err;\n            }\n            try {\n                let dialed = 0;\n                const errors = [];\n                for (const address of addrsToDial){\n                    if (dialed === this.maxPeerAddrsToDial) {\n                        this.log(\"dialed maxPeerAddrsToDial (%d) addresses for %p, not trying any others\", dialed, peerId);\n                        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(\"Peer had more than maxPeerAddrsToDial\", _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_TOO_MANY_ADDRESSES);\n                    }\n                    dialed++;\n                    try {\n                        const conn = await this.components.transportManager.dial(address.multiaddr, {\n                            ...options,\n                            signal\n                        });\n                        this.log(\"dial to %a succeeded\", address.multiaddr);\n                        return conn;\n                    } catch (err) {\n                        this.log.error(\"dial failed to %a\", address.multiaddr, err);\n                        if (peerId != null) {\n                            // record the failed dial\n                            try {\n                                await this.components.peerStore.patch(peerId, {\n                                    metadata: {\n                                        [_constants_js__WEBPACK_IMPORTED_MODULE_7__.LAST_DIAL_FAILURE_KEY]: (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(Date.now().toString())\n                                    }\n                                });\n                            } catch (err) {\n                                this.log.error(\"could not update last dial failure key for %p\", peerId, err);\n                            }\n                        }\n                        // the user/dial timeout/shutdown controller signal aborted\n                        if (signal.aborted) {\n                            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(err.message, _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.ERR_TIMEOUT);\n                        }\n                        errors.push(err);\n                    }\n                }\n                if (errors.length === 1) {\n                    throw errors[0];\n                }\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.AggregateCodeError(errors, \"All multiaddr dials failed\", _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_TRANSPORT_DIAL_FAILED);\n            } finally{\n                // clean up abort signals/controllers\n                signal.clear();\n            }\n        }, {\n            peerId,\n            priority: options.priority,\n            multiaddrs: new Set(multiaddrs.map((ma)=>ma.toString())),\n            signal: options.signal\n        });\n    }\n    createDialAbortController(userSignal) {\n        // let any signal abort the dial\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_3__.anySignal)([\n            AbortSignal.timeout(this.dialTimeout),\n            this.shutDownController.signal,\n            userSignal\n        ]);\n        // This emitter gets listened to a lot\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, signal);\n        return signal;\n    }\n    // eslint-disable-next-line complexity\n    async calculateMultiaddrs(peerId, multiaddrs = new Set(), options = {}) {\n        const addrs = [\n            ...multiaddrs\n        ].map((ma)=>({\n                multiaddr: (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma),\n                isCertified: false\n            }));\n        // if a peer id or multiaddr(s) with a peer id, make sure it isn't our peer id and that we are allowed to dial it\n        if (peerId != null) {\n            if (this.components.peerId.equals(peerId)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(\"Tried to dial self\", _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_DIALED_SELF);\n            }\n            if (await this.components.connectionGater.denyDialPeer?.(peerId) === true) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(\"The dial request is blocked by gater.allowDialPeer\", _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_PEER_DIAL_INTERCEPTED);\n            }\n            // if just a peer id was passed, load available multiaddrs for this peer\n            // from the peer store\n            if (addrs.length === 0) {\n                this.log(\"loading multiaddrs for %p\", peerId);\n                try {\n                    const peer = await this.components.peerStore.get(peerId);\n                    addrs.push(...peer.addresses);\n                    this.log(\"loaded multiaddrs for %p\", peerId, addrs.map(({ multiaddr })=>multiaddr.toString()));\n                } catch (err) {\n                    if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_NOT_FOUND) {\n                        throw err;\n                    }\n                }\n            }\n            // if we still don't have any addresses for this peer, try a lookup\n            // using the peer routing\n            if (addrs.length === 0) {\n                this.log(\"looking up multiaddrs for %p in the peer routing\", peerId);\n                try {\n                    const peerInfo = await this.components.peerRouting.findPeer(peerId);\n                    this.log(\"found multiaddrs for %p in the peer routing\", peerId, addrs.map(({ multiaddr })=>multiaddr.toString()));\n                    addrs.push(...peerInfo.multiaddrs.map((multiaddr)=>({\n                            multiaddr,\n                            isCertified: false\n                        })));\n                } catch (err) {\n                    if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_NO_ROUTERS_AVAILABLE) {\n                        this.log.error(\"looking up multiaddrs for %p in the peer routing failed\", peerId, err);\n                    }\n                }\n            }\n        }\n        // resolve addresses - this can result in a one-to-many translation when\n        // dnsaddrs are resolved\n        let resolvedAddresses = (await Promise.all(addrs.map(async (addr)=>{\n            const result = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_14__.resolveMultiaddrs)(addr.multiaddr, {\n                dns: this.components.dns,\n                ...options,\n                log: this.log\n            });\n            if (result.length === 1 && result[0].equals(addr.multiaddr)) {\n                return addr;\n            }\n            return result.map((multiaddr)=>({\n                    multiaddr,\n                    isCertified: false\n                }));\n        }))).flat();\n        // ensure the peer id is appended to the multiaddr\n        if (peerId != null) {\n            const peerIdMultiaddr = `/p2p/${peerId.toString()}`;\n            resolvedAddresses = resolvedAddresses.map((addr)=>{\n                const lastProto = addr.multiaddr.protos().pop();\n                // do not append peer id to path multiaddrs\n                if (lastProto?.path === true) {\n                    return addr;\n                }\n                // append peer id to multiaddr if it is not already present\n                if (addr.multiaddr.getPeerId() == null) {\n                    return {\n                        multiaddr: addr.multiaddr.encapsulate(peerIdMultiaddr),\n                        isCertified: addr.isCertified\n                    };\n                }\n                return addr;\n            });\n        }\n        const filteredAddrs = resolvedAddresses.filter((addr)=>{\n            // filter out any multiaddrs that we do not have transports for\n            if (this.components.transportManager.transportForMultiaddr(addr.multiaddr) == null) {\n                return false;\n            }\n            // if the resolved multiaddr has a PeerID but it's the wrong one, ignore it\n            // - this can happen with addresses like bootstrap.libp2p.io that resolve\n            // to multiple different peers\n            const addrPeerId = addr.multiaddr.getPeerId();\n            if (peerId != null && addrPeerId != null) {\n                return peerId.equals(addrPeerId);\n            }\n            return true;\n        });\n        // deduplicate addresses\n        const dedupedAddrs = new Map();\n        for (const addr of filteredAddrs){\n            const maStr = addr.multiaddr.toString();\n            const existing = dedupedAddrs.get(maStr);\n            if (existing != null) {\n                existing.isCertified = existing.isCertified || addr.isCertified || false;\n                continue;\n            }\n            dedupedAddrs.set(maStr, addr);\n        }\n        const dedupedMultiaddrs = [\n            ...dedupedAddrs.values()\n        ];\n        // make sure we actually have some addresses to dial\n        if (dedupedMultiaddrs.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(\"The dial request has no valid addresses\", _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_NO_VALID_ADDRESSES);\n        }\n        const gatedAdrs = [];\n        for (const addr of dedupedMultiaddrs){\n            if (this.components.connectionGater.denyDialMultiaddr != null && await this.components.connectionGater.denyDialMultiaddr(addr.multiaddr)) {\n                continue;\n            }\n            gatedAdrs.push(addr);\n        }\n        const sortedGatedAddrs = gatedAdrs.sort(this.addressSorter);\n        // make sure we actually have some addresses to dial\n        if (sortedGatedAddrs.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError(\"The connection gater denied all addresses in the dial request\", _errors_js__WEBPACK_IMPORTED_MODULE_13__.codes.ERR_NO_VALID_ADDRESSES);\n        }\n        this.log.trace(\"addresses for %p before filtering\", peerId ?? \"unknown peer\", resolvedAddresses.map(({ multiaddr })=>multiaddr.toString()));\n        this.log.trace(\"addresses for %p after filtering\", peerId ?? \"unknown peer\", sortedGatedAddrs.map(({ multiaddr })=>multiaddr.toString()));\n        return sortedGatedAddrs;\n    }\n    async isDialable(multiaddr, options = {}) {\n        if (!Array.isArray(multiaddr)) {\n            multiaddr = [\n                multiaddr\n            ];\n        }\n        try {\n            const addresses = await this.calculateMultiaddrs(undefined, new Set(multiaddr.map((ma)=>ma.toString())), options);\n            if (options.runOnTransientConnection === false) {\n                // return true if any resolved multiaddrs are not relay addresses\n                return addresses.find((addr)=>{\n                    return !_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_2__.Circuit.matches(addr.multiaddr);\n                }) != null;\n            }\n            return true;\n        } catch (err) {\n            this.log.trace(\"error calculating if multiaddr(s) were dialable\", err);\n        }\n        return false;\n    }\n} //# sourceMappingURL=dial-queue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/dial-queue.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultConnectionManager: () => (/* binding */ DefaultConnectionManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/peer-store/tags.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/utils/address-sort */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/address-sort.js\");\n/* harmony import */ var _libp2p_utils_rate_limiter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/utils/rate-limiter */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/rate-limiter.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr/resolvers */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _get_peer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../get-peer.js */ \"(ssr)/./node_modules/libp2p/dist/src/get-peer.js\");\n/* harmony import */ var _auto_dial_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./auto-dial.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/auto-dial.js\");\n/* harmony import */ var _connection_pruner_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./connection-pruner.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n/* harmony import */ var _dial_queue_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dial-queue.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/dial-queue.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_DIAL_PRIORITY = 50;\nconst defaultOptions = {\n    minConnections: _constants_js__WEBPACK_IMPORTED_MODULE_2__.MIN_CONNECTIONS,\n    maxConnections: _constants_js__WEBPACK_IMPORTED_MODULE_2__.MAX_CONNECTIONS,\n    inboundConnectionThreshold: _constants_js__WEBPACK_IMPORTED_MODULE_3__.INBOUND_CONNECTION_THRESHOLD,\n    maxIncomingPendingConnections: _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_INCOMING_PENDING_CONNECTIONS,\n    autoDialConcurrency: _constants_js__WEBPACK_IMPORTED_MODULE_3__.AUTO_DIAL_CONCURRENCY,\n    autoDialPriority: _constants_js__WEBPACK_IMPORTED_MODULE_3__.AUTO_DIAL_PRIORITY,\n    autoDialMaxQueueLength: _constants_js__WEBPACK_IMPORTED_MODULE_3__.AUTO_DIAL_MAX_QUEUE_LENGTH\n};\n/**\n * Responsible for managing known connections.\n */ class DefaultConnectionManager {\n    constructor(components, init = {}){\n        this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections;\n        const minConnections = init.minConnections ?? defaultOptions.minConnections;\n        if (this.maxConnections < minConnections) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(\"Connection Manager maxConnections must be greater than minConnections\", _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_INVALID_PARAMETERS);\n        }\n        /**\n         * Map of connections per peer\n         */ this.connections = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_6__.PeerMap();\n        this.started = false;\n        this.peerStore = components.peerStore;\n        this.metrics = components.metrics;\n        this.events = components.events;\n        this.log = components.logger.forComponent(\"libp2p:connection-manager\");\n        this.onConnect = this.onConnect.bind(this);\n        this.onDisconnect = this.onDisconnect.bind(this);\n        this.events.addEventListener(\"connection:open\", this.onConnect);\n        this.events.addEventListener(\"connection:close\", this.onDisconnect);\n        // allow/deny lists\n        this.allow = (init.allow ?? []).map((ma)=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma));\n        this.deny = (init.deny ?? []).map((ma)=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma));\n        this.incomingPendingConnections = 0;\n        this.maxIncomingPendingConnections = init.maxIncomingPendingConnections ?? defaultOptions.maxIncomingPendingConnections;\n        // controls individual peers trying to dial us too quickly\n        this.inboundConnectionRateLimiter = new _libp2p_utils_rate_limiter__WEBPACK_IMPORTED_MODULE_7__.RateLimiter({\n            points: init.inboundConnectionThreshold ?? defaultOptions.inboundConnectionThreshold,\n            duration: 1\n        });\n        // controls what happens when we don't have enough connections\n        this.autoDial = new _auto_dial_js__WEBPACK_IMPORTED_MODULE_8__.AutoDial({\n            connectionManager: this,\n            peerStore: components.peerStore,\n            events: components.events,\n            logger: components.logger\n        }, {\n            minConnections,\n            autoDialConcurrency: init.autoDialConcurrency ?? defaultOptions.autoDialConcurrency,\n            autoDialPriority: init.autoDialPriority ?? defaultOptions.autoDialPriority,\n            maxQueueLength: init.autoDialMaxQueueLength ?? defaultOptions.autoDialMaxQueueLength\n        });\n        // controls what happens when we have too many connections\n        this.connectionPruner = new _connection_pruner_js__WEBPACK_IMPORTED_MODULE_9__.ConnectionPruner({\n            connectionManager: this,\n            peerStore: components.peerStore,\n            events: components.events,\n            logger: components.logger\n        }, {\n            maxConnections: this.maxConnections,\n            allow: this.allow\n        });\n        this.dialQueue = new _dial_queue_js__WEBPACK_IMPORTED_MODULE_10__.DialQueue(components, {\n            addressSorter: init.addressSorter ?? _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_11__.defaultAddressSort,\n            maxParallelDials: init.maxParallelDials ?? _constants_js__WEBPACK_IMPORTED_MODULE_2__.MAX_PARALLEL_DIALS,\n            maxDialQueueLength: init.maxDialQueueLength ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_DIAL_QUEUE_LENGTH,\n            maxPeerAddrsToDial: init.maxPeerAddrsToDial ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_PEER_ADDRS_TO_DIAL,\n            dialTimeout: init.dialTimeout ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIAL_TIMEOUT,\n            resolvers: init.resolvers ?? {\n                dnsaddr: _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__.dnsaddrResolver\n            },\n            connections: this.connections\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Starts the Connection Manager. If Metrics are not enabled on libp2p\n     * only event loop and connection limits will be monitored.\n     */ async start() {\n        // track inbound/outbound connections\n        this.metrics?.registerMetricGroup(\"libp2p_connection_manager_connections\", {\n            calculate: ()=>{\n                const metric = {\n                    inbound: 0,\n                    outbound: 0\n                };\n                for (const conns of this.connections.values()){\n                    for (const conn of conns){\n                        if (conn.direction === \"inbound\") {\n                            metric.inbound++;\n                        } else {\n                            metric.outbound++;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track total number of streams per protocol\n        this.metrics?.registerMetricGroup(\"libp2p_protocol_streams_total\", {\n            label: \"protocol\",\n            calculate: ()=>{\n                const metric = {};\n                for (const conns of this.connections.values()){\n                    for (const conn of conns){\n                        for (const stream of conn.streams){\n                            const key = `${stream.direction} ${stream.protocol ?? \"unnegotiated\"}`;\n                            metric[key] = (metric[key] ?? 0) + 1;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track 90th percentile of streams per protocol\n        this.metrics?.registerMetricGroup(\"libp2p_connection_manager_protocol_streams_per_connection_90th_percentile\", {\n            label: \"protocol\",\n            calculate: ()=>{\n                const allStreams = {};\n                for (const conns of this.connections.values()){\n                    for (const conn of conns){\n                        const streams = {};\n                        for (const stream of conn.streams){\n                            const key = `${stream.direction} ${stream.protocol ?? \"unnegotiated\"}`;\n                            streams[key] = (streams[key] ?? 0) + 1;\n                        }\n                        for (const [protocol, count] of Object.entries(streams)){\n                            allStreams[protocol] = allStreams[protocol] ?? [];\n                            allStreams[protocol].push(count);\n                        }\n                    }\n                }\n                const metric = {};\n                for (let [protocol, counts] of Object.entries(allStreams)){\n                    counts = counts.sort((a, b)=>a - b);\n                    const index = Math.floor(counts.length * 0.9);\n                    metric[protocol] = counts[index];\n                }\n                return metric;\n            }\n        });\n        this.dialQueue.start();\n        this.autoDial.start();\n        this.started = true;\n        this.log(\"started\");\n    }\n    async afterStart() {\n        // re-connect to any peers with the KEEP_ALIVE tag\n        void Promise.resolve().then(async ()=>{\n            const keepAlivePeers = await this.peerStore.all({\n                filters: [\n                    (peer)=>{\n                        return peer.tags.has(_libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.KEEP_ALIVE);\n                    }\n                ]\n            });\n            await Promise.all(keepAlivePeers.map(async (peer)=>{\n                await this.openConnection(peer.id).catch((err)=>{\n                    this.log.error(err);\n                });\n            }));\n        }).catch((err)=>{\n            this.log.error(err);\n        });\n        this.autoDial.afterStart();\n    }\n    /**\n     * Stops the Connection Manager\n     */ async stop() {\n        this.dialQueue.stop();\n        this.autoDial.stop();\n        // Close all connections we're tracking\n        const tasks = [];\n        for (const connectionList of this.connections.values()){\n            for (const connection of connectionList){\n                tasks.push((async ()=>{\n                    try {\n                        await connection.close();\n                    } catch (err) {\n                        this.log.error(err);\n                    }\n                })());\n            }\n        }\n        this.log(\"closing %d connections\", tasks.length);\n        await Promise.all(tasks);\n        this.connections.clear();\n        this.log(\"stopped\");\n    }\n    onConnect(evt) {\n        void this._onConnect(evt).catch((err)=>{\n            this.log.error(err);\n        });\n    }\n    /**\n     * Tracks the incoming connection and check the connection limit\n     */ async _onConnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            await connection.close();\n            return;\n        }\n        const peerId = connection.remotePeer;\n        const storedConns = this.connections.get(peerId);\n        let isNewPeer = false;\n        if (storedConns != null) {\n            storedConns.push(connection);\n        } else {\n            isNewPeer = true;\n            this.connections.set(peerId, [\n                connection\n            ]);\n        }\n        // only need to store RSA public keys, all other types are embedded in the peer id\n        if (peerId.publicKey != null && peerId.type === \"RSA\") {\n            await this.peerStore.patch(peerId, {\n                publicKey: peerId.publicKey\n            });\n        }\n        if (isNewPeer) {\n            this.events.safeDispatchEvent(\"peer:connect\", {\n                detail: connection.remotePeer\n            });\n        }\n    }\n    /**\n     * Removes the connection from tracking\n     */ onDisconnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            return;\n        }\n        const peerId = connection.remotePeer;\n        let storedConn = this.connections.get(peerId);\n        if (storedConn != null && storedConn.length > 1) {\n            storedConn = storedConn.filter((conn)=>conn.id !== connection.id);\n            this.connections.set(peerId, storedConn);\n        } else if (storedConn != null) {\n            this.connections.delete(peerId);\n            this.events.safeDispatchEvent(\"peer:disconnect\", {\n                detail: connection.remotePeer\n            });\n        }\n    }\n    getConnections(peerId) {\n        if (peerId != null) {\n            return this.connections.get(peerId) ?? [];\n        }\n        let conns = [];\n        for (const c of this.connections.values()){\n            conns = conns.concat(c);\n        }\n        return conns;\n    }\n    getConnectionsMap() {\n        return this.connections;\n    }\n    async openConnection(peerIdOrMultiaddr, options = {}) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(\"Not started\", _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_NODE_NOT_STARTED);\n        }\n        options.signal?.throwIfAborted();\n        const { peerId } = (0,_get_peer_js__WEBPACK_IMPORTED_MODULE_13__.getPeerAddress)(peerIdOrMultiaddr);\n        if (peerId != null && options.force !== true) {\n            this.log(\"dial %p\", peerId);\n            const existingConnection = this.getConnections(peerId).find((conn)=>!conn.transient);\n            if (existingConnection != null) {\n                this.log(\"had an existing non-transient connection to %p\", peerId);\n                return existingConnection;\n            }\n        }\n        const connection = await this.dialQueue.dial(peerIdOrMultiaddr, {\n            ...options,\n            priority: options.priority ?? DEFAULT_DIAL_PRIORITY\n        });\n        let peerConnections = this.connections.get(connection.remotePeer);\n        if (peerConnections == null) {\n            peerConnections = [];\n            this.connections.set(connection.remotePeer, peerConnections);\n        }\n        // we get notified of connections via the Upgrader emitting \"connection\"\n        // events, double check we aren't already tracking this connection before\n        // storing it\n        let trackedConnection = false;\n        for (const conn of peerConnections){\n            if (conn.id === connection.id) {\n                trackedConnection = true;\n            }\n        }\n        if (!trackedConnection) {\n            peerConnections.push(connection);\n        }\n        return connection;\n    }\n    async closeConnections(peerId, options = {}) {\n        const connections = this.connections.get(peerId) ?? [];\n        await Promise.all(connections.map(async (connection)=>{\n            try {\n                await connection.close(options);\n            } catch (err) {\n                connection.abort(err);\n            }\n        }));\n    }\n    async acceptIncomingConnection(maConn) {\n        // check deny list\n        const denyConnection = this.deny.some((ma)=>{\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (denyConnection) {\n            this.log(\"connection from %a refused - connection remote address was in deny list\", maConn.remoteAddr);\n            return false;\n        }\n        // check allow list\n        const allowConnection = this.allow.some((ma)=>{\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (allowConnection) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        // check pending connections\n        if (this.incomingPendingConnections === this.maxIncomingPendingConnections) {\n            this.log(\"connection from %a refused - incomingPendingConnections exceeded by host\", maConn.remoteAddr);\n            return false;\n        }\n        if (maConn.remoteAddr.isThinWaistAddress()) {\n            const host = maConn.remoteAddr.nodeAddress().address;\n            try {\n                await this.inboundConnectionRateLimiter.consume(host, 1);\n            } catch  {\n                this.log(\"connection from %a refused - inboundConnectionThreshold exceeded by host %s\", maConn.remoteAddr, host);\n                return false;\n            }\n        }\n        if (this.getConnections().length < this.maxConnections) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        this.log(\"connection from %a refused - maxConnections exceeded\", maConn.remoteAddr);\n        return false;\n    }\n    afterUpgradeInbound() {\n        this.incomingPendingConnections--;\n    }\n    getDialQueue() {\n        const statusMap = {\n            queued: \"queued\",\n            running: \"active\",\n            errored: \"error\",\n            complete: \"success\"\n        };\n        return this.dialQueue.queue.queue.map((job)=>{\n            return {\n                id: job.id,\n                status: statusMap[job.status],\n                peerId: job.options.peerId,\n                multiaddrs: [\n                    ...job.options.multiaddrs\n                ].map((ma)=>(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma))\n            };\n        });\n    }\n    async isDialable(multiaddr, options = {}) {\n        return this.dialQueue.isDialable(multiaddr, options);\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection-manager/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveMultiaddrs: () => (/* binding */ resolveMultiaddrs)\n/* harmony export */ });\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n\n/**\n * Recursively resolve DNSADDR multiaddrs\n */ async function resolveMultiaddrs(ma, options) {\n    // check multiaddr resolvers\n    let resolvable = false;\n    for (const key of _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.resolvers.keys()){\n        resolvable = ma.protoNames().includes(key);\n        if (resolvable) {\n            break;\n        }\n    }\n    // return multiaddr if it is not resolvable\n    if (!resolvable) {\n        return [\n            ma\n        ];\n    }\n    const output = await ma.resolve(options);\n    options.log(\"resolved %s to\", ma, output.map((ma)=>ma.toString()));\n    return output;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2Nvbm5lY3Rpb24tbWFuYWdlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvRDtBQUNwRDs7Q0FFQyxHQUNNLGVBQWVDLGtCQUFrQkMsRUFBRSxFQUFFQyxPQUFPO0lBQy9DLDRCQUE0QjtJQUM1QixJQUFJQyxhQUFhO0lBQ2pCLEtBQUssTUFBTUMsT0FBT0wsOERBQVNBLENBQUNNLElBQUksR0FBSTtRQUNoQ0YsYUFBYUYsR0FBR0ssVUFBVSxHQUFHQyxRQUFRLENBQUNIO1FBQ3RDLElBQUlELFlBQVk7WUFDWjtRQUNKO0lBQ0o7SUFDQSwyQ0FBMkM7SUFDM0MsSUFBSSxDQUFDQSxZQUFZO1FBQ2IsT0FBTztZQUFDRjtTQUFHO0lBQ2Y7SUFDQSxNQUFNTyxTQUFTLE1BQU1QLEdBQUdRLE9BQU8sQ0FBQ1A7SUFDaENBLFFBQVFRLEdBQUcsQ0FBQyxrQkFBa0JULElBQUlPLE9BQU9HLEdBQUcsQ0FBQ1YsQ0FBQUEsS0FBTUEsR0FBR1csUUFBUTtJQUM5RCxPQUFPSjtBQUNYLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2Nvbm5lY3Rpb24tbWFuYWdlci91dGlscy5qcz80ZTZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmVycyB9IGZyb20gJ0BtdWx0aWZvcm1hdHMvbXVsdGlhZGRyJztcbi8qKlxuICogUmVjdXJzaXZlbHkgcmVzb2x2ZSBETlNBRERSIG11bHRpYWRkcnNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc29sdmVNdWx0aWFkZHJzKG1hLCBvcHRpb25zKSB7XG4gICAgLy8gY2hlY2sgbXVsdGlhZGRyIHJlc29sdmVyc1xuICAgIGxldCByZXNvbHZhYmxlID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgcmVzb2x2ZXJzLmtleXMoKSkge1xuICAgICAgICByZXNvbHZhYmxlID0gbWEucHJvdG9OYW1lcygpLmluY2x1ZGVzKGtleSk7XG4gICAgICAgIGlmIChyZXNvbHZhYmxlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyByZXR1cm4gbXVsdGlhZGRyIGlmIGl0IGlzIG5vdCByZXNvbHZhYmxlXG4gICAgaWYgKCFyZXNvbHZhYmxlKSB7XG4gICAgICAgIHJldHVybiBbbWFdO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBtYS5yZXNvbHZlKG9wdGlvbnMpO1xuICAgIG9wdGlvbnMubG9nKCdyZXNvbHZlZCAlcyB0bycsIG1hLCBvdXRwdXQubWFwKG1hID0+IG1hLnRvU3RyaW5nKCkpKTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbInJlc29sdmVycyIsInJlc29sdmVNdWx0aWFkZHJzIiwibWEiLCJvcHRpb25zIiwicmVzb2x2YWJsZSIsImtleSIsImtleXMiLCJwcm90b05hbWVzIiwiaW5jbHVkZXMiLCJvdXRwdXQiLCJyZXNvbHZlIiwibG9nIiwibWFwIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection-manager/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/connection/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionImpl: () => (/* binding */ ConnectionImpl),\n/* harmony export */   createConnection: () => (/* binding */ createConnection)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/connection/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/events.js\");\n\nconst CLOSE_TIMEOUT = 500;\nlet prop;\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */ class ConnectionImpl {\n    static{\n        prop = Symbol.toStringTag;\n    }\n    /**\n     * An implementation of the js-libp2p connection.\n     * Any libp2p transport should use an upgrader to return this connection.\n     */ constructor(init){\n        this[prop] = \"Connection\";\n        this[_libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.connectionSymbol] = true;\n        const { remoteAddr, remotePeer, newStream, close, abort, getStreams } = init;\n        this.id = `${parseInt(String(Math.random() * 1e9)).toString(36)}${Date.now()}`;\n        this.remoteAddr = remoteAddr;\n        this.remotePeer = remotePeer;\n        this.direction = init.direction;\n        this.status = \"open\";\n        this.timeline = init.timeline;\n        this.multiplexer = init.multiplexer;\n        this.encryption = init.encryption;\n        this.transient = init.transient ?? false;\n        this.log = init.logger.forComponent(`libp2p:connection:${this.direction}:${this.id}`);\n        if (this.remoteAddr.getPeerId() == null) {\n            this.remoteAddr = this.remoteAddr.encapsulate(`/p2p/${this.remotePeer}`);\n        }\n        this._newStream = newStream;\n        this._close = close;\n        this._abort = abort;\n        this._getStreams = getStreams;\n        this.tags = [];\n    }\n    /**\n     * Get all the streams of the muxer\n     */ get streams() {\n        return this._getStreams();\n    }\n    /**\n     * Create a new stream from this connection\n     */ async newStream(protocols, options) {\n        if (this.status === \"closing\") {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(\"the connection is being closed\", \"ERR_CONNECTION_BEING_CLOSED\");\n        }\n        if (this.status === \"closed\") {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(\"the connection is closed\", \"ERR_CONNECTION_CLOSED\");\n        }\n        if (!Array.isArray(protocols)) {\n            protocols = [\n                protocols\n            ];\n        }\n        if (this.transient && options?.runOnTransientConnection !== true) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(\"Cannot open protocol stream on transient connection\", \"ERR_TRANSIENT_CONNECTION\");\n        }\n        const stream = await this._newStream(protocols, options);\n        stream.direction = \"outbound\";\n        return stream;\n    }\n    /**\n     * Close the connection\n     */ async close(options = {}) {\n        if (this.status === \"closed\" || this.status === \"closing\") {\n            return;\n        }\n        this.log(\"closing connection to %a\", this.remoteAddr);\n        this.status = \"closing\";\n        if (options.signal == null) {\n            const signal = AbortSignal.timeout(CLOSE_TIMEOUT);\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.setMaxListeners)(Infinity, signal);\n            options = {\n                ...options,\n                signal\n            };\n        }\n        try {\n            this.log.trace(\"closing all streams\");\n            // close all streams gracefully - this can throw if we're not multiplexed\n            await Promise.all(this.streams.map(async (s)=>s.close(options)));\n            this.log.trace(\"closing underlying transport\");\n            // close raw connection\n            await this._close(options);\n            this.log.trace(\"updating timeline with close time\");\n            this.status = \"closed\";\n            this.timeline.close = Date.now();\n        } catch (err) {\n            this.log.error(\"error encountered during graceful close of connection to %a\", this.remoteAddr, err);\n            this.abort(err);\n        }\n    }\n    abort(err) {\n        this.log.error(\"aborting connection to %a due to error\", this.remoteAddr, err);\n        this.status = \"closing\";\n        this.streams.forEach((s)=>{\n            s.abort(err);\n        });\n        this.log.error(\"all streams aborted\", this.streams.length);\n        // Abort raw connection\n        this._abort(err);\n        this.timeline.close = Date.now();\n        this.status = \"closed\";\n    }\n}\nfunction createConnection(init) {\n    return new ConnectionImpl(init);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/connection/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/content-routing.js":
/*!*********************************************************!*\
  !*** ./node_modules/libp2p/dist/src/content-routing.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompoundContentRouting: () => (/* binding */ CompoundContentRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-merge */ \"(ssr)/./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\nclass CompoundContentRouting {\n    constructor(components, init){\n        this.routers = init.routers ?? [];\n        this.started = false;\n        this.components = components;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    async stop() {\n        this.started = false;\n    }\n    /**\n     * Iterates over all content routers in parallel to find providers of the given key\n     */ async *findProviders(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(\"No content routers available\", _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        const self = this;\n        const seen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__.PeerSet();\n        for await (const peer of (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...self.routers.map((router)=>router.findProviders(key, options)))){\n            // the peer was yielded by a content router without multiaddrs and we\n            // failed to load them\n            if (peer == null) {\n                continue;\n            }\n            // store the addresses for the peer if found\n            if (peer.multiaddrs.length > 0) {\n                await this.components.peerStore.merge(peer.id, {\n                    multiaddrs: peer.multiaddrs\n                });\n            }\n            // deduplicate peers\n            if (seen.has(peer.id)) {\n                continue;\n            }\n            seen.add(peer.id);\n            yield peer;\n        }\n    }\n    /**\n     * Iterates over all content routers in parallel to notify it is\n     * a provider of the given key\n     */ async provide(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(\"No content routers available\", _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        await Promise.all(this.routers.map(async (router)=>{\n            await router.provide(key, options);\n        }));\n    }\n    /**\n     * Store the given key/value pair in the available content routings\n     */ async put(key, value, options) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_2__.messages.NOT_STARTED_YET, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NODE_NOT_STARTED);\n        }\n        await Promise.all(this.routers.map(async (router)=>{\n            await router.put(key, value, options);\n        }));\n    }\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     */ async get(key, options) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_2__.messages.NOT_STARTED_YET, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NODE_NOT_STARTED);\n        }\n        return Promise.any(this.routers.map(async (router)=>{\n            return router.get(key, options);\n        }));\n    }\n} //# sourceMappingURL=content-routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2NvbnRlbnQtcm91dGluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QztBQUNLO0FBQ3RCO0FBQ2lCO0FBQ3ZDLE1BQU1LO0lBSVRDLFlBQVlDLFVBQVUsRUFBRUMsSUFBSSxDQUFFO1FBQzFCLElBQUksQ0FBQ0MsT0FBTyxHQUFHRCxLQUFLQyxPQUFPLElBQUksRUFBRTtRQUNqQyxJQUFJLENBQUNDLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0gsVUFBVSxHQUFHQTtJQUN0QjtJQUNBSSxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUNELE9BQU87SUFDdkI7SUFDQSxNQUFNRSxRQUFRO1FBQ1YsSUFBSSxDQUFDRixPQUFPLEdBQUc7SUFDbkI7SUFDQSxNQUFNRyxPQUFPO1FBQ1QsSUFBSSxDQUFDSCxPQUFPLEdBQUc7SUFDbkI7SUFDQTs7S0FFQyxHQUNELE9BQU9JLGNBQWNDLEdBQUcsRUFBRUMsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNwQyxJQUFJLElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxNQUFNLEtBQUssR0FBRztZQUMzQixNQUFNLElBQUlqQix3REFBU0EsQ0FBQyxnQ0FBZ0NHLDZDQUFLQSxDQUFDZSx3QkFBd0I7UUFDdEY7UUFDQSxNQUFNQyxPQUFPLElBQUk7UUFDakIsTUFBTUMsT0FBTyxJQUFJbkIsNkRBQU9BO1FBQ3hCLFdBQVcsTUFBTW9CLFFBQVFuQixvREFBS0EsSUFBSWlCLEtBQUtWLE9BQU8sQ0FBQ2EsR0FBRyxDQUFDQyxDQUFBQSxTQUFVQSxPQUFPVCxhQUFhLENBQUNDLEtBQUtDLFdBQVk7WUFDL0YscUVBQXFFO1lBQ3JFLHNCQUFzQjtZQUN0QixJQUFJSyxRQUFRLE1BQU07Z0JBQ2Q7WUFDSjtZQUNBLDRDQUE0QztZQUM1QyxJQUFJQSxLQUFLRyxVQUFVLENBQUNQLE1BQU0sR0FBRyxHQUFHO2dCQUM1QixNQUFNLElBQUksQ0FBQ1YsVUFBVSxDQUFDa0IsU0FBUyxDQUFDdkIsS0FBSyxDQUFDbUIsS0FBS0ssRUFBRSxFQUFFO29CQUMzQ0YsWUFBWUgsS0FBS0csVUFBVTtnQkFDL0I7WUFDSjtZQUNBLG9CQUFvQjtZQUNwQixJQUFJSixLQUFLTyxHQUFHLENBQUNOLEtBQUtLLEVBQUUsR0FBRztnQkFDbkI7WUFDSjtZQUNBTixLQUFLUSxHQUFHLENBQUNQLEtBQUtLLEVBQUU7WUFDaEIsTUFBTUw7UUFDVjtJQUNKO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTVEsUUFBUWQsR0FBRyxFQUFFQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQzdCLElBQUksSUFBSSxDQUFDUCxPQUFPLENBQUNRLE1BQU0sS0FBSyxHQUFHO1lBQzNCLE1BQU0sSUFBSWpCLHdEQUFTQSxDQUFDLGdDQUFnQ0csNkNBQUtBLENBQUNlLHdCQUF3QjtRQUN0RjtRQUNBLE1BQU1ZLFFBQVFDLEdBQUcsQ0FBQyxJQUFJLENBQUN0QixPQUFPLENBQUNhLEdBQUcsQ0FBQyxPQUFPQztZQUN0QyxNQUFNQSxPQUFPTSxPQUFPLENBQUNkLEtBQUtDO1FBQzlCO0lBQ0o7SUFDQTs7S0FFQyxHQUNELE1BQU1nQixJQUFJakIsR0FBRyxFQUFFa0IsS0FBSyxFQUFFakIsT0FBTyxFQUFFO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUNMLFNBQVMsSUFBSTtZQUNuQixNQUFNLElBQUlYLHdEQUFTQSxDQUFDSSxnREFBUUEsQ0FBQzhCLGVBQWUsRUFBRS9CLDZDQUFLQSxDQUFDZ0Msb0JBQW9CO1FBQzVFO1FBQ0EsTUFBTUwsUUFBUUMsR0FBRyxDQUFDLElBQUksQ0FBQ3RCLE9BQU8sQ0FBQ2EsR0FBRyxDQUFDLE9BQU9DO1lBQ3RDLE1BQU1BLE9BQU9TLEdBQUcsQ0FBQ2pCLEtBQUtrQixPQUFPakI7UUFDakM7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE1BQU1vQixJQUFJckIsR0FBRyxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQ0wsU0FBUyxJQUFJO1lBQ25CLE1BQU0sSUFBSVgsd0RBQVNBLENBQUNJLGdEQUFRQSxDQUFDOEIsZUFBZSxFQUFFL0IsNkNBQUtBLENBQUNnQyxvQkFBb0I7UUFDNUU7UUFDQSxPQUFPTCxRQUFRTyxHQUFHLENBQUMsSUFBSSxDQUFDNUIsT0FBTyxDQUFDYSxHQUFHLENBQUMsT0FBT0M7WUFDdkMsT0FBT0EsT0FBT2EsR0FBRyxDQUFDckIsS0FBS0M7UUFDM0I7SUFDSjtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2NvbnRlbnQtcm91dGluZy5qcz8xMzJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvZGVFcnJvciB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmltcG9ydCB7IFBlZXJTZXQgfSBmcm9tICdAbGlicDJwL3BlZXItY29sbGVjdGlvbnMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2l0LW1lcmdlJztcbmltcG9ydCB7IGNvZGVzLCBtZXNzYWdlcyB9IGZyb20gJy4vZXJyb3JzLmpzJztcbmV4cG9ydCBjbGFzcyBDb21wb3VuZENvbnRlbnRSb3V0aW5nIHtcbiAgICByb3V0ZXJzO1xuICAgIHN0YXJ0ZWQ7XG4gICAgY29tcG9uZW50cztcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnRzLCBpbml0KSB7XG4gICAgICAgIHRoaXMucm91dGVycyA9IGluaXQucm91dGVycyA/PyBbXTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgfVxuICAgIGlzU3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRlZDtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgfVxuICAgIGFzeW5jIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGFsbCBjb250ZW50IHJvdXRlcnMgaW4gcGFyYWxsZWwgdG8gZmluZCBwcm92aWRlcnMgb2YgdGhlIGdpdmVuIGtleVxuICAgICAqL1xuICAgIGFzeW5jICpmaW5kUHJvdmlkZXJzKGtleSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLnJvdXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdObyBjb250ZW50IHJvdXRlcnMgYXZhaWxhYmxlJywgY29kZXMuRVJSX05PX1JPVVRFUlNfQVZBSUxBQkxFKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2VlbiA9IG5ldyBQZWVyU2V0KCk7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgcGVlciBvZiBtZXJnZSguLi5zZWxmLnJvdXRlcnMubWFwKHJvdXRlciA9PiByb3V0ZXIuZmluZFByb3ZpZGVycyhrZXksIG9wdGlvbnMpKSkpIHtcbiAgICAgICAgICAgIC8vIHRoZSBwZWVyIHdhcyB5aWVsZGVkIGJ5IGEgY29udGVudCByb3V0ZXIgd2l0aG91dCBtdWx0aWFkZHJzIGFuZCB3ZVxuICAgICAgICAgICAgLy8gZmFpbGVkIHRvIGxvYWQgdGhlbVxuICAgICAgICAgICAgaWYgKHBlZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3RvcmUgdGhlIGFkZHJlc3NlcyBmb3IgdGhlIHBlZXIgaWYgZm91bmRcbiAgICAgICAgICAgIGlmIChwZWVyLm11bHRpYWRkcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY29tcG9uZW50cy5wZWVyU3RvcmUubWVyZ2UocGVlci5pZCwge1xuICAgICAgICAgICAgICAgICAgICBtdWx0aWFkZHJzOiBwZWVyLm11bHRpYWRkcnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRlZHVwbGljYXRlIHBlZXJzXG4gICAgICAgICAgICBpZiAoc2Vlbi5oYXMocGVlci5pZCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW4uYWRkKHBlZXIuaWQpO1xuICAgICAgICAgICAgeWllbGQgcGVlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGFsbCBjb250ZW50IHJvdXRlcnMgaW4gcGFyYWxsZWwgdG8gbm90aWZ5IGl0IGlzXG4gICAgICogYSBwcm92aWRlciBvZiB0aGUgZ2l2ZW4ga2V5XG4gICAgICovXG4gICAgYXN5bmMgcHJvdmlkZShrZXksIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5yb3V0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignTm8gY29udGVudCByb3V0ZXJzIGF2YWlsYWJsZScsIGNvZGVzLkVSUl9OT19ST1VURVJTX0FWQUlMQUJMRSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5yb3V0ZXJzLm1hcChhc3luYyAocm91dGVyKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCByb3V0ZXIucHJvdmlkZShrZXksIG9wdGlvbnMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlIHRoZSBnaXZlbiBrZXkvdmFsdWUgcGFpciBpbiB0aGUgYXZhaWxhYmxlIGNvbnRlbnQgcm91dGluZ3NcbiAgICAgKi9cbiAgICBhc3luYyBwdXQoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdGFydGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IobWVzc2FnZXMuTk9UX1NUQVJURURfWUVULCBjb2Rlcy5FUlJfTk9ERV9OT1RfU1RBUlRFRCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5yb3V0ZXJzLm1hcChhc3luYyAocm91dGVyKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCByb3V0ZXIucHV0KGtleSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgdG8gdGhlIGdpdmVuIGtleS5cbiAgICAgKiBUaW1lcyBvdXQgYWZ0ZXIgMSBtaW51dGUgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBhc3luYyBnZXQoa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0YXJ0ZWQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihtZXNzYWdlcy5OT1RfU1RBUlRFRF9ZRVQsIGNvZGVzLkVSUl9OT0RFX05PVF9TVEFSVEVEKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbnkodGhpcy5yb3V0ZXJzLm1hcChhc3luYyAocm91dGVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcm91dGVyLmdldChrZXksIG9wdGlvbnMpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGVudC1yb3V0aW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJDb2RlRXJyb3IiLCJQZWVyU2V0IiwibWVyZ2UiLCJjb2RlcyIsIm1lc3NhZ2VzIiwiQ29tcG91bmRDb250ZW50Um91dGluZyIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50cyIsImluaXQiLCJyb3V0ZXJzIiwic3RhcnRlZCIsImlzU3RhcnRlZCIsInN0YXJ0Iiwic3RvcCIsImZpbmRQcm92aWRlcnMiLCJrZXkiLCJvcHRpb25zIiwibGVuZ3RoIiwiRVJSX05PX1JPVVRFUlNfQVZBSUxBQkxFIiwic2VsZiIsInNlZW4iLCJwZWVyIiwibWFwIiwicm91dGVyIiwibXVsdGlhZGRycyIsInBlZXJTdG9yZSIsImlkIiwiaGFzIiwiYWRkIiwicHJvdmlkZSIsIlByb21pc2UiLCJhbGwiLCJwdXQiLCJ2YWx1ZSIsIk5PVF9TVEFSVEVEX1lFVCIsIkVSUl9OT0RFX05PVF9TVEFSVEVEIiwiZ2V0IiwiYW55Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/content-routing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/errors.js":
/*!************************************************!*\
  !*** ./node_modules/libp2p/dist/src/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: () => (/* binding */ codes),\n/* harmony export */   messages: () => (/* binding */ messages)\n/* harmony export */ });\nvar messages;\n(function(messages) {\n    messages[\"NOT_STARTED_YET\"] = \"The libp2p node is not started yet\";\n    messages[\"ERR_PROTECTOR_REQUIRED\"] = \"Private network is enforced, but no protector was provided\";\n    messages[\"NOT_FOUND\"] = \"Not found\";\n})(messages || (messages = {}));\nvar codes;\n(function(codes) {\n    codes[\"ERR_PROTECTOR_REQUIRED\"] = \"ERR_PROTECTOR_REQUIRED\";\n    codes[\"ERR_PEER_DIAL_INTERCEPTED\"] = \"ERR_PEER_DIAL_INTERCEPTED\";\n    codes[\"ERR_CONNECTION_INTERCEPTED\"] = \"ERR_CONNECTION_INTERCEPTED\";\n    codes[\"ERR_INVALID_PROTOCOLS_FOR_STREAM\"] = \"ERR_INVALID_PROTOCOLS_FOR_STREAM\";\n    codes[\"ERR_CONNECTION_ENDED\"] = \"ERR_CONNECTION_ENDED\";\n    codes[\"ERR_CONNECTION_FAILED\"] = \"ERR_CONNECTION_FAILED\";\n    codes[\"ERR_NODE_NOT_STARTED\"] = \"ERR_NODE_NOT_STARTED\";\n    codes[\"ERR_ALREADY_ABORTED\"] = \"ERR_ALREADY_ABORTED\";\n    codes[\"ERR_TOO_MANY_ADDRESSES\"] = \"ERR_TOO_MANY_ADDRESSES\";\n    codes[\"ERR_NO_VALID_ADDRESSES\"] = \"ERR_NO_VALID_ADDRESSES\";\n    codes[\"ERR_RELAYED_DIAL\"] = \"ERR_RELAYED_DIAL\";\n    codes[\"ERR_DIALED_SELF\"] = \"ERR_DIALED_SELF\";\n    codes[\"ERR_DISCOVERED_SELF\"] = \"ERR_DISCOVERED_SELF\";\n    codes[\"ERR_DUPLICATE_TRANSPORT\"] = \"ERR_DUPLICATE_TRANSPORT\";\n    codes[\"ERR_ENCRYPTION_FAILED\"] = \"ERR_ENCRYPTION_FAILED\";\n    codes[\"ERR_HOP_REQUEST_FAILED\"] = \"ERR_HOP_REQUEST_FAILED\";\n    codes[\"ERR_INVALID_KEY\"] = \"ERR_INVALID_KEY\";\n    codes[\"ERR_INVALID_MESSAGE\"] = \"ERR_INVALID_MESSAGE\";\n    codes[\"ERR_INVALID_PARAMETERS\"] = \"ERR_INVALID_PARAMETERS\";\n    codes[\"ERR_INVALID_PEER\"] = \"ERR_INVALID_PEER\";\n    codes[\"ERR_MUXER_UNAVAILABLE\"] = \"ERR_MUXER_UNAVAILABLE\";\n    codes[\"ERR_NOT_FOUND\"] = \"ERR_NOT_FOUND\";\n    codes[\"ERR_TRANSPORT_UNAVAILABLE\"] = \"ERR_TRANSPORT_UNAVAILABLE\";\n    codes[\"ERR_TRANSPORT_DIAL_FAILED\"] = \"ERR_TRANSPORT_DIAL_FAILED\";\n    codes[\"ERR_UNSUPPORTED_PROTOCOL\"] = \"ERR_UNSUPPORTED_PROTOCOL\";\n    codes[\"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\"] = \"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\";\n    codes[\"ERR_INVALID_MULTIADDR\"] = \"ERR_INVALID_MULTIADDR\";\n    codes[\"ERR_SIGNATURE_NOT_VALID\"] = \"ERR_SIGNATURE_NOT_VALID\";\n    codes[\"ERR_FIND_SELF\"] = \"ERR_FIND_SELF\";\n    codes[\"ERR_NO_ROUTERS_AVAILABLE\"] = \"ERR_NO_ROUTERS_AVAILABLE\";\n    codes[\"ERR_CONNECTION_NOT_MULTIPLEXED\"] = \"ERR_CONNECTION_NOT_MULTIPLEXED\";\n    codes[\"ERR_NO_DIAL_TOKENS\"] = \"ERR_NO_DIAL_TOKENS\";\n    codes[\"ERR_INVALID_CMS\"] = \"ERR_INVALID_CMS\";\n    codes[\"ERR_MISSING_KEYS\"] = \"ERR_MISSING_KEYS\";\n    codes[\"ERR_NO_KEY\"] = \"ERR_NO_KEY\";\n    codes[\"ERR_INVALID_KEY_NAME\"] = \"ERR_INVALID_KEY_NAME\";\n    codes[\"ERR_INVALID_KEY_TYPE\"] = \"ERR_INVALID_KEY_TYPE\";\n    codes[\"ERR_KEY_ALREADY_EXISTS\"] = \"ERR_KEY_ALREADY_EXISTS\";\n    codes[\"ERR_INVALID_KEY_SIZE\"] = \"ERR_INVALID_KEY_SIZE\";\n    codes[\"ERR_KEY_NOT_FOUND\"] = \"ERR_KEY_NOT_FOUND\";\n    codes[\"ERR_OLD_KEY_NAME_INVALID\"] = \"ERR_OLD_KEY_NAME_INVALID\";\n    codes[\"ERR_NEW_KEY_NAME_INVALID\"] = \"ERR_NEW_KEY_NAME_INVALID\";\n    codes[\"ERR_PASSWORD_REQUIRED\"] = \"ERR_PASSWORD_REQUIRED\";\n    codes[\"ERR_PEM_REQUIRED\"] = \"ERR_PEM_REQUIRED\";\n    codes[\"ERR_CANNOT_READ_KEY\"] = \"ERR_CANNOT_READ_KEY\";\n    codes[\"ERR_MISSING_PRIVATE_KEY\"] = \"ERR_MISSING_PRIVATE_KEY\";\n    codes[\"ERR_MISSING_PUBLIC_KEY\"] = \"ERR_MISSING_PUBLIC_KEY\";\n    codes[\"ERR_INVALID_OLD_PASS_TYPE\"] = \"ERR_INVALID_OLD_PASS_TYPE\";\n    codes[\"ERR_INVALID_NEW_PASS_TYPE\"] = \"ERR_INVALID_NEW_PASS_TYPE\";\n    codes[\"ERR_INVALID_PASS_LENGTH\"] = \"ERR_INVALID_PASS_LENGTH\";\n    codes[\"ERR_NOT_IMPLEMENTED\"] = \"ERR_NOT_IMPLEMENTED\";\n    codes[\"ERR_WRONG_PING_ACK\"] = \"ERR_WRONG_PING_ACK\";\n    codes[\"ERR_INVALID_RECORD\"] = \"ERR_INVALID_RECORD\";\n    codes[\"ERR_ALREADY_SUCCEEDED\"] = \"ERR_ALREADY_SUCCEEDED\";\n    codes[\"ERR_NO_HANDLER_FOR_PROTOCOL\"] = \"ERR_NO_HANDLER_FOR_PROTOCOL\";\n    codes[\"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_CONNECTION_DENIED\"] = \"ERR_CONNECTION_DENIED\";\n    codes[\"ERR_TRANSFER_LIMIT_EXCEEDED\"] = \"ERR_TRANSFER_LIMIT_EXCEEDED\";\n})(codes || (codes = {})); //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/get-peer.js":
/*!**************************************************!*\
  !*** ./node_modules/libp2p/dist/src/get-peer.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPeerAddress: () => (/* binding */ getPeerAddress)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/peer-id/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr or an array of Multiaddrs\n */ function getPeerAddress(peer) {\n    if ((0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.isPeerId)(peer)) {\n        return {\n            peerId: peer,\n            multiaddrs: []\n        };\n    }\n    if (!Array.isArray(peer)) {\n        peer = [\n            peer\n        ];\n    }\n    let peerId;\n    if (peer.length > 0) {\n        const peerIdStr = peer[0].getPeerId();\n        peerId = peerIdStr == null ? undefined : (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromString)(peerIdStr);\n        // ensure PeerId is either not set or is consistent\n        peer.forEach((ma)=>{\n            if (!(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.isMultiaddr)(ma)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"Invalid Multiaddr\", _errors_js__WEBPACK_IMPORTED_MODULE_4__.codes.ERR_INVALID_MULTIADDR);\n            }\n            const maPeerIdStr = ma.getPeerId();\n            if (maPeerIdStr == null) {\n                if (peerId != null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"Multiaddrs must all have the same peer id or have no peer id\", _errors_js__WEBPACK_IMPORTED_MODULE_4__.codes.ERR_INVALID_PARAMETERS);\n                }\n            } else {\n                const maPeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromString)(maPeerIdStr);\n                if (peerId == null || !peerId.equals(maPeerId)) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"Multiaddrs must all have the same peer id or have no peer id\", _errors_js__WEBPACK_IMPORTED_MODULE_4__.codes.ERR_INVALID_PARAMETERS);\n                }\n            }\n        });\n    }\n    return {\n        peerId,\n        multiaddrs: peer\n    };\n} //# sourceMappingURL=get-peer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2dldC1wZWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF3RDtBQUNMO0FBQ0c7QUFDbEI7QUFDcEM7O0NBRUMsR0FDTSxTQUFTSyxlQUFlQyxJQUFJO0lBQy9CLElBQUlMLDJEQUFRQSxDQUFDSyxPQUFPO1FBQ2hCLE9BQU87WUFBRUMsUUFBUUQ7WUFBTUUsWUFBWSxFQUFFO1FBQUM7SUFDMUM7SUFDQSxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0osT0FBTztRQUN0QkEsT0FBTztZQUFDQTtTQUFLO0lBQ2pCO0lBQ0EsSUFBSUM7SUFDSixJQUFJRCxLQUFLSyxNQUFNLEdBQUcsR0FBRztRQUNqQixNQUFNQyxZQUFZTixJQUFJLENBQUMsRUFBRSxDQUFDTyxTQUFTO1FBQ25DTixTQUFTSyxhQUFhLE9BQU9FLFlBQVlaLGlFQUFnQkEsQ0FBQ1U7UUFDMUQsbURBQW1EO1FBQ25ETixLQUFLUyxPQUFPLENBQUNDLENBQUFBO1lBQ1QsSUFBSSxDQUFDYixvRUFBV0EsQ0FBQ2EsS0FBSztnQkFDbEIsTUFBTSxJQUFJaEIsd0RBQVNBLENBQUMscUJBQXFCSSw2Q0FBS0EsQ0FBQ2EscUJBQXFCO1lBQ3hFO1lBQ0EsTUFBTUMsY0FBY0YsR0FBR0gsU0FBUztZQUNoQyxJQUFJSyxlQUFlLE1BQU07Z0JBQ3JCLElBQUlYLFVBQVUsTUFBTTtvQkFDaEIsTUFBTSxJQUFJUCx3REFBU0EsQ0FBQyxnRUFBZ0VJLDZDQUFLQSxDQUFDZSxzQkFBc0I7Z0JBQ3BIO1lBQ0osT0FDSztnQkFDRCxNQUFNQyxXQUFXbEIsaUVBQWdCQSxDQUFDZ0I7Z0JBQ2xDLElBQUlYLFVBQVUsUUFBUSxDQUFDQSxPQUFPYyxNQUFNLENBQUNELFdBQVc7b0JBQzVDLE1BQU0sSUFBSXBCLHdEQUFTQSxDQUFDLGdFQUFnRUksNkNBQUtBLENBQUNlLHNCQUFzQjtnQkFDcEg7WUFDSjtRQUNKO0lBQ0o7SUFDQSxPQUFPO1FBQ0haO1FBQ0FDLFlBQVlGO0lBQ2hCO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9saWJwMnAvZGlzdC9zcmMvZ2V0LXBlZXIuanM/NTMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlRXJyb3IsIGlzUGVlcklkIH0gZnJvbSAnQGxpYnAycC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcGVlcklkRnJvbVN0cmluZyB9IGZyb20gJ0BsaWJwMnAvcGVlci1pZCc7XG5pbXBvcnQgeyBpc011bHRpYWRkciB9IGZyb20gJ0BtdWx0aWZvcm1hdHMvbXVsdGlhZGRyJztcbmltcG9ydCB7IGNvZGVzIH0gZnJvbSAnLi9lcnJvcnMuanMnO1xuLyoqXG4gKiBFeHRyYWN0cyBhIFBlZXJJZCBhbmQvb3IgbXVsdGlhZGRyIGZyb20gdGhlIHBhc3NlZCBQZWVySWQgb3IgTXVsdGlhZGRyIG9yIGFuIGFycmF5IG9mIE11bHRpYWRkcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBlZXJBZGRyZXNzKHBlZXIpIHtcbiAgICBpZiAoaXNQZWVySWQocGVlcikpIHtcbiAgICAgICAgcmV0dXJuIHsgcGVlcklkOiBwZWVyLCBtdWx0aWFkZHJzOiBbXSB9O1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGVlcikpIHtcbiAgICAgICAgcGVlciA9IFtwZWVyXTtcbiAgICB9XG4gICAgbGV0IHBlZXJJZDtcbiAgICBpZiAocGVlci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHBlZXJJZFN0ciA9IHBlZXJbMF0uZ2V0UGVlcklkKCk7XG4gICAgICAgIHBlZXJJZCA9IHBlZXJJZFN0ciA9PSBudWxsID8gdW5kZWZpbmVkIDogcGVlcklkRnJvbVN0cmluZyhwZWVySWRTdHIpO1xuICAgICAgICAvLyBlbnN1cmUgUGVlcklkIGlzIGVpdGhlciBub3Qgc2V0IG9yIGlzIGNvbnNpc3RlbnRcbiAgICAgICAgcGVlci5mb3JFYWNoKG1hID0+IHtcbiAgICAgICAgICAgIGlmICghaXNNdWx0aWFkZHIobWEpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignSW52YWxpZCBNdWx0aWFkZHInLCBjb2Rlcy5FUlJfSU5WQUxJRF9NVUxUSUFERFIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWFQZWVySWRTdHIgPSBtYS5nZXRQZWVySWQoKTtcbiAgICAgICAgICAgIGlmIChtYVBlZXJJZFN0ciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBlZXJJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IoJ011bHRpYWRkcnMgbXVzdCBhbGwgaGF2ZSB0aGUgc2FtZSBwZWVyIGlkIG9yIGhhdmUgbm8gcGVlciBpZCcsIGNvZGVzLkVSUl9JTlZBTElEX1BBUkFNRVRFUlMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hUGVlcklkID0gcGVlcklkRnJvbVN0cmluZyhtYVBlZXJJZFN0cik7XG4gICAgICAgICAgICAgICAgaWYgKHBlZXJJZCA9PSBudWxsIHx8ICFwZWVySWQuZXF1YWxzKG1hUGVlcklkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdNdWx0aWFkZHJzIG11c3QgYWxsIGhhdmUgdGhlIHNhbWUgcGVlciBpZCBvciBoYXZlIG5vIHBlZXIgaWQnLCBjb2Rlcy5FUlJfSU5WQUxJRF9QQVJBTUVURVJTKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwZWVySWQsXG4gICAgICAgIG11bHRpYWRkcnM6IHBlZXJcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LXBlZXIuanMubWFwIl0sIm5hbWVzIjpbIkNvZGVFcnJvciIsImlzUGVlcklkIiwicGVlcklkRnJvbVN0cmluZyIsImlzTXVsdGlhZGRyIiwiY29kZXMiLCJnZXRQZWVyQWRkcmVzcyIsInBlZXIiLCJwZWVySWQiLCJtdWx0aWFkZHJzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwicGVlcklkU3RyIiwiZ2V0UGVlcklkIiwidW5kZWZpbmVkIiwiZm9yRWFjaCIsIm1hIiwiRVJSX0lOVkFMSURfTVVMVElBRERSIiwibWFQZWVySWRTdHIiLCJFUlJfSU5WQUxJRF9QQVJBTUVURVJTIiwibWFQZWVySWQiLCJlcXVhbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/get-peer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/libp2p/dist/src/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLibp2p: () => (/* binding */ createLibp2p)\n/* harmony export */ });\n/* harmony import */ var _libp2p_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libp2p.js */ \"(ssr)/./node_modules/libp2p/dist/src/libp2p.js\");\n/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */ \n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [yamux(), mplex()],\n *   connectionEncryption: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */ async function createLibp2p(options = {}) {\n    const node = await (0,_libp2p_js__WEBPACK_IMPORTED_MODULE_0__.createLibp2pNode)(options);\n    if (options.start !== false) {\n        await node.start();\n    }\n    return node;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDOEM7QUFDL0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F5QkMsR0FDTSxlQUFlQyxhQUFhQyxVQUFVLENBQUMsQ0FBQztJQUMzQyxNQUFNQyxPQUFPLE1BQU1ILDREQUFnQkEsQ0FBQ0U7SUFDcEMsSUFBSUEsUUFBUUUsS0FBSyxLQUFLLE9BQU87UUFDekIsTUFBTUQsS0FBS0MsS0FBSztJQUNwQjtJQUNBLE9BQU9EO0FBQ1gsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9saWJwMnAvZGlzdC9zcmMvaW5kZXguanM/YTJmNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICpcbiAqIFVzZSB0aGUgYGNyZWF0ZUxpYnAycGAgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbGlicDJwIG5vZGUuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBjcmVhdGVMaWJwMnAgfSBmcm9tICdsaWJwMnAnXG4gKlxuICogY29uc3Qgbm9kZSA9IGF3YWl0IGNyZWF0ZUxpYnAycCh7XG4gKiAgIC8vIC4uLm90aGVyIG9wdGlvbnNcbiAqIH0pXG4gKiBgYGBcbiAqL1xuaW1wb3J0IHsgY3JlYXRlTGlicDJwTm9kZSB9IGZyb20gJy4vbGlicDJwLmpzJztcbi8qKlxuICogUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgTGlicDJwIGludGVyZmFjZSwgZ2VuZXJhdGluZyBhIG5ldyBQZWVySWRcbiAqIGlmIG9uZSBpcyBub3QgcGFzc2VkIGFzIHBhcnQgb2YgdGhlIG9wdGlvbnMuXG4gKlxuICogVGhlIG5vZGUgd2lsbCBiZSBzdGFydGVkIHVubGVzcyBgc3RhcnQ6IGZhbHNlYCBpcyBwYXNzZWQgYXMgYW4gb3B0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgVHlwZVNjcmlwdFxuICogaW1wb3J0IHsgY3JlYXRlTGlicDJwIH0gZnJvbSAnbGlicDJwJ1xuICogaW1wb3J0IHsgdGNwIH0gZnJvbSAnQGxpYnAycC90Y3AnXG4gKiBpbXBvcnQgeyBtcGxleCB9IGZyb20gJ0BsaWJwMnAvbXBsZXgnXG4gKiBpbXBvcnQgeyBub2lzZSB9IGZyb20gJ0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlJ1xuICogaW1wb3J0IHsgeWFtdXggfSBmcm9tICdAY2hhaW5zYWZlL2xpYnAycC15YW11eCdcbiAqXG4gKiAvLyBzcGVjaWZ5IG9wdGlvbnNcbiAqIGNvbnN0IG9wdGlvbnMgPSB7XG4gKiAgIHRyYW5zcG9ydHM6IFt0Y3AoKV0sXG4gKiAgIHN0cmVhbU11eGVyczogW3lhbXV4KCksIG1wbGV4KCldLFxuICogICBjb25uZWN0aW9uRW5jcnlwdGlvbjogW25vaXNlKCldXG4gKiB9XG4gKlxuICogLy8gY3JlYXRlIGxpYnAycFxuICogY29uc3QgbGlicDJwID0gYXdhaXQgY3JlYXRlTGlicDJwKG9wdGlvbnMpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxpYnAycChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBub2RlID0gYXdhaXQgY3JlYXRlTGlicDJwTm9kZShvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5zdGFydCAhPT0gZmFsc2UpIHtcbiAgICAgICAgYXdhaXQgbm9kZS5zdGFydCgpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVMaWJwMnBOb2RlIiwiY3JlYXRlTGlicDJwIiwib3B0aW9ucyIsIm5vZGUiLCJzdGFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/libp2p.js":
/*!************************************************!*\
  !*** ./node_modules/libp2p/dist/src/libp2p.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Libp2pNode: () => (/* binding */ Libp2pNode),\n/* harmony export */   createLibp2pNode: () => (/* binding */ createLibp2pNode)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"(ssr)/./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/content-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/peer-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/logger */ \"(ssr)/./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_id_factory__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @libp2p/peer-id-factory */ \"(ssr)/./node_modules/@libp2p/peer-id-factory/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_store__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/peer-store */ \"(ssr)/./node_modules/@libp2p/peer-store/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var datastore_core_memory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! datastore-core/memory */ \"(ssr)/./node_modules/datastore-core/dist/src/memory.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var _address_manager_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./address-manager/index.js */ \"(ssr)/./node_modules/libp2p/dist/src/address-manager/index.js\");\n/* harmony import */ var _components_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components.js */ \"(ssr)/./node_modules/libp2p/dist/src/components.js\");\n/* harmony import */ var _config_connection_gater_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./config/connection-gater.js */ \"(ssr)/./node_modules/libp2p/dist/src/config/connection-gater.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./config.js */ \"(ssr)/./node_modules/libp2p/dist/src/config.js\");\n/* harmony import */ var _connection_manager_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./connection-manager/index.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/index.js\");\n/* harmony import */ var _content_routing_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./content-routing.js */ \"(ssr)/./node_modules/libp2p/dist/src/content-routing.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _peer_routing_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./peer-routing.js */ \"(ssr)/./node_modules/libp2p/dist/src/peer-routing.js\");\n/* harmony import */ var _registrar_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./registrar.js */ \"(ssr)/./node_modules/libp2p/dist/src/registrar.js\");\n/* harmony import */ var _transport_manager_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transport-manager.js */ \"(ssr)/./node_modules/libp2p/dist/src/transport-manager.js\");\n/* harmony import */ var _upgrader_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./upgrader.js */ \"(ssr)/./node_modules/libp2p/dist/src/upgrader.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/libp2p/dist/src/version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Libp2pNode extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.TypedEventEmitter {\n    constructor(init){\n        super();\n        this.status = \"stopped\";\n        // event bus - components can listen to this emitter to be notified of system events\n        // and also cause them to be emitted\n        const events = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.TypedEventEmitter();\n        const originalDispatch = events.dispatchEvent.bind(events);\n        events.dispatchEvent = (evt)=>{\n            const internalResult = originalDispatch(evt);\n            const externalResult = this.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(evt.type, {\n                detail: evt.detail\n            }));\n            return internalResult || externalResult;\n        };\n        // This emitter gets listened to a lot\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, events);\n        this.peerId = init.peerId;\n        this.logger = init.logger ?? (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_6__.defaultLogger)();\n        this.log = this.logger.forComponent(\"libp2p\");\n        // @ts-expect-error {} may not be of type T\n        this.services = {};\n        const components = this.components = (0,_components_js__WEBPACK_IMPORTED_MODULE_7__.defaultComponents)({\n            peerId: init.peerId,\n            privateKey: init.privateKey,\n            nodeInfo: init.nodeInfo ?? {\n                name: _version_js__WEBPACK_IMPORTED_MODULE_8__.name,\n                version: _version_js__WEBPACK_IMPORTED_MODULE_8__.version\n            },\n            logger: this.logger,\n            events,\n            datastore: init.datastore ?? new datastore_core_memory__WEBPACK_IMPORTED_MODULE_1__.MemoryDatastore(),\n            connectionGater: (0,_config_connection_gater_js__WEBPACK_IMPORTED_MODULE_9__.connectionGater)(init.connectionGater),\n            dns: init.dns\n        });\n        this.peerStore = this.configureComponent(\"peerStore\", new _libp2p_peer_store__WEBPACK_IMPORTED_MODULE_10__.PersistentPeerStore(components, {\n            addressFilter: this.components.connectionGater.filterMultiaddrForPeer,\n            ...init.peerStore\n        }));\n        // Create Metrics\n        if (init.metrics != null) {\n            this.metrics = this.configureComponent(\"metrics\", init.metrics(this.components));\n        }\n        components.events.addEventListener(\"peer:update\", (evt)=>{\n            // if there was no peer previously in the peer store this is a new peer\n            if (evt.detail.previous == null) {\n                const peerInfo = {\n                    id: evt.detail.peer.id,\n                    multiaddrs: evt.detail.peer.addresses.map((a)=>a.multiaddr)\n                };\n                components.events.safeDispatchEvent(\"peer:discovery\", {\n                    detail: peerInfo\n                });\n            }\n        });\n        // Set up connection protector if configured\n        if (init.connectionProtector != null) {\n            this.configureComponent(\"connectionProtector\", init.connectionProtector(components));\n        }\n        // Set up the Upgrader\n        this.components.upgrader = new _upgrader_js__WEBPACK_IMPORTED_MODULE_11__.DefaultUpgrader(this.components, {\n            connectionEncryption: (init.connectionEncryption ?? []).map((fn, index)=>this.configureComponent(`connection-encryption-${index}`, fn(this.components))),\n            muxers: (init.streamMuxers ?? []).map((fn, index)=>this.configureComponent(`stream-muxers-${index}`, fn(this.components))),\n            inboundUpgradeTimeout: init.connectionManager.inboundUpgradeTimeout\n        });\n        // Setup the transport manager\n        this.configureComponent(\"transportManager\", new _transport_manager_js__WEBPACK_IMPORTED_MODULE_12__.DefaultTransportManager(this.components, init.transportManager));\n        // Create the Connection Manager\n        this.configureComponent(\"connectionManager\", new _connection_manager_index_js__WEBPACK_IMPORTED_MODULE_13__.DefaultConnectionManager(this.components, init.connectionManager));\n        // Create the Registrar\n        this.configureComponent(\"registrar\", new _registrar_js__WEBPACK_IMPORTED_MODULE_14__.DefaultRegistrar(this.components));\n        // Addresses {listen, announce, noAnnounce}\n        this.configureComponent(\"addressManager\", new _address_manager_index_js__WEBPACK_IMPORTED_MODULE_15__.DefaultAddressManager(this.components, init.addresses));\n        // Peer routers\n        const peerRouters = (init.peerRouters ?? []).map((fn, index)=>this.configureComponent(`peer-router-${index}`, fn(this.components)));\n        this.peerRouting = this.components.peerRouting = this.configureComponent(\"peerRouting\", new _peer_routing_js__WEBPACK_IMPORTED_MODULE_16__.DefaultPeerRouting(this.components, {\n            routers: peerRouters\n        }));\n        // Content routers\n        const contentRouters = (init.contentRouters ?? []).map((fn, index)=>this.configureComponent(`content-router-${index}`, fn(this.components)));\n        this.contentRouting = this.components.contentRouting = this.configureComponent(\"contentRouting\", new _content_routing_js__WEBPACK_IMPORTED_MODULE_17__.CompoundContentRouting(this.components, {\n            routers: contentRouters\n        }));\n        (init.peerDiscovery ?? []).forEach((fn, index)=>{\n            const service = this.configureComponent(`peer-discovery-${index}`, fn(this.components));\n            service.addEventListener(\"peer\", (evt)=>{\n                this.#onDiscoveryPeer(evt);\n            });\n        });\n        // Transport modules\n        init.transports?.forEach((fn, index)=>{\n            this.components.transportManager.add(this.configureComponent(`transport-${index}`, fn(this.components)));\n        });\n        // User defined modules\n        if (init.services != null) {\n            for (const name of Object.keys(init.services)){\n                const createService = init.services[name];\n                const service = createService(this.components);\n                if (service == null) {\n                    this.log.error(\"service factory %s returned null or undefined instance\", name);\n                    continue;\n                }\n                this.services[name] = service;\n                this.configureComponent(name, service);\n                if (service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_18__.contentRoutingSymbol] != null) {\n                    this.log(\"registering service %s for content routing\", name);\n                    contentRouters.push(service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_18__.contentRoutingSymbol]);\n                }\n                if (service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_19__.peerRoutingSymbol] != null) {\n                    this.log(\"registering service %s for peer routing\", name);\n                    peerRouters.push(service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_19__.peerRoutingSymbol]);\n                }\n                if (service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_20__.peerDiscoverySymbol] != null) {\n                    this.log(\"registering service %s for peer discovery\", name);\n                    service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_20__.peerDiscoverySymbol].addEventListener?.(\"peer\", (evt)=>{\n                        this.#onDiscoveryPeer(evt);\n                    });\n                }\n            }\n        }\n    }\n    configureComponent(name, component) {\n        if (component == null) {\n            this.log.error(\"component %s was null or undefined\", name);\n        }\n        this.components[name] = component;\n        return component;\n    }\n    /**\n     * Starts the libp2p node and all its subsystems\n     */ async start() {\n        if (this.status !== \"stopped\") {\n            return;\n        }\n        this.status = \"starting\";\n        this.log(\"libp2p is starting\");\n        try {\n            await this.components.beforeStart?.();\n            await this.components.start();\n            await this.components.afterStart?.();\n            this.status = \"started\";\n            this.safeDispatchEvent(\"start\", {\n                detail: this\n            });\n            this.log(\"libp2p has started\");\n        } catch (err) {\n            this.log.error(\"An error occurred starting libp2p\", err);\n            // set status to 'started' so this.stop() will stop any running components\n            this.status = \"started\";\n            await this.stop();\n            throw err;\n        }\n    }\n    /**\n     * Stop the libp2p node by closing its listeners and open connections\n     */ async stop() {\n        if (this.status !== \"started\") {\n            return;\n        }\n        this.log(\"libp2p is stopping\");\n        this.status = \"stopping\";\n        await this.components.beforeStop?.();\n        await this.components.stop();\n        await this.components.afterStop?.();\n        this.status = \"stopped\";\n        this.safeDispatchEvent(\"stop\", {\n            detail: this\n        });\n        this.log(\"libp2p has stopped\");\n    }\n    getConnections(peerId) {\n        return this.components.connectionManager.getConnections(peerId);\n    }\n    getDialQueue() {\n        return this.components.connectionManager.getDialQueue();\n    }\n    getPeers() {\n        const peerSet = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_21__.PeerSet();\n        for (const conn of this.components.connectionManager.getConnections()){\n            peerSet.add(conn.remotePeer);\n        }\n        return Array.from(peerSet);\n    }\n    async dial(peer, options = {}) {\n        return this.components.connectionManager.openConnection(peer, {\n            // ensure any userland dials take top priority in the queue\n            priority: 75,\n            ...options\n        });\n    }\n    async dialProtocol(peer, protocols, options = {}) {\n        if (protocols == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__.CodeError(\"no protocols were provided to open a stream\", _errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        protocols = Array.isArray(protocols) ? protocols : [\n            protocols\n        ];\n        if (protocols.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__.CodeError(\"no protocols were provided to open a stream\", _errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        const connection = await this.dial(peer, options);\n        return connection.newStream(protocols, options);\n    }\n    getMultiaddrs() {\n        return this.components.addressManager.getAddresses();\n    }\n    getProtocols() {\n        return this.components.registrar.getProtocols();\n    }\n    async hangUp(peer, options = {}) {\n        if ((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.isMultiaddr)(peer)) {\n            peer = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_24__.peerIdFromString)(peer.getPeerId() ?? \"\");\n        }\n        await this.components.connectionManager.closeConnections(peer, options);\n    }\n    /**\n     * Get the public key for the given peer id\n     */ async getPublicKey(peer, options = {}) {\n        this.log(\"getPublicKey %p\", peer);\n        if (peer.publicKey != null) {\n            return peer.publicKey;\n        }\n        try {\n            const peerInfo = await this.peerStore.get(peer);\n            if (peerInfo.id.publicKey != null) {\n                return peerInfo.id.publicKey;\n            }\n        } catch (err) {\n            if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        const peerKey = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([\n            (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(\"/pk/\"),\n            peer.multihash.digest\n        ]);\n        // search any available content routing methods\n        const bytes = await this.contentRouting.get(peerKey, options);\n        // ensure the returned key is valid\n        (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_25__.unmarshalPublicKey)(bytes);\n        await this.peerStore.patch(peer, {\n            publicKey: bytes\n        });\n        return bytes;\n    }\n    async handle(protocols, handler, options) {\n        if (!Array.isArray(protocols)) {\n            protocols = [\n                protocols\n            ];\n        }\n        await Promise.all(protocols.map(async (protocol)=>{\n            await this.components.registrar.handle(protocol, handler, options);\n        }));\n    }\n    async unhandle(protocols) {\n        if (!Array.isArray(protocols)) {\n            protocols = [\n                protocols\n            ];\n        }\n        await Promise.all(protocols.map(async (protocol)=>{\n            await this.components.registrar.unhandle(protocol);\n        }));\n    }\n    async register(protocol, topology) {\n        return this.components.registrar.register(protocol, topology);\n    }\n    unregister(id) {\n        this.components.registrar.unregister(id);\n    }\n    async isDialable(multiaddr, options = {}) {\n        return this.components.connectionManager.isDialable(multiaddr, options);\n    }\n    /**\n     * Called whenever peer discovery services emit `peer` events and adds peers\n     * to the peer store.\n     */ #onDiscoveryPeer(evt) {\n        const { detail: peer } = evt;\n        if (peer.id.toString() === this.peerId.toString()) {\n            this.log.error(new Error(_errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_DISCOVERED_SELF));\n            return;\n        }\n        void this.components.peerStore.merge(peer.id, {\n            multiaddrs: peer.multiaddrs\n        }).catch((err)=>{\n            this.log.error(err);\n        });\n    }\n}\n/**\n * Returns a new Libp2pNode instance - this exposes more of the internals than the\n * libp2p interface and is useful for testing and debugging.\n */ async function createLibp2pNode(options = {}) {\n    const peerId = options.peerId ??= await (0,_libp2p_peer_id_factory__WEBPACK_IMPORTED_MODULE_26__.createEd25519PeerId)();\n    if (peerId.privateKey == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__.CodeError(\"peer id was missing private key\", \"ERR_MISSING_PRIVATE_KEY\");\n    }\n    options.privateKey ??= await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_25__.unmarshalPrivateKey)(peerId.privateKey);\n    return new Libp2pNode(await (0,_config_js__WEBPACK_IMPORTED_MODULE_27__.validateConfig)(options));\n} //# sourceMappingURL=libp2p.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/libp2p.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/peer-routing.js":
/*!******************************************************!*\
  !*** ./node_modules/libp2p/dist/src/peer-routing.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultPeerRouting: () => (/* binding */ DefaultPeerRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-collections */ \"(ssr)/./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-merge */ \"(ssr)/./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var it_parallel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-parallel */ \"(ssr)/./node_modules/it-parallel/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\n\nclass DefaultPeerRouting {\n    constructor(components, init = {}){\n        this.log = components.logger.forComponent(\"libp2p:peer-routing\");\n        this.peerId = components.peerId;\n        this.peerStore = components.peerStore;\n        this.routers = init.routers ?? [];\n    }\n    /**\n     * Iterates over all peer routers in parallel to find the given peer\n     */ async findPeer(id, options) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(\"No peer routers available\", _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        if (id.toString() === this.peerId.toString()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(\"Should not try to find self\", _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_FIND_SELF);\n        }\n        const self = this;\n        const source = (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...this.routers.map((router)=>(async function*() {\n                try {\n                    yield await router.findPeer(id, options);\n                } catch (err) {\n                    self.log.error(err);\n                }\n            })()));\n        for await (const peer of source){\n            if (peer == null) {\n                continue;\n            }\n            // store the addresses for the peer if found\n            if (peer.multiaddrs.length > 0) {\n                await this.peerStore.merge(peer.id, {\n                    multiaddrs: peer.multiaddrs\n                });\n            }\n            return peer;\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_3__.messages.NOT_FOUND, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NOT_FOUND);\n    }\n    /**\n     * Attempt to find the closest peers on the network to the given key\n     */ async *getClosestPeers(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(\"No peer routers available\", _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        const self = this;\n        const seen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__.PeerSet();\n        for await (const peer of (0,it_parallel__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(async function*() {\n            const source = (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...self.routers.map((router)=>router.getClosestPeers(key, options)));\n            for await (let peer of source){\n                yield async ()=>{\n                    // find multiaddrs if they are missing\n                    if (peer.multiaddrs.length === 0) {\n                        try {\n                            peer = await self.findPeer(peer.id, {\n                                ...options,\n                                useCache: false\n                            });\n                        } catch (err) {\n                            self.log.error(\"could not find peer multiaddrs\", err);\n                            return;\n                        }\n                    }\n                    return peer;\n                };\n            }\n        }())){\n            if (peer == null) {\n                continue;\n            }\n            // store the addresses for the peer if found\n            if (peer.multiaddrs.length > 0) {\n                await this.peerStore.merge(peer.id, {\n                    multiaddrs: peer.multiaddrs\n                });\n            }\n            // deduplicate peers\n            if (seen.has(peer.id)) {\n                continue;\n            }\n            seen.add(peer.id);\n            yield peer;\n        }\n    }\n} //# sourceMappingURL=peer-routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/peer-routing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/registrar.js":
/*!***************************************************!*\
  !*** ./node_modules/libp2p/dist/src/registrar.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MAX_INBOUND_STREAMS: () => (/* binding */ DEFAULT_MAX_INBOUND_STREAMS),\n/* harmony export */   DEFAULT_MAX_OUTBOUND_STREAMS: () => (/* binding */ DEFAULT_MAX_OUTBOUND_STREAMS),\n/* harmony export */   DefaultRegistrar: () => (/* binding */ DefaultRegistrar)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var merge_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! merge-options */ \"(ssr)/./node_modules/merge-options/index.mjs\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n\n\n\nconst DEFAULT_MAX_INBOUND_STREAMS = 32;\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * Responsible for notifying registered protocols of events in the network.\n */ class DefaultRegistrar {\n    constructor(components){\n        this.log = components.logger.forComponent(\"libp2p:registrar\");\n        this.topologies = new Map();\n        this.handlers = new Map();\n        this.components = components;\n        this._onDisconnect = this._onDisconnect.bind(this);\n        this._onPeerUpdate = this._onPeerUpdate.bind(this);\n        this._onPeerIdentify = this._onPeerIdentify.bind(this);\n        this.components.events.addEventListener(\"peer:disconnect\", this._onDisconnect);\n        this.components.events.addEventListener(\"peer:update\", this._onPeerUpdate);\n        this.components.events.addEventListener(\"peer:identify\", this._onPeerIdentify);\n    }\n    getProtocols() {\n        return Array.from(new Set([\n            ...this.handlers.keys()\n        ])).sort();\n    }\n    getHandler(protocol) {\n        const handler = this.handlers.get(protocol);\n        if (handler == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(`No handler registered for protocol ${protocol}`, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NO_HANDLER_FOR_PROTOCOL);\n        }\n        return handler;\n    }\n    getTopologies(protocol) {\n        const topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            return [];\n        }\n        return [\n            ...topologies.values()\n        ];\n    }\n    /**\n     * Registers the `handler` for each protocol\n     */ async handle(protocol, handler, opts) {\n        if (this.handlers.has(protocol)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(`Handler already registered for protocol ${protocol}`, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);\n        }\n        const options = merge_options__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bind({\n            ignoreUndefined: true\n        })({\n            maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n            maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n        }, opts);\n        this.handlers.set(protocol, {\n            handler,\n            options\n        });\n        // Add new protocol to self protocols in the peer store\n        await this.components.peerStore.merge(this.components.peerId, {\n            protocols: [\n                protocol\n            ]\n        });\n    }\n    /**\n     * Removes the handler for each protocol. The protocol\n     * will no longer be supported on streams.\n     */ async unhandle(protocols) {\n        const protocolList = Array.isArray(protocols) ? protocols : [\n            protocols\n        ];\n        protocolList.forEach((protocol)=>{\n            this.handlers.delete(protocol);\n        });\n        // Update self protocols in the peer store\n        await this.components.peerStore.patch(this.components.peerId, {\n            protocols: this.getProtocols()\n        });\n    }\n    /**\n     * Register handlers for a set of multicodecs given\n     */ async register(protocol, topology) {\n        if (topology == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(\"invalid topology\", _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n        // Create topology\n        const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`;\n        let topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            topologies = new Map();\n            this.topologies.set(protocol, topologies);\n        }\n        topologies.set(id, topology);\n        return id;\n    }\n    /**\n     * Unregister topology\n     */ unregister(id) {\n        for (const [protocol, topologies] of this.topologies.entries()){\n            if (topologies.has(id)) {\n                topologies.delete(id);\n                if (topologies.size === 0) {\n                    this.topologies.delete(protocol);\n                }\n            }\n        }\n    }\n    /**\n     * Remove a disconnected peer from the record\n     */ _onDisconnect(evt) {\n        const remotePeer = evt.detail;\n        void this.components.peerStore.get(remotePeer).then((peer)=>{\n            for (const protocol of peer.protocols){\n                const topologies = this.topologies.get(protocol);\n                if (topologies == null) {\n                    continue;\n                }\n                for (const topology of topologies.values()){\n                    topology.onDisconnect?.(remotePeer);\n                }\n            }\n        }).catch((err)=>{\n            if (err.code === _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NOT_FOUND) {\n                // peer has not completed identify so they are not in the peer store\n                return;\n            }\n            this.log.error(\"could not inform topologies of disconnecting peer %p\", remotePeer, err);\n        });\n    }\n    /**\n     * When a peer is updated, if they have removed supported protocols notify any\n     * topologies interested in the removed protocols.\n     */ _onPeerUpdate(evt) {\n        const { peer, previous } = evt.detail;\n        const removed = (previous?.protocols ?? []).filter((protocol)=>!peer.protocols.includes(protocol));\n        for (const protocol of removed){\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                continue;\n            }\n            for (const topology of topologies.values()){\n                topology.onDisconnect?.(peer.id);\n            }\n        }\n    }\n    /**\n     * After identify has completed and we have received the list of supported\n     * protocols, notify any topologies interested in those protocols.\n     */ _onPeerIdentify(evt) {\n        const protocols = evt.detail.protocols;\n        const connection = evt.detail.connection;\n        const peerId = evt.detail.peerId;\n        for (const protocol of protocols){\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                continue;\n            }\n            for (const topology of topologies.values()){\n                if (connection.transient && topology.notifyOnTransient !== true) {\n                    continue;\n                }\n                topology.onConnect?.(peerId, connection);\n            }\n        }\n    }\n} //# sourceMappingURL=registrar.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/registrar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/transport-manager.js":
/*!***********************************************************!*\
  !*** ./node_modules/libp2p/dist/src/transport-manager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTransportManager: () => (/* binding */ DefaultTransportManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/utils/tracked-map */ \"(ssr)/./node_modules/@libp2p/utils/dist/src/tracked-map.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n\n\n\nclass DefaultTransportManager {\n    constructor(components, init = {}){\n        this.log = components.logger.forComponent(\"libp2p:transports\");\n        this.components = components;\n        this.started = false;\n        this.transports = new Map();\n        this.listeners = (0,_libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_0__.trackedMap)({\n            name: \"libp2p_transport_manager_listeners\",\n            metrics: this.components.metrics\n        });\n        this.faultTolerance = init.faultTolerance ?? _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.FaultTolerance.FATAL_ALL;\n    }\n    /**\n     * Adds a `Transport` to the manager\n     */ add(transport) {\n        const tag = transport[Symbol.toStringTag];\n        if (tag == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(\"Transport must have a valid tag\", _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_INVALID_KEY);\n        }\n        if (this.transports.has(tag)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`There is already a transport with the tag ${tag}`, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_DUPLICATE_TRANSPORT);\n        }\n        this.log(\"adding transport %s\", tag);\n        this.transports.set(tag, transport);\n        if (!this.listeners.has(tag)) {\n            this.listeners.set(tag, []);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    async afterStart() {\n        // Listen on the provided transports for the provided addresses\n        const addrs = this.components.addressManager.getListenAddrs();\n        await this.listen(addrs);\n    }\n    /**\n     * Stops all listeners\n     */ async stop() {\n        const tasks = [];\n        for (const [key, listeners] of this.listeners){\n            this.log(\"closing listeners for %s\", key);\n            while(listeners.length > 0){\n                const listener = listeners.pop();\n                if (listener == null) {\n                    continue;\n                }\n                tasks.push(listener.close());\n            }\n        }\n        await Promise.all(tasks);\n        this.log(\"all listeners closed\");\n        for (const key of this.listeners.keys()){\n            this.listeners.set(key, []);\n        }\n        this.started = false;\n    }\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     */ async dial(ma, options) {\n        const transport = this.transportForMultiaddr(ma);\n        if (transport == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`No transport available for address ${String(ma)}`, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_TRANSPORT_UNAVAILABLE);\n        }\n        try {\n            return await transport.dial(ma, {\n                ...options,\n                upgrader: this.components.upgrader\n            });\n        } catch (err) {\n            if (err.code == null) {\n                err.code = _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_TRANSPORT_DIAL_FAILED;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Returns all Multiaddr's the listeners are using\n     */ getAddrs() {\n        let addrs = [];\n        for (const listeners of this.listeners.values()){\n            for (const listener of listeners){\n                addrs = [\n                    ...addrs,\n                    ...listener.getAddrs()\n                ];\n            }\n        }\n        return addrs;\n    }\n    /**\n     * Returns all the transports instances\n     */ getTransports() {\n        return Array.of(...this.transports.values());\n    }\n    /**\n     * Returns all the listener instances\n     */ getListeners() {\n        return Array.of(...this.listeners.values()).flat();\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     */ transportForMultiaddr(ma) {\n        for (const transport of this.transports.values()){\n            const addrs = transport.filter([\n                ma\n            ]);\n            if (addrs.length > 0) {\n                return transport;\n            }\n        }\n    }\n    /**\n     * Starts listeners for each listen Multiaddr\n     */ async listen(addrs) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(\"Not started\", _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NODE_NOT_STARTED);\n        }\n        if (addrs == null || addrs.length === 0) {\n            this.log(\"no addresses were provided for listening, this node is dial only\");\n            return;\n        }\n        const couldNotListen = [];\n        for (const [key, transport] of this.transports.entries()){\n            const supportedAddrs = transport.filter(addrs);\n            const tasks = [];\n            // For each supported multiaddr, create a listener\n            for (const addr of supportedAddrs){\n                this.log(\"creating listener for %s on %a\", key, addr);\n                const listener = transport.createListener({\n                    upgrader: this.components.upgrader\n                });\n                let listeners = this.listeners.get(key) ?? [];\n                if (listeners == null) {\n                    listeners = [];\n                    this.listeners.set(key, listeners);\n                }\n                listeners.push(listener);\n                // Track listen/close events\n                listener.addEventListener(\"listening\", ()=>{\n                    this.components.events.safeDispatchEvent(\"transport:listening\", {\n                        detail: listener\n                    });\n                });\n                listener.addEventListener(\"close\", ()=>{\n                    const index = listeners.findIndex((l)=>l === listener);\n                    // remove the listener\n                    listeners.splice(index, 1);\n                    this.components.events.safeDispatchEvent(\"transport:close\", {\n                        detail: listener\n                    });\n                });\n                // We need to attempt to listen on everything\n                tasks.push(listener.listen(addr));\n            }\n            // Keep track of transports we had no addresses for\n            if (tasks.length === 0) {\n                couldNotListen.push(key);\n                continue;\n            }\n            const results = await Promise.allSettled(tasks);\n            // If we are listening on at least 1 address, succeed.\n            // TODO: we should look at adding a retry (`p-retry`) here to better support\n            // listening on remote addresses as they may be offline. We could then potentially\n            // just wait for any (`p-any`) listener to succeed on each transport before returning\n            const isListening = results.find((r)=>r.status === \"fulfilled\");\n            if (isListening == null && this.faultTolerance !== _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.FaultTolerance.NO_FATAL) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`Transport (${key}) could not listen on any available address`, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_VALID_ADDRESSES);\n            }\n        }\n        // If no transports were able to listen, throw an error. This likely\n        // means we were given addresses we do not have transports for\n        if (couldNotListen.length === this.transports.size) {\n            const message = `no valid addresses were provided for transports [${couldNotListen.join(\", \")}]`;\n            if (this.faultTolerance === _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.FaultTolerance.FATAL_ALL) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(message, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_VALID_ADDRESSES);\n            }\n            this.log(`libp2p in dial mode only: ${message}`);\n        }\n    }\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     */ async remove(key) {\n        const listeners = this.listeners.get(key) ?? [];\n        this.log.trace(\"removing transport %s\", key);\n        // Close any running listeners\n        const tasks = [];\n        this.log.trace(\"closing listeners for %s\", key);\n        while(listeners.length > 0){\n            const listener = listeners.pop();\n            if (listener == null) {\n                continue;\n            }\n            tasks.push(listener.close());\n        }\n        await Promise.all(tasks);\n        this.transports.delete(key);\n        this.listeners.delete(key);\n    }\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     *\n     * @async\n     */ async removeAll() {\n        const tasks = [];\n        for (const key of this.transports.keys()){\n            tasks.push(this.remove(key));\n        }\n        await Promise.all(tasks);\n    }\n} //# sourceMappingURL=transport-manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/transport-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/upgrader.js":
/*!**************************************************!*\
  !*** ./node_modules/libp2p/dist/src/upgrader.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultUpgrader: () => (/* binding */ DefaultUpgrader)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/multistream-select */ \"(ssr)/./node_modules/@libp2p/multistream-select/dist/src/handle.js\");\n/* harmony import */ var _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/multistream-select */ \"(ssr)/./node_modules/@libp2p/multistream-select/dist/src/select.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _connection_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./connection/index.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection/index.js\");\n/* harmony import */ var _connection_manager_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./connection-manager/constants.js */ \"(ssr)/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _registrar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registrar.js */ \"(ssr)/./node_modules/libp2p/dist/src/registrar.js\");\n\n\n\n\n\n\n\nconst DEFAULT_PROTOCOL_SELECT_TIMEOUT = 30000;\nfunction findIncomingStreamLimit(protocol, registrar) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        return options.maxInboundStreams;\n    } catch (err) {\n        if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return _registrar_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_INBOUND_STREAMS;\n}\nfunction findOutgoingStreamLimit(protocol, registrar, options = {}) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        if (options.maxOutboundStreams != null) {\n            return options.maxOutboundStreams;\n        }\n    } catch (err) {\n        if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return options.maxOutboundStreams ?? _registrar_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_OUTBOUND_STREAMS;\n}\nfunction countStreams(protocol, direction, connection) {\n    let streamCount = 0;\n    connection.streams.forEach((stream)=>{\n        if (stream.direction === direction && stream.protocol === protocol) {\n            streamCount++;\n        }\n    });\n    return streamCount;\n}\nclass DefaultUpgrader {\n    constructor(components, init){\n        this.components = components;\n        this.connectionEncryption = new Map();\n        init.connectionEncryption.forEach((encrypter)=>{\n            this.connectionEncryption.set(encrypter.protocol, encrypter);\n        });\n        this.muxers = new Map();\n        init.muxers.forEach((muxer)=>{\n            this.muxers.set(muxer.protocol, muxer);\n        });\n        this.inboundUpgradeTimeout = init.inboundUpgradeTimeout ?? _connection_manager_constants_js__WEBPACK_IMPORTED_MODULE_2__.INBOUND_UPGRADE_TIMEOUT;\n        this.events = components.events;\n    }\n    async shouldBlockConnection(remotePeer, maConn, connectionType) {\n        const connectionGater = this.components.connectionGater[connectionType];\n        if (connectionGater !== undefined) {\n            if (await connectionGater(remotePeer, maConn)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`The multiaddr connection is blocked by gater.${connectionType}`, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_INTERCEPTED);\n            }\n        }\n    }\n    /**\n     * Upgrades an inbound connection\n     */ async upgradeInbound(maConn, opts) {\n        const accept = await this.components.connectionManager.acceptIncomingConnection(maConn);\n        if (!accept) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"connection denied\", _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_DENIED);\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let muxerFactory;\n        let cryptoProtocol;\n        const signal = AbortSignal.timeout(this.inboundUpgradeTimeout);\n        const onAbort = ()=>{\n            maConn.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"inbound upgrade timeout\", _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.ERR_TIMEOUT));\n        };\n        signal.addEventListener(\"abort\", onAbort, {\n            once: true\n        });\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.setMaxListeners)(Infinity, signal);\n        try {\n            if (await this.components.connectionGater.denyInboundConnection?.(maConn) === true) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"The multiaddr connection is blocked by gater.acceptConnection\", _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_INTERCEPTED);\n            }\n            this.components.metrics?.trackMultiaddrConnection(maConn);\n            maConn.log(\"starting the inbound connection upgrade\");\n            // Protect\n            let protectedConn = maConn;\n            if (opts?.skipProtection !== true) {\n                const protector = this.components.connectionProtector;\n                if (protector != null) {\n                    maConn.log(\"protecting the inbound connection\");\n                    protectedConn = await protector.protect(maConn);\n                }\n            }\n            try {\n                // Encrypt the connection\n                encryptedConn = protectedConn;\n                if (opts?.skipEncryption !== true) {\n                    ({ conn: encryptedConn, remotePeer, protocol: cryptoProtocol } = await this._encryptInbound(protectedConn));\n                    const maConn = {\n                        ...protectedConn,\n                        ...encryptedConn\n                    };\n                    await this.shouldBlockConnection(remotePeer, maConn, \"denyInboundEncryptedConnection\");\n                } else {\n                    const idStr = maConn.remoteAddr.getPeerId();\n                    if (idStr == null) {\n                        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"inbound connection that skipped encryption must have a peer id\", _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_INVALID_MULTIADDR);\n                    }\n                    const remotePeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromString)(idStr);\n                    cryptoProtocol = \"native\";\n                    remotePeer = remotePeerId;\n                }\n                upgradedConn = encryptedConn;\n                if (opts?.muxerFactory != null) {\n                    muxerFactory = opts.muxerFactory;\n                } else if (this.muxers.size > 0) {\n                    // Multiplex the connection\n                    const multiplexed = await this._multiplexInbound({\n                        ...protectedConn,\n                        ...encryptedConn\n                    }, this.muxers);\n                    muxerFactory = multiplexed.muxerFactory;\n                    upgradedConn = multiplexed.stream;\n                }\n            } catch (err) {\n                maConn.log.error(\"failed to upgrade inbound connection\", err);\n                throw err;\n            }\n            await this.shouldBlockConnection(remotePeer, maConn, \"denyInboundUpgradedConnection\");\n            maConn.log(\"successfully upgraded inbound connection\");\n            return this._createConnection({\n                cryptoProtocol,\n                direction: \"inbound\",\n                maConn,\n                upgradedConn,\n                muxerFactory,\n                remotePeer,\n                transient: opts?.transient\n            });\n        } finally{\n            signal.removeEventListener(\"abort\", onAbort);\n            this.components.connectionManager.afterUpgradeInbound();\n        }\n    }\n    /**\n     * Upgrades an outbound connection\n     */ async upgradeOutbound(maConn, opts) {\n        const idStr = maConn.remoteAddr.getPeerId();\n        let remotePeerId;\n        if (idStr != null) {\n            remotePeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromString)(idStr);\n            await this.shouldBlockConnection(remotePeerId, maConn, \"denyOutboundConnection\");\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let cryptoProtocol;\n        let muxerFactory;\n        this.components.metrics?.trackMultiaddrConnection(maConn);\n        maConn.log(\"starting the outbound connection upgrade\");\n        // If the transport natively supports encryption, skip connection\n        // protector and encryption\n        // Protect\n        let protectedConn = maConn;\n        if (opts?.skipProtection !== true) {\n            const protector = this.components.connectionProtector;\n            if (protector != null) {\n                protectedConn = await protector.protect(maConn);\n            }\n        }\n        try {\n            // Encrypt the connection\n            encryptedConn = protectedConn;\n            if (opts?.skipEncryption !== true) {\n                ({ conn: encryptedConn, remotePeer, protocol: cryptoProtocol } = await this._encryptOutbound(protectedConn, remotePeerId));\n                const maConn = {\n                    ...protectedConn,\n                    ...encryptedConn\n                };\n                await this.shouldBlockConnection(remotePeer, maConn, \"denyOutboundEncryptedConnection\");\n            } else {\n                if (remotePeerId == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"Encryption was skipped but no peer id was passed\", _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_INVALID_PEER);\n                }\n                cryptoProtocol = \"native\";\n                remotePeer = remotePeerId;\n            }\n            upgradedConn = encryptedConn;\n            if (opts?.muxerFactory != null) {\n                muxerFactory = opts.muxerFactory;\n            } else if (this.muxers.size > 0) {\n                // Multiplex the connection\n                const multiplexed = await this._multiplexOutbound({\n                    ...protectedConn,\n                    ...encryptedConn\n                }, this.muxers);\n                muxerFactory = multiplexed.muxerFactory;\n                upgradedConn = multiplexed.stream;\n            }\n        } catch (err) {\n            maConn.log.error(\"failed to upgrade outbound connection\", err);\n            await maConn.close(err);\n            throw err;\n        }\n        await this.shouldBlockConnection(remotePeer, maConn, \"denyOutboundUpgradedConnection\");\n        maConn.log(\"successfully upgraded outbound connection\");\n        return this._createConnection({\n            cryptoProtocol,\n            direction: \"outbound\",\n            maConn,\n            upgradedConn,\n            muxerFactory,\n            remotePeer,\n            transient: opts?.transient\n        });\n    }\n    /**\n     * A convenience method for generating a new `Connection`\n     */ _createConnection(opts) {\n        const { cryptoProtocol, direction, maConn, upgradedConn, remotePeer, muxerFactory, transient } = opts;\n        let muxer;\n        let newStream;\n        let connection; // eslint-disable-line prefer-const\n        if (muxerFactory != null) {\n            // Create the muxer\n            muxer = muxerFactory.createStreamMuxer({\n                direction,\n                // Run anytime a remote stream is created\n                onIncomingStream: (muxedStream)=>{\n                    if (connection == null) {\n                        return;\n                    }\n                    void Promise.resolve().then(async ()=>{\n                        const protocols = this.components.registrar.getProtocols();\n                        const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__.handle(muxedStream, protocols, {\n                            log: muxedStream.log,\n                            yieldBytes: false\n                        });\n                        if (connection == null) {\n                            return;\n                        }\n                        connection.log(\"incoming stream opened on %s\", protocol);\n                        const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar);\n                        const streamCount = countStreams(protocol, \"inbound\", connection);\n                        if (streamCount === incomingLimit) {\n                            const err = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Too many inbound protocol streams for protocol \"${protocol}\" - limit ${incomingLimit}`, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS);\n                            muxedStream.abort(err);\n                            throw err;\n                        }\n                        // after the handshake the returned stream can have early data so override\n                        // the souce/sink\n                        muxedStream.source = stream.source;\n                        muxedStream.sink = stream.sink;\n                        muxedStream.protocol = protocol;\n                        // allow closing the write end of a not-yet-negotiated stream\n                        if (stream.closeWrite != null) {\n                            muxedStream.closeWrite = stream.closeWrite;\n                        }\n                        // allow closing the read end of a not-yet-negotiated stream\n                        if (stream.closeRead != null) {\n                            muxedStream.closeRead = stream.closeRead;\n                        }\n                        // make sure we don't try to negotiate a stream we are closing\n                        if (stream.close != null) {\n                            muxedStream.close = stream.close;\n                        }\n                        // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                        // the peerstore should ensure that the peer is registered with that protocol\n                        await this.components.peerStore.merge(remotePeer, {\n                            protocols: [\n                                protocol\n                            ]\n                        });\n                        this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                        this._onStream({\n                            connection,\n                            stream: muxedStream,\n                            protocol\n                        });\n                    }).catch(async (err)=>{\n                        connection.log.error(\"error handling incoming stream id %s\", muxedStream.id, err.message, err.code, err.stack);\n                        if (muxedStream.timeline.close == null) {\n                            await muxedStream.close();\n                        }\n                    });\n                }\n            });\n            newStream = async (protocols, options = {})=>{\n                if (muxer == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"Stream is not multiplexed\", _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_MUXER_UNAVAILABLE);\n                }\n                connection.log(\"starting new stream for protocols %s\", protocols);\n                const muxedStream = await muxer.newStream();\n                connection.log.trace(\"started new stream %s for protocols %s\", muxedStream.id, protocols);\n                try {\n                    if (options.signal == null) {\n                        muxedStream.log(\"no abort signal was passed while trying to negotiate protocols %s falling back to default timeout\", protocols);\n                        const signal = AbortSignal.timeout(DEFAULT_PROTOCOL_SELECT_TIMEOUT);\n                        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.setMaxListeners)(Infinity, signal);\n                        options = {\n                            ...options,\n                            signal\n                        };\n                    }\n                    muxedStream.log.trace(\"selecting protocol from protocols %s\", protocols);\n                    const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__.select(muxedStream, protocols, {\n                        ...options,\n                        log: muxedStream.log,\n                        yieldBytes: true\n                    });\n                    muxedStream.log(\"selected protocol %s\", protocol);\n                    const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar, options);\n                    const streamCount = countStreams(protocol, \"outbound\", connection);\n                    if (streamCount >= outgoingLimit) {\n                        const err = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Too many outbound protocol streams for protocol \"${protocol}\" - limit ${outgoingLimit}`, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS);\n                        muxedStream.abort(err);\n                        throw err;\n                    }\n                    // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                    // the peerstore should ensure that the peer is registered with that protocol\n                    await this.components.peerStore.merge(remotePeer, {\n                        protocols: [\n                            protocol\n                        ]\n                    });\n                    // after the handshake the returned stream can have early data so override\n                    // the souce/sink\n                    muxedStream.source = stream.source;\n                    muxedStream.sink = stream.sink;\n                    muxedStream.protocol = protocol;\n                    // allow closing the write end of a not-yet-negotiated stream\n                    if (stream.closeWrite != null) {\n                        muxedStream.closeWrite = stream.closeWrite;\n                    }\n                    // allow closing the read end of a not-yet-negotiated stream\n                    if (stream.closeRead != null) {\n                        muxedStream.closeRead = stream.closeRead;\n                    }\n                    // make sure we don't try to negotiate a stream we are closing\n                    if (stream.close != null) {\n                        muxedStream.close = stream.close;\n                    }\n                    this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                    return muxedStream;\n                } catch (err) {\n                    connection.log.error(\"could not create new stream for protocols %s\", protocols, err);\n                    if (muxedStream.timeline.close == null) {\n                        muxedStream.abort(err);\n                    }\n                    if (err.code != null) {\n                        throw err;\n                    }\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_UNSUPPORTED_PROTOCOL);\n                }\n            };\n            // Pipe all data through the muxer\n            void Promise.all([\n                muxer.sink(upgradedConn.source),\n                upgradedConn.sink(muxer.source)\n            ]).catch((err)=>{\n                connection.log.error(\"error piping data through muxer\", err);\n            });\n        }\n        const _timeline = maConn.timeline;\n        maConn.timeline = new Proxy(_timeline, {\n            set: (...args)=>{\n                if (connection != null && args[1] === \"close\" && args[2] != null && _timeline.close == null) {\n                    // Wait for close to finish before notifying of the closure\n                    (async ()=>{\n                        try {\n                            if (connection.status === \"open\") {\n                                await connection.close();\n                            }\n                        } catch (err) {\n                            connection.log.error(\"error closing connection after timeline close\", err);\n                        } finally{\n                            this.events.safeDispatchEvent(\"connection:close\", {\n                                detail: connection\n                            });\n                        }\n                    })().catch((err)=>{\n                        connection.log.error(\"error thrown while dispatching connection:close event\", err);\n                    });\n                }\n                return Reflect.set(...args);\n            }\n        });\n        maConn.timeline.upgraded = Date.now();\n        const errConnectionNotMultiplexed = ()=>{\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"connection is not multiplexed\", _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_NOT_MULTIPLEXED);\n        };\n        // Create the connection\n        connection = (0,_connection_index_js__WEBPACK_IMPORTED_MODULE_8__.createConnection)({\n            remoteAddr: maConn.remoteAddr,\n            remotePeer,\n            status: \"open\",\n            direction,\n            timeline: maConn.timeline,\n            multiplexer: muxer?.protocol,\n            encryption: cryptoProtocol,\n            transient,\n            logger: this.components.logger,\n            newStream: newStream ?? errConnectionNotMultiplexed,\n            getStreams: ()=>{\n                if (muxer != null) {\n                    return muxer.streams;\n                } else {\n                    return [];\n                }\n            },\n            close: async (options)=>{\n                // Ensure remaining streams are closed gracefully\n                if (muxer != null) {\n                    connection.log.trace(\"close muxer\");\n                    await muxer.close(options);\n                }\n                connection.log.trace(\"close maconn\");\n                // close the underlying transport\n                await maConn.close(options);\n                connection.log.trace(\"closed maconn\");\n            },\n            abort: (err)=>{\n                maConn.abort(err);\n                // Ensure remaining streams are aborted\n                if (muxer != null) {\n                    muxer.abort(err);\n                }\n            }\n        });\n        this.events.safeDispatchEvent(\"connection:open\", {\n            detail: connection\n        });\n        return connection;\n    }\n    /**\n     * Routes incoming streams to the correct handler\n     */ _onStream(opts) {\n        const { connection, stream, protocol } = opts;\n        const { handler, options } = this.components.registrar.getHandler(protocol);\n        if (connection.transient && options.runOnTransientConnection !== true) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"Cannot open protocol stream on transient connection\", \"ERR_TRANSIENT_CONNECTION\");\n        }\n        handler({\n            connection,\n            stream\n        });\n    }\n    /**\n     * Attempts to encrypt the incoming `connection` with the provided `cryptos`\n     */ async _encryptInbound(connection) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        connection.log(\"handling inbound crypto protocol selection\", protocols);\n        try {\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__.handle(connection, protocols, {\n                log: connection.log\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            connection.log(\"encrypting inbound connection using\", protocol);\n            return {\n                ...await encrypter.secureInbound(this.components.peerId, stream),\n                protocol\n            };\n        } catch (err) {\n            connection.log.error(\"encrypting inbound connection to %p failed\", err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(err.message, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Attempts to encrypt the given `connection` with the provided connection encrypters.\n     * The first `ConnectionEncrypter` module to succeed will be used\n     */ async _encryptOutbound(connection, remotePeerId) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        connection.log(\"selecting outbound crypto protocol\", protocols);\n        try {\n            connection.log.trace(\"selecting encrypter from %s\", protocols);\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__.select(connection, protocols, {\n                log: connection.log,\n                yieldBytes: true\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            connection.log(\"encrypting outbound connection to %p using %s\", remotePeerId, encrypter);\n            return {\n                ...await encrypter.secureOutbound(this.components.peerId, stream, remotePeerId),\n                protocol\n            };\n        } catch (err) {\n            connection.log.error(\"encrypting outbound connection to %p failed\", err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(err.message, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Selects one of the given muxers via multistream-select. That\n     * muxer will be used for all future streams on the connection.\n     */ async _multiplexOutbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        connection.log(\"outbound selecting muxer %s\", protocols);\n        try {\n            connection.log.trace(\"selecting stream muxer from %s\", protocols);\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__.select(connection, protocols, {\n                log: connection.log,\n                yieldBytes: true\n            });\n            connection.log(\"selected %s as muxer protocol\", protocol);\n            const muxerFactory = muxers.get(protocol);\n            return {\n                stream,\n                muxerFactory\n            };\n        } catch (err) {\n            connection.log.error(\"error multiplexing outbound connection\", err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n    /**\n     * Registers support for one of the given muxers via multistream-select. The\n     * selected muxer will be used for all future streams on the connection.\n     */ async _multiplexInbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        connection.log(\"inbound handling muxers %s\", protocols);\n        try {\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__.handle(connection, protocols, {\n                log: connection.log\n            });\n            const muxerFactory = muxers.get(protocol);\n            return {\n                stream,\n                muxerFactory\n            };\n        } catch (err) {\n            connection.log.error(\"error multiplexing inbound connection\", err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n} //# sourceMappingURL=upgrader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/upgrader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/libp2p/dist/src/version.js":
/*!*************************************************!*\
  !*** ./node_modules/libp2p/dist/src/version.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"1.4.2\";\nconst name = \"libp2p\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlicDJwL2Rpc3Qvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSxVQUFVLFFBQVE7QUFDeEIsTUFBTUMsT0FBTyxTQUFTLENBQzdCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL2xpYnAycC9kaXN0L3NyYy92ZXJzaW9uLmpzPzhjZjkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnMS40LjInO1xuZXhwb3J0IGNvbnN0IG5hbWUgPSAnbGlicDJwJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/libp2p/dist/src/version.js\n");

/***/ })

};
;