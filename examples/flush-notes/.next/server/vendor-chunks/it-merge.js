"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/it-merge";
exports.ids = ["vendor-chunks/it-merge"];
exports.modules = {

/***/ "(ssr)/./node_modules/it-merge/dist/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/it-merge/dist/src/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-pushable */ \"(ssr)/./node_modules/it-pushable/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * Merge several (async)iterables into one, yield values as they arrive.\n *\n * Nb. sources are iterated over in parallel so the order of emitted items is not guaranteed.\n *\n * @example\n *\n * ```javascript\n * import merge from 'it-merge'\n * import all from 'it-all'\n *\n * // This can also be an iterator, generator, etc\n * const values1 = [0, 1, 2, 3, 4]\n * const values2 = [5, 6, 7, 8, 9]\n *\n * const arr = all(merge(values1, values2))\n *\n * console.info(arr) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import merge from 'it-merge'\n * import all from 'it-all'\n *\n * // This can also be an iterator, async iterator, generator, etc\n * const values1 = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n * const values2 = async function * () {\n *   yield * [5, 6, 7, 8, 9]\n * }\n *\n * const arr = await all(merge(values1(), values2()))\n *\n * console.info(arr) // 0, 1, 5, 6, 2, 3, 4, 7, 8, 9  <- nb. order is not guaranteed\n * ```\n */ \nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction merge(...sources) {\n    const syncSources = [];\n    for (const source of sources){\n        if (!isAsyncIterable(source)) {\n            syncSources.push(source);\n        }\n    }\n    if (syncSources.length === sources.length) {\n        // all sources are synchronous\n        return function*() {\n            for (const source of syncSources){\n                yield* source;\n            }\n        }();\n    }\n    return async function*() {\n        const output = (0,it_pushable__WEBPACK_IMPORTED_MODULE_0__.pushable)({\n            objectMode: true\n        });\n        void Promise.resolve().then(async ()=>{\n            try {\n                await Promise.all(sources.map(async (source)=>{\n                    for await (const item of source){\n                        output.push(item);\n                    }\n                }));\n                output.end();\n            } catch (err) {\n                output.end(err);\n            }\n        });\n        yield* output;\n    }();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (merge); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaXQtbWVyZ2UvZGlzdC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXdDQyxHQUNzQztBQUN2QyxTQUFTQyxnQkFBZ0JDLEtBQUs7SUFDMUIsT0FBT0EsS0FBSyxDQUFDQyxPQUFPQyxhQUFhLENBQUMsSUFBSTtBQUMxQztBQUNBLFNBQVNDLE1BQU0sR0FBR0MsT0FBTztJQUNyQixNQUFNQyxjQUFjLEVBQUU7SUFDdEIsS0FBSyxNQUFNQyxVQUFVRixRQUFTO1FBQzFCLElBQUksQ0FBQ0wsZ0JBQWdCTyxTQUFTO1lBQzFCRCxZQUFZRSxJQUFJLENBQUNEO1FBQ3JCO0lBQ0o7SUFDQSxJQUFJRCxZQUFZRyxNQUFNLEtBQUtKLFFBQVFJLE1BQU0sRUFBRTtRQUN2Qyw4QkFBOEI7UUFDOUIsT0FBTztZQUNILEtBQUssTUFBTUYsVUFBVUQsWUFBYTtnQkFDOUIsT0FBT0M7WUFDWDtRQUNKO0lBQ0o7SUFDQSxPQUFPO1FBQ0gsTUFBTUcsU0FBU1gscURBQVFBLENBQUM7WUFDcEJZLFlBQVk7UUFDaEI7UUFDQSxLQUFLQyxRQUFRQyxPQUFPLEdBQUdDLElBQUksQ0FBQztZQUN4QixJQUFJO2dCQUNBLE1BQU1GLFFBQVFHLEdBQUcsQ0FBQ1YsUUFBUVcsR0FBRyxDQUFDLE9BQU9UO29CQUNqQyxXQUFXLE1BQU1VLFFBQVFWLE9BQVE7d0JBQzdCRyxPQUFPRixJQUFJLENBQUNTO29CQUNoQjtnQkFDSjtnQkFDQVAsT0FBT1EsR0FBRztZQUNkLEVBQ0EsT0FBT0MsS0FBSztnQkFDUlQsT0FBT1EsR0FBRyxDQUFDQztZQUNmO1FBQ0o7UUFDQSxPQUFPVDtJQUNYO0FBQ0o7QUFDQSxpRUFBZU4sS0FBS0EsRUFBQyxDQUNyQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9pdC1tZXJnZS9kaXN0L3NyYy9pbmRleC5qcz8zN2EyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKlxuICogTWVyZ2Ugc2V2ZXJhbCAoYXN5bmMpaXRlcmFibGVzIGludG8gb25lLCB5aWVsZCB2YWx1ZXMgYXMgdGhleSBhcnJpdmUuXG4gKlxuICogTmIuIHNvdXJjZXMgYXJlIGl0ZXJhdGVkIG92ZXIgaW4gcGFyYWxsZWwgc28gdGhlIG9yZGVyIG9mIGVtaXR0ZWQgaXRlbXMgaXMgbm90IGd1YXJhbnRlZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgbWVyZ2UgZnJvbSAnaXQtbWVyZ2UnXG4gKiBpbXBvcnQgYWxsIGZyb20gJ2l0LWFsbCdcbiAqXG4gKiAvLyBUaGlzIGNhbiBhbHNvIGJlIGFuIGl0ZXJhdG9yLCBnZW5lcmF0b3IsIGV0Y1xuICogY29uc3QgdmFsdWVzMSA9IFswLCAxLCAyLCAzLCA0XVxuICogY29uc3QgdmFsdWVzMiA9IFs1LCA2LCA3LCA4LCA5XVxuICpcbiAqIGNvbnN0IGFyciA9IGFsbChtZXJnZSh2YWx1ZXMxLCB2YWx1ZXMyKSlcbiAqXG4gKiBjb25zb2xlLmluZm8oYXJyKSAvLyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5XG4gKiBgYGBcbiAqXG4gKiBBc3luYyBzb3VyY2VzIG11c3QgYmUgYXdhaXRlZDpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgbWVyZ2UgZnJvbSAnaXQtbWVyZ2UnXG4gKiBpbXBvcnQgYWxsIGZyb20gJ2l0LWFsbCdcbiAqXG4gKiAvLyBUaGlzIGNhbiBhbHNvIGJlIGFuIGl0ZXJhdG9yLCBhc3luYyBpdGVyYXRvciwgZ2VuZXJhdG9yLCBldGNcbiAqIGNvbnN0IHZhbHVlczEgPSBhc3luYyBmdW5jdGlvbiAqICgpIHtcbiAqICAgeWllbGQgKiBbMCwgMSwgMiwgMywgNF1cbiAqIH1cbiAqIGNvbnN0IHZhbHVlczIgPSBhc3luYyBmdW5jdGlvbiAqICgpIHtcbiAqICAgeWllbGQgKiBbNSwgNiwgNywgOCwgOV1cbiAqIH1cbiAqXG4gKiBjb25zdCBhcnIgPSBhd2FpdCBhbGwobWVyZ2UodmFsdWVzMSgpLCB2YWx1ZXMyKCkpKVxuICpcbiAqIGNvbnNvbGUuaW5mbyhhcnIpIC8vIDAsIDEsIDUsIDYsIDIsIDMsIDQsIDcsIDgsIDkgIDwtIG5iLiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZFxuICogYGBgXG4gKi9cbmltcG9ydCB7IHB1c2hhYmxlIH0gZnJvbSAnaXQtcHVzaGFibGUnO1xuZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSAhPSBudWxsO1xufVxuZnVuY3Rpb24gbWVyZ2UoLi4uc291cmNlcykge1xuICAgIGNvbnN0IHN5bmNTb3VyY2VzID0gW107XG4gICAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgICAgICBpZiAoIWlzQXN5bmNJdGVyYWJsZShzb3VyY2UpKSB7XG4gICAgICAgICAgICBzeW5jU291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN5bmNTb3VyY2VzLmxlbmd0aCA9PT0gc291cmNlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gYWxsIHNvdXJjZXMgYXJlIHN5bmNocm9ub3VzXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIHN5bmNTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIHNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9XG4gICAgcmV0dXJuIChhc3luYyBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBwdXNoYWJsZSh7XG4gICAgICAgICAgICBvYmplY3RNb2RlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB2b2lkIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzb3VyY2VzLm1hcChhc3luYyAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIG91dHB1dC5lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQuZW5kKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB5aWVsZCogb3V0cHV0O1xuICAgIH0pKCk7XG59XG5leHBvcnQgZGVmYXVsdCBtZXJnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJwdXNoYWJsZSIsImlzQXN5bmNJdGVyYWJsZSIsInRoaW5nIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIm1lcmdlIiwic291cmNlcyIsInN5bmNTb3VyY2VzIiwic291cmNlIiwicHVzaCIsImxlbmd0aCIsIm91dHB1dCIsIm9iamVjdE1vZGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJhbGwiLCJtYXAiLCJpdGVtIiwiZW5kIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/it-merge/dist/src/index.js\n");

/***/ })

};
;