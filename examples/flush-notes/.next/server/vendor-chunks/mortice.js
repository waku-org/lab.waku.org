"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mortice";
exports.ids = ["vendor-chunks/mortice"];
exports.modules = {

/***/ "(ssr)/./node_modules/mortice/dist/src/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/mortice/dist/src/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MASTER_GRANT_READ_LOCK: () => (/* binding */ MASTER_GRANT_READ_LOCK),\n/* harmony export */   MASTER_GRANT_WRITE_LOCK: () => (/* binding */ MASTER_GRANT_WRITE_LOCK),\n/* harmony export */   WORKER_RELEASE_READ_LOCK: () => (/* binding */ WORKER_RELEASE_READ_LOCK),\n/* harmony export */   WORKER_RELEASE_WRITE_LOCK: () => (/* binding */ WORKER_RELEASE_WRITE_LOCK),\n/* harmony export */   WORKER_REQUEST_READ_LOCK: () => (/* binding */ WORKER_REQUEST_READ_LOCK),\n/* harmony export */   WORKER_REQUEST_WRITE_LOCK: () => (/* binding */ WORKER_REQUEST_WRITE_LOCK)\n/* harmony export */ });\nconst WORKER_REQUEST_READ_LOCK = \"lock:worker:request-read\";\nconst WORKER_RELEASE_READ_LOCK = \"lock:worker:release-read\";\nconst MASTER_GRANT_READ_LOCK = \"lock:master:grant-read\";\nconst WORKER_REQUEST_WRITE_LOCK = \"lock:worker:request-write\";\nconst WORKER_RELEASE_WRITE_LOCK = \"lock:worker:release-write\";\nconst MASTER_GRANT_WRITE_LOCK = \"lock:master:grant-write\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9ydGljZS9kaXN0L3NyYy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sTUFBTUEsMkJBQTJCLDJCQUEyQjtBQUM1RCxNQUFNQywyQkFBMkIsMkJBQTJCO0FBQzVELE1BQU1DLHlCQUF5Qix5QkFBeUI7QUFDeEQsTUFBTUMsNEJBQTRCLDRCQUE0QjtBQUM5RCxNQUFNQyw0QkFBNEIsNEJBQTRCO0FBQzlELE1BQU1DLDBCQUEwQiwwQkFBMEIsQ0FDakUscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvbW9ydGljZS9kaXN0L3NyYy9jb25zdGFudHMuanM/OWU2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgV09SS0VSX1JFUVVFU1RfUkVBRF9MT0NLID0gJ2xvY2s6d29ya2VyOnJlcXVlc3QtcmVhZCc7XG5leHBvcnQgY29uc3QgV09SS0VSX1JFTEVBU0VfUkVBRF9MT0NLID0gJ2xvY2s6d29ya2VyOnJlbGVhc2UtcmVhZCc7XG5leHBvcnQgY29uc3QgTUFTVEVSX0dSQU5UX1JFQURfTE9DSyA9ICdsb2NrOm1hc3RlcjpncmFudC1yZWFkJztcbmV4cG9ydCBjb25zdCBXT1JLRVJfUkVRVUVTVF9XUklURV9MT0NLID0gJ2xvY2s6d29ya2VyOnJlcXVlc3Qtd3JpdGUnO1xuZXhwb3J0IGNvbnN0IFdPUktFUl9SRUxFQVNFX1dSSVRFX0xPQ0sgPSAnbG9jazp3b3JrZXI6cmVsZWFzZS13cml0ZSc7XG5leHBvcnQgY29uc3QgTUFTVEVSX0dSQU5UX1dSSVRFX0xPQ0sgPSAnbG9jazptYXN0ZXI6Z3JhbnQtd3JpdGUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJXT1JLRVJfUkVRVUVTVF9SRUFEX0xPQ0siLCJXT1JLRVJfUkVMRUFTRV9SRUFEX0xPQ0siLCJNQVNURVJfR1JBTlRfUkVBRF9MT0NLIiwiV09SS0VSX1JFUVVFU1RfV1JJVEVfTE9DSyIsIldPUktFUl9SRUxFQVNFX1dSSVRFX0xPQ0siLCJNQVNURVJfR1JBTlRfV1JJVEVfTE9DSyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mortice/dist/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mortice/dist/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/mortice/dist/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createMortice)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! p-queue */ \"(ssr)/./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var p_timeout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-timeout */ \"(ssr)/./node_modules/p-timeout/index.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"(ssr)/./node_modules/mortice/dist/src/node.js\");\n/**\n * @packageDocumentation\n *\n * - Reads occur concurrently\n * - Writes occur one at a time\n * - No reads occur while a write operation is in progress\n * - Locks can be created with different names\n * - Reads/writes can time out\n *\n * ## Usage\n *\n * ```javascript\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * // the lock name & options objects are both optional\n * const mutex = mortice('my-lock', {\n *\n *   // how long before write locks time out (default: 24 hours)\n *   timeout: 30000,\n *\n *    // control how many read operations are executed concurrently (default: Infinity)\n *   concurrency: 5,\n *\n *   // by default the the lock will be held on the main thread, set this to true if the\n *   // a lock should reside on each worker (default: false)\n *   singleProcess: false\n * })\n *\n * Promise.all([\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 2')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.writeLock()\n *\n *     try {\n *       await delay(1000)\n *\n *       console.info('write 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 3')\n *     } finally {\n *       release()\n *     }\n *   })()\n * ])\n * ```\n *\n *     read 1\n *     read 2\n *     <small pause>\n *     write 1\n *     read 3\n *\n * ## Browser\n *\n * Because there's no global way to evesdrop on messages sent by Web Workers, please pass all created Web Workers to the [`observable-webworkers`](https://npmjs.org/package/observable-webworkers) module:\n *\n * ```javascript\n * // main.js\n * import mortice from 'mortice'\n * import observe from 'observable-webworkers'\n *\n * // create our lock on the main thread, it will be held here\n * const mutex = mortice()\n *\n * const worker = new Worker('worker.js')\n *\n * observe(worker)\n * ```\n *\n * ```javascript\n * // worker.js\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * const mutex = mortice()\n *\n * let release = await mutex.readLock()\n * // read something\n * release()\n *\n * release = await mutex.writeLock()\n * // write something\n * release()\n * ```\n */ \n\n\nconst mutexes = {};\nlet implementation;\nasync function createReleaseable(queue, options) {\n    let res;\n    const p = new Promise((resolve)=>{\n        res = resolve;\n    });\n    void queue.add(async ()=>(0,p_timeout__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((async ()=>{\n            await new Promise((resolve)=>{\n                res(()=>{\n                    resolve();\n                });\n            });\n        })(), {\n            milliseconds: options.timeout\n        }));\n    return p;\n}\nconst createMutex = (name, options)=>{\n    if (implementation.isWorker === true) {\n        return {\n            readLock: implementation.readLock(name, options),\n            writeLock: implementation.writeLock(name, options)\n        };\n    }\n    const masterQueue = new p_queue__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        concurrency: 1\n    });\n    let readQueue;\n    return {\n        async readLock () {\n            // If there's already a read queue, just add the task to it\n            if (readQueue != null) {\n                return createReleaseable(readQueue, options);\n            }\n            // Create a new read queue\n            readQueue = new p_queue__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                concurrency: options.concurrency,\n                autoStart: false\n            });\n            const localReadQueue = readQueue;\n            // Add the task to the read queue\n            const readPromise = createReleaseable(readQueue, options);\n            void masterQueue.add(async ()=>{\n                // Start the task only once the master queue has completed processing\n                // any previous tasks\n                localReadQueue.start();\n                // Once all the tasks in the read queue have completed, remove it so\n                // that the next read lock will occur after any write locks that were\n                // started in the interim\n                await localReadQueue.onIdle().then(()=>{\n                    if (readQueue === localReadQueue) {\n                        readQueue = null;\n                    }\n                });\n            });\n            return readPromise;\n        },\n        async writeLock () {\n            // Remove the read queue reference, so that any later read locks will be\n            // added to a new queue that starts after this write lock has been\n            // released\n            readQueue = null;\n            return createReleaseable(masterQueue, options);\n        }\n    };\n};\nconst defaultOptions = {\n    name: \"lock\",\n    concurrency: Infinity,\n    timeout: 84600000,\n    singleProcess: false\n};\nfunction createMortice(options) {\n    const opts = Object.assign({}, defaultOptions, options);\n    if (implementation == null) {\n        implementation = (0,_node_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(opts);\n        if (implementation.isWorker !== true) {\n            // we are master, set up worker requests\n            implementation.addEventListener(\"requestReadLock\", (event)=>{\n                if (mutexes[event.data.name] == null) {\n                    return;\n                }\n                void mutexes[event.data.name].readLock().then(async (release)=>event.data.handler().finally(()=>{\n                        release();\n                    }));\n            });\n            implementation.addEventListener(\"requestWriteLock\", async (event)=>{\n                if (mutexes[event.data.name] == null) {\n                    return;\n                }\n                void mutexes[event.data.name].writeLock().then(async (release)=>event.data.handler().finally(()=>{\n                        release();\n                    }));\n            });\n        }\n    }\n    if (mutexes[opts.name] == null) {\n        mutexes[opts.name] = createMutex(opts.name, opts);\n    }\n    return mutexes[opts.name];\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mortice/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mortice/dist/src/node.js":
/*!***********************************************!*\
  !*** ./node_modules/mortice/dist/src/node.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var cluster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cluster */ \"cluster\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/mortice/dist/src/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/mortice/dist/src/utils.js\");\n\n\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType)=>{\n    return (worker, requestEvent)=>{\n        if (requestEvent != null && requestEvent.type === requestType) {\n            emitter.dispatchEvent(new MessageEvent(masterEvent, {\n                data: {\n                    name: requestEvent.name,\n                    handler: async ()=>{\n                        // grant lock to worker\n                        worker.send({\n                            type: grantType,\n                            name: requestEvent.name,\n                            identifier: requestEvent.identifier\n                        });\n                        // wait for worker to finish\n                        await new Promise((resolve)=>{\n                            const releaseEventListener = (releaseEvent)=>{\n                                if (releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n                                    worker.removeListener(\"message\", releaseEventListener);\n                                    resolve();\n                                }\n                            };\n                            worker.on(\"message\", releaseEventListener);\n                        });\n                    }\n                }\n            }));\n        }\n    };\n};\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType)=>{\n    return async ()=>{\n        const id = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.nanoid)();\n        if (process.send == null) {\n            throw new Error(\"No send method on process - are we a cluster worker?\");\n        }\n        process.send({\n            type: requestType,\n            identifier: id,\n            name\n        });\n        return new Promise((resolve)=>{\n            const listener = (event)=>{\n                if (event.type === grantType && event.identifier === id) {\n                    process.removeListener(\"message\", listener);\n                    // grant lock\n                    resolve(()=>{\n                        if (process.send == null) {\n                            throw new Error(\"No send method on process - are we a cluster worker?\");\n                        }\n                        // release lock\n                        process.send({\n                            type: releaseType,\n                            identifier: id,\n                            name\n                        });\n                    });\n                }\n            };\n            process.on(\"message\", listener);\n        });\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((options)=>{\n    if (cluster__WEBPACK_IMPORTED_MODULE_0__.isPrimary || options.singleProcess) {\n        const emitter = new EventTarget();\n        cluster__WEBPACK_IMPORTED_MODULE_0__.on(\"message\", handleWorkerLockRequest(emitter, \"requestReadLock\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_READ_LOCK));\n        cluster__WEBPACK_IMPORTED_MODULE_0__.on(\"message\", handleWorkerLockRequest(emitter, \"requestWriteLock\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_WRITE_LOCK));\n        return emitter;\n    }\n    return {\n        isWorker: true,\n        readLock: (name)=>makeWorkerLockRequest(name, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_READ_LOCK),\n        writeLock: (name)=>makeWorkerLockRequest(name, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_WRITE_LOCK)\n    };\n}); //# sourceMappingURL=node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mortice/dist/src/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mortice/dist/src/utils.js":
/*!************************************************!*\
  !*** ./node_modules/mortice/dist/src/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nanoid: () => (/* binding */ nanoid)\n/* harmony export */ });\nconst nanoid = (size = 21)=>{\n    return Math.random().toString().substring(2);\n}; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9ydGljZS9kaXN0L3NyYy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsU0FBUyxDQUFDQyxPQUFPLEVBQUU7SUFDNUIsT0FBT0MsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLEdBQUdDLFNBQVMsQ0FBQztBQUM5QyxFQUFFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvbW9ydGljZS9kaXN0L3NyYy91dGlscy5qcz83YjE0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMik7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIm5hbm9pZCIsInNpemUiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mortice/dist/src/utils.js\n");

/***/ })

};
;