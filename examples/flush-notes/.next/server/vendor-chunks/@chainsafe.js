"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@chainsafe";
exports.ids = ["vendor-chunks/@chainsafe"];
exports.modules = {

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/common/const.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/common/const.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TAG_LENGTH = exports.DATA_CHUNK_LENGTH = exports.NONCE_LENGTH = exports.KEY_LENGTH = void 0;\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\n// same to libp2p-noise\nexports.DATA_CHUNK_LENGTH = 65536;\nexports.TAG_LENGTH = 16; //# sourceMappingURL=const.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9jb21tb24vY29uc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDbEdBLGtCQUFrQixHQUFHO0FBQ3JCQSxvQkFBb0IsR0FBRztBQUN2Qix1QkFBdUI7QUFDdkJBLHlCQUF5QixHQUFHO0FBQzVCQSxrQkFBa0IsR0FBRyxJQUNyQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2FzLWNoYWNoYTIwcG9seTEzMDUvbGliL2NvbW1vbi9jb25zdC5qcz83OGNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UQUdfTEVOR1RIID0gZXhwb3J0cy5EQVRBX0NIVU5LX0xFTkdUSCA9IGV4cG9ydHMuTk9OQ0VfTEVOR1RIID0gZXhwb3J0cy5LRVlfTEVOR1RIID0gdm9pZCAwO1xuZXhwb3J0cy5LRVlfTEVOR1RIID0gMzI7XG5leHBvcnRzLk5PTkNFX0xFTkdUSCA9IDEyO1xuLy8gc2FtZSB0byBsaWJwMnAtbm9pc2VcbmV4cG9ydHMuREFUQV9DSFVOS19MRU5HVEggPSA2NTUzNjtcbmV4cG9ydHMuVEFHX0xFTkdUSCA9IDE2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVEFHX0xFTkdUSCIsIkRBVEFfQ0hVTktfTEVOR1RIIiwiTk9OQ0VfTEVOR1RIIiwiS0VZX0xFTkdUSCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/common/const.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.chacha20StreamXOR = void 0;\nconst wasm_1 = __webpack_require__(/*! ./wasm */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasm.js\");\nconst ctx = wasm_1.newInstance();\nconst wasmInputValue = ctx.chacha20Input.value;\nconst wasmOutputValue = ctx.chacha20Output.value;\nconst wasmKeyValue = ctx.chacha20Key.value;\nconst wasmCounterValue = ctx.chacha20Counter.value;\nconst { CHACHA20_INPUT_LENGTH, KEY_LENGTH, CHACHA20_COUNTER_LENGTH } = ctx;\nconst inputArr = new Uint8Array(ctx.memory.buffer, wasmInputValue, CHACHA20_INPUT_LENGTH);\nconst outputArr = new Uint8Array(ctx.memory.buffer, wasmOutputValue, CHACHA20_INPUT_LENGTH);\nconst keyArr = new Uint8Array(ctx.memory.buffer, wasmKeyValue, KEY_LENGTH);\nconst counterArr = new Uint8Array(ctx.memory.buffer, wasmCounterValue, CHACHA20_COUNTER_LENGTH);\n// const debugArray = new Uint32Array(ctx.memory.buffer, ctx.debug.value, 64);\n/**\n * chacha 20 function.\n * @param key a 32 byte Uint8Array\n * @param nonce a 16 byte Uint8Array\n * @param src\n * @returns\n */ function chacha20StreamXOR(key, nonce, src) {\n    // We only support 256-bit keys.\n    if (key.length != KEY_LENGTH) {\n        throw new Error(\"ChaCha: key size must be 32 bytes, expected \" + KEY_LENGTH + \" got \" + key.length);\n    }\n    if (nonce.length != CHACHA20_COUNTER_LENGTH) {\n        throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n    }\n    // init\n    keyArr.set(key);\n    counterArr.set(nonce);\n    const output = new Uint8Array(src.length);\n    // chunkify the work\n    const loop = Math.floor(src.length / CHACHA20_INPUT_LENGTH);\n    for(let i = 0; i <= loop; i++){\n        const start = i * CHACHA20_INPUT_LENGTH;\n        const end = Math.min((i + 1) * CHACHA20_INPUT_LENGTH, src.length);\n        inputArr.set(loop === 0 ? src : src.subarray(start, end));\n        const length = end - start;\n        const dataLength = ctx.chacha20StreamXORUpdate(length);\n        output.set(dataLength === CHACHA20_INPUT_LENGTH ? outputArr : outputArr.subarray(0, dataLength), start);\n    }\n    return output;\n}\nexports.chacha20StreamXOR = chacha20StreamXOR; //# sourceMappingURL=chacha20.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvY2hhY2hhMjAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMsbUZBQVE7QUFDL0IsTUFBTUMsTUFBTUYsT0FBT0csV0FBVztBQUM5QixNQUFNQyxpQkFBaUJGLElBQUlHLGFBQWEsQ0FBQ1AsS0FBSztBQUM5QyxNQUFNUSxrQkFBa0JKLElBQUlLLGNBQWMsQ0FBQ1QsS0FBSztBQUNoRCxNQUFNVSxlQUFlTixJQUFJTyxXQUFXLENBQUNYLEtBQUs7QUFDMUMsTUFBTVksbUJBQW1CUixJQUFJUyxlQUFlLENBQUNiLEtBQUs7QUFDbEQsTUFBTSxFQUFFYyxxQkFBcUIsRUFBRUMsVUFBVSxFQUFFQyx1QkFBdUIsRUFBRSxHQUFHWjtBQUN2RSxNQUFNYSxXQUFXLElBQUlDLFdBQVdkLElBQUllLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFZCxnQkFBZ0JRO0FBQ25FLE1BQU1PLFlBQVksSUFBSUgsV0FBV2QsSUFBSWUsTUFBTSxDQUFDQyxNQUFNLEVBQUVaLGlCQUFpQk07QUFDckUsTUFBTVEsU0FBUyxJQUFJSixXQUFXZCxJQUFJZSxNQUFNLENBQUNDLE1BQU0sRUFBRVYsY0FBY0s7QUFDL0QsTUFBTVEsYUFBYSxJQUFJTCxXQUFXZCxJQUFJZSxNQUFNLENBQUNDLE1BQU0sRUFBRVIsa0JBQWtCSTtBQUN2RSw4RUFBOEU7QUFDOUU7Ozs7OztDQU1DLEdBQ0QsU0FBU2Ysa0JBQWtCdUIsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLEdBQUc7SUFDdEMsZ0NBQWdDO0lBQ2hDLElBQUlGLElBQUlHLE1BQU0sSUFBSVosWUFBWTtRQUMxQixNQUFNLElBQUlhLE1BQU0saURBQWlEYixhQUFhLFVBQVVTLElBQUlHLE1BQU07SUFDdEc7SUFDQSxJQUFJRixNQUFNRSxNQUFNLElBQUlYLHlCQUF5QjtRQUN6QyxNQUFNLElBQUlZLE1BQU07SUFDcEI7SUFDQSxPQUFPO0lBQ1BOLE9BQU9PLEdBQUcsQ0FBQ0w7SUFDWEQsV0FBV00sR0FBRyxDQUFDSjtJQUNmLE1BQU1LLFNBQVMsSUFBSVosV0FBV1EsSUFBSUMsTUFBTTtJQUN4QyxvQkFBb0I7SUFDcEIsTUFBTUksT0FBT0MsS0FBS0MsS0FBSyxDQUFDUCxJQUFJQyxNQUFNLEdBQUdiO0lBQ3JDLElBQUssSUFBSW9CLElBQUksR0FBR0EsS0FBS0gsTUFBTUcsSUFBSztRQUM1QixNQUFNQyxRQUFRRCxJQUFJcEI7UUFDbEIsTUFBTXNCLE1BQU1KLEtBQUtLLEdBQUcsQ0FBQyxDQUFDSCxJQUFJLEtBQUtwQix1QkFBdUJZLElBQUlDLE1BQU07UUFDaEVWLFNBQVNZLEdBQUcsQ0FBQ0UsU0FBUyxJQUFJTCxNQUFNQSxJQUFJWSxRQUFRLENBQUNILE9BQU9DO1FBQ3BELE1BQU1ULFNBQVNTLE1BQU1EO1FBQ3JCLE1BQU1JLGFBQWFuQyxJQUFJb0MsdUJBQXVCLENBQUNiO1FBQy9DRyxPQUFPRCxHQUFHLENBQUNVLGVBQWV6Qix3QkFBd0JPLFlBQVlBLFVBQVVpQixRQUFRLENBQUMsR0FBR0MsYUFBYUo7SUFDckc7SUFDQSxPQUFPTDtBQUNYO0FBQ0EvQix5QkFBeUIsR0FBR0UsbUJBQzVCLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvYXMtY2hhY2hhMjBwb2x5MTMwNS9saWIvc3JjL2NoYWNoYTIwLmpzPzRmNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoYWNoYTIwU3RyZWFtWE9SID0gdm9pZCAwO1xuY29uc3Qgd2FzbV8xID0gcmVxdWlyZShcIi4vd2FzbVwiKTtcbmNvbnN0IGN0eCA9IHdhc21fMS5uZXdJbnN0YW5jZSgpO1xuY29uc3Qgd2FzbUlucHV0VmFsdWUgPSBjdHguY2hhY2hhMjBJbnB1dC52YWx1ZTtcbmNvbnN0IHdhc21PdXRwdXRWYWx1ZSA9IGN0eC5jaGFjaGEyME91dHB1dC52YWx1ZTtcbmNvbnN0IHdhc21LZXlWYWx1ZSA9IGN0eC5jaGFjaGEyMEtleS52YWx1ZTtcbmNvbnN0IHdhc21Db3VudGVyVmFsdWUgPSBjdHguY2hhY2hhMjBDb3VudGVyLnZhbHVlO1xuY29uc3QgeyBDSEFDSEEyMF9JTlBVVF9MRU5HVEgsIEtFWV9MRU5HVEgsIENIQUNIQTIwX0NPVU5URVJfTEVOR1RIIH0gPSBjdHg7XG5jb25zdCBpbnB1dEFyciA9IG5ldyBVaW50OEFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtSW5wdXRWYWx1ZSwgQ0hBQ0hBMjBfSU5QVVRfTEVOR1RIKTtcbmNvbnN0IG91dHB1dEFyciA9IG5ldyBVaW50OEFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtT3V0cHV0VmFsdWUsIENIQUNIQTIwX0lOUFVUX0xFTkdUSCk7XG5jb25zdCBrZXlBcnIgPSBuZXcgVWludDhBcnJheShjdHgubWVtb3J5LmJ1ZmZlciwgd2FzbUtleVZhbHVlLCBLRVlfTEVOR1RIKTtcbmNvbnN0IGNvdW50ZXJBcnIgPSBuZXcgVWludDhBcnJheShjdHgubWVtb3J5LmJ1ZmZlciwgd2FzbUNvdW50ZXJWYWx1ZSwgQ0hBQ0hBMjBfQ09VTlRFUl9MRU5HVEgpO1xuLy8gY29uc3QgZGVidWdBcnJheSA9IG5ldyBVaW50MzJBcnJheShjdHgubWVtb3J5LmJ1ZmZlciwgY3R4LmRlYnVnLnZhbHVlLCA2NCk7XG4vKipcbiAqIGNoYWNoYSAyMCBmdW5jdGlvbi5cbiAqIEBwYXJhbSBrZXkgYSAzMiBieXRlIFVpbnQ4QXJyYXlcbiAqIEBwYXJhbSBub25jZSBhIDE2IGJ5dGUgVWludDhBcnJheVxuICogQHBhcmFtIHNyY1xuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gY2hhY2hhMjBTdHJlYW1YT1Ioa2V5LCBub25jZSwgc3JjKSB7XG4gICAgLy8gV2Ugb25seSBzdXBwb3J0IDI1Ni1iaXQga2V5cy5cbiAgICBpZiAoa2V5Lmxlbmd0aCAhPSBLRVlfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYUNoYToga2V5IHNpemUgbXVzdCBiZSAzMiBieXRlcywgZXhwZWN0ZWQgXCIgKyBLRVlfTEVOR1RIICsgXCIgZ290IFwiICsga2V5Lmxlbmd0aCk7XG4gICAgfVxuICAgIGlmIChub25jZS5sZW5ndGggIT0gQ0hBQ0hBMjBfQ09VTlRFUl9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhQ2hhIG5vbmNlIHdpdGggY291bnRlciBtdXN0IGJlIDE2IGJ5dGVzXCIpO1xuICAgIH1cbiAgICAvLyBpbml0XG4gICAga2V5QXJyLnNldChrZXkpO1xuICAgIGNvdW50ZXJBcnIuc2V0KG5vbmNlKTtcbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheShzcmMubGVuZ3RoKTtcbiAgICAvLyBjaHVua2lmeSB0aGUgd29ya1xuICAgIGNvbnN0IGxvb3AgPSBNYXRoLmZsb29yKHNyYy5sZW5ndGggLyBDSEFDSEEyMF9JTlBVVF9MRU5HVEgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxvb3A7IGkrKykge1xuICAgICAgICBjb25zdCBzdGFydCA9IGkgKiBDSEFDSEEyMF9JTlBVVF9MRU5HVEg7XG4gICAgICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKChpICsgMSkgKiBDSEFDSEEyMF9JTlBVVF9MRU5HVEgsIHNyYy5sZW5ndGgpO1xuICAgICAgICBpbnB1dEFyci5zZXQobG9vcCA9PT0gMCA/IHNyYyA6IHNyYy5zdWJhcnJheShzdGFydCwgZW5kKSk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gY3R4LmNoYWNoYTIwU3RyZWFtWE9SVXBkYXRlKGxlbmd0aCk7XG4gICAgICAgIG91dHB1dC5zZXQoZGF0YUxlbmd0aCA9PT0gQ0hBQ0hBMjBfSU5QVVRfTEVOR1RIID8gb3V0cHV0QXJyIDogb3V0cHV0QXJyLnN1YmFycmF5KDAsIGRhdGFMZW5ndGgpLCBzdGFydCk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnRzLmNoYWNoYTIwU3RyZWFtWE9SID0gY2hhY2hhMjBTdHJlYW1YT1I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFjaGEyMC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjaGFjaGEyMFN0cmVhbVhPUiIsIndhc21fMSIsInJlcXVpcmUiLCJjdHgiLCJuZXdJbnN0YW5jZSIsIndhc21JbnB1dFZhbHVlIiwiY2hhY2hhMjBJbnB1dCIsIndhc21PdXRwdXRWYWx1ZSIsImNoYWNoYTIwT3V0cHV0Iiwid2FzbUtleVZhbHVlIiwiY2hhY2hhMjBLZXkiLCJ3YXNtQ291bnRlclZhbHVlIiwiY2hhY2hhMjBDb3VudGVyIiwiQ0hBQ0hBMjBfSU5QVVRfTEVOR1RIIiwiS0VZX0xFTkdUSCIsIkNIQUNIQTIwX0NPVU5URVJfTEVOR1RIIiwiaW5wdXRBcnIiLCJVaW50OEFycmF5IiwibWVtb3J5IiwiYnVmZmVyIiwib3V0cHV0QXJyIiwia2V5QXJyIiwiY291bnRlckFyciIsImtleSIsIm5vbmNlIiwic3JjIiwibGVuZ3RoIiwiRXJyb3IiLCJzZXQiLCJvdXRwdXQiLCJsb29wIiwiTWF0aCIsImZsb29yIiwiaSIsInN0YXJ0IiwiZW5kIiwibWluIiwic3ViYXJyYXkiLCJkYXRhTGVuZ3RoIiwiY2hhY2hhMjBTdHJlYW1YT1JVcGRhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20poly1305.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20poly1305.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ChaCha20Poly1305 = void 0;\nconst const_1 = __webpack_require__(/*! ../common/const */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/common/const.js\");\nclass ChaCha20Poly1305 {\n    constructor(ctx){\n        this.ctx = ctx;\n        const wasmKeyValue = ctx.cpKey.value;\n        this.wasmKeyArr = new Uint8Array(ctx.memory.buffer, wasmKeyValue, const_1.KEY_LENGTH);\n        const wasmNonceValue = ctx.cpNonce.value;\n        this.wasmNonceArr = new Uint8Array(ctx.memory.buffer, wasmNonceValue, const_1.NONCE_LENGTH);\n        const wasmAdValue = ctx.cpAssociatedData.value;\n        // 32, same to KEY_LENGTH\n        this.wasmAdArr = new Uint8Array(ctx.memory.buffer, wasmAdValue, const_1.KEY_LENGTH);\n        const wasmSealedValue = ctx.cpInput.value;\n        this.wasmInputArr = new Uint8Array(ctx.memory.buffer, wasmSealedValue, const_1.DATA_CHUNK_LENGTH);\n        const wasmChacha20OutputValue = ctx.chacha20Output.value;\n        this.wasmChacha20OutputArr = new Uint8Array(ctx.memory.buffer, wasmChacha20OutputValue, const_1.DATA_CHUNK_LENGTH);\n        const wasmPoly1305OutputValue = ctx.poly1305Output.value;\n        this.wasmPoly1305OutputArr = new Uint8Array(ctx.memory.buffer, wasmPoly1305OutputValue, const_1.TAG_LENGTH);\n        const wasmDebugValue = ctx.debug.value;\n        this.wasmDebugArr = new Uint32Array(ctx.memory.buffer, wasmDebugValue, 64);\n    }\n    /**\n     * Encode function\n     */ seal(key, nonce, plaintext, associatedData, dst) {\n        this.init(key, nonce, associatedData);\n        const resultLength = plaintext.length + const_1.TAG_LENGTH;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n        const asDataLength = associatedData?.length ?? 0;\n        this.sealUpdate(plaintext, asDataLength, result);\n        // wasmPoly1305OutputArr was updated after the last update() call\n        result.set(this.wasmPoly1305OutputArr, plaintext.length);\n        return result;\n    }\n    /**\n     * Decode function\n     */ open(key, nonce, sealed, associatedData, dst) {\n        this.init(key, nonce, associatedData);\n        const sealedNoTag = sealed.subarray(0, sealed.length - const_1.TAG_LENGTH);\n        let result;\n        if (dst) {\n            if (dst.length !== sealedNoTag.length) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(sealedNoTag.length);\n        }\n        const asDataLength = associatedData?.length ?? 0;\n        this.openUpdate(sealedNoTag, asDataLength, result);\n        const tag = sealed.subarray(sealed.length - const_1.TAG_LENGTH, sealed.length);\n        // wasmPoly1305OutputArr was updated after the last update() call\n        const isTagValid = this.isSameTag(tag);\n        return isTagValid ? result : null;\n    }\n    init(key, nonce, ad = new Uint8Array(0)) {\n        if (key.length != const_1.KEY_LENGTH) {\n            throw Error(`Invalid chacha20poly1305 key length ${key.length}, expect ${const_1.KEY_LENGTH}`);\n        }\n        if (ad.length > const_1.KEY_LENGTH) {\n            throw Error(`Invalid ad length ${ad.length}, expect <= ${const_1.KEY_LENGTH}`);\n        }\n        if (nonce.length !== const_1.NONCE_LENGTH) {\n            throw Error(`Invalid nonce length ${nonce.length}, expect ${const_1.NONCE_LENGTH}`);\n        }\n        this.wasmKeyArr.set(key);\n        this.wasmNonceArr.set(nonce);\n        this.wasmAdArr.set(ad);\n    // don't do the wasm init here, do it in the first openUpdate() or sealUpdate() to save one call\n    }\n    openUpdate(data, asDataLength, dst) {\n        this.commonUpdate(data, this.ctx.openUpdate, asDataLength, dst);\n    }\n    sealUpdate(data, asDataLength, dst) {\n        this.commonUpdate(data, this.ctx.sealUpdate, asDataLength, dst);\n    }\n    commonUpdate(data, updateFn, asDataLength, dst) {\n        const length = data.length;\n        if (data.length <= const_1.DATA_CHUNK_LENGTH) {\n            this.wasmInputArr.set(data);\n            updateFn(true, true, length, length, asDataLength);\n            dst.set(length === const_1.DATA_CHUNK_LENGTH ? this.wasmChacha20OutputArr : this.wasmChacha20OutputArr.subarray(0, length));\n            return;\n        }\n        for(let offset = 0; offset < length; offset += const_1.DATA_CHUNK_LENGTH){\n            const end = Math.min(length, offset + const_1.DATA_CHUNK_LENGTH);\n            this.wasmInputArr.set(data.subarray(offset, end));\n            const isFirst = offset === 0;\n            const isLast = offset + const_1.DATA_CHUNK_LENGTH >= length;\n            updateFn(isFirst, isLast, end - offset, length, asDataLength);\n            dst.set(end - offset === const_1.DATA_CHUNK_LENGTH ? this.wasmChacha20OutputArr : this.wasmChacha20OutputArr.subarray(0, end - offset), offset);\n        }\n    }\n    isSameTag(tag) {\n        // wasmPoly1305OutputArr is updated after the last digest() call\n        let isSameTag = true;\n        for(let i = 0; i < const_1.TAG_LENGTH; i++){\n            if (this.wasmPoly1305OutputArr[i] !== tag[i]) {\n                isSameTag = false;\n                break;\n            }\n        }\n        return isSameTag;\n    }\n}\nexports.ChaCha20Poly1305 = ChaCha20Poly1305; //# sourceMappingURL=chacha20poly1305.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvY2hhY2hhMjBwb2x5MTMwNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyxnR0FBaUI7QUFDekMsTUFBTUY7SUFDRkcsWUFBWUMsR0FBRyxDQUFFO1FBQ2IsSUFBSSxDQUFDQSxHQUFHLEdBQUdBO1FBQ1gsTUFBTUMsZUFBZUQsSUFBSUUsS0FBSyxDQUFDUCxLQUFLO1FBQ3BDLElBQUksQ0FBQ1EsVUFBVSxHQUFHLElBQUlDLFdBQVdKLElBQUlLLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFTCxjQUFjSixRQUFRVSxVQUFVO1FBQ3BGLE1BQU1DLGlCQUFpQlIsSUFBSVMsT0FBTyxDQUFDZCxLQUFLO1FBQ3hDLElBQUksQ0FBQ2UsWUFBWSxHQUFHLElBQUlOLFdBQVdKLElBQUlLLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFRSxnQkFBZ0JYLFFBQVFjLFlBQVk7UUFDMUYsTUFBTUMsY0FBY1osSUFBSWEsZ0JBQWdCLENBQUNsQixLQUFLO1FBQzlDLHlCQUF5QjtRQUN6QixJQUFJLENBQUNtQixTQUFTLEdBQUcsSUFBSVYsV0FBV0osSUFBSUssTUFBTSxDQUFDQyxNQUFNLEVBQUVNLGFBQWFmLFFBQVFVLFVBQVU7UUFDbEYsTUFBTVEsa0JBQWtCZixJQUFJZ0IsT0FBTyxDQUFDckIsS0FBSztRQUN6QyxJQUFJLENBQUNzQixZQUFZLEdBQUcsSUFBSWIsV0FBV0osSUFBSUssTUFBTSxDQUFDQyxNQUFNLEVBQUVTLGlCQUFpQmxCLFFBQVFxQixpQkFBaUI7UUFDaEcsTUFBTUMsMEJBQTBCbkIsSUFBSW9CLGNBQWMsQ0FBQ3pCLEtBQUs7UUFDeEQsSUFBSSxDQUFDMEIscUJBQXFCLEdBQUcsSUFBSWpCLFdBQVdKLElBQUlLLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFYSx5QkFBeUJ0QixRQUFRcUIsaUJBQWlCO1FBQ2pILE1BQU1JLDBCQUEwQnRCLElBQUl1QixjQUFjLENBQUM1QixLQUFLO1FBQ3hELElBQUksQ0FBQzZCLHFCQUFxQixHQUFHLElBQUlwQixXQUFXSixJQUFJSyxNQUFNLENBQUNDLE1BQU0sRUFBRWdCLHlCQUF5QnpCLFFBQVE0QixVQUFVO1FBQzFHLE1BQU1DLGlCQUFpQjFCLElBQUkyQixLQUFLLENBQUNoQyxLQUFLO1FBQ3RDLElBQUksQ0FBQ2lDLFlBQVksR0FBRyxJQUFJQyxZQUFZN0IsSUFBSUssTUFBTSxDQUFDQyxNQUFNLEVBQUVvQixnQkFBZ0I7SUFDM0U7SUFDQTs7S0FFQyxHQUNESSxLQUFLQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxjQUFjLEVBQUVDLEdBQUcsRUFBRTtRQUM3QyxJQUFJLENBQUNDLElBQUksQ0FBQ0wsS0FBS0MsT0FBT0U7UUFDdEIsTUFBTUcsZUFBZUosVUFBVUssTUFBTSxHQUFHekMsUUFBUTRCLFVBQVU7UUFDMUQsSUFBSWM7UUFDSixJQUFJSixLQUFLO1lBQ0wsSUFBSUEsSUFBSUcsTUFBTSxLQUFLRCxjQUFjO2dCQUM3QixNQUFNLElBQUlHLE1BQU07WUFDcEI7WUFDQUQsU0FBU0o7UUFDYixPQUNLO1lBQ0RJLFNBQVMsSUFBSW5DLFdBQVdpQztRQUM1QjtRQUNBLE1BQU1JLGVBQWVQLGdCQUFnQkksVUFBVTtRQUMvQyxJQUFJLENBQUNJLFVBQVUsQ0FBQ1QsV0FBV1EsY0FBY0Y7UUFDekMsaUVBQWlFO1FBQ2pFQSxPQUFPSSxHQUFHLENBQUMsSUFBSSxDQUFDbkIscUJBQXFCLEVBQUVTLFVBQVVLLE1BQU07UUFDdkQsT0FBT0M7SUFDWDtJQUNBOztLQUVDLEdBQ0RLLEtBQUtiLEdBQUcsRUFBRUMsS0FBSyxFQUFFYSxNQUFNLEVBQUVYLGNBQWMsRUFBRUMsR0FBRyxFQUFFO1FBQzFDLElBQUksQ0FBQ0MsSUFBSSxDQUFDTCxLQUFLQyxPQUFPRTtRQUN0QixNQUFNWSxjQUFjRCxPQUFPRSxRQUFRLENBQUMsR0FBR0YsT0FBT1AsTUFBTSxHQUFHekMsUUFBUTRCLFVBQVU7UUFDekUsSUFBSWM7UUFDSixJQUFJSixLQUFLO1lBQ0wsSUFBSUEsSUFBSUcsTUFBTSxLQUFLUSxZQUFZUixNQUFNLEVBQUU7Z0JBQ25DLE1BQU0sSUFBSUUsTUFBTTtZQUNwQjtZQUNBRCxTQUFTSjtRQUNiLE9BQ0s7WUFDREksU0FBUyxJQUFJbkMsV0FBVzBDLFlBQVlSLE1BQU07UUFDOUM7UUFDQSxNQUFNRyxlQUFlUCxnQkFBZ0JJLFVBQVU7UUFDL0MsSUFBSSxDQUFDVSxVQUFVLENBQUNGLGFBQWFMLGNBQWNGO1FBQzNDLE1BQU1VLE1BQU1KLE9BQU9FLFFBQVEsQ0FBQ0YsT0FBT1AsTUFBTSxHQUFHekMsUUFBUTRCLFVBQVUsRUFBRW9CLE9BQU9QLE1BQU07UUFDN0UsaUVBQWlFO1FBQ2pFLE1BQU1ZLGFBQWEsSUFBSSxDQUFDQyxTQUFTLENBQUNGO1FBQ2xDLE9BQU9DLGFBQWFYLFNBQVM7SUFDakM7SUFDQUgsS0FBS0wsR0FBRyxFQUFFQyxLQUFLLEVBQUVvQixLQUFLLElBQUloRCxXQUFXLEVBQUUsRUFBRTtRQUNyQyxJQUFJMkIsSUFBSU8sTUFBTSxJQUFJekMsUUFBUVUsVUFBVSxFQUFFO1lBQ2xDLE1BQU1pQyxNQUFNLENBQUMsb0NBQW9DLEVBQUVULElBQUlPLE1BQU0sQ0FBQyxTQUFTLEVBQUV6QyxRQUFRVSxVQUFVLENBQUMsQ0FBQztRQUNqRztRQUNBLElBQUk2QyxHQUFHZCxNQUFNLEdBQUd6QyxRQUFRVSxVQUFVLEVBQUU7WUFDaEMsTUFBTWlDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRVksR0FBR2QsTUFBTSxDQUFDLFlBQVksRUFBRXpDLFFBQVFVLFVBQVUsQ0FBQyxDQUFDO1FBQ2pGO1FBQ0EsSUFBSXlCLE1BQU1NLE1BQU0sS0FBS3pDLFFBQVFjLFlBQVksRUFBRTtZQUN2QyxNQUFNNkIsTUFBTSxDQUFDLHFCQUFxQixFQUFFUixNQUFNTSxNQUFNLENBQUMsU0FBUyxFQUFFekMsUUFBUWMsWUFBWSxDQUFDLENBQUM7UUFDdEY7UUFDQSxJQUFJLENBQUNSLFVBQVUsQ0FBQ3dDLEdBQUcsQ0FBQ1o7UUFDcEIsSUFBSSxDQUFDckIsWUFBWSxDQUFDaUMsR0FBRyxDQUFDWDtRQUN0QixJQUFJLENBQUNsQixTQUFTLENBQUM2QixHQUFHLENBQUNTO0lBQ25CLGdHQUFnRztJQUNwRztJQUNBSixXQUFXSyxJQUFJLEVBQUVaLFlBQVksRUFBRU4sR0FBRyxFQUFFO1FBQ2hDLElBQUksQ0FBQ21CLFlBQVksQ0FBQ0QsTUFBTSxJQUFJLENBQUNyRCxHQUFHLENBQUNnRCxVQUFVLEVBQUVQLGNBQWNOO0lBQy9EO0lBQ0FPLFdBQVdXLElBQUksRUFBRVosWUFBWSxFQUFFTixHQUFHLEVBQUU7UUFDaEMsSUFBSSxDQUFDbUIsWUFBWSxDQUFDRCxNQUFNLElBQUksQ0FBQ3JELEdBQUcsQ0FBQzBDLFVBQVUsRUFBRUQsY0FBY047SUFDL0Q7SUFDQW1CLGFBQWFELElBQUksRUFBRUUsUUFBUSxFQUFFZCxZQUFZLEVBQUVOLEdBQUcsRUFBRTtRQUM1QyxNQUFNRyxTQUFTZSxLQUFLZixNQUFNO1FBQzFCLElBQUllLEtBQUtmLE1BQU0sSUFBSXpDLFFBQVFxQixpQkFBaUIsRUFBRTtZQUMxQyxJQUFJLENBQUNELFlBQVksQ0FBQzBCLEdBQUcsQ0FBQ1U7WUFDdEJFLFNBQVMsTUFBTSxNQUFNakIsUUFBUUEsUUFBUUc7WUFDckNOLElBQUlRLEdBQUcsQ0FBQ0wsV0FBV3pDLFFBQVFxQixpQkFBaUIsR0FBRyxJQUFJLENBQUNHLHFCQUFxQixHQUFHLElBQUksQ0FBQ0EscUJBQXFCLENBQUMwQixRQUFRLENBQUMsR0FBR1Q7WUFDbkg7UUFDSjtRQUNBLElBQUssSUFBSWtCLFNBQVMsR0FBR0EsU0FBU2xCLFFBQVFrQixVQUFVM0QsUUFBUXFCLGlCQUFpQixDQUFFO1lBQ3ZFLE1BQU11QyxNQUFNQyxLQUFLQyxHQUFHLENBQUNyQixRQUFRa0IsU0FBUzNELFFBQVFxQixpQkFBaUI7WUFDL0QsSUFBSSxDQUFDRCxZQUFZLENBQUMwQixHQUFHLENBQUNVLEtBQUtOLFFBQVEsQ0FBQ1MsUUFBUUM7WUFDNUMsTUFBTUcsVUFBVUosV0FBVztZQUMzQixNQUFNSyxTQUFTTCxTQUFTM0QsUUFBUXFCLGlCQUFpQixJQUFJb0I7WUFDckRpQixTQUFTSyxTQUFTQyxRQUFRSixNQUFNRCxRQUFRbEIsUUFBUUc7WUFDaEROLElBQUlRLEdBQUcsQ0FBQ2MsTUFBTUQsV0FBVzNELFFBQVFxQixpQkFBaUIsR0FDNUMsSUFBSSxDQUFDRyxxQkFBcUIsR0FDMUIsSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQzBCLFFBQVEsQ0FBQyxHQUFHVSxNQUFNRCxTQUFTQTtRQUNoRTtJQUNKO0lBQ0FMLFVBQVVGLEdBQUcsRUFBRTtRQUNYLGdFQUFnRTtRQUNoRSxJQUFJRSxZQUFZO1FBQ2hCLElBQUssSUFBSVcsSUFBSSxHQUFHQSxJQUFJakUsUUFBUTRCLFVBQVUsRUFBRXFDLElBQUs7WUFDekMsSUFBSSxJQUFJLENBQUN0QyxxQkFBcUIsQ0FBQ3NDLEVBQUUsS0FBS2IsR0FBRyxDQUFDYSxFQUFFLEVBQUU7Z0JBQzFDWCxZQUFZO2dCQUNaO1lBQ0o7UUFDSjtRQUNBLE9BQU9BO0lBQ1g7QUFDSjtBQUNBekQsd0JBQXdCLEdBQUdFLGtCQUMzQiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2FzLWNoYWNoYTIwcG9seTEzMDUvbGliL3NyYy9jaGFjaGEyMHBvbHkxMzA1LmpzP2FmZjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoYUNoYTIwUG9seTEzMDUgPSB2b2lkIDA7XG5jb25zdCBjb25zdF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9jb25zdFwiKTtcbmNsYXNzIENoYUNoYTIwUG9seTEzMDUge1xuICAgIGNvbnN0cnVjdG9yKGN0eCkge1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgY29uc3Qgd2FzbUtleVZhbHVlID0gY3R4LmNwS2V5LnZhbHVlO1xuICAgICAgICB0aGlzLndhc21LZXlBcnIgPSBuZXcgVWludDhBcnJheShjdHgubWVtb3J5LmJ1ZmZlciwgd2FzbUtleVZhbHVlLCBjb25zdF8xLktFWV9MRU5HVEgpO1xuICAgICAgICBjb25zdCB3YXNtTm9uY2VWYWx1ZSA9IGN0eC5jcE5vbmNlLnZhbHVlO1xuICAgICAgICB0aGlzLndhc21Ob25jZUFyciA9IG5ldyBVaW50OEFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtTm9uY2VWYWx1ZSwgY29uc3RfMS5OT05DRV9MRU5HVEgpO1xuICAgICAgICBjb25zdCB3YXNtQWRWYWx1ZSA9IGN0eC5jcEFzc29jaWF0ZWREYXRhLnZhbHVlO1xuICAgICAgICAvLyAzMiwgc2FtZSB0byBLRVlfTEVOR1RIXG4gICAgICAgIHRoaXMud2FzbUFkQXJyID0gbmV3IFVpbnQ4QXJyYXkoY3R4Lm1lbW9yeS5idWZmZXIsIHdhc21BZFZhbHVlLCBjb25zdF8xLktFWV9MRU5HVEgpO1xuICAgICAgICBjb25zdCB3YXNtU2VhbGVkVmFsdWUgPSBjdHguY3BJbnB1dC52YWx1ZTtcbiAgICAgICAgdGhpcy53YXNtSW5wdXRBcnIgPSBuZXcgVWludDhBcnJheShjdHgubWVtb3J5LmJ1ZmZlciwgd2FzbVNlYWxlZFZhbHVlLCBjb25zdF8xLkRBVEFfQ0hVTktfTEVOR1RIKTtcbiAgICAgICAgY29uc3Qgd2FzbUNoYWNoYTIwT3V0cHV0VmFsdWUgPSBjdHguY2hhY2hhMjBPdXRwdXQudmFsdWU7XG4gICAgICAgIHRoaXMud2FzbUNoYWNoYTIwT3V0cHV0QXJyID0gbmV3IFVpbnQ4QXJyYXkoY3R4Lm1lbW9yeS5idWZmZXIsIHdhc21DaGFjaGEyME91dHB1dFZhbHVlLCBjb25zdF8xLkRBVEFfQ0hVTktfTEVOR1RIKTtcbiAgICAgICAgY29uc3Qgd2FzbVBvbHkxMzA1T3V0cHV0VmFsdWUgPSBjdHgucG9seTEzMDVPdXRwdXQudmFsdWU7XG4gICAgICAgIHRoaXMud2FzbVBvbHkxMzA1T3V0cHV0QXJyID0gbmV3IFVpbnQ4QXJyYXkoY3R4Lm1lbW9yeS5idWZmZXIsIHdhc21Qb2x5MTMwNU91dHB1dFZhbHVlLCBjb25zdF8xLlRBR19MRU5HVEgpO1xuICAgICAgICBjb25zdCB3YXNtRGVidWdWYWx1ZSA9IGN0eC5kZWJ1Zy52YWx1ZTtcbiAgICAgICAgdGhpcy53YXNtRGVidWdBcnIgPSBuZXcgVWludDMyQXJyYXkoY3R4Lm1lbW9yeS5idWZmZXIsIHdhc21EZWJ1Z1ZhbHVlLCA2NCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBmdW5jdGlvblxuICAgICAqL1xuICAgIHNlYWwoa2V5LCBub25jZSwgcGxhaW50ZXh0LCBhc3NvY2lhdGVkRGF0YSwgZHN0KSB7XG4gICAgICAgIHRoaXMuaW5pdChrZXksIG5vbmNlLCBhc3NvY2lhdGVkRGF0YSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdExlbmd0aCA9IHBsYWludGV4dC5sZW5ndGggKyBjb25zdF8xLlRBR19MRU5HVEg7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmIChkc3QpIHtcbiAgICAgICAgICAgIGlmIChkc3QubGVuZ3RoICE9PSByZXN1bHRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGFDaGEyMFBvbHkxMzA1OiBpbmNvcnJlY3QgZGVzdGluYXRpb24gbGVuZ3RoXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ID0gZHN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0TGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhc0RhdGFMZW5ndGggPSBhc3NvY2lhdGVkRGF0YT8ubGVuZ3RoID8/IDA7XG4gICAgICAgIHRoaXMuc2VhbFVwZGF0ZShwbGFpbnRleHQsIGFzRGF0YUxlbmd0aCwgcmVzdWx0KTtcbiAgICAgICAgLy8gd2FzbVBvbHkxMzA1T3V0cHV0QXJyIHdhcyB1cGRhdGVkIGFmdGVyIHRoZSBsYXN0IHVwZGF0ZSgpIGNhbGxcbiAgICAgICAgcmVzdWx0LnNldCh0aGlzLndhc21Qb2x5MTMwNU91dHB1dEFyciwgcGxhaW50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBmdW5jdGlvblxuICAgICAqL1xuICAgIG9wZW4oa2V5LCBub25jZSwgc2VhbGVkLCBhc3NvY2lhdGVkRGF0YSwgZHN0KSB7XG4gICAgICAgIHRoaXMuaW5pdChrZXksIG5vbmNlLCBhc3NvY2lhdGVkRGF0YSk7XG4gICAgICAgIGNvbnN0IHNlYWxlZE5vVGFnID0gc2VhbGVkLnN1YmFycmF5KDAsIHNlYWxlZC5sZW5ndGggLSBjb25zdF8xLlRBR19MRU5HVEgpO1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBpZiAoZHN0KSB7XG4gICAgICAgICAgICBpZiAoZHN0Lmxlbmd0aCAhPT0gc2VhbGVkTm9UYWcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2hhQ2hhMjBQb2x5MTMwNTogaW5jb3JyZWN0IGRlc3RpbmF0aW9uIGxlbmd0aFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGRzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KHNlYWxlZE5vVGFnLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXNEYXRhTGVuZ3RoID0gYXNzb2NpYXRlZERhdGE/Lmxlbmd0aCA/PyAwO1xuICAgICAgICB0aGlzLm9wZW5VcGRhdGUoc2VhbGVkTm9UYWcsIGFzRGF0YUxlbmd0aCwgcmVzdWx0KTtcbiAgICAgICAgY29uc3QgdGFnID0gc2VhbGVkLnN1YmFycmF5KHNlYWxlZC5sZW5ndGggLSBjb25zdF8xLlRBR19MRU5HVEgsIHNlYWxlZC5sZW5ndGgpO1xuICAgICAgICAvLyB3YXNtUG9seTEzMDVPdXRwdXRBcnIgd2FzIHVwZGF0ZWQgYWZ0ZXIgdGhlIGxhc3QgdXBkYXRlKCkgY2FsbFxuICAgICAgICBjb25zdCBpc1RhZ1ZhbGlkID0gdGhpcy5pc1NhbWVUYWcodGFnKTtcbiAgICAgICAgcmV0dXJuIGlzVGFnVmFsaWQgPyByZXN1bHQgOiBudWxsO1xuICAgIH1cbiAgICBpbml0KGtleSwgbm9uY2UsIGFkID0gbmV3IFVpbnQ4QXJyYXkoMCkpIHtcbiAgICAgICAgaWYgKGtleS5sZW5ndGggIT0gY29uc3RfMS5LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgSW52YWxpZCBjaGFjaGEyMHBvbHkxMzA1IGtleSBsZW5ndGggJHtrZXkubGVuZ3RofSwgZXhwZWN0ICR7Y29uc3RfMS5LRVlfTEVOR1RIfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhZC5sZW5ndGggPiBjb25zdF8xLktFWV9MRU5HVEgpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkIGFkIGxlbmd0aCAke2FkLmxlbmd0aH0sIGV4cGVjdCA8PSAke2NvbnN0XzEuS0VZX0xFTkdUSH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9uY2UubGVuZ3RoICE9PSBjb25zdF8xLk5PTkNFX0xFTkdUSCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYEludmFsaWQgbm9uY2UgbGVuZ3RoICR7bm9uY2UubGVuZ3RofSwgZXhwZWN0ICR7Y29uc3RfMS5OT05DRV9MRU5HVEh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53YXNtS2V5QXJyLnNldChrZXkpO1xuICAgICAgICB0aGlzLndhc21Ob25jZUFyci5zZXQobm9uY2UpO1xuICAgICAgICB0aGlzLndhc21BZEFyci5zZXQoYWQpO1xuICAgICAgICAvLyBkb24ndCBkbyB0aGUgd2FzbSBpbml0IGhlcmUsIGRvIGl0IGluIHRoZSBmaXJzdCBvcGVuVXBkYXRlKCkgb3Igc2VhbFVwZGF0ZSgpIHRvIHNhdmUgb25lIGNhbGxcbiAgICB9XG4gICAgb3BlblVwZGF0ZShkYXRhLCBhc0RhdGFMZW5ndGgsIGRzdCkge1xuICAgICAgICB0aGlzLmNvbW1vblVwZGF0ZShkYXRhLCB0aGlzLmN0eC5vcGVuVXBkYXRlLCBhc0RhdGFMZW5ndGgsIGRzdCk7XG4gICAgfVxuICAgIHNlYWxVcGRhdGUoZGF0YSwgYXNEYXRhTGVuZ3RoLCBkc3QpIHtcbiAgICAgICAgdGhpcy5jb21tb25VcGRhdGUoZGF0YSwgdGhpcy5jdHguc2VhbFVwZGF0ZSwgYXNEYXRhTGVuZ3RoLCBkc3QpO1xuICAgIH1cbiAgICBjb21tb25VcGRhdGUoZGF0YSwgdXBkYXRlRm4sIGFzRGF0YUxlbmd0aCwgZHN0KSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPD0gY29uc3RfMS5EQVRBX0NIVU5LX0xFTkdUSCkge1xuICAgICAgICAgICAgdGhpcy53YXNtSW5wdXRBcnIuc2V0KGRhdGEpO1xuICAgICAgICAgICAgdXBkYXRlRm4odHJ1ZSwgdHJ1ZSwgbGVuZ3RoLCBsZW5ndGgsIGFzRGF0YUxlbmd0aCk7XG4gICAgICAgICAgICBkc3Quc2V0KGxlbmd0aCA9PT0gY29uc3RfMS5EQVRBX0NIVU5LX0xFTkdUSCA/IHRoaXMud2FzbUNoYWNoYTIwT3V0cHV0QXJyIDogdGhpcy53YXNtQ2hhY2hhMjBPdXRwdXRBcnIuc3ViYXJyYXkoMCwgbGVuZ3RoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOyBvZmZzZXQgKz0gY29uc3RfMS5EQVRBX0NIVU5LX0xFTkdUSCkge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5taW4obGVuZ3RoLCBvZmZzZXQgKyBjb25zdF8xLkRBVEFfQ0hVTktfTEVOR1RIKTtcbiAgICAgICAgICAgIHRoaXMud2FzbUlucHV0QXJyLnNldChkYXRhLnN1YmFycmF5KG9mZnNldCwgZW5kKSk7XG4gICAgICAgICAgICBjb25zdCBpc0ZpcnN0ID0gb2Zmc2V0ID09PSAwO1xuICAgICAgICAgICAgY29uc3QgaXNMYXN0ID0gb2Zmc2V0ICsgY29uc3RfMS5EQVRBX0NIVU5LX0xFTkdUSCA+PSBsZW5ndGg7XG4gICAgICAgICAgICB1cGRhdGVGbihpc0ZpcnN0LCBpc0xhc3QsIGVuZCAtIG9mZnNldCwgbGVuZ3RoLCBhc0RhdGFMZW5ndGgpO1xuICAgICAgICAgICAgZHN0LnNldChlbmQgLSBvZmZzZXQgPT09IGNvbnN0XzEuREFUQV9DSFVOS19MRU5HVEhcbiAgICAgICAgICAgICAgICA/IHRoaXMud2FzbUNoYWNoYTIwT3V0cHV0QXJyXG4gICAgICAgICAgICAgICAgOiB0aGlzLndhc21DaGFjaGEyME91dHB1dEFyci5zdWJhcnJheSgwLCBlbmQgLSBvZmZzZXQpLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzU2FtZVRhZyh0YWcpIHtcbiAgICAgICAgLy8gd2FzbVBvbHkxMzA1T3V0cHV0QXJyIGlzIHVwZGF0ZWQgYWZ0ZXIgdGhlIGxhc3QgZGlnZXN0KCkgY2FsbFxuICAgICAgICBsZXQgaXNTYW1lVGFnID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25zdF8xLlRBR19MRU5HVEg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMud2FzbVBvbHkxMzA1T3V0cHV0QXJyW2ldICE9PSB0YWdbaV0pIHtcbiAgICAgICAgICAgICAgICBpc1NhbWVUYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTYW1lVGFnO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hhQ2hhMjBQb2x5MTMwNSA9IENoYUNoYTIwUG9seTEzMDU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFjaGEyMHBvbHkxMzA1LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNoYUNoYTIwUG9seTEzMDUiLCJjb25zdF8xIiwicmVxdWlyZSIsImNvbnN0cnVjdG9yIiwiY3R4Iiwid2FzbUtleVZhbHVlIiwiY3BLZXkiLCJ3YXNtS2V5QXJyIiwiVWludDhBcnJheSIsIm1lbW9yeSIsImJ1ZmZlciIsIktFWV9MRU5HVEgiLCJ3YXNtTm9uY2VWYWx1ZSIsImNwTm9uY2UiLCJ3YXNtTm9uY2VBcnIiLCJOT05DRV9MRU5HVEgiLCJ3YXNtQWRWYWx1ZSIsImNwQXNzb2NpYXRlZERhdGEiLCJ3YXNtQWRBcnIiLCJ3YXNtU2VhbGVkVmFsdWUiLCJjcElucHV0Iiwid2FzbUlucHV0QXJyIiwiREFUQV9DSFVOS19MRU5HVEgiLCJ3YXNtQ2hhY2hhMjBPdXRwdXRWYWx1ZSIsImNoYWNoYTIwT3V0cHV0Iiwid2FzbUNoYWNoYTIwT3V0cHV0QXJyIiwid2FzbVBvbHkxMzA1T3V0cHV0VmFsdWUiLCJwb2x5MTMwNU91dHB1dCIsIndhc21Qb2x5MTMwNU91dHB1dEFyciIsIlRBR19MRU5HVEgiLCJ3YXNtRGVidWdWYWx1ZSIsImRlYnVnIiwid2FzbURlYnVnQXJyIiwiVWludDMyQXJyYXkiLCJzZWFsIiwia2V5Iiwibm9uY2UiLCJwbGFpbnRleHQiLCJhc3NvY2lhdGVkRGF0YSIsImRzdCIsImluaXQiLCJyZXN1bHRMZW5ndGgiLCJsZW5ndGgiLCJyZXN1bHQiLCJFcnJvciIsImFzRGF0YUxlbmd0aCIsInNlYWxVcGRhdGUiLCJzZXQiLCJvcGVuIiwic2VhbGVkIiwic2VhbGVkTm9UYWciLCJzdWJhcnJheSIsIm9wZW5VcGRhdGUiLCJ0YWciLCJpc1RhZ1ZhbGlkIiwiaXNTYW1lVGFnIiwiYWQiLCJkYXRhIiwiY29tbW9uVXBkYXRlIiwidXBkYXRlRm4iLCJvZmZzZXQiLCJlbmQiLCJNYXRoIiwibWluIiwiaXNGaXJzdCIsImlzTGFzdCIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20poly1305.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/src/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.newInstance = exports.chacha20StreamXOR = exports.Poly1305 = exports.ChaCha20Poly1305 = void 0;\nvar chacha20poly1305_1 = __webpack_require__(/*! ./chacha20poly1305 */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20poly1305.js\");\nObject.defineProperty(exports, \"ChaCha20Poly1305\", ({\n    enumerable: true,\n    get: function() {\n        return chacha20poly1305_1.ChaCha20Poly1305;\n    }\n}));\nvar poly1305_1 = __webpack_require__(/*! ./poly1305 */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/poly1305.js\");\nObject.defineProperty(exports, \"Poly1305\", ({\n    enumerable: true,\n    get: function() {\n        return poly1305_1.Poly1305;\n    }\n}));\nvar chacha20_1 = __webpack_require__(/*! ./chacha20 */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/chacha20.js\");\nObject.defineProperty(exports, \"chacha20StreamXOR\", ({\n    enumerable: true,\n    get: function() {\n        return chacha20_1.chacha20StreamXOR;\n    }\n}));\nvar wasm_1 = __webpack_require__(/*! ./wasm */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasm.js\");\nObject.defineProperty(exports, \"newInstance\", ({\n    enumerable: true,\n    get: function() {\n        return wasm_1.newInstance;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHQSx5QkFBeUIsR0FBR0EsZ0JBQWdCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFDckcsSUFBSU0scUJBQXFCQyxtQkFBT0EsQ0FBQywyR0FBb0I7QUFDckRULG9EQUFtRDtJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxtQkFBbUJELGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzFJLElBQUlLLGFBQWFILG1CQUFPQSxDQUFDLDJGQUFZO0FBQ3JDVCw0Q0FBMkM7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsV0FBV04sUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlPLGFBQWFKLG1CQUFPQSxDQUFDLDJGQUFZO0FBQ3JDVCxxREFBb0Q7SUFBRVUsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsV0FBV1IsaUJBQWlCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEksSUFBSVMsU0FBU0wsbUJBQU9BLENBQUMsbUZBQVE7QUFDN0JULCtDQUE4QztJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxPQUFPVixXQUFXO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDcEgsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvaW5kZXguanM/NmIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubmV3SW5zdGFuY2UgPSBleHBvcnRzLmNoYWNoYTIwU3RyZWFtWE9SID0gZXhwb3J0cy5Qb2x5MTMwNSA9IGV4cG9ydHMuQ2hhQ2hhMjBQb2x5MTMwNSA9IHZvaWQgMDtcbnZhciBjaGFjaGEyMHBvbHkxMzA1XzEgPSByZXF1aXJlKFwiLi9jaGFjaGEyMHBvbHkxMzA1XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2hhQ2hhMjBQb2x5MTMwNVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2hhY2hhMjBwb2x5MTMwNV8xLkNoYUNoYTIwUG9seTEzMDU7IH0gfSk7XG52YXIgcG9seTEzMDVfMSA9IHJlcXVpcmUoXCIuL3BvbHkxMzA1XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUG9seTEzMDVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBvbHkxMzA1XzEuUG9seTEzMDU7IH0gfSk7XG52YXIgY2hhY2hhMjBfMSA9IHJlcXVpcmUoXCIuL2NoYWNoYTIwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hhY2hhMjBTdHJlYW1YT1JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoYWNoYTIwXzEuY2hhY2hhMjBTdHJlYW1YT1I7IH0gfSk7XG52YXIgd2FzbV8xID0gcmVxdWlyZShcIi4vd2FzbVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5ld0luc3RhbmNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3YXNtXzEubmV3SW5zdGFuY2U7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJuZXdJbnN0YW5jZSIsImNoYWNoYTIwU3RyZWFtWE9SIiwiUG9seTEzMDUiLCJDaGFDaGEyMFBvbHkxMzA1IiwiY2hhY2hhMjBwb2x5MTMwNV8xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJwb2x5MTMwNV8xIiwiY2hhY2hhMjBfMSIsIndhc21fMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/poly1305.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/src/poly1305.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Poly1305 = void 0;\nconst const_1 = __webpack_require__(/*! ../common/const */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/common/const.js\");\nclass Poly1305 {\n    constructor(ctx){\n        this.ctx = ctx;\n        const wasmPoly1305KeyValue = ctx.poly1305Key.value;\n        this.wasmKeyArr = new Uint8Array(ctx.memory.buffer, wasmPoly1305KeyValue, const_1.KEY_LENGTH);\n        const wasmPoly1305InputValue = ctx.poly1305Input.value;\n        this.wasmInputArr = new Uint8Array(ctx.memory.buffer, wasmPoly1305InputValue, const_1.DATA_CHUNK_LENGTH);\n        const wasmPoly1305OutputValue = ctx.poly1305Output.value;\n        this.wasmOutputArr = new Uint8Array(ctx.memory.buffer, wasmPoly1305OutputValue, const_1.TAG_LENGTH);\n        const wasmPoly1305DebugValue = ctx.debug.value;\n        this.wasmDebugArr = new Uint32Array(ctx.memory.buffer, wasmPoly1305DebugValue, 64);\n    }\n    init(key) {\n        if (key.length != const_1.KEY_LENGTH) {\n            throw Error(`Invalid poly1305 key length ${key.length}, expect ${const_1.KEY_LENGTH}`);\n        }\n        this.wasmKeyArr.set(key);\n        this.ctx.poly1305Init();\n    }\n    update(data) {\n        if (data.length <= const_1.DATA_CHUNK_LENGTH) {\n            this.wasmInputArr.set(data);\n            this.ctx.poly1305Update(data.length);\n            return;\n        }\n        for(let offset = 0; offset < data.length; offset += const_1.DATA_CHUNK_LENGTH){\n            const end = Math.min(data.length, offset + const_1.DATA_CHUNK_LENGTH);\n            this.wasmInputArr.set(data.subarray(offset, end));\n            this.ctx.poly1305Update(end - offset);\n        }\n    }\n    digest() {\n        this.ctx.poly1305Digest();\n        const out = new Uint8Array(const_1.TAG_LENGTH);\n        out.set(this.wasmOutputArr);\n        return out;\n    }\n}\nexports.Poly1305 = Poly1305; //# sourceMappingURL=poly1305.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvcG9seTEzMDUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsZ0dBQWlCO0FBQ3pDLE1BQU1GO0lBQ0ZHLFlBQVlDLEdBQUcsQ0FBRTtRQUNiLElBQUksQ0FBQ0EsR0FBRyxHQUFHQTtRQUNYLE1BQU1DLHVCQUF1QkQsSUFBSUUsV0FBVyxDQUFDUCxLQUFLO1FBQ2xELElBQUksQ0FBQ1EsVUFBVSxHQUFHLElBQUlDLFdBQVdKLElBQUlLLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFTCxzQkFBc0JKLFFBQVFVLFVBQVU7UUFDNUYsTUFBTUMseUJBQXlCUixJQUFJUyxhQUFhLENBQUNkLEtBQUs7UUFDdEQsSUFBSSxDQUFDZSxZQUFZLEdBQUcsSUFBSU4sV0FBV0osSUFBSUssTUFBTSxDQUFDQyxNQUFNLEVBQUVFLHdCQUF3QlgsUUFBUWMsaUJBQWlCO1FBQ3ZHLE1BQU1DLDBCQUEwQlosSUFBSWEsY0FBYyxDQUFDbEIsS0FBSztRQUN4RCxJQUFJLENBQUNtQixhQUFhLEdBQUcsSUFBSVYsV0FBV0osSUFBSUssTUFBTSxDQUFDQyxNQUFNLEVBQUVNLHlCQUF5QmYsUUFBUWtCLFVBQVU7UUFDbEcsTUFBTUMseUJBQXlCaEIsSUFBSWlCLEtBQUssQ0FBQ3RCLEtBQUs7UUFDOUMsSUFBSSxDQUFDdUIsWUFBWSxHQUFHLElBQUlDLFlBQVluQixJQUFJSyxNQUFNLENBQUNDLE1BQU0sRUFBRVUsd0JBQXdCO0lBQ25GO0lBQ0FJLEtBQUtDLEdBQUcsRUFBRTtRQUNOLElBQUlBLElBQUlDLE1BQU0sSUFBSXpCLFFBQVFVLFVBQVUsRUFBRTtZQUNsQyxNQUFNZ0IsTUFBTSxDQUFDLDRCQUE0QixFQUFFRixJQUFJQyxNQUFNLENBQUMsU0FBUyxFQUFFekIsUUFBUVUsVUFBVSxDQUFDLENBQUM7UUFDekY7UUFDQSxJQUFJLENBQUNKLFVBQVUsQ0FBQ3FCLEdBQUcsQ0FBQ0g7UUFDcEIsSUFBSSxDQUFDckIsR0FBRyxDQUFDeUIsWUFBWTtJQUN6QjtJQUNBQyxPQUFPQyxJQUFJLEVBQUU7UUFDVCxJQUFJQSxLQUFLTCxNQUFNLElBQUl6QixRQUFRYyxpQkFBaUIsRUFBRTtZQUMxQyxJQUFJLENBQUNELFlBQVksQ0FBQ2MsR0FBRyxDQUFDRztZQUN0QixJQUFJLENBQUMzQixHQUFHLENBQUM0QixjQUFjLENBQUNELEtBQUtMLE1BQU07WUFDbkM7UUFDSjtRQUNBLElBQUssSUFBSU8sU0FBUyxHQUFHQSxTQUFTRixLQUFLTCxNQUFNLEVBQUVPLFVBQVVoQyxRQUFRYyxpQkFBaUIsQ0FBRTtZQUM1RSxNQUFNbUIsTUFBTUMsS0FBS0MsR0FBRyxDQUFDTCxLQUFLTCxNQUFNLEVBQUVPLFNBQVNoQyxRQUFRYyxpQkFBaUI7WUFDcEUsSUFBSSxDQUFDRCxZQUFZLENBQUNjLEdBQUcsQ0FBQ0csS0FBS00sUUFBUSxDQUFDSixRQUFRQztZQUM1QyxJQUFJLENBQUM5QixHQUFHLENBQUM0QixjQUFjLENBQUNFLE1BQU1EO1FBQ2xDO0lBQ0o7SUFDQUssU0FBUztRQUNMLElBQUksQ0FBQ2xDLEdBQUcsQ0FBQ21DLGNBQWM7UUFDdkIsTUFBTUMsTUFBTSxJQUFJaEMsV0FBV1AsUUFBUWtCLFVBQVU7UUFDN0NxQixJQUFJWixHQUFHLENBQUMsSUFBSSxDQUFDVixhQUFhO1FBQzFCLE9BQU9zQjtJQUNYO0FBQ0o7QUFDQTFDLGdCQUFnQixHQUFHRSxVQUNuQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2FzLWNoYWNoYTIwcG9seTEzMDUvbGliL3NyYy9wb2x5MTMwNS5qcz81M2FjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qb2x5MTMwNSA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0XzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvbnN0XCIpO1xuY2xhc3MgUG9seTEzMDUge1xuICAgIGNvbnN0cnVjdG9yKGN0eCkge1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgY29uc3Qgd2FzbVBvbHkxMzA1S2V5VmFsdWUgPSBjdHgucG9seTEzMDVLZXkudmFsdWU7XG4gICAgICAgIHRoaXMud2FzbUtleUFyciA9IG5ldyBVaW50OEFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtUG9seTEzMDVLZXlWYWx1ZSwgY29uc3RfMS5LRVlfTEVOR1RIKTtcbiAgICAgICAgY29uc3Qgd2FzbVBvbHkxMzA1SW5wdXRWYWx1ZSA9IGN0eC5wb2x5MTMwNUlucHV0LnZhbHVlO1xuICAgICAgICB0aGlzLndhc21JbnB1dEFyciA9IG5ldyBVaW50OEFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtUG9seTEzMDVJbnB1dFZhbHVlLCBjb25zdF8xLkRBVEFfQ0hVTktfTEVOR1RIKTtcbiAgICAgICAgY29uc3Qgd2FzbVBvbHkxMzA1T3V0cHV0VmFsdWUgPSBjdHgucG9seTEzMDVPdXRwdXQudmFsdWU7XG4gICAgICAgIHRoaXMud2FzbU91dHB1dEFyciA9IG5ldyBVaW50OEFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtUG9seTEzMDVPdXRwdXRWYWx1ZSwgY29uc3RfMS5UQUdfTEVOR1RIKTtcbiAgICAgICAgY29uc3Qgd2FzbVBvbHkxMzA1RGVidWdWYWx1ZSA9IGN0eC5kZWJ1Zy52YWx1ZTtcbiAgICAgICAgdGhpcy53YXNtRGVidWdBcnIgPSBuZXcgVWludDMyQXJyYXkoY3R4Lm1lbW9yeS5idWZmZXIsIHdhc21Qb2x5MTMwNURlYnVnVmFsdWUsIDY0KTtcbiAgICB9XG4gICAgaW5pdChrZXkpIHtcbiAgICAgICAgaWYgKGtleS5sZW5ndGggIT0gY29uc3RfMS5LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgSW52YWxpZCBwb2x5MTMwNSBrZXkgbGVuZ3RoICR7a2V5Lmxlbmd0aH0sIGV4cGVjdCAke2NvbnN0XzEuS0VZX0xFTkdUSH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndhc21LZXlBcnIuc2V0KGtleSk7XG4gICAgICAgIHRoaXMuY3R4LnBvbHkxMzA1SW5pdCgpO1xuICAgIH1cbiAgICB1cGRhdGUoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPD0gY29uc3RfMS5EQVRBX0NIVU5LX0xFTkdUSCkge1xuICAgICAgICAgICAgdGhpcy53YXNtSW5wdXRBcnIuc2V0KGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5jdHgucG9seTEzMDVVcGRhdGUoZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGRhdGEubGVuZ3RoOyBvZmZzZXQgKz0gY29uc3RfMS5EQVRBX0NIVU5LX0xFTkdUSCkge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5taW4oZGF0YS5sZW5ndGgsIG9mZnNldCArIGNvbnN0XzEuREFUQV9DSFVOS19MRU5HVEgpO1xuICAgICAgICAgICAgdGhpcy53YXNtSW5wdXRBcnIuc2V0KGRhdGEuc3ViYXJyYXkob2Zmc2V0LCBlbmQpKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LnBvbHkxMzA1VXBkYXRlKGVuZCAtIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICB0aGlzLmN0eC5wb2x5MTMwNURpZ2VzdCgpO1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShjb25zdF8xLlRBR19MRU5HVEgpO1xuICAgICAgICBvdXQuc2V0KHRoaXMud2FzbU91dHB1dEFycik7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxufVxuZXhwb3J0cy5Qb2x5MTMwNSA9IFBvbHkxMzA1O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9seTEzMDUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUG9seTEzMDUiLCJjb25zdF8xIiwicmVxdWlyZSIsImNvbnN0cnVjdG9yIiwiY3R4Iiwid2FzbVBvbHkxMzA1S2V5VmFsdWUiLCJwb2x5MTMwNUtleSIsIndhc21LZXlBcnIiLCJVaW50OEFycmF5IiwibWVtb3J5IiwiYnVmZmVyIiwiS0VZX0xFTkdUSCIsIndhc21Qb2x5MTMwNUlucHV0VmFsdWUiLCJwb2x5MTMwNUlucHV0Iiwid2FzbUlucHV0QXJyIiwiREFUQV9DSFVOS19MRU5HVEgiLCJ3YXNtUG9seTEzMDVPdXRwdXRWYWx1ZSIsInBvbHkxMzA1T3V0cHV0Iiwid2FzbU91dHB1dEFyciIsIlRBR19MRU5HVEgiLCJ3YXNtUG9seTEzMDVEZWJ1Z1ZhbHVlIiwiZGVidWciLCJ3YXNtRGVidWdBcnIiLCJVaW50MzJBcnJheSIsImluaXQiLCJrZXkiLCJsZW5ndGgiLCJFcnJvciIsInNldCIsInBvbHkxMzA1SW5pdCIsInVwZGF0ZSIsImRhdGEiLCJwb2x5MTMwNVVwZGF0ZSIsIm9mZnNldCIsImVuZCIsIk1hdGgiLCJtaW4iLCJzdWJhcnJheSIsImRpZ2VzdCIsInBvbHkxMzA1RGlnZXN0Iiwib3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/poly1305.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.newInstance = void 0;\nconst wasmCode_1 = __webpack_require__(/*! ./wasmCode */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasmCode.js\");\nconst _module = new WebAssembly.Module(wasmCode_1.wasmCode);\nconst importObj = {\n    env: {\n        // modified from https://github.com/AssemblyScript/assemblyscript/blob/v0.9.2/lib/loader/index.js#L70\n        abort: function(msg, file, line, col) {\n            throw Error(`abort: ${msg}:${file}:${line}:${col}`);\n        }\n    }\n};\nfunction newInstance() {\n    return new WebAssembly.Instance(_module, importObj).exports;\n}\nexports.newInstance = newInstance; //# sourceMappingURL=wasm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvd2FzbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxhQUFhQyxtQkFBT0EsQ0FBQywyRkFBWTtBQUN2QyxNQUFNQyxVQUFVLElBQUlDLFlBQVlDLE1BQU0sQ0FBQ0osV0FBV0ssUUFBUTtBQUMxRCxNQUFNQyxZQUFZO0lBQ2RDLEtBQUs7UUFDRCxxR0FBcUc7UUFDckdDLE9BQU8sU0FBVUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsR0FBRztZQUNqQyxNQUFNQyxNQUFNLENBQUMsT0FBTyxFQUFFSixJQUFJLENBQUMsRUFBRUMsS0FBSyxDQUFDLEVBQUVDLEtBQUssQ0FBQyxFQUFFQyxJQUFJLENBQUM7UUFDdEQ7SUFDSjtBQUNKO0FBQ0EsU0FBU2I7SUFDTCxPQUFPLElBQUlJLFlBQVlXLFFBQVEsQ0FBQ1osU0FBU0ksV0FBV1QsT0FBTztBQUMvRDtBQUNBQSxtQkFBbUIsR0FBR0UsYUFDdEIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1jaGFjaGEyMHBvbHkxMzA1L2xpYi9zcmMvd2FzbS5qcz84ZTdjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uZXdJbnN0YW5jZSA9IHZvaWQgMDtcbmNvbnN0IHdhc21Db2RlXzEgPSByZXF1aXJlKFwiLi93YXNtQ29kZVwiKTtcbmNvbnN0IF9tb2R1bGUgPSBuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKHdhc21Db2RlXzEud2FzbUNvZGUpO1xuY29uc3QgaW1wb3J0T2JqID0ge1xuICAgIGVudjoge1xuICAgICAgICAvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9Bc3NlbWJseVNjcmlwdC9hc3NlbWJseXNjcmlwdC9ibG9iL3YwLjkuMi9saWIvbG9hZGVyL2luZGV4LmpzI0w3MFxuICAgICAgICBhYm9ydDogZnVuY3Rpb24gKG1zZywgZmlsZSwgbGluZSwgY29sKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgYWJvcnQ6ICR7bXNnfToke2ZpbGV9OiR7bGluZX06JHtjb2x9YCk7XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5mdW5jdGlvbiBuZXdJbnN0YW5jZSgpIHtcbiAgICByZXR1cm4gbmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKF9tb2R1bGUsIGltcG9ydE9iaikuZXhwb3J0cztcbn1cbmV4cG9ydHMubmV3SW5zdGFuY2UgPSBuZXdJbnN0YW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhc20uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibmV3SW5zdGFuY2UiLCJ3YXNtQ29kZV8xIiwicmVxdWlyZSIsIl9tb2R1bGUiLCJXZWJBc3NlbWJseSIsIk1vZHVsZSIsIndhc21Db2RlIiwiaW1wb3J0T2JqIiwiZW52IiwiYWJvcnQiLCJtc2ciLCJmaWxlIiwibGluZSIsImNvbCIsIkVycm9yIiwiSW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasmCode.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasmCode.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// This file was autogenerated by scripts/codegen.ts\n// DO NOT modify this file by hand!\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wasmCode = void 0;\n// eslint-disable-next-line prettier/prettier\nexports.wasmCode = Uint8Array.from([\n    0,\n    97,\n    115,\n    109,\n    1,\n    0,\n    0,\n    0,\n    1,\n    58,\n    10,\n    96,\n    0,\n    0,\n    96,\n    2,\n    127,\n    127,\n    0,\n    96,\n    1,\n    127,\n    0,\n    96,\n    3,\n    127,\n    127,\n    127,\n    0,\n    96,\n    1,\n    127,\n    1,\n    127,\n    96,\n    4,\n    127,\n    127,\n    127,\n    127,\n    0,\n    96,\n    5,\n    127,\n    127,\n    127,\n    127,\n    127,\n    0,\n    96,\n    0,\n    1,\n    127,\n    96,\n    2,\n    127,\n    127,\n    1,\n    127,\n    96,\n    5,\n    127,\n    127,\n    127,\n    127,\n    127,\n    1,\n    127,\n    2,\n    13,\n    1,\n    3,\n    101,\n    110,\n    118,\n    5,\n    97,\n    98,\n    111,\n    114,\n    116,\n    0,\n    5,\n    3,\n    34,\n    33,\n    2,\n    8,\n    1,\n    4,\n    0,\n    4,\n    7,\n    0,\n    0,\n    3,\n    3,\n    2,\n    1,\n    9,\n    4,\n    2,\n    0,\n    3,\n    1,\n    2,\n    2,\n    1,\n    0,\n    0,\n    0,\n    5,\n    1,\n    1,\n    1,\n    6,\n    1,\n    6,\n    0,\n    5,\n    3,\n    1,\n    0,\n    1,\n    6,\n    238,\n    1,\n    47,\n    127,\n    0,\n    65,\n    32,\n    11,\n    127,\n    0,\n    65,\n    16,\n    11,\n    127,\n    0,\n    65,\n    128,\n    128,\n    4,\n    11,\n    127,\n    0,\n    65,\n    16,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    7,\n    226,\n    2,\n    23,\n    6,\n    109,\n    101,\n    109,\n    111,\n    114,\n    121,\n    2,\n    0,\n    21,\n    67,\n    72,\n    65,\n    67,\n    72,\n    65,\n    50,\n    48,\n    95,\n    73,\n    78,\n    80,\n    85,\n    84,\n    95,\n    76,\n    69,\n    78,\n    71,\n    84,\n    72,\n    3,\n    2,\n    23,\n    67,\n    72,\n    65,\n    67,\n    72,\n    65,\n    50,\n    48,\n    95,\n    67,\n    79,\n    85,\n    78,\n    84,\n    69,\n    82,\n    95,\n    76,\n    69,\n    78,\n    71,\n    84,\n    72,\n    3,\n    3,\n    13,\n    99,\n    104,\n    97,\n    99,\n    104,\n    97,\n    50,\n    48,\n    73,\n    110,\n    112,\n    117,\n    116,\n    3,\n    6,\n    11,\n    99,\n    104,\n    97,\n    99,\n    104,\n    97,\n    50,\n    48,\n    75,\n    101,\n    121,\n    3,\n    8,\n    15,\n    99,\n    104,\n    97,\n    99,\n    104,\n    97,\n    50,\n    48,\n    67,\n    111,\n    117,\n    110,\n    116,\n    101,\n    114,\n    3,\n    10,\n    14,\n    99,\n    104,\n    97,\n    99,\n    104,\n    97,\n    50,\n    48,\n    79,\n    117,\n    116,\n    112,\n    117,\n    116,\n    3,\n    12,\n    23,\n    99,\n    104,\n    97,\n    99,\n    104,\n    97,\n    50,\n    48,\n    83,\n    116,\n    114,\n    101,\n    97,\n    109,\n    88,\n    79,\n    82,\n    85,\n    112,\n    100,\n    97,\n    116,\n    101,\n    0,\n    15,\n    10,\n    75,\n    69,\n    89,\n    95,\n    76,\n    69,\n    78,\n    71,\n    84,\n    72,\n    3,\n    0,\n    10,\n    84,\n    65,\n    71,\n    95,\n    76,\n    69,\n    78,\n    71,\n    84,\n    72,\n    3,\n    1,\n    12,\n    112,\n    111,\n    108,\n    121,\n    49,\n    51,\n    48,\n    53,\n    73,\n    110,\n    105,\n    116,\n    0,\n    17,\n    14,\n    112,\n    111,\n    108,\n    121,\n    49,\n    51,\n    48,\n    53,\n    85,\n    112,\n    100,\n    97,\n    116,\n    101,\n    0,\n    20,\n    14,\n    112,\n    111,\n    108,\n    121,\n    49,\n    51,\n    48,\n    53,\n    68,\n    105,\n    103,\n    101,\n    115,\n    116,\n    0,\n    24,\n    13,\n    112,\n    111,\n    108,\n    121,\n    49,\n    51,\n    48,\n    53,\n    73,\n    110,\n    112,\n    117,\n    116,\n    3,\n    19,\n    11,\n    112,\n    111,\n    108,\n    121,\n    49,\n    51,\n    48,\n    53,\n    75,\n    101,\n    121,\n    3,\n    18,\n    14,\n    112,\n    111,\n    108,\n    121,\n    49,\n    51,\n    48,\n    53,\n    79,\n    117,\n    116,\n    112,\n    117,\n    116,\n    3,\n    20,\n    10,\n    111,\n    112,\n    101,\n    110,\n    85,\n    112,\n    100,\n    97,\n    116,\n    101,\n    0,\n    30,\n    10,\n    115,\n    101,\n    97,\n    108,\n    85,\n    112,\n    100,\n    97,\n    116,\n    101,\n    0,\n    32,\n    5,\n    99,\n    112,\n    75,\n    101,\n    121,\n    3,\n    37,\n    7,\n    99,\n    112,\n    78,\n    111,\n    110,\n    99,\n    101,\n    3,\n    39,\n    7,\n    99,\n    112,\n    73,\n    110,\n    112,\n    117,\n    116,\n    3,\n    43,\n    16,\n    99,\n    112,\n    65,\n    115,\n    115,\n    111,\n    99,\n    105,\n    97,\n    116,\n    101,\n    100,\n    68,\n    97,\n    116,\n    97,\n    3,\n    41,\n    5,\n    100,\n    101,\n    98,\n    117,\n    103,\n    3,\n    46,\n    8,\n    1,\n    33,\n    10,\n    195,\n    47,\n    33,\n    70,\n    1,\n    2,\n    127,\n    32,\n    0,\n    63,\n    0,\n    34,\n    2,\n    65,\n    16,\n    116,\n    34,\n    1,\n    75,\n    4,\n    64,\n    32,\n    2,\n    32,\n    0,\n    32,\n    1,\n    107,\n    65,\n    255,\n    255,\n    3,\n    106,\n    65,\n    128,\n    128,\n    124,\n    113,\n    65,\n    16,\n    118,\n    34,\n    1,\n    32,\n    2,\n    32,\n    1,\n    74,\n    27,\n    64,\n    0,\n    65,\n    0,\n    72,\n    4,\n    64,\n    32,\n    1,\n    64,\n    0,\n    65,\n    0,\n    72,\n    4,\n    64,\n    0,\n    11,\n    11,\n    11,\n    32,\n    0,\n    36,\n    5,\n    11,\n    82,\n    1,\n    3,\n    127,\n    32,\n    0,\n    65,\n    240,\n    255,\n    255,\n    255,\n    3,\n    75,\n    4,\n    64,\n    0,\n    11,\n    35,\n    5,\n    65,\n    16,\n    106,\n    34,\n    3,\n    32,\n    0,\n    65,\n    15,\n    106,\n    65,\n    112,\n    113,\n    34,\n    2,\n    65,\n    16,\n    32,\n    2,\n    65,\n    16,\n    75,\n    27,\n    34,\n    4,\n    106,\n    16,\n    1,\n    32,\n    3,\n    65,\n    16,\n    107,\n    34,\n    2,\n    32,\n    4,\n    54,\n    2,\n    0,\n    32,\n    2,\n    65,\n    1,\n    54,\n    2,\n    4,\n    32,\n    2,\n    32,\n    1,\n    54,\n    2,\n    8,\n    32,\n    2,\n    32,\n    0,\n    54,\n    2,\n    12,\n    32,\n    3,\n    11,\n    37,\n    1,\n    1,\n    127,\n    3,\n    64,\n    32,\n    1,\n    4,\n    64,\n    32,\n    0,\n    34,\n    2,\n    65,\n    1,\n    106,\n    33,\n    0,\n    32,\n    2,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    1,\n    107,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    11,\n    42,\n    1,\n    1,\n    127,\n    32,\n    0,\n    65,\n    240,\n    255,\n    255,\n    255,\n    3,\n    75,\n    4,\n    64,\n    65,\n    32,\n    65,\n    208,\n    0,\n    65,\n    54,\n    65,\n    42,\n    16,\n    0,\n    0,\n    11,\n    32,\n    0,\n    65,\n    0,\n    16,\n    2,\n    34,\n    1,\n    32,\n    0,\n    16,\n    3,\n    32,\n    1,\n    11,\n    67,\n    0,\n    65,\n    128,\n    3,\n    36,\n    4,\n    65,\n    128,\n    3,\n    36,\n    5,\n    65,\n    128,\n    128,\n    4,\n    16,\n    4,\n    36,\n    6,\n    35,\n    6,\n    36,\n    7,\n    65,\n    32,\n    16,\n    4,\n    36,\n    8,\n    35,\n    8,\n    36,\n    9,\n    65,\n    16,\n    16,\n    4,\n    36,\n    10,\n    35,\n    10,\n    36,\n    11,\n    65,\n    128,\n    128,\n    4,\n    16,\n    4,\n    36,\n    12,\n    35,\n    12,\n    36,\n    13,\n    65,\n    192,\n    0,\n    16,\n    4,\n    36,\n    14,\n    35,\n    14,\n    36,\n    15,\n    11,\n    83,\n    1,\n    1,\n    127,\n    65,\n    128,\n    2,\n    65,\n    0,\n    16,\n    2,\n    34,\n    1,\n    65,\n    128,\n    2,\n    16,\n    3,\n    32,\n    0,\n    69,\n    4,\n    64,\n    65,\n    12,\n    65,\n    2,\n    16,\n    2,\n    33,\n    0,\n    11,\n    32,\n    0,\n    65,\n    0,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    0,\n    54,\n    2,\n    4,\n    32,\n    0,\n    65,\n    0,\n    54,\n    2,\n    8,\n    32,\n    0,\n    40,\n    2,\n    0,\n    26,\n    32,\n    0,\n    32,\n    1,\n    54,\n    2,\n    0,\n    32,\n    0,\n    32,\n    1,\n    54,\n    2,\n    4,\n    32,\n    0,\n    65,\n    128,\n    2,\n    54,\n    2,\n    8,\n    32,\n    0,\n    11,\n    10,\n    0,\n    65,\n    12,\n    65,\n    3,\n    16,\n    2,\n    16,\n    6,\n    11,\n    95,\n    0,\n    16,\n    7,\n    36,\n    16,\n    35,\n    16,\n    40,\n    2,\n    0,\n    36,\n    17,\n    65,\n    32,\n    16,\n    4,\n    36,\n    18,\n    65,\n    128,\n    128,\n    4,\n    16,\n    4,\n    36,\n    19,\n    65,\n    16,\n    16,\n    4,\n    36,\n    20,\n    35,\n    18,\n    36,\n    21,\n    35,\n    19,\n    36,\n    22,\n    35,\n    20,\n    36,\n    23,\n    65,\n    16,\n    16,\n    4,\n    36,\n    24,\n    35,\n    24,\n    36,\n    25,\n    65,\n    20,\n    16,\n    4,\n    36,\n    26,\n    35,\n    26,\n    36,\n    27,\n    65,\n    20,\n    16,\n    4,\n    36,\n    28,\n    35,\n    28,\n    36,\n    29,\n    65,\n    16,\n    16,\n    4,\n    36,\n    30,\n    35,\n    30,\n    36,\n    31,\n    65,\n    20,\n    16,\n    4,\n    36,\n    35,\n    35,\n    35,\n    36,\n    36,\n    11,\n    55,\n    0,\n    65,\n    32,\n    16,\n    4,\n    36,\n    37,\n    35,\n    37,\n    36,\n    38,\n    65,\n    12,\n    16,\n    4,\n    36,\n    39,\n    35,\n    39,\n    36,\n    40,\n    65,\n    32,\n    16,\n    4,\n    36,\n    41,\n    35,\n    41,\n    36,\n    42,\n    65,\n    128,\n    128,\n    4,\n    16,\n    4,\n    36,\n    43,\n    35,\n    43,\n    36,\n    44,\n    16,\n    7,\n    36,\n    45,\n    35,\n    45,\n    40,\n    2,\n    0,\n    36,\n    46,\n    11,\n    22,\n    0,\n    32,\n    1,\n    32,\n    2,\n    65,\n    255,\n    1,\n    113,\n    65,\n    4,\n    110,\n    65,\n    2,\n    116,\n    106,\n    32,\n    0,\n    54,\n    2,\n    0,\n    11,\n    188,\n    6,\n    1,\n    31,\n    127,\n    65,\n    229,\n    240,\n    193,\n    139,\n    6,\n    33,\n    5,\n    65,\n    238,\n    200,\n    129,\n    153,\n    3,\n    33,\n    6,\n    65,\n    178,\n    218,\n    136,\n    203,\n    7,\n    33,\n    14,\n    65,\n    244,\n    202,\n    129,\n    217,\n    6,\n    33,\n    7,\n    32,\n    2,\n    40,\n    2,\n    0,\n    34,\n    19,\n    33,\n    4,\n    32,\n    2,\n    65,\n    4,\n    106,\n    40,\n    2,\n    0,\n    34,\n    20,\n    33,\n    8,\n    32,\n    2,\n    65,\n    8,\n    106,\n    40,\n    2,\n    0,\n    34,\n    21,\n    33,\n    3,\n    32,\n    2,\n    65,\n    12,\n    106,\n    40,\n    2,\n    0,\n    34,\n    22,\n    33,\n    13,\n    32,\n    2,\n    65,\n    16,\n    106,\n    40,\n    2,\n    0,\n    34,\n    23,\n    33,\n    15,\n    32,\n    2,\n    65,\n    20,\n    106,\n    40,\n    2,\n    0,\n    34,\n    24,\n    33,\n    9,\n    32,\n    2,\n    65,\n    24,\n    106,\n    40,\n    2,\n    0,\n    34,\n    25,\n    33,\n    10,\n    32,\n    2,\n    65,\n    28,\n    106,\n    40,\n    2,\n    0,\n    34,\n    26,\n    33,\n    2,\n    32,\n    1,\n    40,\n    2,\n    0,\n    34,\n    27,\n    33,\n    11,\n    32,\n    1,\n    65,\n    4,\n    106,\n    40,\n    2,\n    0,\n    34,\n    28,\n    33,\n    16,\n    32,\n    1,\n    65,\n    8,\n    106,\n    40,\n    2,\n    0,\n    34,\n    29,\n    33,\n    12,\n    32,\n    1,\n    65,\n    12,\n    106,\n    40,\n    2,\n    0,\n    34,\n    30,\n    33,\n    1,\n    3,\n    64,\n    32,\n    18,\n    65,\n    20,\n    72,\n    4,\n    64,\n    32,\n    3,\n    32,\n    10,\n    32,\n    12,\n    32,\n    3,\n    32,\n    14,\n    106,\n    34,\n    3,\n    115,\n    65,\n    16,\n    119,\n    34,\n    14,\n    106,\n    34,\n    10,\n    115,\n    65,\n    12,\n    119,\n    34,\n    12,\n    32,\n    10,\n    32,\n    14,\n    32,\n    3,\n    32,\n    12,\n    106,\n    34,\n    3,\n    115,\n    65,\n    8,\n    119,\n    34,\n    14,\n    106,\n    34,\n    10,\n    115,\n    33,\n    12,\n    32,\n    13,\n    32,\n    2,\n    32,\n    1,\n    32,\n    7,\n    32,\n    13,\n    106,\n    34,\n    1,\n    115,\n    65,\n    16,\n    119,\n    34,\n    2,\n    106,\n    34,\n    13,\n    115,\n    65,\n    12,\n    119,\n    34,\n    7,\n    32,\n    13,\n    32,\n    2,\n    32,\n    1,\n    32,\n    7,\n    106,\n    34,\n    13,\n    115,\n    65,\n    8,\n    119,\n    34,\n    1,\n    106,\n    34,\n    2,\n    115,\n    33,\n    7,\n    32,\n    4,\n    32,\n    15,\n    32,\n    11,\n    32,\n    4,\n    32,\n    5,\n    106,\n    34,\n    4,\n    115,\n    65,\n    16,\n    119,\n    34,\n    5,\n    106,\n    34,\n    15,\n    115,\n    65,\n    12,\n    119,\n    34,\n    11,\n    32,\n    15,\n    32,\n    5,\n    32,\n    4,\n    32,\n    11,\n    106,\n    34,\n    4,\n    115,\n    65,\n    8,\n    119,\n    34,\n    5,\n    106,\n    34,\n    15,\n    115,\n    33,\n    11,\n    32,\n    10,\n    32,\n    1,\n    32,\n    8,\n    32,\n    9,\n    32,\n    16,\n    32,\n    6,\n    32,\n    8,\n    106,\n    34,\n    1,\n    115,\n    65,\n    16,\n    119,\n    34,\n    8,\n    106,\n    34,\n    6,\n    115,\n    65,\n    12,\n    119,\n    34,\n    9,\n    32,\n    6,\n    32,\n    8,\n    32,\n    1,\n    32,\n    9,\n    106,\n    34,\n    1,\n    115,\n    65,\n    8,\n    119,\n    34,\n    6,\n    106,\n    34,\n    9,\n    115,\n    65,\n    7,\n    119,\n    34,\n    10,\n    32,\n    4,\n    106,\n    34,\n    17,\n    115,\n    65,\n    16,\n    119,\n    34,\n    31,\n    106,\n    33,\n    8,\n    32,\n    2,\n    32,\n    5,\n    32,\n    12,\n    65,\n    7,\n    119,\n    34,\n    5,\n    32,\n    1,\n    106,\n    34,\n    32,\n    115,\n    65,\n    16,\n    119,\n    34,\n    33,\n    106,\n    33,\n    1,\n    32,\n    9,\n    32,\n    14,\n    32,\n    13,\n    32,\n    11,\n    65,\n    7,\n    119,\n    34,\n    9,\n    106,\n    34,\n    11,\n    115,\n    65,\n    16,\n    119,\n    34,\n    12,\n    106,\n    33,\n    4,\n    32,\n    15,\n    32,\n    6,\n    32,\n    3,\n    32,\n    7,\n    65,\n    7,\n    119,\n    34,\n    3,\n    106,\n    34,\n    6,\n    115,\n    65,\n    16,\n    119,\n    34,\n    7,\n    106,\n    34,\n    2,\n    32,\n    6,\n    32,\n    2,\n    32,\n    3,\n    115,\n    65,\n    12,\n    119,\n    34,\n    3,\n    106,\n    34,\n    14,\n    32,\n    7,\n    115,\n    65,\n    8,\n    119,\n    34,\n    16,\n    106,\n    34,\n    15,\n    32,\n    3,\n    115,\n    65,\n    7,\n    119,\n    33,\n    13,\n    32,\n    11,\n    32,\n    4,\n    32,\n    9,\n    115,\n    65,\n    12,\n    119,\n    34,\n    2,\n    106,\n    34,\n    7,\n    32,\n    12,\n    115,\n    65,\n    8,\n    119,\n    34,\n    12,\n    32,\n    4,\n    106,\n    34,\n    9,\n    32,\n    2,\n    115,\n    65,\n    7,\n    119,\n    33,\n    4,\n    32,\n    32,\n    32,\n    1,\n    32,\n    5,\n    115,\n    65,\n    12,\n    119,\n    34,\n    3,\n    106,\n    34,\n    6,\n    32,\n    33,\n    115,\n    65,\n    8,\n    119,\n    34,\n    11,\n    32,\n    1,\n    106,\n    34,\n    2,\n    32,\n    3,\n    115,\n    65,\n    7,\n    119,\n    33,\n    3,\n    32,\n    17,\n    32,\n    8,\n    32,\n    10,\n    115,\n    65,\n    12,\n    119,\n    34,\n    17,\n    106,\n    34,\n    5,\n    32,\n    31,\n    115,\n    65,\n    8,\n    119,\n    34,\n    1,\n    32,\n    8,\n    106,\n    34,\n    10,\n    32,\n    17,\n    115,\n    65,\n    7,\n    119,\n    33,\n    8,\n    32,\n    18,\n    65,\n    2,\n    106,\n    33,\n    18,\n    12,\n    1,\n    11,\n    11,\n    32,\n    5,\n    65,\n    229,\n    240,\n    193,\n    139,\n    6,\n    106,\n    32,\n    0,\n    65,\n    0,\n    16,\n    10,\n    32,\n    6,\n    65,\n    238,\n    200,\n    129,\n    153,\n    3,\n    106,\n    32,\n    0,\n    65,\n    4,\n    16,\n    10,\n    32,\n    14,\n    65,\n    178,\n    218,\n    136,\n    203,\n    7,\n    106,\n    32,\n    0,\n    65,\n    8,\n    16,\n    10,\n    32,\n    7,\n    65,\n    244,\n    202,\n    129,\n    217,\n    6,\n    106,\n    32,\n    0,\n    65,\n    12,\n    16,\n    10,\n    32,\n    4,\n    32,\n    19,\n    106,\n    32,\n    0,\n    65,\n    16,\n    16,\n    10,\n    32,\n    8,\n    32,\n    20,\n    106,\n    32,\n    0,\n    65,\n    20,\n    16,\n    10,\n    32,\n    3,\n    32,\n    21,\n    106,\n    32,\n    0,\n    65,\n    24,\n    16,\n    10,\n    32,\n    13,\n    32,\n    22,\n    106,\n    32,\n    0,\n    65,\n    28,\n    16,\n    10,\n    32,\n    15,\n    32,\n    23,\n    106,\n    32,\n    0,\n    65,\n    32,\n    16,\n    10,\n    32,\n    9,\n    32,\n    24,\n    106,\n    32,\n    0,\n    65,\n    36,\n    16,\n    10,\n    32,\n    10,\n    32,\n    25,\n    106,\n    32,\n    0,\n    65,\n    40,\n    16,\n    10,\n    32,\n    2,\n    32,\n    26,\n    106,\n    32,\n    0,\n    65,\n    44,\n    16,\n    10,\n    32,\n    11,\n    32,\n    27,\n    106,\n    32,\n    0,\n    65,\n    48,\n    16,\n    10,\n    32,\n    16,\n    32,\n    28,\n    106,\n    32,\n    0,\n    65,\n    52,\n    16,\n    10,\n    32,\n    12,\n    32,\n    29,\n    106,\n    32,\n    0,\n    65,\n    56,\n    16,\n    10,\n    32,\n    1,\n    32,\n    30,\n    106,\n    32,\n    0,\n    65,\n    60,\n    16,\n    10,\n    11,\n    97,\n    1,\n    4,\n    127,\n    65,\n    4,\n    33,\n    3,\n    65,\n    1,\n    33,\n    1,\n    3,\n    64,\n    32,\n    3,\n    34,\n    2,\n    65,\n    1,\n    107,\n    33,\n    3,\n    32,\n    2,\n    65,\n    255,\n    1,\n    113,\n    4,\n    64,\n    32,\n    1,\n    32,\n    0,\n    32,\n    4,\n    65,\n    255,\n    1,\n    113,\n    106,\n    34,\n    2,\n    45,\n    0,\n    0,\n    106,\n    33,\n    1,\n    32,\n    2,\n    32,\n    1,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    8,\n    118,\n    33,\n    1,\n    32,\n    4,\n    65,\n    1,\n    106,\n    33,\n    4,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    65,\n    0,\n    74,\n    4,\n    64,\n    65,\n    144,\n    1,\n    65,\n    208,\n    1,\n    65,\n    135,\n    2,\n    65,\n    4,\n    16,\n    0,\n    0,\n    11,\n    11,\n    8,\n    0,\n    32,\n    0,\n    32,\n    1,\n    16,\n    3,\n    11,\n    108,\n    1,\n    2,\n    127,\n    3,\n    64,\n    32,\n    6,\n    32,\n    1,\n    73,\n    4,\n    64,\n    35,\n    15,\n    32,\n    3,\n    32,\n    2,\n    16,\n    11,\n    32,\n    6,\n    33,\n    5,\n    3,\n    64,\n    32,\n    5,\n    32,\n    1,\n    73,\n    65,\n    0,\n    32,\n    5,\n    32,\n    6,\n    65,\n    64,\n    107,\n    73,\n    27,\n    4,\n    64,\n    32,\n    4,\n    32,\n    5,\n    106,\n    32,\n    0,\n    32,\n    5,\n    106,\n    45,\n    0,\n    0,\n    35,\n    15,\n    32,\n    5,\n    32,\n    6,\n    107,\n    106,\n    45,\n    0,\n    0,\n    115,\n    58,\n    0,\n    0,\n    32,\n    5,\n    65,\n    1,\n    106,\n    33,\n    5,\n    12,\n    1,\n    11,\n    11,\n    32,\n    3,\n    16,\n    12,\n    32,\n    6,\n    65,\n    64,\n    107,\n    33,\n    6,\n    12,\n    1,\n    11,\n    11,\n    35,\n    15,\n    65,\n    192,\n    0,\n    16,\n    13,\n    32,\n    1,\n    11,\n    14,\n    0,\n    35,\n    7,\n    32,\n    0,\n    35,\n    9,\n    35,\n    11,\n    35,\n    13,\n    16,\n    14,\n    11,\n    204,\n    4,\n    1,\n    1,\n    127,\n    35,\n    27,\n    32,\n    0,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    1,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    2,\n    106,\n    32,\n    1,\n    65,\n    13,\n    118,\n    32,\n    0,\n    65,\n    2,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    3,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    3,\n    116,\n    114,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    4,\n    106,\n    32,\n    1,\n    65,\n    10,\n    118,\n    32,\n    0,\n    65,\n    4,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    5,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    6,\n    116,\n    114,\n    65,\n    131,\n    62,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    6,\n    106,\n    32,\n    1,\n    65,\n    7,\n    118,\n    32,\n    0,\n    65,\n    6,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    7,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    9,\n    116,\n    114,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    8,\n    106,\n    32,\n    1,\n    65,\n    4,\n    118,\n    32,\n    0,\n    65,\n    8,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    9,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    12,\n    116,\n    114,\n    65,\n    255,\n    1,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    10,\n    106,\n    32,\n    1,\n    65,\n    1,\n    118,\n    65,\n    254,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    12,\n    106,\n    32,\n    1,\n    65,\n    14,\n    118,\n    32,\n    0,\n    65,\n    10,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    11,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    2,\n    116,\n    114,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    14,\n    106,\n    32,\n    1,\n    65,\n    11,\n    118,\n    32,\n    0,\n    65,\n    12,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    13,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    5,\n    116,\n    114,\n    65,\n    129,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    16,\n    106,\n    32,\n    1,\n    65,\n    8,\n    118,\n    32,\n    0,\n    65,\n    14,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    15,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    1,\n    65,\n    8,\n    116,\n    114,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    27,\n    65,\n    18,\n    106,\n    32,\n    1,\n    65,\n    5,\n    118,\n    65,\n    255,\n    0,\n    113,\n    59,\n    1,\n    0,\n    35,\n    31,\n    32,\n    0,\n    65,\n    16,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    17,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    2,\n    106,\n    32,\n    0,\n    65,\n    18,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    19,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    4,\n    106,\n    32,\n    0,\n    65,\n    20,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    21,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    6,\n    106,\n    32,\n    0,\n    65,\n    22,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    23,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    8,\n    106,\n    32,\n    0,\n    65,\n    24,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    25,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    10,\n    106,\n    32,\n    0,\n    65,\n    26,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    27,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    12,\n    106,\n    32,\n    0,\n    65,\n    28,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    29,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    31,\n    65,\n    14,\n    106,\n    32,\n    0,\n    65,\n    30,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    65,\n    31,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    59,\n    1,\n    0,\n    11,\n    6,\n    0,\n    35,\n    21,\n    16,\n    16,\n    11,\n    166,\n    13,\n    1,\n    32,\n    127,\n    65,\n    0,\n    65,\n    128,\n    16,\n    35,\n    33,\n    27,\n    33,\n    34,\n    35,\n    29,\n    47,\n    1,\n    0,\n    33,\n    3,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    33,\n    4,\n    35,\n    29,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    33,\n    8,\n    35,\n    29,\n    65,\n    6,\n    106,\n    47,\n    1,\n    0,\n    33,\n    9,\n    35,\n    29,\n    65,\n    8,\n    106,\n    47,\n    1,\n    0,\n    33,\n    10,\n    35,\n    29,\n    65,\n    10,\n    106,\n    47,\n    1,\n    0,\n    33,\n    11,\n    35,\n    29,\n    65,\n    12,\n    106,\n    47,\n    1,\n    0,\n    33,\n    12,\n    35,\n    29,\n    65,\n    14,\n    106,\n    47,\n    1,\n    0,\n    33,\n    13,\n    35,\n    29,\n    65,\n    16,\n    106,\n    47,\n    1,\n    0,\n    33,\n    14,\n    35,\n    29,\n    65,\n    18,\n    106,\n    47,\n    1,\n    0,\n    33,\n    6,\n    35,\n    27,\n    47,\n    1,\n    0,\n    33,\n    17,\n    35,\n    27,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    33,\n    18,\n    35,\n    27,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    33,\n    20,\n    35,\n    27,\n    65,\n    6,\n    106,\n    47,\n    1,\n    0,\n    33,\n    22,\n    35,\n    27,\n    65,\n    8,\n    106,\n    47,\n    1,\n    0,\n    33,\n    24,\n    35,\n    27,\n    65,\n    10,\n    106,\n    47,\n    1,\n    0,\n    33,\n    26,\n    35,\n    27,\n    65,\n    12,\n    106,\n    47,\n    1,\n    0,\n    33,\n    29,\n    35,\n    27,\n    65,\n    14,\n    106,\n    47,\n    1,\n    0,\n    33,\n    30,\n    35,\n    27,\n    65,\n    16,\n    106,\n    47,\n    1,\n    0,\n    33,\n    31,\n    35,\n    27,\n    65,\n    18,\n    106,\n    47,\n    1,\n    0,\n    33,\n    33,\n    3,\n    64,\n    32,\n    2,\n    65,\n    16,\n    79,\n    4,\n    64,\n    32,\n    3,\n    32,\n    0,\n    32,\n    1,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    15,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    3,\n    32,\n    17,\n    108,\n    32,\n    4,\n    32,\n    0,\n    32,\n    1,\n    65,\n    2,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    3,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    16,\n    65,\n    3,\n    116,\n    32,\n    15,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    13,\n    118,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    4,\n    32,\n    33,\n    65,\n    5,\n    108,\n    34,\n    15,\n    108,\n    106,\n    32,\n    8,\n    32,\n    0,\n    32,\n    1,\n    65,\n    4,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    5,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    19,\n    65,\n    6,\n    116,\n    32,\n    16,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    10,\n    118,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    8,\n    32,\n    31,\n    65,\n    5,\n    108,\n    34,\n    16,\n    108,\n    106,\n    32,\n    9,\n    32,\n    0,\n    32,\n    1,\n    65,\n    6,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    7,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    21,\n    65,\n    9,\n    116,\n    32,\n    19,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    7,\n    118,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    9,\n    32,\n    30,\n    65,\n    5,\n    108,\n    34,\n    19,\n    108,\n    106,\n    32,\n    10,\n    32,\n    0,\n    32,\n    1,\n    65,\n    8,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    9,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    23,\n    65,\n    12,\n    116,\n    32,\n    21,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    4,\n    118,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    10,\n    32,\n    29,\n    65,\n    5,\n    108,\n    34,\n    21,\n    108,\n    106,\n    34,\n    32,\n    65,\n    255,\n    63,\n    113,\n    32,\n    11,\n    32,\n    23,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    1,\n    118,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    11,\n    32,\n    26,\n    65,\n    5,\n    108,\n    34,\n    27,\n    108,\n    106,\n    32,\n    12,\n    32,\n    0,\n    32,\n    1,\n    65,\n    10,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    11,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    28,\n    65,\n    2,\n    116,\n    32,\n    23,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    14,\n    118,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    12,\n    32,\n    24,\n    65,\n    5,\n    108,\n    34,\n    23,\n    108,\n    106,\n    32,\n    13,\n    32,\n    0,\n    32,\n    1,\n    65,\n    12,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    13,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    25,\n    65,\n    5,\n    116,\n    32,\n    28,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    11,\n    118,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    13,\n    32,\n    22,\n    65,\n    5,\n    108,\n    34,\n    28,\n    108,\n    106,\n    32,\n    14,\n    32,\n    25,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    8,\n    118,\n    32,\n    0,\n    32,\n    1,\n    65,\n    14,\n    106,\n    106,\n    45,\n    0,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    15,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    34,\n    25,\n    65,\n    8,\n    116,\n    114,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    14,\n    32,\n    20,\n    65,\n    5,\n    108,\n    34,\n    7,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    21,\n    108,\n    32,\n    32,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    34,\n    32,\n    25,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    5,\n    118,\n    114,\n    65,\n    255,\n    255,\n    3,\n    113,\n    106,\n    34,\n    6,\n    32,\n    18,\n    65,\n    5,\n    108,\n    108,\n    106,\n    34,\n    32,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    18,\n    108,\n    106,\n    32,\n    4,\n    32,\n    17,\n    108,\n    106,\n    32,\n    8,\n    32,\n    15,\n    108,\n    106,\n    32,\n    9,\n    32,\n    16,\n    108,\n    106,\n    32,\n    10,\n    32,\n    19,\n    108,\n    106,\n    34,\n    25,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    27,\n    108,\n    106,\n    32,\n    13,\n    32,\n    23,\n    108,\n    106,\n    32,\n    14,\n    32,\n    28,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    19,\n    108,\n    32,\n    25,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    7,\n    108,\n    106,\n    34,\n    25,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    20,\n    108,\n    106,\n    32,\n    4,\n    32,\n    18,\n    108,\n    106,\n    32,\n    8,\n    32,\n    17,\n    108,\n    106,\n    32,\n    9,\n    32,\n    15,\n    108,\n    106,\n    32,\n    10,\n    32,\n    16,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    21,\n    108,\n    106,\n    32,\n    13,\n    32,\n    27,\n    108,\n    106,\n    32,\n    14,\n    32,\n    23,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    16,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    28,\n    108,\n    106,\n    34,\n    28,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    22,\n    108,\n    106,\n    32,\n    4,\n    32,\n    20,\n    108,\n    106,\n    32,\n    8,\n    32,\n    18,\n    108,\n    106,\n    32,\n    9,\n    32,\n    17,\n    108,\n    106,\n    32,\n    10,\n    32,\n    15,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    19,\n    108,\n    106,\n    32,\n    13,\n    32,\n    21,\n    108,\n    106,\n    32,\n    14,\n    32,\n    27,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    15,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    23,\n    108,\n    106,\n    34,\n    23,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    24,\n    108,\n    106,\n    32,\n    4,\n    32,\n    22,\n    108,\n    106,\n    32,\n    8,\n    32,\n    20,\n    108,\n    106,\n    32,\n    9,\n    32,\n    18,\n    108,\n    106,\n    32,\n    10,\n    32,\n    17,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    16,\n    108,\n    106,\n    32,\n    13,\n    32,\n    19,\n    108,\n    106,\n    32,\n    14,\n    32,\n    21,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    17,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    27,\n    108,\n    106,\n    34,\n    27,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    26,\n    108,\n    106,\n    32,\n    4,\n    32,\n    24,\n    108,\n    106,\n    32,\n    8,\n    32,\n    22,\n    108,\n    106,\n    32,\n    9,\n    32,\n    20,\n    108,\n    106,\n    32,\n    10,\n    32,\n    18,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    15,\n    108,\n    106,\n    32,\n    13,\n    32,\n    16,\n    108,\n    106,\n    32,\n    14,\n    32,\n    19,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    18,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    21,\n    108,\n    106,\n    34,\n    21,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    29,\n    108,\n    106,\n    32,\n    4,\n    32,\n    26,\n    108,\n    106,\n    32,\n    8,\n    32,\n    24,\n    108,\n    106,\n    32,\n    9,\n    32,\n    22,\n    108,\n    106,\n    32,\n    10,\n    32,\n    20,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    17,\n    108,\n    106,\n    32,\n    13,\n    32,\n    15,\n    108,\n    106,\n    32,\n    14,\n    32,\n    16,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    20,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    19,\n    108,\n    106,\n    34,\n    19,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    30,\n    108,\n    106,\n    32,\n    4,\n    32,\n    29,\n    108,\n    106,\n    32,\n    8,\n    32,\n    26,\n    108,\n    106,\n    32,\n    9,\n    32,\n    24,\n    108,\n    106,\n    32,\n    10,\n    32,\n    22,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    18,\n    108,\n    106,\n    32,\n    13,\n    32,\n    17,\n    108,\n    106,\n    32,\n    14,\n    32,\n    15,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    22,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    16,\n    108,\n    106,\n    34,\n    16,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    31,\n    108,\n    106,\n    32,\n    4,\n    32,\n    30,\n    108,\n    106,\n    32,\n    8,\n    32,\n    29,\n    108,\n    106,\n    32,\n    9,\n    32,\n    26,\n    108,\n    106,\n    32,\n    10,\n    32,\n    24,\n    108,\n    106,\n    34,\n    7,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    20,\n    108,\n    106,\n    32,\n    13,\n    32,\n    18,\n    108,\n    106,\n    32,\n    14,\n    32,\n    17,\n    108,\n    106,\n    33,\n    5,\n    32,\n    11,\n    32,\n    24,\n    108,\n    32,\n    7,\n    65,\n    13,\n    118,\n    32,\n    5,\n    32,\n    6,\n    32,\n    15,\n    108,\n    106,\n    34,\n    15,\n    65,\n    13,\n    118,\n    106,\n    32,\n    3,\n    32,\n    33,\n    108,\n    106,\n    32,\n    4,\n    32,\n    31,\n    108,\n    106,\n    32,\n    8,\n    32,\n    30,\n    108,\n    106,\n    32,\n    9,\n    32,\n    29,\n    108,\n    106,\n    32,\n    10,\n    32,\n    26,\n    108,\n    106,\n    34,\n    3,\n    65,\n    255,\n    63,\n    113,\n    106,\n    32,\n    12,\n    32,\n    22,\n    108,\n    106,\n    32,\n    13,\n    32,\n    20,\n    108,\n    106,\n    32,\n    14,\n    32,\n    18,\n    108,\n    106,\n    33,\n    4,\n    32,\n    3,\n    65,\n    13,\n    118,\n    32,\n    4,\n    32,\n    6,\n    32,\n    17,\n    108,\n    106,\n    34,\n    6,\n    65,\n    13,\n    118,\n    106,\n    34,\n    3,\n    32,\n    3,\n    65,\n    2,\n    116,\n    106,\n    32,\n    32,\n    65,\n    255,\n    63,\n    113,\n    106,\n    34,\n    3,\n    65,\n    13,\n    118,\n    33,\n    4,\n    32,\n    3,\n    65,\n    255,\n    63,\n    113,\n    33,\n    3,\n    32,\n    25,\n    65,\n    255,\n    63,\n    113,\n    32,\n    4,\n    106,\n    33,\n    4,\n    32,\n    28,\n    65,\n    255,\n    63,\n    113,\n    33,\n    8,\n    32,\n    23,\n    65,\n    255,\n    63,\n    113,\n    33,\n    9,\n    32,\n    27,\n    65,\n    255,\n    63,\n    113,\n    33,\n    10,\n    32,\n    21,\n    65,\n    255,\n    63,\n    113,\n    33,\n    11,\n    32,\n    19,\n    65,\n    255,\n    63,\n    113,\n    33,\n    12,\n    32,\n    16,\n    65,\n    255,\n    63,\n    113,\n    33,\n    13,\n    32,\n    15,\n    65,\n    255,\n    63,\n    113,\n    33,\n    14,\n    32,\n    6,\n    65,\n    255,\n    63,\n    113,\n    33,\n    6,\n    32,\n    1,\n    65,\n    16,\n    106,\n    33,\n    1,\n    32,\n    2,\n    65,\n    16,\n    107,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    35,\n    29,\n    32,\n    3,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    2,\n    106,\n    32,\n    4,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    4,\n    106,\n    32,\n    8,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    6,\n    106,\n    32,\n    9,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    8,\n    106,\n    32,\n    10,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    10,\n    106,\n    32,\n    11,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    12,\n    106,\n    32,\n    12,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    14,\n    106,\n    32,\n    13,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    16,\n    106,\n    32,\n    14,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    18,\n    106,\n    32,\n    6,\n    59,\n    1,\n    0,\n    11,\n    203,\n    1,\n    1,\n    3,\n    127,\n    35,\n    32,\n    4,\n    64,\n    65,\n    16,\n    35,\n    32,\n    107,\n    34,\n    3,\n    32,\n    1,\n    75,\n    4,\n    64,\n    32,\n    1,\n    33,\n    3,\n    11,\n    3,\n    64,\n    32,\n    2,\n    32,\n    3,\n    73,\n    4,\n    64,\n    35,\n    25,\n    32,\n    2,\n    35,\n    32,\n    106,\n    106,\n    32,\n    0,\n    32,\n    2,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    2,\n    65,\n    1,\n    106,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    32,\n    3,\n    107,\n    33,\n    1,\n    32,\n    3,\n    33,\n    4,\n    32,\n    3,\n    35,\n    32,\n    106,\n    36,\n    32,\n    35,\n    32,\n    65,\n    16,\n    73,\n    4,\n    64,\n    15,\n    11,\n    35,\n    25,\n    65,\n    0,\n    65,\n    16,\n    16,\n    18,\n    65,\n    0,\n    36,\n    32,\n    11,\n    2,\n    127,\n    32,\n    1,\n    65,\n    16,\n    79,\n    4,\n    64,\n    32,\n    0,\n    32,\n    4,\n    32,\n    1,\n    32,\n    1,\n    65,\n    15,\n    113,\n    107,\n    34,\n    3,\n    16,\n    18,\n    32,\n    3,\n    32,\n    4,\n    106,\n    33,\n    4,\n    32,\n    1,\n    32,\n    3,\n    107,\n    33,\n    1,\n    11,\n    32,\n    1,\n    11,\n    4,\n    64,\n    65,\n    0,\n    33,\n    2,\n    3,\n    64,\n    32,\n    2,\n    32,\n    1,\n    73,\n    4,\n    64,\n    35,\n    25,\n    32,\n    2,\n    35,\n    32,\n    106,\n    106,\n    32,\n    0,\n    32,\n    2,\n    32,\n    4,\n    106,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    2,\n    65,\n    1,\n    106,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    35,\n    32,\n    106,\n    36,\n    32,\n    11,\n    11,\n    8,\n    0,\n    35,\n    22,\n    32,\n    0,\n    16,\n    19,\n    11,\n    149,\n    9,\n    1,\n    3,\n    127,\n    35,\n    32,\n    4,\n    64,\n    35,\n    32,\n    34,\n    1,\n    35,\n    25,\n    106,\n    65,\n    1,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    3,\n    64,\n    32,\n    1,\n    65,\n    16,\n    73,\n    4,\n    64,\n    32,\n    1,\n    35,\n    25,\n    106,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    65,\n    1,\n    36,\n    33,\n    35,\n    25,\n    65,\n    0,\n    65,\n    16,\n    16,\n    18,\n    11,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    65,\n    13,\n    118,\n    33,\n    2,\n    35,\n    29,\n    65,\n    2,\n    106,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    65,\n    2,\n    33,\n    1,\n    3,\n    64,\n    32,\n    1,\n    65,\n    10,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    1,\n    116,\n    34,\n    3,\n    35,\n    29,\n    106,\n    32,\n    2,\n    32,\n    3,\n    35,\n    29,\n    106,\n    47,\n    1,\n    0,\n    106,\n    59,\n    1,\n    0,\n    32,\n    3,\n    35,\n    29,\n    106,\n    47,\n    1,\n    0,\n    65,\n    13,\n    118,\n    33,\n    2,\n    32,\n    3,\n    35,\n    29,\n    106,\n    32,\n    3,\n    35,\n    29,\n    106,\n    47,\n    1,\n    0,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    35,\n    29,\n    35,\n    29,\n    47,\n    1,\n    0,\n    32,\n    2,\n    65,\n    5,\n    108,\n    106,\n    59,\n    1,\n    0,\n    35,\n    29,\n    47,\n    1,\n    0,\n    33,\n    1,\n    35,\n    29,\n    35,\n    29,\n    47,\n    1,\n    0,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    2,\n    106,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    32,\n    1,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    13,\n    118,\n    106,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    33,\n    1,\n    35,\n    29,\n    65,\n    2,\n    106,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    4,\n    106,\n    35,\n    29,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    32,\n    1,\n    65,\n    255,\n    255,\n    3,\n    113,\n    65,\n    13,\n    118,\n    106,\n    59,\n    1,\n    0,\n    35,\n    36,\n    35,\n    29,\n    47,\n    1,\n    0,\n    65,\n    5,\n    106,\n    59,\n    1,\n    0,\n    35,\n    36,\n    47,\n    1,\n    0,\n    65,\n    13,\n    118,\n    33,\n    2,\n    35,\n    36,\n    35,\n    36,\n    47,\n    1,\n    0,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    65,\n    1,\n    33,\n    1,\n    3,\n    64,\n    32,\n    1,\n    65,\n    10,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    1,\n    116,\n    34,\n    3,\n    35,\n    36,\n    106,\n    32,\n    2,\n    32,\n    3,\n    35,\n    29,\n    106,\n    47,\n    1,\n    0,\n    106,\n    59,\n    1,\n    0,\n    32,\n    3,\n    35,\n    36,\n    106,\n    47,\n    1,\n    0,\n    65,\n    13,\n    118,\n    33,\n    2,\n    32,\n    3,\n    35,\n    36,\n    106,\n    32,\n    3,\n    35,\n    36,\n    106,\n    47,\n    1,\n    0,\n    65,\n    255,\n    63,\n    113,\n    59,\n    1,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    35,\n    36,\n    65,\n    18,\n    106,\n    35,\n    36,\n    65,\n    18,\n    106,\n    47,\n    1,\n    0,\n    65,\n    128,\n    64,\n    106,\n    59,\n    1,\n    0,\n    32,\n    2,\n    65,\n    1,\n    115,\n    65,\n    1,\n    107,\n    33,\n    2,\n    65,\n    0,\n    33,\n    1,\n    3,\n    64,\n    32,\n    1,\n    65,\n    10,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    1,\n    116,\n    34,\n    3,\n    35,\n    36,\n    106,\n    32,\n    2,\n    32,\n    3,\n    35,\n    36,\n    106,\n    47,\n    1,\n    0,\n    113,\n    59,\n    1,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    32,\n    2,\n    65,\n    127,\n    115,\n    33,\n    3,\n    65,\n    0,\n    33,\n    1,\n    3,\n    64,\n    32,\n    1,\n    65,\n    10,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    1,\n    116,\n    34,\n    2,\n    35,\n    29,\n    106,\n    32,\n    2,\n    35,\n    36,\n    106,\n    47,\n    1,\n    0,\n    32,\n    3,\n    32,\n    2,\n    35,\n    29,\n    106,\n    47,\n    1,\n    0,\n    113,\n    114,\n    59,\n    1,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    35,\n    29,\n    35,\n    29,\n    47,\n    1,\n    0,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    65,\n    13,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    2,\n    106,\n    35,\n    29,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    65,\n    10,\n    116,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    65,\n    3,\n    118,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    4,\n    106,\n    35,\n    29,\n    65,\n    6,\n    106,\n    47,\n    1,\n    0,\n    65,\n    7,\n    116,\n    35,\n    29,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    65,\n    6,\n    118,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    6,\n    106,\n    35,\n    29,\n    65,\n    8,\n    106,\n    47,\n    1,\n    0,\n    65,\n    4,\n    116,\n    35,\n    29,\n    65,\n    6,\n    106,\n    47,\n    1,\n    0,\n    65,\n    9,\n    118,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    8,\n    106,\n    35,\n    29,\n    65,\n    10,\n    106,\n    47,\n    1,\n    0,\n    65,\n    1,\n    116,\n    35,\n    29,\n    65,\n    8,\n    106,\n    47,\n    1,\n    0,\n    65,\n    12,\n    118,\n    114,\n    35,\n    29,\n    65,\n    12,\n    106,\n    47,\n    1,\n    0,\n    65,\n    14,\n    116,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    10,\n    106,\n    35,\n    29,\n    65,\n    14,\n    106,\n    47,\n    1,\n    0,\n    65,\n    11,\n    116,\n    35,\n    29,\n    65,\n    12,\n    106,\n    47,\n    1,\n    0,\n    65,\n    2,\n    118,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    12,\n    106,\n    35,\n    29,\n    65,\n    16,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    116,\n    35,\n    29,\n    65,\n    14,\n    106,\n    47,\n    1,\n    0,\n    65,\n    5,\n    118,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    65,\n    14,\n    106,\n    35,\n    29,\n    65,\n    18,\n    106,\n    47,\n    1,\n    0,\n    65,\n    5,\n    116,\n    35,\n    29,\n    65,\n    16,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    114,\n    59,\n    1,\n    0,\n    35,\n    29,\n    35,\n    29,\n    47,\n    1,\n    0,\n    35,\n    31,\n    47,\n    1,\n    0,\n    106,\n    34,\n    2,\n    59,\n    1,\n    0,\n    65,\n    1,\n    33,\n    1,\n    3,\n    64,\n    32,\n    1,\n    65,\n    8,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    1,\n    116,\n    34,\n    3,\n    35,\n    29,\n    106,\n    47,\n    1,\n    0,\n    32,\n    3,\n    35,\n    31,\n    106,\n    47,\n    1,\n    0,\n    106,\n    32,\n    2,\n    65,\n    16,\n    118,\n    106,\n    33,\n    2,\n    35,\n    29,\n    32,\n    3,\n    106,\n    32,\n    2,\n    59,\n    1,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    32,\n    0,\n    35,\n    29,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    1,\n    106,\n    35,\n    29,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    2,\n    106,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    3,\n    106,\n    35,\n    29,\n    65,\n    2,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    4,\n    106,\n    35,\n    29,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    5,\n    106,\n    35,\n    29,\n    65,\n    4,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    6,\n    106,\n    35,\n    29,\n    65,\n    6,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    7,\n    106,\n    35,\n    29,\n    65,\n    6,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    8,\n    106,\n    35,\n    29,\n    65,\n    8,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    9,\n    106,\n    35,\n    29,\n    65,\n    8,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    10,\n    106,\n    35,\n    29,\n    65,\n    10,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    11,\n    106,\n    35,\n    29,\n    65,\n    10,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    12,\n    106,\n    35,\n    29,\n    65,\n    12,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    13,\n    106,\n    35,\n    29,\n    65,\n    12,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    14,\n    106,\n    35,\n    29,\n    65,\n    14,\n    106,\n    47,\n    1,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    15,\n    106,\n    35,\n    29,\n    65,\n    14,\n    106,\n    47,\n    1,\n    0,\n    65,\n    8,\n    118,\n    58,\n    0,\n    0,\n    65,\n    1,\n    36,\n    34,\n    11,\n    11,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    1,\n    116,\n    16,\n    3,\n    11,\n    38,\n    0,\n    35,\n    25,\n    65,\n    16,\n    16,\n    13,\n    35,\n    27,\n    65,\n    10,\n    16,\n    22,\n    35,\n    29,\n    65,\n    10,\n    16,\n    22,\n    35,\n    31,\n    65,\n    8,\n    16,\n    22,\n    65,\n    0,\n    36,\n    32,\n    65,\n    0,\n    36,\n    33,\n    65,\n    0,\n    36,\n    34,\n    11,\n    33,\n    1,\n    1,\n    127,\n    35,\n    23,\n    33,\n    0,\n    35,\n    34,\n    4,\n    64,\n    65,\n    144,\n    2,\n    65,\n    208,\n    2,\n    65,\n    226,\n    3,\n    65,\n    4,\n    16,\n    0,\n    0,\n    11,\n    32,\n    0,\n    16,\n    21,\n    16,\n    23,\n    11,\n    39,\n    1,\n    1,\n    127,\n    3,\n    64,\n    32,\n    0,\n    65,\n    32,\n    73,\n    4,\n    64,\n    32,\n    0,\n    35,\n    7,\n    106,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    1,\n    106,\n    33,\n    0,\n    12,\n    1,\n    11,\n    11,\n    65,\n    32,\n    16,\n    15,\n    26,\n    11,\n    152,\n    2,\n    1,\n    1,\n    127,\n    3,\n    64,\n    32,\n    4,\n    65,\n    32,\n    72,\n    4,\n    64,\n    32,\n    4,\n    35,\n    9,\n    106,\n    32,\n    0,\n    32,\n    4,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    4,\n    65,\n    1,\n    106,\n    33,\n    4,\n    12,\n    1,\n    11,\n    11,\n    65,\n    0,\n    33,\n    4,\n    3,\n    64,\n    32,\n    4,\n    65,\n    4,\n    72,\n    4,\n    64,\n    32,\n    4,\n    35,\n    11,\n    106,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    4,\n    65,\n    1,\n    106,\n    33,\n    4,\n    12,\n    1,\n    11,\n    11,\n    65,\n    4,\n    33,\n    4,\n    3,\n    64,\n    32,\n    4,\n    65,\n    16,\n    72,\n    4,\n    64,\n    32,\n    4,\n    35,\n    11,\n    106,\n    32,\n    1,\n    32,\n    4,\n    65,\n    4,\n    107,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    4,\n    65,\n    1,\n    106,\n    33,\n    4,\n    12,\n    1,\n    11,\n    11,\n    16,\n    25,\n    65,\n    0,\n    33,\n    4,\n    3,\n    64,\n    32,\n    4,\n    65,\n    32,\n    72,\n    4,\n    64,\n    32,\n    4,\n    35,\n    21,\n    106,\n    32,\n    4,\n    35,\n    13,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    4,\n    65,\n    1,\n    106,\n    33,\n    4,\n    12,\n    1,\n    11,\n    11,\n    35,\n    21,\n    16,\n    16,\n    32,\n    3,\n    65,\n    0,\n    75,\n    4,\n    64,\n    65,\n    0,\n    33,\n    4,\n    3,\n    64,\n    32,\n    4,\n    32,\n    3,\n    73,\n    4,\n    64,\n    32,\n    4,\n    35,\n    22,\n    106,\n    32,\n    2,\n    32,\n    4,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    4,\n    65,\n    1,\n    106,\n    33,\n    4,\n    12,\n    1,\n    11,\n    11,\n    32,\n    3,\n    16,\n    20,\n    32,\n    3,\n    65,\n    15,\n    113,\n    65,\n    0,\n    75,\n    4,\n    64,\n    65,\n    16,\n    32,\n    3,\n    65,\n    15,\n    113,\n    107,\n    34,\n    1,\n    65,\n    0,\n    74,\n    4,\n    64,\n    65,\n    0,\n    33,\n    0,\n    3,\n    64,\n    32,\n    0,\n    32,\n    1,\n    72,\n    4,\n    64,\n    32,\n    0,\n    35,\n    22,\n    106,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    0,\n    65,\n    1,\n    106,\n    33,\n    0,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    16,\n    20,\n    11,\n    11,\n    11,\n    11,\n    65,\n    1,\n    1,\n    127,\n    3,\n    64,\n    32,\n    2,\n    32,\n    1,\n    73,\n    4,\n    64,\n    35,\n    22,\n    32,\n    2,\n    106,\n    32,\n    0,\n    32,\n    2,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    35,\n    7,\n    32,\n    2,\n    106,\n    32,\n    0,\n    32,\n    2,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    2,\n    65,\n    1,\n    106,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    16,\n    20,\n    32,\n    1,\n    16,\n    15,\n    26,\n    11,\n    27,\n    0,\n    32,\n    0,\n    32,\n    1,\n    65,\n    0,\n    16,\n    10,\n    32,\n    0,\n    173,\n    66,\n    128,\n    128,\n    128,\n    128,\n    16,\n    127,\n    167,\n    32,\n    1,\n    65,\n    4,\n    16,\n    10,\n    11,\n    87,\n    1,\n    2,\n    127,\n    32,\n    0,\n    65,\n    15,\n    113,\n    65,\n    0,\n    75,\n    4,\n    64,\n    65,\n    16,\n    32,\n    0,\n    65,\n    15,\n    113,\n    107,\n    34,\n    3,\n    65,\n    0,\n    74,\n    4,\n    64,\n    3,\n    64,\n    32,\n    2,\n    32,\n    3,\n    72,\n    4,\n    64,\n    32,\n    2,\n    35,\n    22,\n    106,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    2,\n    65,\n    1,\n    106,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    3,\n    16,\n    20,\n    11,\n    11,\n    32,\n    1,\n    35,\n    22,\n    16,\n    28,\n    65,\n    8,\n    16,\n    20,\n    32,\n    0,\n    35,\n    22,\n    16,\n    28,\n    65,\n    8,\n    16,\n    20,\n    16,\n    24,\n    11,\n    34,\n    0,\n    32,\n    0,\n    4,\n    64,\n    35,\n    38,\n    35,\n    40,\n    35,\n    42,\n    32,\n    4,\n    16,\n    26,\n    11,\n    35,\n    44,\n    32,\n    2,\n    16,\n    27,\n    32,\n    1,\n    4,\n    64,\n    32,\n    3,\n    32,\n    4,\n    16,\n    29,\n    11,\n    11,\n    89,\n    1,\n    1,\n    127,\n    3,\n    64,\n    32,\n    2,\n    32,\n    1,\n    73,\n    4,\n    64,\n    35,\n    7,\n    32,\n    2,\n    106,\n    32,\n    0,\n    32,\n    2,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    2,\n    65,\n    1,\n    106,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    16,\n    15,\n    26,\n    65,\n    0,\n    33,\n    2,\n    3,\n    64,\n    32,\n    2,\n    32,\n    1,\n    73,\n    4,\n    64,\n    35,\n    22,\n    32,\n    2,\n    106,\n    32,\n    2,\n    35,\n    13,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    2,\n    65,\n    1,\n    106,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    16,\n    20,\n    11,\n    34,\n    0,\n    32,\n    0,\n    4,\n    64,\n    35,\n    38,\n    35,\n    40,\n    35,\n    42,\n    32,\n    4,\n    16,\n    26,\n    11,\n    35,\n    44,\n    32,\n    2,\n    16,\n    31,\n    32,\n    1,\n    4,\n    64,\n    32,\n    3,\n    32,\n    4,\n    16,\n    29,\n    11,\n    11,\n    8,\n    0,\n    16,\n    5,\n    16,\n    8,\n    16,\n    9,\n    11,\n    11,\n    234,\n    2,\n    6,\n    0,\n    65,\n    16,\n    11,\n    43,\n    28,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    28,\n    0,\n    0,\n    0,\n    73,\n    0,\n    110,\n    0,\n    118,\n    0,\n    97,\n    0,\n    108,\n    0,\n    105,\n    0,\n    100,\n    0,\n    32,\n    0,\n    108,\n    0,\n    101,\n    0,\n    110,\n    0,\n    103,\n    0,\n    116,\n    0,\n    104,\n    0,\n    65,\n    192,\n    0,\n    11,\n    53,\n    38,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    38,\n    0,\n    0,\n    0,\n    126,\n    0,\n    108,\n    0,\n    105,\n    0,\n    98,\n    0,\n    47,\n    0,\n    97,\n    0,\n    114,\n    0,\n    114,\n    0,\n    97,\n    0,\n    121,\n    0,\n    98,\n    0,\n    117,\n    0,\n    102,\n    0,\n    102,\n    0,\n    101,\n    0,\n    114,\n    0,\n    46,\n    0,\n    116,\n    0,\n    115,\n    0,\n    65,\n    128,\n    1,\n    11,\n    63,\n    48,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    48,\n    0,\n    0,\n    0,\n    67,\n    0,\n    104,\n    0,\n    97,\n    0,\n    67,\n    0,\n    104,\n    0,\n    97,\n    0,\n    58,\n    0,\n    32,\n    0,\n    99,\n    0,\n    111,\n    0,\n    117,\n    0,\n    110,\n    0,\n    116,\n    0,\n    101,\n    0,\n    114,\n    0,\n    32,\n    0,\n    111,\n    0,\n    118,\n    0,\n    101,\n    0,\n    114,\n    0,\n    102,\n    0,\n    108,\n    0,\n    111,\n    0,\n    119,\n    0,\n    65,\n    192,\n    1,\n    11,\n    55,\n    40,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    40,\n    0,\n    0,\n    0,\n    97,\n    0,\n    115,\n    0,\n    115,\n    0,\n    101,\n    0,\n    109,\n    0,\n    98,\n    0,\n    108,\n    0,\n    121,\n    0,\n    47,\n    0,\n    99,\n    0,\n    104,\n    0,\n    97,\n    0,\n    99,\n    0,\n    104,\n    0,\n    97,\n    0,\n    50,\n    0,\n    48,\n    0,\n    46,\n    0,\n    116,\n    0,\n    115,\n    0,\n    65,\n    128,\n    2,\n    11,\n    57,\n    42,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    42,\n    0,\n    0,\n    0,\n    80,\n    0,\n    111,\n    0,\n    108,\n    0,\n    121,\n    0,\n    49,\n    0,\n    51,\n    0,\n    48,\n    0,\n    53,\n    0,\n    32,\n    0,\n    119,\n    0,\n    97,\n    0,\n    115,\n    0,\n    32,\n    0,\n    102,\n    0,\n    105,\n    0,\n    110,\n    0,\n    105,\n    0,\n    115,\n    0,\n    104,\n    0,\n    101,\n    0,\n    100,\n    0,\n    65,\n    192,\n    2,\n    11,\n    55,\n    40,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    40,\n    0,\n    0,\n    0,\n    97,\n    0,\n    115,\n    0,\n    115,\n    0,\n    101,\n    0,\n    109,\n    0,\n    98,\n    0,\n    108,\n    0,\n    121,\n    0,\n    47,\n    0,\n    112,\n    0,\n    111,\n    0,\n    108,\n    0,\n    121,\n    0,\n    49,\n    0,\n    51,\n    0,\n    48,\n    0,\n    53,\n    0,\n    46,\n    0,\n    116,\n    0,\n    115\n]); //# sourceMappingURL=wasmCode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/wasmCode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-sha256/lib/hashObject.js":
/*!*************************************************************!*\
  !*** ./node_modules/@chainsafe/as-sha256/lib/hashObject.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.byteArrayToHashObject = exports.hashObjectToByteArray = void 0;\n/**\n * Pass 8 numbers in an object and set that to inputArray.\n * This function contains multiple same procedures but we intentionally\n * do it step by step to improve performance a bit.\n **/ function hashObjectToByteArray(obj, byteArr, offset) {\n    let tmp = obj.h0;\n    byteArr[0 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[1 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[2 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[3 + offset] = tmp & 0xff;\n    tmp = obj.h1;\n    byteArr[4 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[5 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[6 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[7 + offset] = tmp & 0xff;\n    tmp = obj.h2;\n    byteArr[8 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[9 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[10 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[11 + offset] = tmp & 0xff;\n    tmp = obj.h3;\n    byteArr[12 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[13 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[14 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[15 + offset] = tmp & 0xff;\n    tmp = obj.h4;\n    byteArr[16 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[17 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[18 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[19 + offset] = tmp & 0xff;\n    tmp = obj.h5;\n    byteArr[20 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[21 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[22 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[23 + offset] = tmp & 0xff;\n    tmp = obj.h6;\n    byteArr[24 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[25 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[26 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[27 + offset] = tmp & 0xff;\n    tmp = obj.h7;\n    byteArr[28 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[29 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[30 + offset] = tmp & 0xff;\n    tmp = tmp >> 8;\n    byteArr[31 + offset] = tmp & 0xff;\n}\nexports.hashObjectToByteArray = hashObjectToByteArray;\n/**\n * Parse outputArray into an object of 8 numbers.\n * This is the order that makes Uint32Array the same to Uint8Array\n * This function contains multiple same procedures but we intentionally\n * do it step by step to improve performance a bit.\n **/ function byteArrayToHashObject(byteArr) {\n    let tmp = 0;\n    tmp |= byteArr[3] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[2] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[1] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[0] & 0xff;\n    const h0 = tmp;\n    tmp = 0;\n    tmp |= byteArr[7] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[6] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[5] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[4] & 0xff;\n    const h1 = tmp;\n    tmp = 0;\n    tmp |= byteArr[11] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[10] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[9] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[8] & 0xff;\n    const h2 = tmp;\n    tmp = 0;\n    tmp |= byteArr[15] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[14] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[13] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[12] & 0xff;\n    const h3 = tmp;\n    tmp = 0;\n    tmp |= byteArr[19] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[18] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[17] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[16] & 0xff;\n    const h4 = tmp;\n    tmp = 0;\n    tmp |= byteArr[23] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[22] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[21] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[20] & 0xff;\n    const h5 = tmp;\n    tmp = 0;\n    tmp |= byteArr[27] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[26] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[25] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[24] & 0xff;\n    const h6 = tmp;\n    tmp = 0;\n    tmp |= byteArr[31] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[30] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[29] & 0xff;\n    tmp = tmp << 8;\n    tmp |= byteArr[28] & 0xff;\n    const h7 = tmp;\n    return {\n        h0,\n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6,\n        h7\n    };\n}\nexports.byteArrayToHashObject = byteArrayToHashObject; //# sourceMappingURL=hashObject.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-sha256/lib/hashObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-sha256/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@chainsafe/as-sha256/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.digest64HashObjects = exports.digest2Bytes32 = exports.digest64 = exports.digest = exports.SHA256 = exports.hashObjectToByteArray = exports.byteArrayToHashObject = void 0;\nconst wasm_1 = __webpack_require__(/*! ./wasm */ \"(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasm.js\");\nconst hashObject_1 = __webpack_require__(/*! ./hashObject */ \"(ssr)/./node_modules/@chainsafe/as-sha256/lib/hashObject.js\");\nObject.defineProperty(exports, \"byteArrayToHashObject\", ({\n    enumerable: true,\n    get: function() {\n        return hashObject_1.byteArrayToHashObject;\n    }\n}));\nObject.defineProperty(exports, \"hashObjectToByteArray\", ({\n    enumerable: true,\n    get: function() {\n        return hashObject_1.hashObjectToByteArray;\n    }\n}));\nconst sha256_1 = __importDefault(__webpack_require__(/*! ./sha256 */ \"(ssr)/./node_modules/@chainsafe/as-sha256/lib/sha256.js\"));\nexports.SHA256 = sha256_1.default;\nconst ctx = wasm_1.newInstance();\nconst wasmInputValue = ctx.input.value;\nconst wasmOutputValue = ctx.output.value;\nconst inputUint8Array = new Uint8Array(ctx.memory.buffer, wasmInputValue, ctx.INPUT_LENGTH);\nconst outputUint8Array = new Uint8Array(ctx.memory.buffer, wasmOutputValue, 32);\nconst inputUint32Array = new Uint32Array(ctx.memory.buffer, wasmInputValue, ctx.INPUT_LENGTH);\nfunction digest(data) {\n    if (data.length === 64) {\n        return digest64(data);\n    }\n    if (data.length <= ctx.INPUT_LENGTH) {\n        inputUint8Array.set(data);\n        ctx.digest(data.length);\n        const output = new Uint8Array(32);\n        output.set(outputUint8Array);\n        return output;\n    }\n    ctx.init();\n    update(data);\n    return final();\n}\nexports.digest = digest;\nfunction digest64(data) {\n    if (data.length === 64) {\n        inputUint8Array.set(data);\n        ctx.digest64(wasmInputValue, wasmOutputValue);\n        const output = new Uint8Array(32);\n        output.set(outputUint8Array);\n        return output;\n    }\n    throw new Error(\"InvalidLengthForDigest64\");\n}\nexports.digest64 = digest64;\nfunction digest2Bytes32(bytes1, bytes2) {\n    if (bytes1.length === 32 && bytes2.length === 32) {\n        inputUint8Array.set(bytes1);\n        inputUint8Array.set(bytes2, 32);\n        ctx.digest64(wasmInputValue, wasmOutputValue);\n        const output = new Uint8Array(32);\n        output.set(outputUint8Array);\n        return output;\n    }\n    throw new Error(\"InvalidLengthForDigest64\");\n}\nexports.digest2Bytes32 = digest2Bytes32;\n/**\n * Digest 2 objects, each has 8 properties from h0 to h7.\n * The performance is a little bit better than digest64 due to the use of Uint32Array\n * and the memory is a little bit better than digest64 due to no temporary Uint8Array.\n * @returns\n */ function digest64HashObjects(obj1, obj2) {\n    // TODO: expect obj1 and obj2 as HashObject\n    inputUint32Array[0] = obj1.h0;\n    inputUint32Array[1] = obj1.h1;\n    inputUint32Array[2] = obj1.h2;\n    inputUint32Array[3] = obj1.h3;\n    inputUint32Array[4] = obj1.h4;\n    inputUint32Array[5] = obj1.h5;\n    inputUint32Array[6] = obj1.h6;\n    inputUint32Array[7] = obj1.h7;\n    inputUint32Array[8] = obj2.h0;\n    inputUint32Array[9] = obj2.h1;\n    inputUint32Array[10] = obj2.h2;\n    inputUint32Array[11] = obj2.h3;\n    inputUint32Array[12] = obj2.h4;\n    inputUint32Array[13] = obj2.h5;\n    inputUint32Array[14] = obj2.h6;\n    inputUint32Array[15] = obj2.h7;\n    ctx.digest64(wasmInputValue, wasmOutputValue);\n    // extracting numbers from Uint32Array causes more memory\n    return hashObject_1.byteArrayToHashObject(outputUint8Array);\n}\nexports.digest64HashObjects = digest64HashObjects;\nfunction update(data) {\n    const INPUT_LENGTH = ctx.INPUT_LENGTH;\n    if (data.length > INPUT_LENGTH) {\n        for(let i = 0; i < data.length; i += INPUT_LENGTH){\n            const sliced = data.slice(i, i + INPUT_LENGTH);\n            inputUint8Array.set(sliced);\n            ctx.update(wasmInputValue, sliced.length);\n        }\n    } else {\n        inputUint8Array.set(data);\n        ctx.update(wasmInputValue, data.length);\n    }\n}\nfunction final() {\n    ctx.final(wasmOutputValue);\n    const output = new Uint8Array(32);\n    output.set(outputUint8Array);\n    return output;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1zaGEyNTYvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwyQkFBMkIsR0FBR0Esc0JBQXNCLEdBQUdBLGdCQUFnQixHQUFHQSxjQUFjLEdBQUdBLGNBQWMsR0FBR0EsNkJBQTZCLEdBQUdBLDZCQUE2QixHQUFHLEtBQUs7QUFDakwsTUFBTVMsU0FBU0MsbUJBQU9BLENBQUMscUVBQVE7QUFDL0IsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMsaUZBQWM7QUFDM0NaLHlEQUF3RDtJQUFFYyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixhQUFhSCxxQkFBcUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5SVYseURBQXdEO0lBQUVjLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGFBQWFKLHFCQUFxQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlJLE1BQU1PLFdBQVduQixnQkFBZ0JlLG1CQUFPQSxDQUFDLHlFQUFVO0FBQ25EVixjQUFjLEdBQUdjLFNBQVNDLE9BQU87QUFDakMsTUFBTUMsTUFBTVAsT0FBT1EsV0FBVztBQUM5QixNQUFNQyxpQkFBaUJGLElBQUlHLEtBQUssQ0FBQ2xCLEtBQUs7QUFDdEMsTUFBTW1CLGtCQUFrQkosSUFBSUssTUFBTSxDQUFDcEIsS0FBSztBQUN4QyxNQUFNcUIsa0JBQWtCLElBQUlDLFdBQVdQLElBQUlRLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFUCxnQkFBZ0JGLElBQUlVLFlBQVk7QUFDMUYsTUFBTUMsbUJBQW1CLElBQUlKLFdBQVdQLElBQUlRLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFTCxpQkFBaUI7QUFDNUUsTUFBTVEsbUJBQW1CLElBQUlDLFlBQVliLElBQUlRLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFUCxnQkFBZ0JGLElBQUlVLFlBQVk7QUFDNUYsU0FBU3JCLE9BQU95QixJQUFJO0lBQ2hCLElBQUlBLEtBQUtDLE1BQU0sS0FBSyxJQUFJO1FBQ3BCLE9BQU8zQixTQUFTMEI7SUFDcEI7SUFDQSxJQUFJQSxLQUFLQyxNQUFNLElBQUlmLElBQUlVLFlBQVksRUFBRTtRQUNqQ0osZ0JBQWdCVSxHQUFHLENBQUNGO1FBQ3BCZCxJQUFJWCxNQUFNLENBQUN5QixLQUFLQyxNQUFNO1FBQ3RCLE1BQU1WLFNBQVMsSUFBSUUsV0FBVztRQUM5QkYsT0FBT1csR0FBRyxDQUFDTDtRQUNYLE9BQU9OO0lBQ1g7SUFDQUwsSUFBSWlCLElBQUk7SUFDUkMsT0FBT0o7SUFDUCxPQUFPSztBQUNYO0FBQ0FuQyxjQUFjLEdBQUdLO0FBQ2pCLFNBQVNELFNBQVMwQixJQUFJO0lBQ2xCLElBQUlBLEtBQUtDLE1BQU0sS0FBSyxJQUFJO1FBQ3BCVCxnQkFBZ0JVLEdBQUcsQ0FBQ0Y7UUFDcEJkLElBQUlaLFFBQVEsQ0FBQ2MsZ0JBQWdCRTtRQUM3QixNQUFNQyxTQUFTLElBQUlFLFdBQVc7UUFDOUJGLE9BQU9XLEdBQUcsQ0FBQ0w7UUFDWCxPQUFPTjtJQUNYO0lBQ0EsTUFBTSxJQUFJZSxNQUFNO0FBQ3BCO0FBQ0FwQyxnQkFBZ0IsR0FBR0k7QUFDbkIsU0FBU0QsZUFBZWtDLE1BQU0sRUFBRUMsTUFBTTtJQUNsQyxJQUFJRCxPQUFPTixNQUFNLEtBQUssTUFBTU8sT0FBT1AsTUFBTSxLQUFLLElBQUk7UUFDOUNULGdCQUFnQlUsR0FBRyxDQUFDSztRQUNwQmYsZ0JBQWdCVSxHQUFHLENBQUNNLFFBQVE7UUFDNUJ0QixJQUFJWixRQUFRLENBQUNjLGdCQUFnQkU7UUFDN0IsTUFBTUMsU0FBUyxJQUFJRSxXQUFXO1FBQzlCRixPQUFPVyxHQUFHLENBQUNMO1FBQ1gsT0FBT047SUFDWDtJQUNBLE1BQU0sSUFBSWUsTUFBTTtBQUNwQjtBQUNBcEMsc0JBQXNCLEdBQUdHO0FBQ3pCOzs7OztDQUtDLEdBQ0QsU0FBU0Qsb0JBQW9CcUMsSUFBSSxFQUFFQyxJQUFJO0lBQ25DLDJDQUEyQztJQUMzQ1osZ0JBQWdCLENBQUMsRUFBRSxHQUFHVyxLQUFLRSxFQUFFO0lBQzdCYixnQkFBZ0IsQ0FBQyxFQUFFLEdBQUdXLEtBQUtHLEVBQUU7SUFDN0JkLGdCQUFnQixDQUFDLEVBQUUsR0FBR1csS0FBS0ksRUFBRTtJQUM3QmYsZ0JBQWdCLENBQUMsRUFBRSxHQUFHVyxLQUFLSyxFQUFFO0lBQzdCaEIsZ0JBQWdCLENBQUMsRUFBRSxHQUFHVyxLQUFLTSxFQUFFO0lBQzdCakIsZ0JBQWdCLENBQUMsRUFBRSxHQUFHVyxLQUFLTyxFQUFFO0lBQzdCbEIsZ0JBQWdCLENBQUMsRUFBRSxHQUFHVyxLQUFLUSxFQUFFO0lBQzdCbkIsZ0JBQWdCLENBQUMsRUFBRSxHQUFHVyxLQUFLUyxFQUFFO0lBQzdCcEIsZ0JBQWdCLENBQUMsRUFBRSxHQUFHWSxLQUFLQyxFQUFFO0lBQzdCYixnQkFBZ0IsQ0FBQyxFQUFFLEdBQUdZLEtBQUtFLEVBQUU7SUFDN0JkLGdCQUFnQixDQUFDLEdBQUcsR0FBR1ksS0FBS0csRUFBRTtJQUM5QmYsZ0JBQWdCLENBQUMsR0FBRyxHQUFHWSxLQUFLSSxFQUFFO0lBQzlCaEIsZ0JBQWdCLENBQUMsR0FBRyxHQUFHWSxLQUFLSyxFQUFFO0lBQzlCakIsZ0JBQWdCLENBQUMsR0FBRyxHQUFHWSxLQUFLTSxFQUFFO0lBQzlCbEIsZ0JBQWdCLENBQUMsR0FBRyxHQUFHWSxLQUFLTyxFQUFFO0lBQzlCbkIsZ0JBQWdCLENBQUMsR0FBRyxHQUFHWSxLQUFLUSxFQUFFO0lBQzlCaEMsSUFBSVosUUFBUSxDQUFDYyxnQkFBZ0JFO0lBQzdCLHlEQUF5RDtJQUN6RCxPQUFPVCxhQUFhSCxxQkFBcUIsQ0FBQ21CO0FBQzlDO0FBQ0EzQiwyQkFBMkIsR0FBR0U7QUFDOUIsU0FBU2dDLE9BQU9KLElBQUk7SUFDaEIsTUFBTUosZUFBZVYsSUFBSVUsWUFBWTtJQUNyQyxJQUFJSSxLQUFLQyxNQUFNLEdBQUdMLGNBQWM7UUFDNUIsSUFBSyxJQUFJdUIsSUFBSSxHQUFHQSxJQUFJbkIsS0FBS0MsTUFBTSxFQUFFa0IsS0FBS3ZCLGFBQWM7WUFDaEQsTUFBTXdCLFNBQVNwQixLQUFLcUIsS0FBSyxDQUFDRixHQUFHQSxJQUFJdkI7WUFDakNKLGdCQUFnQlUsR0FBRyxDQUFDa0I7WUFDcEJsQyxJQUFJa0IsTUFBTSxDQUFDaEIsZ0JBQWdCZ0MsT0FBT25CLE1BQU07UUFDNUM7SUFDSixPQUNLO1FBQ0RULGdCQUFnQlUsR0FBRyxDQUFDRjtRQUNwQmQsSUFBSWtCLE1BQU0sQ0FBQ2hCLGdCQUFnQlksS0FBS0MsTUFBTTtJQUMxQztBQUNKO0FBQ0EsU0FBU0k7SUFDTG5CLElBQUltQixLQUFLLENBQUNmO0lBQ1YsTUFBTUMsU0FBUyxJQUFJRSxXQUFXO0lBQzlCRixPQUFPVyxHQUFHLENBQUNMO0lBQ1gsT0FBT047QUFDWCxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvYXMtc2hhMjU2L2xpYi9pbmRleC5qcz9jZjEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaWdlc3Q2NEhhc2hPYmplY3RzID0gZXhwb3J0cy5kaWdlc3QyQnl0ZXMzMiA9IGV4cG9ydHMuZGlnZXN0NjQgPSBleHBvcnRzLmRpZ2VzdCA9IGV4cG9ydHMuU0hBMjU2ID0gZXhwb3J0cy5oYXNoT2JqZWN0VG9CeXRlQXJyYXkgPSBleHBvcnRzLmJ5dGVBcnJheVRvSGFzaE9iamVjdCA9IHZvaWQgMDtcbmNvbnN0IHdhc21fMSA9IHJlcXVpcmUoXCIuL3dhc21cIik7XG5jb25zdCBoYXNoT2JqZWN0XzEgPSByZXF1aXJlKFwiLi9oYXNoT2JqZWN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnl0ZUFycmF5VG9IYXNoT2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoYXNoT2JqZWN0XzEuYnl0ZUFycmF5VG9IYXNoT2JqZWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaGFzaE9iamVjdFRvQnl0ZUFycmF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBoYXNoT2JqZWN0XzEuaGFzaE9iamVjdFRvQnl0ZUFycmF5OyB9IH0pO1xuY29uc3Qgc2hhMjU2XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2hhMjU2XCIpKTtcbmV4cG9ydHMuU0hBMjU2ID0gc2hhMjU2XzEuZGVmYXVsdDtcbmNvbnN0IGN0eCA9IHdhc21fMS5uZXdJbnN0YW5jZSgpO1xuY29uc3Qgd2FzbUlucHV0VmFsdWUgPSBjdHguaW5wdXQudmFsdWU7XG5jb25zdCB3YXNtT3V0cHV0VmFsdWUgPSBjdHgub3V0cHV0LnZhbHVlO1xuY29uc3QgaW5wdXRVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoY3R4Lm1lbW9yeS5idWZmZXIsIHdhc21JbnB1dFZhbHVlLCBjdHguSU5QVVRfTEVOR1RIKTtcbmNvbnN0IG91dHB1dFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShjdHgubWVtb3J5LmJ1ZmZlciwgd2FzbU91dHB1dFZhbHVlLCAzMik7XG5jb25zdCBpbnB1dFVpbnQzMkFycmF5ID0gbmV3IFVpbnQzMkFycmF5KGN0eC5tZW1vcnkuYnVmZmVyLCB3YXNtSW5wdXRWYWx1ZSwgY3R4LklOUFVUX0xFTkdUSCk7XG5mdW5jdGlvbiBkaWdlc3QoZGF0YSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgcmV0dXJuIGRpZ2VzdDY0KGRhdGEpO1xuICAgIH1cbiAgICBpZiAoZGF0YS5sZW5ndGggPD0gY3R4LklOUFVUX0xFTkdUSCkge1xuICAgICAgICBpbnB1dFVpbnQ4QXJyYXkuc2V0KGRhdGEpO1xuICAgICAgICBjdHguZGlnZXN0KGRhdGEubGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgICAgICBvdXRwdXQuc2V0KG91dHB1dFVpbnQ4QXJyYXkpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbiAgICBjdHguaW5pdCgpO1xuICAgIHVwZGF0ZShkYXRhKTtcbiAgICByZXR1cm4gZmluYWwoKTtcbn1cbmV4cG9ydHMuZGlnZXN0ID0gZGlnZXN0O1xuZnVuY3Rpb24gZGlnZXN0NjQoZGF0YSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgaW5wdXRVaW50OEFycmF5LnNldChkYXRhKTtcbiAgICAgICAgY3R4LmRpZ2VzdDY0KHdhc21JbnB1dFZhbHVlLCB3YXNtT3V0cHV0VmFsdWUpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIG91dHB1dC5zZXQob3V0cHV0VWludDhBcnJheSk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWRMZW5ndGhGb3JEaWdlc3Q2NFwiKTtcbn1cbmV4cG9ydHMuZGlnZXN0NjQgPSBkaWdlc3Q2NDtcbmZ1bmN0aW9uIGRpZ2VzdDJCeXRlczMyKGJ5dGVzMSwgYnl0ZXMyKSB7XG4gICAgaWYgKGJ5dGVzMS5sZW5ndGggPT09IDMyICYmIGJ5dGVzMi5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIGlucHV0VWludDhBcnJheS5zZXQoYnl0ZXMxKTtcbiAgICAgICAgaW5wdXRVaW50OEFycmF5LnNldChieXRlczIsIDMyKTtcbiAgICAgICAgY3R4LmRpZ2VzdDY0KHdhc21JbnB1dFZhbHVlLCB3YXNtT3V0cHV0VmFsdWUpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIG91dHB1dC5zZXQob3V0cHV0VWludDhBcnJheSk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWRMZW5ndGhGb3JEaWdlc3Q2NFwiKTtcbn1cbmV4cG9ydHMuZGlnZXN0MkJ5dGVzMzIgPSBkaWdlc3QyQnl0ZXMzMjtcbi8qKlxuICogRGlnZXN0IDIgb2JqZWN0cywgZWFjaCBoYXMgOCBwcm9wZXJ0aWVzIGZyb20gaDAgdG8gaDcuXG4gKiBUaGUgcGVyZm9ybWFuY2UgaXMgYSBsaXR0bGUgYml0IGJldHRlciB0aGFuIGRpZ2VzdDY0IGR1ZSB0byB0aGUgdXNlIG9mIFVpbnQzMkFycmF5XG4gKiBhbmQgdGhlIG1lbW9yeSBpcyBhIGxpdHRsZSBiaXQgYmV0dGVyIHRoYW4gZGlnZXN0NjQgZHVlIHRvIG5vIHRlbXBvcmFyeSBVaW50OEFycmF5LlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gZGlnZXN0NjRIYXNoT2JqZWN0cyhvYmoxLCBvYmoyKSB7XG4gICAgLy8gVE9ETzogZXhwZWN0IG9iajEgYW5kIG9iajIgYXMgSGFzaE9iamVjdFxuICAgIGlucHV0VWludDMyQXJyYXlbMF0gPSBvYmoxLmgwO1xuICAgIGlucHV0VWludDMyQXJyYXlbMV0gPSBvYmoxLmgxO1xuICAgIGlucHV0VWludDMyQXJyYXlbMl0gPSBvYmoxLmgyO1xuICAgIGlucHV0VWludDMyQXJyYXlbM10gPSBvYmoxLmgzO1xuICAgIGlucHV0VWludDMyQXJyYXlbNF0gPSBvYmoxLmg0O1xuICAgIGlucHV0VWludDMyQXJyYXlbNV0gPSBvYmoxLmg1O1xuICAgIGlucHV0VWludDMyQXJyYXlbNl0gPSBvYmoxLmg2O1xuICAgIGlucHV0VWludDMyQXJyYXlbN10gPSBvYmoxLmg3O1xuICAgIGlucHV0VWludDMyQXJyYXlbOF0gPSBvYmoyLmgwO1xuICAgIGlucHV0VWludDMyQXJyYXlbOV0gPSBvYmoyLmgxO1xuICAgIGlucHV0VWludDMyQXJyYXlbMTBdID0gb2JqMi5oMjtcbiAgICBpbnB1dFVpbnQzMkFycmF5WzExXSA9IG9iajIuaDM7XG4gICAgaW5wdXRVaW50MzJBcnJheVsxMl0gPSBvYmoyLmg0O1xuICAgIGlucHV0VWludDMyQXJyYXlbMTNdID0gb2JqMi5oNTtcbiAgICBpbnB1dFVpbnQzMkFycmF5WzE0XSA9IG9iajIuaDY7XG4gICAgaW5wdXRVaW50MzJBcnJheVsxNV0gPSBvYmoyLmg3O1xuICAgIGN0eC5kaWdlc3Q2NCh3YXNtSW5wdXRWYWx1ZSwgd2FzbU91dHB1dFZhbHVlKTtcbiAgICAvLyBleHRyYWN0aW5nIG51bWJlcnMgZnJvbSBVaW50MzJBcnJheSBjYXVzZXMgbW9yZSBtZW1vcnlcbiAgICByZXR1cm4gaGFzaE9iamVjdF8xLmJ5dGVBcnJheVRvSGFzaE9iamVjdChvdXRwdXRVaW50OEFycmF5KTtcbn1cbmV4cG9ydHMuZGlnZXN0NjRIYXNoT2JqZWN0cyA9IGRpZ2VzdDY0SGFzaE9iamVjdHM7XG5mdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICAgIGNvbnN0IElOUFVUX0xFTkdUSCA9IGN0eC5JTlBVVF9MRU5HVEg7XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gSU5QVVRfTEVOR1RIKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gSU5QVVRfTEVOR1RIKSB7XG4gICAgICAgICAgICBjb25zdCBzbGljZWQgPSBkYXRhLnNsaWNlKGksIGkgKyBJTlBVVF9MRU5HVEgpO1xuICAgICAgICAgICAgaW5wdXRVaW50OEFycmF5LnNldChzbGljZWQpO1xuICAgICAgICAgICAgY3R4LnVwZGF0ZSh3YXNtSW5wdXRWYWx1ZSwgc2xpY2VkLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlucHV0VWludDhBcnJheS5zZXQoZGF0YSk7XG4gICAgICAgIGN0eC51cGRhdGUod2FzbUlucHV0VmFsdWUsIGRhdGEubGVuZ3RoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBmaW5hbCgpIHtcbiAgICBjdHguZmluYWwod2FzbU91dHB1dFZhbHVlKTtcbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgb3V0cHV0LnNldChvdXRwdXRVaW50OEFycmF5KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRpZ2VzdDY0SGFzaE9iamVjdHMiLCJkaWdlc3QyQnl0ZXMzMiIsImRpZ2VzdDY0IiwiZGlnZXN0IiwiU0hBMjU2IiwiaGFzaE9iamVjdFRvQnl0ZUFycmF5IiwiYnl0ZUFycmF5VG9IYXNoT2JqZWN0Iiwid2FzbV8xIiwicmVxdWlyZSIsImhhc2hPYmplY3RfMSIsImVudW1lcmFibGUiLCJnZXQiLCJzaGEyNTZfMSIsImRlZmF1bHQiLCJjdHgiLCJuZXdJbnN0YW5jZSIsIndhc21JbnB1dFZhbHVlIiwiaW5wdXQiLCJ3YXNtT3V0cHV0VmFsdWUiLCJvdXRwdXQiLCJpbnB1dFVpbnQ4QXJyYXkiLCJVaW50OEFycmF5IiwibWVtb3J5IiwiYnVmZmVyIiwiSU5QVVRfTEVOR1RIIiwib3V0cHV0VWludDhBcnJheSIsImlucHV0VWludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsImRhdGEiLCJsZW5ndGgiLCJzZXQiLCJpbml0IiwidXBkYXRlIiwiZmluYWwiLCJFcnJvciIsImJ5dGVzMSIsImJ5dGVzMiIsIm9iajEiLCJvYmoyIiwiaDAiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoNyIsImkiLCJzbGljZWQiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-sha256/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-sha256/lib/sha256.js":
/*!*********************************************************!*\
  !*** ./node_modules/@chainsafe/as-sha256/lib/sha256.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst wasm_1 = __webpack_require__(/*! ./wasm */ \"(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasm.js\");\n/**\n * Class based SHA256\n */ class SHA256 {\n    constructor(){\n        this.ctx = wasm_1.newInstance();\n        this.wasmInputValue = this.ctx.input.value;\n        this.wasmOutputValue = this.ctx.output.value;\n        this.uint8InputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmInputValue, this.ctx.INPUT_LENGTH);\n        this.uint8OutputArray = new Uint8Array(this.ctx.memory.buffer, this.wasmOutputValue, 32);\n    }\n    init() {\n        this.ctx.init();\n        return this;\n    }\n    update(data) {\n        const INPUT_LENGTH = this.ctx.INPUT_LENGTH;\n        if (data.length > INPUT_LENGTH) {\n            for(let i = 0; i < data.length; i += INPUT_LENGTH){\n                const sliced = data.slice(i, i + INPUT_LENGTH);\n                this.uint8InputArray.set(sliced);\n                this.ctx.update(this.wasmInputValue, sliced.length);\n            }\n        } else {\n            this.uint8InputArray.set(data);\n            this.ctx.update(this.wasmInputValue, data.length);\n        }\n        return this;\n    }\n    final() {\n        this.ctx.final(this.wasmOutputValue);\n        const output = new Uint8Array(32);\n        output.set(this.uint8OutputArray);\n        return output;\n    }\n}\nexports[\"default\"] = SHA256; //# sourceMappingURL=sha256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1zaGEyNTYvbGliL3NoYTI1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQyxxRUFBUTtBQUMvQjs7Q0FFQyxHQUNELE1BQU1DO0lBQ0ZDLGFBQWM7UUFDVixJQUFJLENBQUNDLEdBQUcsR0FBR0osT0FBT0ssV0FBVztRQUM3QixJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJLENBQUNGLEdBQUcsQ0FBQ0csS0FBSyxDQUFDUixLQUFLO1FBQzFDLElBQUksQ0FBQ1MsZUFBZSxHQUFHLElBQUksQ0FBQ0osR0FBRyxDQUFDSyxNQUFNLENBQUNWLEtBQUs7UUFDNUMsSUFBSSxDQUFDVyxlQUFlLEdBQUcsSUFBSUMsV0FBVyxJQUFJLENBQUNQLEdBQUcsQ0FBQ1EsTUFBTSxDQUFDQyxNQUFNLEVBQUUsSUFBSSxDQUFDUCxjQUFjLEVBQUUsSUFBSSxDQUFDRixHQUFHLENBQUNVLFlBQVk7UUFDeEcsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJSixXQUFXLElBQUksQ0FBQ1AsR0FBRyxDQUFDUSxNQUFNLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUNMLGVBQWUsRUFBRTtJQUN6RjtJQUNBUSxPQUFPO1FBQ0gsSUFBSSxDQUFDWixHQUFHLENBQUNZLElBQUk7UUFDYixPQUFPLElBQUk7SUFDZjtJQUNBQyxPQUFPQyxJQUFJLEVBQUU7UUFDVCxNQUFNSixlQUFlLElBQUksQ0FBQ1YsR0FBRyxDQUFDVSxZQUFZO1FBQzFDLElBQUlJLEtBQUtDLE1BQU0sR0FBR0wsY0FBYztZQUM1QixJQUFLLElBQUlNLElBQUksR0FBR0EsSUFBSUYsS0FBS0MsTUFBTSxFQUFFQyxLQUFLTixhQUFjO2dCQUNoRCxNQUFNTyxTQUFTSCxLQUFLSSxLQUFLLENBQUNGLEdBQUdBLElBQUlOO2dCQUNqQyxJQUFJLENBQUNKLGVBQWUsQ0FBQ2EsR0FBRyxDQUFDRjtnQkFDekIsSUFBSSxDQUFDakIsR0FBRyxDQUFDYSxNQUFNLENBQUMsSUFBSSxDQUFDWCxjQUFjLEVBQUVlLE9BQU9GLE1BQU07WUFDdEQ7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFDVCxlQUFlLENBQUNhLEdBQUcsQ0FBQ0w7WUFDekIsSUFBSSxDQUFDZCxHQUFHLENBQUNhLE1BQU0sQ0FBQyxJQUFJLENBQUNYLGNBQWMsRUFBRVksS0FBS0MsTUFBTTtRQUNwRDtRQUNBLE9BQU8sSUFBSTtJQUNmO0lBQ0FLLFFBQVE7UUFDSixJQUFJLENBQUNwQixHQUFHLENBQUNvQixLQUFLLENBQUMsSUFBSSxDQUFDaEIsZUFBZTtRQUNuQyxNQUFNQyxTQUFTLElBQUlFLFdBQVc7UUFDOUJGLE9BQU9jLEdBQUcsQ0FBQyxJQUFJLENBQUNSLGdCQUFnQjtRQUNoQyxPQUFPTjtJQUNYO0FBQ0o7QUFDQVgsa0JBQWUsR0FBR0ksUUFDbEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1zaGEyNTYvbGliL3NoYTI1Ni5qcz8yMzVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgd2FzbV8xID0gcmVxdWlyZShcIi4vd2FzbVwiKTtcbi8qKlxuICogQ2xhc3MgYmFzZWQgU0hBMjU2XG4gKi9cbmNsYXNzIFNIQTI1NiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY3R4ID0gd2FzbV8xLm5ld0luc3RhbmNlKCk7XG4gICAgICAgIHRoaXMud2FzbUlucHV0VmFsdWUgPSB0aGlzLmN0eC5pbnB1dC52YWx1ZTtcbiAgICAgICAgdGhpcy53YXNtT3V0cHV0VmFsdWUgPSB0aGlzLmN0eC5vdXRwdXQudmFsdWU7XG4gICAgICAgIHRoaXMudWludDhJbnB1dEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5jdHgubWVtb3J5LmJ1ZmZlciwgdGhpcy53YXNtSW5wdXRWYWx1ZSwgdGhpcy5jdHguSU5QVVRfTEVOR1RIKTtcbiAgICAgICAgdGhpcy51aW50OE91dHB1dEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5jdHgubWVtb3J5LmJ1ZmZlciwgdGhpcy53YXNtT3V0cHV0VmFsdWUsIDMyKTtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5jdHguaW5pdCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgY29uc3QgSU5QVVRfTEVOR1RIID0gdGhpcy5jdHguSU5QVVRfTEVOR1RIO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBJTlBVVF9MRU5HVEgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gSU5QVVRfTEVOR1RIKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xpY2VkID0gZGF0YS5zbGljZShpLCBpICsgSU5QVVRfTEVOR1RIKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVpbnQ4SW5wdXRBcnJheS5zZXQoc2xpY2VkKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC51cGRhdGUodGhpcy53YXNtSW5wdXRWYWx1ZSwgc2xpY2VkLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVpbnQ4SW5wdXRBcnJheS5zZXQoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmN0eC51cGRhdGUodGhpcy53YXNtSW5wdXRWYWx1ZSwgZGF0YS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmaW5hbCgpIHtcbiAgICAgICAgdGhpcy5jdHguZmluYWwodGhpcy53YXNtT3V0cHV0VmFsdWUpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICAgIG91dHB1dC5zZXQodGhpcy51aW50OE91dHB1dEFycmF5KTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTSEEyNTY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid2FzbV8xIiwicmVxdWlyZSIsIlNIQTI1NiIsImNvbnN0cnVjdG9yIiwiY3R4IiwibmV3SW5zdGFuY2UiLCJ3YXNtSW5wdXRWYWx1ZSIsImlucHV0Iiwid2FzbU91dHB1dFZhbHVlIiwib3V0cHV0IiwidWludDhJbnB1dEFycmF5IiwiVWludDhBcnJheSIsIm1lbW9yeSIsImJ1ZmZlciIsIklOUFVUX0xFTkdUSCIsInVpbnQ4T3V0cHV0QXJyYXkiLCJpbml0IiwidXBkYXRlIiwiZGF0YSIsImxlbmd0aCIsImkiLCJzbGljZWQiLCJzbGljZSIsInNldCIsImZpbmFsIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-sha256/lib/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@chainsafe/as-sha256/lib/wasm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.newInstance = void 0;\nconst wasmCode_1 = __webpack_require__(/*! ./wasmCode */ \"(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasmCode.js\");\nconst _module = new WebAssembly.Module(wasmCode_1.wasmCode);\nconst importObj = {\n    env: {\n        // modified from https://github.com/AssemblyScript/assemblyscript/blob/v0.9.2/lib/loader/index.js#L70\n        abort: function(msg, file, line, col) {\n            throw Error(`abort: ${msg}:${file}:${line}:${col}`);\n        }\n    }\n};\nfunction newInstance() {\n    return new WebAssembly.Instance(_module, importObj).exports;\n}\nexports.newInstance = newInstance; //# sourceMappingURL=wasm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9hcy1zaGEyNTYvbGliL3dhc20uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsYUFBYUMsbUJBQU9BLENBQUMsNkVBQVk7QUFDdkMsTUFBTUMsVUFBVSxJQUFJQyxZQUFZQyxNQUFNLENBQUNKLFdBQVdLLFFBQVE7QUFDMUQsTUFBTUMsWUFBWTtJQUNkQyxLQUFLO1FBQ0QscUdBQXFHO1FBQ3JHQyxPQUFPLFNBQVVDLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLEdBQUc7WUFDakMsTUFBTUMsTUFBTSxDQUFDLE9BQU8sRUFBRUosSUFBSSxDQUFDLEVBQUVDLEtBQUssQ0FBQyxFQUFFQyxLQUFLLENBQUMsRUFBRUMsSUFBSSxDQUFDO1FBQ3REO0lBQ0o7QUFDSjtBQUNBLFNBQVNiO0lBQ0wsT0FBTyxJQUFJSSxZQUFZVyxRQUFRLENBQUNaLFNBQVNJLFdBQVdULE9BQU87QUFDL0Q7QUFDQUEsbUJBQW1CLEdBQUdFLGFBQ3RCLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvYXMtc2hhMjU2L2xpYi93YXNtLmpzPzNhMDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5ld0luc3RhbmNlID0gdm9pZCAwO1xuY29uc3Qgd2FzbUNvZGVfMSA9IHJlcXVpcmUoXCIuL3dhc21Db2RlXCIpO1xuY29uc3QgX21vZHVsZSA9IG5ldyBXZWJBc3NlbWJseS5Nb2R1bGUod2FzbUNvZGVfMS53YXNtQ29kZSk7XG5jb25zdCBpbXBvcnRPYmogPSB7XG4gICAgZW52OiB7XG4gICAgICAgIC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL0Fzc2VtYmx5U2NyaXB0L2Fzc2VtYmx5c2NyaXB0L2Jsb2IvdjAuOS4yL2xpYi9sb2FkZXIvaW5kZXguanMjTDcwXG4gICAgICAgIGFib3J0OiBmdW5jdGlvbiAobXNnLCBmaWxlLCBsaW5lLCBjb2wpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBhYm9ydDogJHttc2d9OiR7ZmlsZX06JHtsaW5lfToke2NvbH1gKTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIG5ld0luc3RhbmNlKCkge1xuICAgIHJldHVybiBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UoX21vZHVsZSwgaW1wb3J0T2JqKS5leHBvcnRzO1xufVxuZXhwb3J0cy5uZXdJbnN0YW5jZSA9IG5ld0luc3RhbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FzbS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJuZXdJbnN0YW5jZSIsIndhc21Db2RlXzEiLCJyZXF1aXJlIiwiX21vZHVsZSIsIldlYkFzc2VtYmx5IiwiTW9kdWxlIiwid2FzbUNvZGUiLCJpbXBvcnRPYmoiLCJlbnYiLCJhYm9ydCIsIm1zZyIsImZpbGUiLCJsaW5lIiwiY29sIiwiRXJyb3IiLCJJbnN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasmCode.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/as-sha256/lib/wasmCode.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// This file was autogenerated by scripts/codegen.ts\n// DO NOT modify this file by hand!\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wasmCode = void 0;\n// eslint-disable-next-line prettier/prettier\nexports.wasmCode = Uint8Array.from([\n    0,\n    97,\n    115,\n    109,\n    1,\n    0,\n    0,\n    0,\n    1,\n    31,\n    6,\n    96,\n    1,\n    127,\n    0,\n    96,\n    2,\n    127,\n    127,\n    0,\n    96,\n    0,\n    0,\n    96,\n    1,\n    127,\n    1,\n    127,\n    96,\n    3,\n    127,\n    127,\n    127,\n    0,\n    96,\n    4,\n    127,\n    127,\n    127,\n    127,\n    0,\n    2,\n    13,\n    1,\n    3,\n    101,\n    110,\n    118,\n    5,\n    97,\n    98,\n    111,\n    114,\n    116,\n    0,\n    5,\n    3,\n    16,\n    15,\n    0,\n    3,\n    1,\n    3,\n    2,\n    2,\n    4,\n    1,\n    1,\n    3,\n    0,\n    0,\n    0,\n    1,\n    2,\n    5,\n    3,\n    1,\n    0,\n    1,\n    6,\n    172,\n    1,\n    34,\n    127,\n    0,\n    65,\n    128,\n    4,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    127,\n    1,\n    65,\n    0,\n    11,\n    7,\n    86,\n    9,\n    6,\n    109,\n    101,\n    109,\n    111,\n    114,\n    121,\n    2,\n    0,\n    12,\n    73,\n    78,\n    80,\n    85,\n    84,\n    95,\n    76,\n    69,\n    78,\n    71,\n    84,\n    72,\n    3,\n    0,\n    5,\n    105,\n    110,\n    112,\n    117,\n    116,\n    3,\n    28,\n    6,\n    111,\n    117,\n    116,\n    112,\n    117,\n    116,\n    3,\n    30,\n    4,\n    105,\n    110,\n    105,\n    116,\n    0,\n    6,\n    6,\n    117,\n    112,\n    100,\n    97,\n    116,\n    101,\n    0,\n    9,\n    5,\n    102,\n    105,\n    110,\n    97,\n    108,\n    0,\n    11,\n    6,\n    100,\n    105,\n    103,\n    101,\n    115,\n    116,\n    0,\n    12,\n    8,\n    100,\n    105,\n    103,\n    101,\n    115,\n    116,\n    54,\n    52,\n    0,\n    14,\n    8,\n    1,\n    15,\n    10,\n    202,\n    14,\n    15,\n    70,\n    1,\n    2,\n    127,\n    32,\n    0,\n    63,\n    0,\n    34,\n    2,\n    65,\n    16,\n    116,\n    34,\n    1,\n    75,\n    4,\n    64,\n    32,\n    2,\n    32,\n    0,\n    32,\n    1,\n    107,\n    65,\n    255,\n    255,\n    3,\n    106,\n    65,\n    128,\n    128,\n    124,\n    113,\n    65,\n    16,\n    118,\n    34,\n    1,\n    32,\n    2,\n    32,\n    1,\n    74,\n    27,\n    64,\n    0,\n    65,\n    0,\n    72,\n    4,\n    64,\n    32,\n    1,\n    64,\n    0,\n    65,\n    0,\n    72,\n    4,\n    64,\n    0,\n    11,\n    11,\n    11,\n    32,\n    0,\n    36,\n    23,\n    11,\n    82,\n    1,\n    3,\n    127,\n    32,\n    0,\n    65,\n    240,\n    255,\n    255,\n    255,\n    3,\n    75,\n    4,\n    64,\n    0,\n    11,\n    35,\n    23,\n    65,\n    16,\n    106,\n    34,\n    2,\n    32,\n    0,\n    65,\n    15,\n    106,\n    65,\n    112,\n    113,\n    34,\n    1,\n    65,\n    16,\n    32,\n    1,\n    65,\n    16,\n    75,\n    27,\n    34,\n    3,\n    106,\n    16,\n    1,\n    32,\n    2,\n    65,\n    16,\n    107,\n    34,\n    1,\n    32,\n    3,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    1,\n    54,\n    2,\n    4,\n    32,\n    1,\n    65,\n    0,\n    54,\n    2,\n    8,\n    32,\n    1,\n    32,\n    0,\n    54,\n    2,\n    12,\n    32,\n    2,\n    11,\n    37,\n    1,\n    1,\n    127,\n    3,\n    64,\n    32,\n    1,\n    4,\n    64,\n    32,\n    0,\n    34,\n    2,\n    65,\n    1,\n    106,\n    33,\n    0,\n    32,\n    2,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    1,\n    107,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    11,\n    41,\n    1,\n    1,\n    127,\n    32,\n    0,\n    65,\n    240,\n    255,\n    255,\n    255,\n    3,\n    75,\n    4,\n    64,\n    65,\n    128,\n    5,\n    65,\n    176,\n    5,\n    65,\n    54,\n    65,\n    42,\n    16,\n    0,\n    0,\n    11,\n    32,\n    0,\n    16,\n    2,\n    34,\n    1,\n    32,\n    0,\n    16,\n    3,\n    32,\n    1,\n    11,\n    71,\n    0,\n    65,\n    180,\n    2,\n    40,\n    2,\n    0,\n    36,\n    1,\n    65,\n    228,\n    4,\n    40,\n    2,\n    0,\n    36,\n    2,\n    65,\n    224,\n    5,\n    36,\n    22,\n    65,\n    224,\n    5,\n    36,\n    23,\n    65,\n    192,\n    0,\n    16,\n    4,\n    36,\n    24,\n    35,\n    24,\n    36,\n    25,\n    65,\n    128,\n    2,\n    16,\n    4,\n    36,\n    26,\n    35,\n    26,\n    36,\n    27,\n    65,\n    128,\n    4,\n    16,\n    4,\n    36,\n    28,\n    35,\n    28,\n    36,\n    29,\n    65,\n    32,\n    16,\n    4,\n    36,\n    30,\n    35,\n    30,\n    36,\n    31,\n    11,\n    74,\n    0,\n    65,\n    231,\n    204,\n    167,\n    208,\n    6,\n    36,\n    3,\n    65,\n    133,\n    221,\n    158,\n    219,\n    123,\n    36,\n    4,\n    65,\n    242,\n    230,\n    187,\n    227,\n    3,\n    36,\n    5,\n    65,\n    186,\n    234,\n    191,\n    170,\n    122,\n    36,\n    6,\n    65,\n    255,\n    164,\n    185,\n    136,\n    5,\n    36,\n    7,\n    65,\n    140,\n    209,\n    149,\n    216,\n    121,\n    36,\n    8,\n    65,\n    171,\n    179,\n    143,\n    252,\n    1,\n    36,\n    9,\n    65,\n    153,\n    154,\n    131,\n    223,\n    5,\n    36,\n    10,\n    65,\n    0,\n    36,\n    32,\n    65,\n    0,\n    36,\n    33,\n    11,\n    103,\n    1,\n    2,\n    127,\n    2,\n    64,\n    32,\n    2,\n    33,\n    3,\n    32,\n    0,\n    32,\n    1,\n    70,\n    13,\n    0,\n    32,\n    0,\n    32,\n    1,\n    73,\n    4,\n    64,\n    3,\n    64,\n    32,\n    3,\n    4,\n    64,\n    32,\n    0,\n    34,\n    2,\n    65,\n    1,\n    106,\n    33,\n    0,\n    32,\n    1,\n    34,\n    4,\n    65,\n    1,\n    106,\n    33,\n    1,\n    32,\n    2,\n    32,\n    4,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    32,\n    3,\n    65,\n    1,\n    107,\n    33,\n    3,\n    12,\n    1,\n    11,\n    11,\n    5,\n    3,\n    64,\n    32,\n    3,\n    4,\n    64,\n    32,\n    3,\n    65,\n    1,\n    107,\n    34,\n    3,\n    32,\n    0,\n    106,\n    32,\n    1,\n    32,\n    3,\n    106,\n    45,\n    0,\n    0,\n    58,\n    0,\n    0,\n    12,\n    1,\n    11,\n    11,\n    11,\n    11,\n    11,\n    231,\n    3,\n    1,\n    1,\n    127,\n    35,\n    3,\n    36,\n    11,\n    35,\n    4,\n    36,\n    12,\n    35,\n    5,\n    36,\n    13,\n    35,\n    6,\n    36,\n    14,\n    35,\n    7,\n    36,\n    15,\n    35,\n    8,\n    36,\n    16,\n    35,\n    9,\n    36,\n    17,\n    35,\n    10,\n    36,\n    18,\n    65,\n    0,\n    36,\n    19,\n    3,\n    64,\n    35,\n    19,\n    65,\n    16,\n    73,\n    4,\n    64,\n    32,\n    0,\n    35,\n    19,\n    65,\n    2,\n    116,\n    106,\n    32,\n    1,\n    35,\n    19,\n    65,\n    2,\n    116,\n    34,\n    2,\n    106,\n    45,\n    0,\n    0,\n    65,\n    24,\n    116,\n    32,\n    1,\n    32,\n    2,\n    65,\n    1,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    16,\n    116,\n    114,\n    32,\n    1,\n    32,\n    2,\n    65,\n    2,\n    106,\n    106,\n    45,\n    0,\n    0,\n    65,\n    8,\n    116,\n    114,\n    32,\n    1,\n    32,\n    2,\n    65,\n    3,\n    106,\n    106,\n    45,\n    0,\n    0,\n    114,\n    54,\n    2,\n    0,\n    35,\n    19,\n    65,\n    1,\n    106,\n    36,\n    19,\n    12,\n    1,\n    11,\n    11,\n    65,\n    16,\n    36,\n    19,\n    3,\n    64,\n    35,\n    19,\n    65,\n    192,\n    0,\n    73,\n    4,\n    64,\n    32,\n    0,\n    35,\n    19,\n    65,\n    2,\n    116,\n    106,\n    32,\n    0,\n    35,\n    19,\n    65,\n    16,\n    107,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    32,\n    0,\n    35,\n    19,\n    65,\n    7,\n    107,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    32,\n    0,\n    35,\n    19,\n    65,\n    2,\n    107,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    34,\n    1,\n    65,\n    17,\n    120,\n    32,\n    1,\n    65,\n    19,\n    120,\n    115,\n    32,\n    1,\n    65,\n    10,\n    118,\n    115,\n    106,\n    32,\n    0,\n    35,\n    19,\n    65,\n    15,\n    107,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    34,\n    1,\n    65,\n    7,\n    120,\n    32,\n    1,\n    65,\n    18,\n    120,\n    115,\n    32,\n    1,\n    65,\n    3,\n    118,\n    115,\n    106,\n    106,\n    54,\n    2,\n    0,\n    35,\n    19,\n    65,\n    1,\n    106,\n    36,\n    19,\n    12,\n    1,\n    11,\n    11,\n    65,\n    0,\n    36,\n    19,\n    3,\n    64,\n    35,\n    19,\n    65,\n    192,\n    0,\n    73,\n    4,\n    64,\n    32,\n    0,\n    35,\n    19,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    35,\n    1,\n    35,\n    19,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    35,\n    18,\n    35,\n    15,\n    34,\n    1,\n    65,\n    6,\n    120,\n    32,\n    1,\n    65,\n    11,\n    120,\n    115,\n    32,\n    1,\n    65,\n    25,\n    120,\n    115,\n    106,\n    35,\n    15,\n    34,\n    1,\n    35,\n    16,\n    113,\n    35,\n    17,\n    32,\n    1,\n    65,\n    127,\n    115,\n    113,\n    115,\n    106,\n    106,\n    106,\n    36,\n    20,\n    35,\n    11,\n    34,\n    1,\n    65,\n    2,\n    120,\n    32,\n    1,\n    65,\n    13,\n    120,\n    115,\n    32,\n    1,\n    65,\n    22,\n    120,\n    115,\n    35,\n    11,\n    34,\n    1,\n    35,\n    12,\n    34,\n    2,\n    113,\n    32,\n    1,\n    35,\n    13,\n    34,\n    1,\n    113,\n    115,\n    32,\n    1,\n    32,\n    2,\n    113,\n    115,\n    106,\n    36,\n    21,\n    35,\n    17,\n    36,\n    18,\n    35,\n    16,\n    36,\n    17,\n    35,\n    15,\n    36,\n    16,\n    35,\n    14,\n    35,\n    20,\n    106,\n    36,\n    15,\n    35,\n    13,\n    36,\n    14,\n    35,\n    12,\n    36,\n    13,\n    35,\n    11,\n    36,\n    12,\n    35,\n    20,\n    35,\n    21,\n    106,\n    36,\n    11,\n    35,\n    19,\n    65,\n    1,\n    106,\n    36,\n    19,\n    12,\n    1,\n    11,\n    11,\n    35,\n    3,\n    35,\n    11,\n    106,\n    36,\n    3,\n    35,\n    4,\n    35,\n    12,\n    106,\n    36,\n    4,\n    35,\n    5,\n    35,\n    13,\n    106,\n    36,\n    5,\n    35,\n    6,\n    35,\n    14,\n    106,\n    36,\n    6,\n    35,\n    7,\n    35,\n    15,\n    106,\n    36,\n    7,\n    35,\n    8,\n    35,\n    16,\n    106,\n    36,\n    8,\n    35,\n    9,\n    35,\n    17,\n    106,\n    36,\n    9,\n    35,\n    10,\n    35,\n    18,\n    106,\n    36,\n    10,\n    11,\n    177,\n    1,\n    1,\n    2,\n    127,\n    32,\n    1,\n    35,\n    33,\n    106,\n    36,\n    33,\n    35,\n    32,\n    4,\n    64,\n    65,\n    192,\n    0,\n    35,\n    32,\n    107,\n    32,\n    1,\n    76,\n    4,\n    64,\n    35,\n    25,\n    35,\n    32,\n    106,\n    32,\n    0,\n    65,\n    192,\n    0,\n    35,\n    32,\n    107,\n    16,\n    7,\n    35,\n    32,\n    65,\n    192,\n    0,\n    35,\n    32,\n    107,\n    106,\n    36,\n    32,\n    65,\n    192,\n    0,\n    35,\n    32,\n    107,\n    33,\n    2,\n    32,\n    1,\n    65,\n    192,\n    0,\n    35,\n    32,\n    107,\n    107,\n    33,\n    1,\n    35,\n    27,\n    35,\n    25,\n    16,\n    8,\n    65,\n    0,\n    36,\n    32,\n    5,\n    35,\n    25,\n    35,\n    32,\n    106,\n    32,\n    0,\n    32,\n    1,\n    16,\n    7,\n    32,\n    1,\n    35,\n    32,\n    106,\n    36,\n    32,\n    15,\n    11,\n    11,\n    3,\n    64,\n    32,\n    3,\n    32,\n    1,\n    65,\n    192,\n    0,\n    109,\n    72,\n    4,\n    64,\n    35,\n    27,\n    32,\n    0,\n    32,\n    2,\n    106,\n    16,\n    8,\n    32,\n    3,\n    65,\n    1,\n    106,\n    33,\n    3,\n    32,\n    2,\n    65,\n    64,\n    107,\n    33,\n    2,\n    12,\n    1,\n    11,\n    11,\n    32,\n    1,\n    65,\n    63,\n    113,\n    4,\n    64,\n    35,\n    25,\n    35,\n    32,\n    106,\n    32,\n    0,\n    32,\n    2,\n    106,\n    32,\n    1,\n    65,\n    63,\n    113,\n    34,\n    0,\n    16,\n    7,\n    32,\n    0,\n    35,\n    32,\n    106,\n    36,\n    32,\n    11,\n    11,\n    25,\n    0,\n    32,\n    0,\n    65,\n    128,\n    254,\n    131,\n    120,\n    113,\n    65,\n    8,\n    119,\n    32,\n    0,\n    65,\n    255,\n    129,\n    252,\n    7,\n    113,\n    65,\n    8,\n    120,\n    114,\n    11,\n    173,\n    2,\n    1,\n    2,\n    127,\n    35,\n    33,\n    65,\n    63,\n    113,\n    65,\n    63,\n    72,\n    4,\n    64,\n    35,\n    25,\n    35,\n    32,\n    106,\n    65,\n    128,\n    1,\n    58,\n    0,\n    0,\n    35,\n    32,\n    65,\n    1,\n    106,\n    36,\n    32,\n    11,\n    35,\n    33,\n    65,\n    63,\n    113,\n    65,\n    56,\n    78,\n    4,\n    64,\n    35,\n    25,\n    35,\n    32,\n    106,\n    34,\n    1,\n    65,\n    192,\n    0,\n    35,\n    32,\n    107,\n    106,\n    33,\n    2,\n    3,\n    64,\n    32,\n    1,\n    32,\n    2,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    35,\n    27,\n    35,\n    25,\n    16,\n    8,\n    65,\n    0,\n    36,\n    32,\n    11,\n    35,\n    33,\n    65,\n    63,\n    113,\n    65,\n    63,\n    78,\n    4,\n    64,\n    35,\n    25,\n    35,\n    32,\n    106,\n    65,\n    128,\n    1,\n    58,\n    0,\n    0,\n    35,\n    32,\n    65,\n    1,\n    106,\n    36,\n    32,\n    11,\n    35,\n    25,\n    35,\n    32,\n    106,\n    34,\n    1,\n    65,\n    56,\n    35,\n    32,\n    107,\n    106,\n    33,\n    2,\n    3,\n    64,\n    32,\n    1,\n    32,\n    2,\n    73,\n    4,\n    64,\n    32,\n    1,\n    65,\n    0,\n    58,\n    0,\n    0,\n    32,\n    1,\n    65,\n    1,\n    106,\n    33,\n    1,\n    12,\n    1,\n    11,\n    11,\n    35,\n    25,\n    65,\n    56,\n    106,\n    35,\n    33,\n    65,\n    128,\n    128,\n    128,\n    128,\n    2,\n    109,\n    16,\n    10,\n    54,\n    2,\n    0,\n    35,\n    25,\n    65,\n    60,\n    106,\n    35,\n    33,\n    65,\n    3,\n    116,\n    16,\n    10,\n    54,\n    2,\n    0,\n    35,\n    27,\n    35,\n    25,\n    16,\n    8,\n    32,\n    0,\n    35,\n    3,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    4,\n    106,\n    35,\n    4,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    8,\n    106,\n    35,\n    5,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    12,\n    106,\n    35,\n    6,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    16,\n    106,\n    35,\n    7,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    20,\n    106,\n    35,\n    8,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    24,\n    106,\n    35,\n    9,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    0,\n    65,\n    28,\n    106,\n    35,\n    10,\n    16,\n    10,\n    54,\n    2,\n    0,\n    11,\n    14,\n    0,\n    16,\n    6,\n    35,\n    29,\n    32,\n    0,\n    16,\n    9,\n    35,\n    31,\n    16,\n    11,\n    11,\n    253,\n    1,\n    1,\n    2,\n    127,\n    35,\n    3,\n    36,\n    11,\n    35,\n    4,\n    36,\n    12,\n    35,\n    5,\n    36,\n    13,\n    35,\n    6,\n    36,\n    14,\n    35,\n    7,\n    36,\n    15,\n    35,\n    8,\n    36,\n    16,\n    35,\n    9,\n    36,\n    17,\n    35,\n    10,\n    36,\n    18,\n    65,\n    0,\n    36,\n    19,\n    3,\n    64,\n    35,\n    19,\n    65,\n    192,\n    0,\n    73,\n    4,\n    64,\n    32,\n    0,\n    35,\n    19,\n    65,\n    2,\n    116,\n    106,\n    40,\n    2,\n    0,\n    35,\n    18,\n    35,\n    15,\n    34,\n    1,\n    65,\n    6,\n    120,\n    32,\n    1,\n    65,\n    11,\n    120,\n    115,\n    32,\n    1,\n    65,\n    25,\n    120,\n    115,\n    106,\n    35,\n    15,\n    34,\n    1,\n    35,\n    16,\n    113,\n    35,\n    17,\n    32,\n    1,\n    65,\n    127,\n    115,\n    113,\n    115,\n    106,\n    106,\n    36,\n    20,\n    35,\n    11,\n    34,\n    1,\n    65,\n    2,\n    120,\n    32,\n    1,\n    65,\n    13,\n    120,\n    115,\n    32,\n    1,\n    65,\n    22,\n    120,\n    115,\n    35,\n    11,\n    34,\n    1,\n    35,\n    12,\n    34,\n    2,\n    113,\n    32,\n    1,\n    35,\n    13,\n    34,\n    1,\n    113,\n    115,\n    32,\n    1,\n    32,\n    2,\n    113,\n    115,\n    106,\n    36,\n    21,\n    35,\n    17,\n    36,\n    18,\n    35,\n    16,\n    36,\n    17,\n    35,\n    15,\n    36,\n    16,\n    35,\n    14,\n    35,\n    20,\n    106,\n    36,\n    15,\n    35,\n    13,\n    36,\n    14,\n    35,\n    12,\n    36,\n    13,\n    35,\n    11,\n    36,\n    12,\n    35,\n    20,\n    35,\n    21,\n    106,\n    36,\n    11,\n    35,\n    19,\n    65,\n    1,\n    106,\n    36,\n    19,\n    12,\n    1,\n    11,\n    11,\n    35,\n    3,\n    35,\n    11,\n    106,\n    36,\n    3,\n    35,\n    4,\n    35,\n    12,\n    106,\n    36,\n    4,\n    35,\n    5,\n    35,\n    13,\n    106,\n    36,\n    5,\n    35,\n    6,\n    35,\n    14,\n    106,\n    36,\n    6,\n    35,\n    7,\n    35,\n    15,\n    106,\n    36,\n    7,\n    35,\n    8,\n    35,\n    16,\n    106,\n    36,\n    8,\n    35,\n    9,\n    35,\n    17,\n    106,\n    36,\n    9,\n    35,\n    10,\n    35,\n    18,\n    106,\n    36,\n    10,\n    11,\n    107,\n    0,\n    16,\n    6,\n    35,\n    27,\n    32,\n    0,\n    16,\n    8,\n    35,\n    2,\n    16,\n    13,\n    32,\n    1,\n    35,\n    3,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    4,\n    106,\n    35,\n    4,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    8,\n    106,\n    35,\n    5,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    12,\n    106,\n    35,\n    6,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    16,\n    106,\n    35,\n    7,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    20,\n    106,\n    35,\n    8,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    24,\n    106,\n    35,\n    9,\n    16,\n    10,\n    54,\n    2,\n    0,\n    32,\n    1,\n    65,\n    28,\n    106,\n    35,\n    10,\n    16,\n    10,\n    54,\n    2,\n    0,\n    11,\n    4,\n    0,\n    16,\n    5,\n    11,\n    11,\n    222,\n    5,\n    6,\n    0,\n    65,\n    17,\n    11,\n    143,\n    2,\n    1,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    152,\n    47,\n    138,\n    66,\n    145,\n    68,\n    55,\n    113,\n    207,\n    251,\n    192,\n    181,\n    165,\n    219,\n    181,\n    233,\n    91,\n    194,\n    86,\n    57,\n    241,\n    17,\n    241,\n    89,\n    164,\n    130,\n    63,\n    146,\n    213,\n    94,\n    28,\n    171,\n    152,\n    170,\n    7,\n    216,\n    1,\n    91,\n    131,\n    18,\n    190,\n    133,\n    49,\n    36,\n    195,\n    125,\n    12,\n    85,\n    116,\n    93,\n    190,\n    114,\n    254,\n    177,\n    222,\n    128,\n    167,\n    6,\n    220,\n    155,\n    116,\n    241,\n    155,\n    193,\n    193,\n    105,\n    155,\n    228,\n    134,\n    71,\n    190,\n    239,\n    198,\n    157,\n    193,\n    15,\n    204,\n    161,\n    12,\n    36,\n    111,\n    44,\n    233,\n    45,\n    170,\n    132,\n    116,\n    74,\n    220,\n    169,\n    176,\n    92,\n    218,\n    136,\n    249,\n    118,\n    82,\n    81,\n    62,\n    152,\n    109,\n    198,\n    49,\n    168,\n    200,\n    39,\n    3,\n    176,\n    199,\n    127,\n    89,\n    191,\n    243,\n    11,\n    224,\n    198,\n    71,\n    145,\n    167,\n    213,\n    81,\n    99,\n    202,\n    6,\n    103,\n    41,\n    41,\n    20,\n    133,\n    10,\n    183,\n    39,\n    56,\n    33,\n    27,\n    46,\n    252,\n    109,\n    44,\n    77,\n    19,\n    13,\n    56,\n    83,\n    84,\n    115,\n    10,\n    101,\n    187,\n    10,\n    106,\n    118,\n    46,\n    201,\n    194,\n    129,\n    133,\n    44,\n    114,\n    146,\n    161,\n    232,\n    191,\n    162,\n    75,\n    102,\n    26,\n    168,\n    112,\n    139,\n    75,\n    194,\n    163,\n    81,\n    108,\n    199,\n    25,\n    232,\n    146,\n    209,\n    36,\n    6,\n    153,\n    214,\n    133,\n    53,\n    14,\n    244,\n    112,\n    160,\n    106,\n    16,\n    22,\n    193,\n    164,\n    25,\n    8,\n    108,\n    55,\n    30,\n    76,\n    119,\n    72,\n    39,\n    181,\n    188,\n    176,\n    52,\n    179,\n    12,\n    28,\n    57,\n    74,\n    170,\n    216,\n    78,\n    79,\n    202,\n    156,\n    91,\n    243,\n    111,\n    46,\n    104,\n    238,\n    130,\n    143,\n    116,\n    111,\n    99,\n    165,\n    120,\n    20,\n    120,\n    200,\n    132,\n    8,\n    2,\n    199,\n    140,\n    250,\n    255,\n    190,\n    144,\n    235,\n    108,\n    80,\n    164,\n    247,\n    163,\n    249,\n    190,\n    242,\n    120,\n    113,\n    198,\n    0,\n    65,\n    160,\n    2,\n    11,\n    29,\n    16,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    3,\n    0,\n    0,\n    0,\n    16,\n    0,\n    0,\n    0,\n    32,\n    0,\n    0,\n    0,\n    32,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    64,\n    0,\n    65,\n    193,\n    2,\n    11,\n    143,\n    2,\n    1,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    152,\n    47,\n    138,\n    194,\n    145,\n    68,\n    55,\n    113,\n    207,\n    251,\n    192,\n    181,\n    165,\n    219,\n    181,\n    233,\n    91,\n    194,\n    86,\n    57,\n    241,\n    17,\n    241,\n    89,\n    164,\n    130,\n    63,\n    146,\n    213,\n    94,\n    28,\n    171,\n    152,\n    170,\n    7,\n    216,\n    1,\n    91,\n    131,\n    18,\n    190,\n    133,\n    49,\n    36,\n    195,\n    125,\n    12,\n    85,\n    116,\n    93,\n    190,\n    114,\n    254,\n    177,\n    222,\n    128,\n    167,\n    6,\n    220,\n    155,\n    116,\n    243,\n    155,\n    193,\n    193,\n    105,\n    155,\n    100,\n    134,\n    71,\n    254,\n    240,\n    198,\n    237,\n    225,\n    15,\n    84,\n    242,\n    12,\n    36,\n    111,\n    52,\n    233,\n    79,\n    190,\n    132,\n    201,\n    108,\n    30,\n    65,\n    185,\n    97,\n    250,\n    136,\n    249,\n    22,\n    82,\n    81,\n    198,\n    242,\n    109,\n    90,\n    142,\n    168,\n    101,\n    252,\n    25,\n    176,\n    199,\n    158,\n    217,\n    185,\n    195,\n    49,\n    18,\n    154,\n    160,\n    234,\n    14,\n    231,\n    43,\n    35,\n    177,\n    253,\n    176,\n    62,\n    53,\n    199,\n    213,\n    186,\n    105,\n    48,\n    95,\n    109,\n    151,\n    203,\n    143,\n    17,\n    15,\n    90,\n    253,\n    238,\n    30,\n    220,\n    137,\n    182,\n    53,\n    10,\n    4,\n    122,\n    11,\n    222,\n    157,\n    202,\n    244,\n    88,\n    22,\n    91,\n    93,\n    225,\n    134,\n    62,\n    127,\n    0,\n    128,\n    137,\n    8,\n    55,\n    50,\n    234,\n    7,\n    165,\n    55,\n    149,\n    171,\n    111,\n    16,\n    97,\n    64,\n    23,\n    241,\n    214,\n    140,\n    13,\n    109,\n    59,\n    170,\n    205,\n    55,\n    190,\n    187,\n    192,\n    218,\n    59,\n    97,\n    131,\n    99,\n    163,\n    72,\n    219,\n    49,\n    233,\n    2,\n    11,\n    167,\n    92,\n    209,\n    111,\n    202,\n    250,\n    26,\n    82,\n    49,\n    132,\n    51,\n    49,\n    149,\n    26,\n    212,\n    110,\n    144,\n    120,\n    67,\n    109,\n    242,\n    145,\n    156,\n    195,\n    189,\n    171,\n    204,\n    158,\n    230,\n    160,\n    201,\n    181,\n    60,\n    182,\n    47,\n    83,\n    198,\n    65,\n    199,\n    210,\n    163,\n    126,\n    35,\n    7,\n    104,\n    75,\n    149,\n    164,\n    118,\n    29,\n    25,\n    76,\n    0,\n    65,\n    208,\n    4,\n    11,\n    29,\n    16,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    3,\n    0,\n    0,\n    0,\n    16,\n    0,\n    0,\n    0,\n    80,\n    1,\n    0,\n    0,\n    80,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    64,\n    0,\n    65,\n    240,\n    4,\n    11,\n    43,\n    28,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    28,\n    0,\n    0,\n    0,\n    73,\n    0,\n    110,\n    0,\n    118,\n    0,\n    97,\n    0,\n    108,\n    0,\n    105,\n    0,\n    100,\n    0,\n    32,\n    0,\n    108,\n    0,\n    101,\n    0,\n    110,\n    0,\n    103,\n    0,\n    116,\n    0,\n    104,\n    0,\n    65,\n    160,\n    5,\n    11,\n    53,\n    38,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    38,\n    0,\n    0,\n    0,\n    126,\n    0,\n    108,\n    0,\n    105,\n    0,\n    98,\n    0,\n    47,\n    0,\n    97,\n    0,\n    114,\n    0,\n    114,\n    0,\n    97,\n    0,\n    121,\n    0,\n    98,\n    0,\n    117,\n    0,\n    102,\n    0,\n    102,\n    0,\n    101,\n    0,\n    114,\n    0,\n    46,\n    0,\n    116,\n    0,\n    115\n]); //# sourceMappingURL=wasmCode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/as-sha256/lib/wasmCode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/is-ip/lib/is-ip.node.js":
/*!*********************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/is-ip.node.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipVersion: () => (/* reexport safe */ node_net__WEBPACK_IMPORTED_MODULE_0__.isIP),\n/* harmony export */   isIP: () => (/* binding */ isIP),\n/* harmony export */   isIPv4: () => (/* reexport safe */ node_net__WEBPACK_IMPORTED_MODULE_0__.isIPv4),\n/* harmony export */   isIPv6: () => (/* reexport safe */ node_net__WEBPACK_IMPORTED_MODULE_0__.isIPv6)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n\n\n/** Check if `input` is IPv4 or IPv6. */ function isIP(input) {\n    return Boolean((0,node_net__WEBPACK_IMPORTED_MODULE_0__.isIP)(input));\n} //# sourceMappingURL=is-ip.node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9pcy1pcC9saWIvaXMtaXAubm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2RDtBQUN4QjtBQUNyQyxzQ0FBc0MsR0FDL0IsU0FBU0UsS0FBS0UsS0FBSztJQUN0QixPQUFPQyxRQUFRRiw4Q0FBU0EsQ0FBQ0M7QUFDN0IsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2lzLWlwL2xpYi9pcy1pcC5ub2RlLmpzPzU0ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNJUHY0LCBpc0lQdjYsIGlzSVAgYXMgaXBWZXJzaW9uIH0gZnJvbSBcIm5vZGU6bmV0XCI7XG5leHBvcnQgeyBpc0lQdjQsIGlzSVB2NiwgaXBWZXJzaW9uIH07XG4vKiogQ2hlY2sgaWYgYGlucHV0YCBpcyBJUHY0IG9yIElQdjYuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJUChpbnB1dCkge1xuICAgIHJldHVybiBCb29sZWFuKGlwVmVyc2lvbihpbnB1dCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMtaXAubm9kZS5qcy5tYXAiXSwibmFtZXMiOlsiaXNJUHY0IiwiaXNJUHY2IiwiaXNJUCIsImlwVmVyc2lvbiIsImlucHV0IiwiQm9vbGVhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/is-ip/lib/is-ip.node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js":
/*!****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/parse.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseIP: () => (/* binding */ parseIP),\n/* harmony export */   parseIPv4: () => (/* binding */ parseIPv4),\n/* harmony export */   parseIPv6: () => (/* binding */ parseIPv6)\n/* harmony export */ });\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parser.js\");\n\n// See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\nconst MAX_IPV6_LENGTH = 45;\nconst MAX_IPV4_LENGTH = 15;\nconst parser = new _parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser();\n/** Parse `input` into IPv4 bytes. */ function parseIPv4(input) {\n    if (input.length > MAX_IPV4_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(()=>parser.readIPv4Addr());\n}\n/** Parse `input` into IPv6 bytes. */ function parseIPv6(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(()=>parser.readIPv6Addr());\n}\n/** Parse `input` into IPv4 or IPv6 bytes. */ function parseIP(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(()=>parser.readIPAddr());\n} //# sourceMappingURL=parse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9pcy1pcC9saWIvcGFyc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFxQztBQUNyQyxpSEFBaUg7QUFDakgsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxTQUFTLElBQUlILDhDQUFNQTtBQUN6QixtQ0FBbUMsR0FDNUIsU0FBU0ksVUFBVUMsS0FBSztJQUMzQixJQUFJQSxNQUFNQyxNQUFNLEdBQUdKLGlCQUFpQjtRQUNoQyxPQUFPSztJQUNYO0lBQ0EsT0FBT0osT0FBT0ssR0FBRyxDQUFDSCxPQUFPSSxTQUFTLENBQUMsSUFBTU4sT0FBT08sWUFBWTtBQUNoRTtBQUNBLG1DQUFtQyxHQUM1QixTQUFTQyxVQUFVTixLQUFLO0lBQzNCLG9DQUFvQztJQUNwQyxJQUFJQSxNQUFNTyxRQUFRLENBQUMsTUFBTTtRQUNyQlAsUUFBUUEsTUFBTVEsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQy9CO0lBQ0EsSUFBSVIsTUFBTUMsTUFBTSxHQUFHTCxpQkFBaUI7UUFDaEMsT0FBT007SUFDWDtJQUNBLE9BQU9KLE9BQU9LLEdBQUcsQ0FBQ0gsT0FBT0ksU0FBUyxDQUFDLElBQU1OLE9BQU9XLFlBQVk7QUFDaEU7QUFDQSwyQ0FBMkMsR0FDcEMsU0FBU0MsUUFBUVYsS0FBSztJQUN6QixvQ0FBb0M7SUFDcEMsSUFBSUEsTUFBTU8sUUFBUSxDQUFDLE1BQU07UUFDckJQLFFBQVFBLE1BQU1RLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUMvQjtJQUNBLElBQUlSLE1BQU1DLE1BQU0sR0FBR0wsaUJBQWlCO1FBQ2hDLE9BQU9NO0lBQ1g7SUFDQSxPQUFPSixPQUFPSyxHQUFHLENBQUNILE9BQU9JLFNBQVMsQ0FBQyxJQUFNTixPQUFPYSxVQUFVO0FBQzlELEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9pcy1pcC9saWIvcGFyc2UuanM/YTNmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZXIgfSBmcm9tIFwiLi9wYXJzZXIuanNcIjtcbi8vIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjYxMzIvbWF4aW11bS1sZW5ndGgtb2YtdGhlLXRleHR1YWwtcmVwcmVzZW50YXRpb24tb2YtYW4taXB2Ni1hZGRyZXNzXG5jb25zdCBNQVhfSVBWNl9MRU5HVEggPSA0NTtcbmNvbnN0IE1BWF9JUFY0X0xFTkdUSCA9IDE1O1xuY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcigpO1xuLyoqIFBhcnNlIGBpbnB1dGAgaW50byBJUHY0IGJ5dGVzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVB2NChpbnB1dCkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPiBNQVhfSVBWNF9MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlci5uZXcoaW5wdXQpLnBhcnNlV2l0aCgoKSA9PiBwYXJzZXIucmVhZElQdjRBZGRyKCkpO1xufVxuLyoqIFBhcnNlIGBpbnB1dGAgaW50byBJUHY2IGJ5dGVzLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVB2NihpbnB1dCkge1xuICAgIC8vIHN0cmlwIHpvbmUgaW5kZXggaWYgaXQgaXMgcHJlc2VudFxuICAgIGlmIChpbnB1dC5pbmNsdWRlcyhcIiVcIikpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zcGxpdChcIiVcIilbMF07XG4gICAgfVxuICAgIGlmIChpbnB1dC5sZW5ndGggPiBNQVhfSVBWNl9MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlci5uZXcoaW5wdXQpLnBhcnNlV2l0aCgoKSA9PiBwYXJzZXIucmVhZElQdjZBZGRyKCkpO1xufVxuLyoqIFBhcnNlIGBpbnB1dGAgaW50byBJUHY0IG9yIElQdjYgYnl0ZXMuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJUChpbnB1dCkge1xuICAgIC8vIHN0cmlwIHpvbmUgaW5kZXggaWYgaXQgaXMgcHJlc2VudFxuICAgIGlmIChpbnB1dC5pbmNsdWRlcyhcIiVcIikpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zcGxpdChcIiVcIilbMF07XG4gICAgfVxuICAgIGlmIChpbnB1dC5sZW5ndGggPiBNQVhfSVBWNl9MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlci5uZXcoaW5wdXQpLnBhcnNlV2l0aCgoKSA9PiBwYXJzZXIucmVhZElQQWRkcigpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLmpzLm1hcCJdLCJuYW1lcyI6WyJQYXJzZXIiLCJNQVhfSVBWNl9MRU5HVEgiLCJNQVhfSVBWNF9MRU5HVEgiLCJwYXJzZXIiLCJwYXJzZUlQdjQiLCJpbnB1dCIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm5ldyIsInBhcnNlV2l0aCIsInJlYWRJUHY0QWRkciIsInBhcnNlSVB2NiIsImluY2x1ZGVzIiwic3BsaXQiLCJyZWFkSVB2NkFkZHIiLCJwYXJzZUlQIiwicmVhZElQQWRkciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/is-ip/lib/parser.js":
/*!*****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/parser.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-return */ class Parser {\n    new(input) {\n        this.index = 0;\n        this.input = input;\n        return this;\n    }\n    /** Run a parser, and restore the pre-parse state if it fails. */ readAtomically(fn) {\n        const index = this.index;\n        const result = fn();\n        if (result === undefined) {\n            this.index = index;\n        }\n        return result;\n    }\n    /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */ parseWith(fn) {\n        const result = fn();\n        if (this.index !== this.input.length) {\n            return undefined;\n        }\n        return result;\n    }\n    /** Peek the next character from the input */ peekChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index];\n    }\n    /** Read the next character from the input */ readChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index++];\n    }\n    /** Read the next character from the input if it matches the target. */ readGivenChar(target) {\n        return this.readAtomically(()=>{\n            const char = this.readChar();\n            if (char !== target) {\n                return undefined;\n            }\n            return char;\n        });\n    }\n    /**\n     * Helper for reading separators in an indexed loop. Reads the separator\n     * character iff index > 0, then runs the parser. When used in a loop,\n     * the separator character will only be read on index > 0 (see\n     * readIPv4Addr for an example)\n     */ readSeparator(sep, index, inner) {\n        return this.readAtomically(()=>{\n            if (index > 0) {\n                if (this.readGivenChar(sep) === undefined) {\n                    return undefined;\n                }\n            }\n            return inner();\n        });\n    }\n    /**\n     * Read a number off the front of the input in the given radix, stopping\n     * at the first non-digit character or eof. Fails if the number has more\n     * digits than max_digits or if there is no number.\n     */ readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {\n        return this.readAtomically(()=>{\n            let result = 0;\n            let digitCount = 0;\n            const leadingChar = this.peekChar();\n            if (leadingChar === undefined) {\n                return undefined;\n            }\n            const hasLeadingZero = leadingChar === \"0\";\n            const maxValue = 2 ** (8 * maxBytes) - 1;\n            // eslint-disable-next-line no-constant-condition\n            while(true){\n                const digit = this.readAtomically(()=>{\n                    const char = this.readChar();\n                    if (char === undefined) {\n                        return undefined;\n                    }\n                    const num = Number.parseInt(char, radix);\n                    if (Number.isNaN(num)) {\n                        return undefined;\n                    }\n                    return num;\n                });\n                if (digit === undefined) {\n                    break;\n                }\n                result *= radix;\n                result += digit;\n                if (result > maxValue) {\n                    return undefined;\n                }\n                digitCount += 1;\n                if (maxDigits !== undefined) {\n                    if (digitCount > maxDigits) {\n                        return undefined;\n                    }\n                }\n            }\n            if (digitCount === 0) {\n                return undefined;\n            } else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n                return undefined;\n            } else {\n                return result;\n            }\n        });\n    }\n    /** Read an IPv4 address. */ readIPv4Addr() {\n        return this.readAtomically(()=>{\n            const out = new Uint8Array(4);\n            for(let i = 0; i < out.length; i++){\n                const ix = this.readSeparator(\".\", i, ()=>this.readNumber(10, 3, false, 1));\n                if (ix === undefined) {\n                    return undefined;\n                }\n                out[i] = ix;\n            }\n            return out;\n        });\n    }\n    /** Read an IPv6 Address. */ readIPv6Addr() {\n        /**\n         * Read a chunk of an IPv6 address into `groups`. Returns the number\n         * of groups read, along with a bool indicating if an embedded\n         * trailing IPv4 address was read. Specifically, read a series of\n         * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n         * trailing embedded IPv4 address.\n         */ const readGroups = (groups)=>{\n            for(let i = 0; i < groups.length / 2; i++){\n                const ix = i * 2;\n                // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n                if (i < groups.length - 3) {\n                    const ipv4 = this.readSeparator(\":\", i, ()=>this.readIPv4Addr());\n                    if (ipv4 !== undefined) {\n                        groups[ix] = ipv4[0];\n                        groups[ix + 1] = ipv4[1];\n                        groups[ix + 2] = ipv4[2];\n                        groups[ix + 3] = ipv4[3];\n                        return [\n                            ix + 4,\n                            true\n                        ];\n                    }\n                }\n                const group = this.readSeparator(\":\", i, ()=>this.readNumber(16, 4, true, 2));\n                if (group === undefined) {\n                    return [\n                        ix,\n                        false\n                    ];\n                }\n                groups[ix] = group >> 8;\n                groups[ix + 1] = group & 255;\n            }\n            return [\n                groups.length,\n                false\n            ];\n        };\n        return this.readAtomically(()=>{\n            // Read the front part of the address; either the whole thing, or up to the first ::\n            const head = new Uint8Array(16);\n            const [headSize, headIp4] = readGroups(head);\n            if (headSize === 16) {\n                return head;\n            }\n            // IPv4 part is not allowed before `::`\n            if (headIp4) {\n                return undefined;\n            }\n            // Read `::` if previous code parsed less than 8 groups.\n            // `::` indicates one or more groups of 16 bits of zeros.\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            // Read the back part of the address. The :: must contain at least one\n            // set of zeroes, so our max length is 7.\n            const tail = new Uint8Array(14);\n            const limit = 16 - (headSize + 2);\n            const [tailSize] = readGroups(tail.subarray(0, limit));\n            // Concat the head and tail of the IP address\n            head.set(tail.subarray(0, tailSize), 16 - tailSize);\n            return head;\n        });\n    }\n    /** Read an IP Address, either IPv4 or IPv6. */ readIPAddr() {\n        return this.readIPv4Addr() ?? this.readIPv6Addr();\n    }\n    constructor(){\n        this.index = 0;\n        this.input = \"\";\n    }\n} //# sourceMappingURL=parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/is-ip/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCEPT_FROM_WHITELIST_DURATION_MS: () => (/* binding */ ACCEPT_FROM_WHITELIST_DURATION_MS),\n/* harmony export */   ACCEPT_FROM_WHITELIST_MAX_MESSAGES: () => (/* binding */ ACCEPT_FROM_WHITELIST_MAX_MESSAGES),\n/* harmony export */   ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE: () => (/* binding */ ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE),\n/* harmony export */   BACKOFF_SLACK: () => (/* binding */ BACKOFF_SLACK),\n/* harmony export */   DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS: () => (/* binding */ DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS),\n/* harmony export */   ERR_TOPIC_VALIDATOR_IGNORE: () => (/* binding */ ERR_TOPIC_VALIDATOR_IGNORE),\n/* harmony export */   ERR_TOPIC_VALIDATOR_REJECT: () => (/* binding */ ERR_TOPIC_VALIDATOR_REJECT),\n/* harmony export */   FloodsubID: () => (/* binding */ FloodsubID),\n/* harmony export */   GossipsubConnectionTimeout: () => (/* binding */ GossipsubConnectionTimeout),\n/* harmony export */   GossipsubConnectors: () => (/* binding */ GossipsubConnectors),\n/* harmony export */   GossipsubD: () => (/* binding */ GossipsubD),\n/* harmony export */   GossipsubDhi: () => (/* binding */ GossipsubDhi),\n/* harmony export */   GossipsubDirectConnectInitialDelay: () => (/* binding */ GossipsubDirectConnectInitialDelay),\n/* harmony export */   GossipsubDirectConnectTicks: () => (/* binding */ GossipsubDirectConnectTicks),\n/* harmony export */   GossipsubDlazy: () => (/* binding */ GossipsubDlazy),\n/* harmony export */   GossipsubDlo: () => (/* binding */ GossipsubDlo),\n/* harmony export */   GossipsubDout: () => (/* binding */ GossipsubDout),\n/* harmony export */   GossipsubDscore: () => (/* binding */ GossipsubDscore),\n/* harmony export */   GossipsubFanoutTTL: () => (/* binding */ GossipsubFanoutTTL),\n/* harmony export */   GossipsubGossipFactor: () => (/* binding */ GossipsubGossipFactor),\n/* harmony export */   GossipsubGossipRetransmission: () => (/* binding */ GossipsubGossipRetransmission),\n/* harmony export */   GossipsubGraftFloodThreshold: () => (/* binding */ GossipsubGraftFloodThreshold),\n/* harmony export */   GossipsubHeartbeatInitialDelay: () => (/* binding */ GossipsubHeartbeatInitialDelay),\n/* harmony export */   GossipsubHeartbeatInterval: () => (/* binding */ GossipsubHeartbeatInterval),\n/* harmony export */   GossipsubHistoryGossip: () => (/* binding */ GossipsubHistoryGossip),\n/* harmony export */   GossipsubHistoryLength: () => (/* binding */ GossipsubHistoryLength),\n/* harmony export */   GossipsubIDv10: () => (/* binding */ GossipsubIDv10),\n/* harmony export */   GossipsubIDv11: () => (/* binding */ GossipsubIDv11),\n/* harmony export */   GossipsubIWantFollowupTime: () => (/* binding */ GossipsubIWantFollowupTime),\n/* harmony export */   GossipsubMaxIHaveLength: () => (/* binding */ GossipsubMaxIHaveLength),\n/* harmony export */   GossipsubMaxIHaveMessages: () => (/* binding */ GossipsubMaxIHaveMessages),\n/* harmony export */   GossipsubMaxPendingConnections: () => (/* binding */ GossipsubMaxPendingConnections),\n/* harmony export */   GossipsubOpportunisticGraftPeers: () => (/* binding */ GossipsubOpportunisticGraftPeers),\n/* harmony export */   GossipsubOpportunisticGraftTicks: () => (/* binding */ GossipsubOpportunisticGraftTicks),\n/* harmony export */   GossipsubPruneBackoff: () => (/* binding */ GossipsubPruneBackoff),\n/* harmony export */   GossipsubPruneBackoffTicks: () => (/* binding */ GossipsubPruneBackoffTicks),\n/* harmony export */   GossipsubPrunePeers: () => (/* binding */ GossipsubPrunePeers),\n/* harmony export */   GossipsubSeenTTL: () => (/* binding */ GossipsubSeenTTL),\n/* harmony export */   GossipsubUnsubscribeBackoff: () => (/* binding */ GossipsubUnsubscribeBackoff),\n/* harmony export */   TimeCacheDuration: () => (/* binding */ TimeCacheDuration),\n/* harmony export */   minute: () => (/* binding */ minute),\n/* harmony export */   second: () => (/* binding */ second)\n/* harmony export */ });\nconst second = 1000;\nconst minute = 60 * second;\n// Protocol identifiers\nconst FloodsubID = \"/floodsub/1.0.0\";\n/**\n * The protocol ID for version 1.0.0 of the Gossipsub protocol\n * It is advertised along with GossipsubIDv11 for backwards compatability\n */ const GossipsubIDv10 = \"/meshsub/1.0.0\";\n/**\n * The protocol ID for version 1.1.0 of the Gossipsub protocol\n * See the spec for details about how v1.1.0 compares to v1.0.0:\n * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md\n */ const GossipsubIDv11 = \"/meshsub/1.1.0\";\n// Overlay parameters\n/**\n * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,\n * each peer will want to have about six peers in their mesh for each topic they're subscribed to.\n * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.\n */ const GossipsubD = 6;\n/**\n * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at\n * the next heartbeat.\n */ const GossipsubDlo = 4;\n/**\n * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.\n * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.\n */ const GossipsubDhi = 12;\n/**\n * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.\n * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are\n * chosen randomly.\n */ const GossipsubDscore = 4;\n/**\n * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.\n * When the mesh is pruned due to over subscription, we make sure that we have outbound connections\n * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming\n * our mesh with incoming connections.\n *\n * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.\n */ const GossipsubDout = 2;\n// Gossip parameters\n/**\n * GossipsubHistoryLength controls the size of the message cache used for gossip.\n * The message cache will remember messages for GossipsubHistoryLength heartbeats.\n */ const GossipsubHistoryLength = 5;\n/**\n * GossipsubHistoryGossip controls how many cached message ids we will advertise in\n * IHAVE gossip messages. When asked for our seen message IDs, we will return\n * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between\n * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages\n * that will be expired by the time they're requested.\n *\n * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to\n * avoid a runtime panic.\n */ const GossipsubHistoryGossip = 3;\n/**\n * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual\n * number may be more, depending on GossipsubGossipFactor and how many peers we're\n * connected to.\n */ const GossipsubDlazy = 6;\n/**\n * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.\n * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or\n * GossipsubDlazy, whichever is greater.\n */ const GossipsubGossipFactor = 0.25;\n/**\n * GossipsubGossipRetransmission controls how many times we will allow a peer to request\n * the same message id through IWANT gossip before we start ignoring them. This is designed\n * to prevent peers from spamming us with requests and wasting our resources.\n */ const GossipsubGossipRetransmission = 3;\n// Heartbeat interval\n/**\n * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins\n * after the router is initialized.\n */ const GossipsubHeartbeatInitialDelay = 100;\n/**\n * GossipsubHeartbeatInterval controls the time between heartbeats.\n */ const GossipsubHeartbeatInterval = second;\n/**\n * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been\n * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,\n * we'll delete the fanout map for that topic.\n */ const GossipsubFanoutTTL = minute;\n/**\n * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.\n * When we prune a peer that's eligible for PX (has a good score, etc), we will try to\n * send them signed peer records for up to GossipsubPrunePeers other peers that we\n * know of.\n */ const GossipsubPrunePeers = 16;\n/**\n * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long\n * a peer must wait before attempting to graft into our mesh again after being pruned.\n * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know\n * the minimum time to wait. Peers running older versions may not send a backoff time,\n * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff\n * before attempting to re-graft.\n */ const GossipsubPruneBackoff = minute;\n/**\n * Backoff to use when unsuscribing from a topic. Should not resubscribe to this topic before it expired.\n */ const GossipsubUnsubscribeBackoff = 10 * second;\n/**\n * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired\n * backoff timers.\n */ const GossipsubPruneBackoffTicks = 15;\n/**\n * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.\n */ const GossipsubConnectors = 8;\n/**\n * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.\n */ const GossipsubMaxPendingConnections = 128;\n/**\n * GossipsubConnectionTimeout controls the timeout for connection attempts.\n */ const GossipsubConnectionTimeout = 30 * second;\n/**\n * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers\n * that are not currently connected.\n */ const GossipsubDirectConnectTicks = 300;\n/**\n * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers\n */ const GossipsubDirectConnectInitialDelay = second;\n/**\n * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh\n * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some\n * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls\n * below a threshold\n */ const GossipsubOpportunisticGraftTicks = 60;\n/**\n * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.\n */ const GossipsubOpportunisticGraftPeers = 2;\n/**\n * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,\n * then there is an extra score penalty applied to the peer through P7.\n */ const GossipsubGraftFloodThreshold = 10 * second;\n/**\n * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.\n * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a\n * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the\n * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;\n * with the defaults this is 1666 messages/s.\n */ const GossipsubMaxIHaveLength = 5000;\n/**\n * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.\n */ const GossipsubMaxIHaveMessages = 10;\n/**\n * Time to wait for a message requested through IWANT following an IHAVE advertisement.\n * If the message is not received within this window, a broken promise is declared and\n * the router may apply bahavioural penalties.\n */ const GossipsubIWantFollowupTime = 3 * second;\n/**\n * Time in milliseconds to keep message ids in the seen cache\n */ const GossipsubSeenTTL = 2 * minute;\nconst TimeCacheDuration = 120 * 1000;\nconst ERR_TOPIC_VALIDATOR_REJECT = \"ERR_TOPIC_VALIDATOR_REJECT\";\nconst ERR_TOPIC_VALIDATOR_IGNORE = \"ERR_TOPIC_VALIDATOR_IGNORE\";\n/**\n * If peer score is better than this, we accept messages from this peer\n * within ACCEPT_FROM_WHITELIST_DURATION_MS from the last time computing score.\n **/ const ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = 0;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept up to this\n * number of messages from that peer.\n */ const ACCEPT_FROM_WHITELIST_MAX_MESSAGES = 128;\n/**\n * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept messages from\n * this peer up to this time duration.\n */ const ACCEPT_FROM_WHITELIST_DURATION_MS = 1000;\n/**\n * The default MeshMessageDeliveriesWindow to be used in metrics.\n */ const DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS = 1000;\n/** Wait for 1 more heartbeats before clearing a backoff */ const BACKOFF_SLACK = 1; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GossipSub: () => (/* binding */ GossipSub),\n/* harmony export */   gossipsub: () => (/* binding */ gossipsub),\n/* harmony export */   multicodec: () => (/* binding */ multicodec)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/pubsub/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"(ssr)/./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pipe */ \"(ssr)/./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pushable */ \"(ssr)/./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js\");\n/* harmony import */ var _message_decodeRpc_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./message/decodeRpc.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/decodeRpc.js\");\n/* harmony import */ var _message_rpc_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./message/rpc.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js\");\n/* harmony import */ var _message_cache_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./message-cache.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message-cache.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./metrics.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/metrics.js\");\n/* harmony import */ var _score_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./score/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js\");\n/* harmony import */ var _score_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./score/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-thresholds.js\");\n/* harmony import */ var _score_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./score/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score.js\");\n/* harmony import */ var _score_scoreMetrics_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./score/scoreMetrics.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/scoreMetrics.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/stream.js\");\n/* harmony import */ var _tracer_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tracer.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/tracer.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\");\n/* harmony import */ var _utils_buildRawMessage_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/buildRawMessage.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/buildRawMessage.js\");\n/* harmony import */ var _utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utils/create-gossip-rpc.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/create-gossip-rpc.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/messageIdToString.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./utils/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/shuffle.js\");\n/* harmony import */ var _utils_msgIdFn_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/msgIdFn.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/msgIdFn.js\");\n/* harmony import */ var _utils_multiaddr_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/multiaddr.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/multiaddr.js\");\n/* harmony import */ var _utils_publishConfig_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/publishConfig.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/publishConfig.js\");\n/* harmony import */ var _utils_set_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./utils/set.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js\");\n/* harmony import */ var _utils_time_cache_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/time-cache.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/time-cache.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst multicodec = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubIDv11;\nvar GossipStatusCode;\n(function(GossipStatusCode) {\n    GossipStatusCode[GossipStatusCode[\"started\"] = 0] = \"started\";\n    GossipStatusCode[GossipStatusCode[\"stopped\"] = 1] = \"stopped\";\n})(GossipStatusCode || (GossipStatusCode = {}));\nclass GossipSub extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.TypedEventEmitter {\n    static{\n        this.multicodec = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubIDv11;\n    }\n    constructor(components, options = {}){\n        super();\n        this.multicodecs = [\n            _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubIDv11,\n            _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubIDv10\n        ];\n        // State\n        this.peers = new Set();\n        this.streamsInbound = new Map();\n        this.streamsOutbound = new Map();\n        /** Ensures outbound streams are created sequentially */ this.outboundInflightQueue = (0,it_pushable__WEBPACK_IMPORTED_MODULE_2__.pushable)({\n            objectMode: true\n        });\n        /** Direct peers */ this.direct = new Set();\n        /** Floodsub peers */ this.floodsubPeers = new Set();\n        /**\n     * Map of peer id and AcceptRequestWhileListEntry\n     */ this.acceptFromWhitelist = new Map();\n        /**\n     * Map of topics to which peers are subscribed to\n     */ this.topics = new Map();\n        /**\n     * List of our subscriptions\n     */ this.subscriptions = new Set();\n        /**\n     * Map of topic meshes\n     * topic => peer id set\n     */ this.mesh = new Map();\n        /**\n     * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership\n     * topic => peer id set\n     */ this.fanout = new Map();\n        /**\n     * Map of last publish time for fanout topics\n     * topic => last publish time\n     */ this.fanoutLastpub = new Map();\n        /**\n     * Map of pending messages to gossip\n     * peer id => control messages\n     */ this.gossip = new Map();\n        /**\n     * Map of control messages\n     * peer id => control message\n     */ this.control = new Map();\n        /**\n     * Number of IHAVEs received from peer in the last heartbeat\n     */ this.peerhave = new Map();\n        /** Number of messages we have asked from peer in the last heartbeat */ this.iasked = new Map();\n        /** Prune backoff map */ this.backoff = new Map();\n        /**\n     * Connection direction cache, marks peers with outbound connections\n     * peer id => direction\n     */ this.outbound = new Map();\n        /**\n     * Custom validator function per topic.\n     * Must return or resolve quickly (< 100ms) to prevent causing penalties for late messages.\n     * If you need to apply validation that may require longer times use `asyncValidation` option and callback the\n     * validation result through `Gossipsub.reportValidationResult`\n     */ this.topicValidators = new Map();\n        /**\n     * Number of heartbeats since the beginning of time\n     * This allows us to amortize some resource cleanup -- eg: backoff cleanup\n     */ this.heartbeatTicks = 0;\n        this.directPeerInitial = null;\n        this.status = {\n            code: GossipStatusCode.stopped\n        };\n        this.heartbeatTimer = null;\n        this.runHeartbeat = ()=>{\n            const timer = this.metrics?.heartbeatDuration.startTimer();\n            this.heartbeat().catch((err)=>{\n                this.log(\"Error running heartbeat\", err);\n            }).finally(()=>{\n                if (timer != null) {\n                    timer();\n                }\n                // Schedule the next run if still in started status\n                if (this.status.code === GossipStatusCode.started) {\n                    // Clear previous timeout before overwriting `status.heartbeatTimeout`, it should be completed tho.\n                    clearTimeout(this.status.heartbeatTimeout);\n                    // NodeJS setInterval function is innexact, calls drift by a few miliseconds on each call.\n                    // To run the heartbeat precisely setTimeout() must be used recomputing the delay on every loop.\n                    let msToNextHeartbeat = this.opts.heartbeatInterval - (Date.now() - this.status.hearbeatStartMs) % this.opts.heartbeatInterval;\n                    // If too close to next heartbeat, skip one\n                    if (msToNextHeartbeat < this.opts.heartbeatInterval * 0.25) {\n                        msToNextHeartbeat += this.opts.heartbeatInterval;\n                        this.metrics?.heartbeatSkipped.inc();\n                    }\n                    this.status.heartbeatTimeout = setTimeout(this.runHeartbeat, msToNextHeartbeat);\n                }\n            });\n        };\n        const opts = {\n            fallbackToFloodsub: true,\n            floodPublish: true,\n            batchPublish: false,\n            doPX: false,\n            directPeers: [],\n            D: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubD,\n            Dlo: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDlo,\n            Dhi: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDhi,\n            Dscore: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDscore,\n            Dout: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDout,\n            Dlazy: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDlazy,\n            heartbeatInterval: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubHeartbeatInterval,\n            fanoutTTL: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubFanoutTTL,\n            mcacheLength: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubHistoryLength,\n            mcacheGossip: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubHistoryGossip,\n            seenTTL: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubSeenTTL,\n            gossipsubIWantFollowupMs: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubIWantFollowupTime,\n            prunePeers: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubPrunePeers,\n            pruneBackoff: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubPruneBackoff,\n            unsubcribeBackoff: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubUnsubscribeBackoff,\n            graftFloodThreshold: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubGraftFloodThreshold,\n            opportunisticGraftPeers: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubOpportunisticGraftPeers,\n            opportunisticGraftTicks: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubOpportunisticGraftTicks,\n            directConnectTicks: _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDirectConnectTicks,\n            ...options,\n            scoreParams: (0,_score_index_js__WEBPACK_IMPORTED_MODULE_5__.createPeerScoreParams)(options.scoreParams),\n            scoreThresholds: (0,_score_index_js__WEBPACK_IMPORTED_MODULE_6__.createPeerScoreThresholds)(options.scoreThresholds)\n        };\n        this.components = components;\n        this.decodeRpcLimits = opts.decodeRpcLimits ?? _message_decodeRpc_js__WEBPACK_IMPORTED_MODULE_7__.defaultDecodeRpcLimits;\n        this.globalSignaturePolicy = opts.globalSignaturePolicy ?? _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.StrictSign;\n        // Also wants to get notified of peers connected using floodsub\n        if (opts.fallbackToFloodsub) {\n            this.multicodecs.push(_constants_js__WEBPACK_IMPORTED_MODULE_3__.FloodsubID);\n        }\n        // From pubsub\n        this.log = components.logger.forComponent(opts.debugName ?? \"libp2p:gossipsub\");\n        // Gossipsub\n        this.opts = opts;\n        this.direct = new Set(opts.directPeers.map((p)=>p.id.toString()));\n        this.seenCache = new _utils_time_cache_js__WEBPACK_IMPORTED_MODULE_9__.SimpleTimeCache({\n            validityMs: opts.seenTTL\n        });\n        this.publishedMessageIds = new _utils_time_cache_js__WEBPACK_IMPORTED_MODULE_9__.SimpleTimeCache({\n            validityMs: opts.seenTTL\n        });\n        if (options.msgIdFn != null) {\n            // Use custom function\n            this.msgIdFn = options.msgIdFn;\n        } else {\n            switch(this.globalSignaturePolicy){\n                case _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.StrictSign:\n                    this.msgIdFn = _utils_msgIdFn_js__WEBPACK_IMPORTED_MODULE_10__.msgIdFnStrictSign;\n                    break;\n                case _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.StrictNoSign:\n                    this.msgIdFn = _utils_msgIdFn_js__WEBPACK_IMPORTED_MODULE_10__.msgIdFnStrictNoSign;\n                    break;\n                default:\n                    throw new Error(`Invalid globalSignaturePolicy: ${this.globalSignaturePolicy}`);\n            }\n        }\n        if (options.fastMsgIdFn != null) {\n            this.fastMsgIdFn = options.fastMsgIdFn;\n            this.fastMsgIdCache = new _utils_time_cache_js__WEBPACK_IMPORTED_MODULE_9__.SimpleTimeCache({\n                validityMs: opts.seenTTL\n            });\n        }\n        // By default, gossipsub only provide a browser friendly function to convert Uint8Array message id to string.\n        this.msgIdToStrFn = options.msgIdToStrFn ?? _utils_index_js__WEBPACK_IMPORTED_MODULE_11__.messageIdToString;\n        this.mcache = options.messageCache ?? new _message_cache_js__WEBPACK_IMPORTED_MODULE_12__.MessageCache(opts.mcacheGossip, opts.mcacheLength, this.msgIdToStrFn);\n        if (options.dataTransform != null) {\n            this.dataTransform = options.dataTransform;\n        }\n        if (options.metricsRegister != null) {\n            if (options.metricsTopicStrToLabel == null) {\n                throw Error(\"Must set metricsTopicStrToLabel with metrics\");\n            }\n            // in theory, each topic has its own meshMessageDeliveriesWindow param\n            // however in lodestar, we configure it mostly the same so just pick the max of positive ones\n            // (some topics have meshMessageDeliveriesWindow as 0)\n            const maxMeshMessageDeliveriesWindowMs = Math.max(...Object.values(opts.scoreParams.topics).map((topicParam)=>topicParam.meshMessageDeliveriesWindow), _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS);\n            const metrics = (0,_metrics_js__WEBPACK_IMPORTED_MODULE_13__.getMetrics)(options.metricsRegister, options.metricsTopicStrToLabel, {\n                gossipPromiseExpireSec: this.opts.gossipsubIWantFollowupMs / 1000,\n                behaviourPenaltyThreshold: opts.scoreParams.behaviourPenaltyThreshold,\n                maxMeshMessageDeliveriesWindowSec: maxMeshMessageDeliveriesWindowMs / 1000\n            });\n            metrics.mcacheSize.addCollect(()=>{\n                this.onScrapeMetrics(metrics);\n            });\n            for (const protocol of this.multicodecs){\n                metrics.protocolsEnabled.set({\n                    protocol\n                }, 1);\n            }\n            this.metrics = metrics;\n        } else {\n            this.metrics = null;\n        }\n        this.gossipTracer = new _tracer_js__WEBPACK_IMPORTED_MODULE_14__.IWantTracer(this.opts.gossipsubIWantFollowupMs, this.msgIdToStrFn, this.metrics);\n        /**\n         * libp2p\n         */ this.score = new _score_index_js__WEBPACK_IMPORTED_MODULE_15__.PeerScore(this.opts.scoreParams, this.metrics, this.components.logger, {\n            scoreCacheValidityMs: opts.heartbeatInterval\n        });\n        this.maxInboundStreams = options.maxInboundStreams;\n        this.maxOutboundStreams = options.maxOutboundStreams;\n        this.runOnTransientConnection = options.runOnTransientConnection;\n        this.allowedTopics = opts.allowedTopics != null ? new Set(opts.allowedTopics) : null;\n    }\n    getPeers() {\n        return [\n            ...this.peers.keys()\n        ].map((str)=>(0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__.peerIdFromString)(str));\n    }\n    isStarted() {\n        return this.status.code === GossipStatusCode.started;\n    }\n    // LIFECYCLE METHODS\n    /**\n     * Mounts the gossipsub protocol onto the libp2p node and sends our\n     * our subscriptions to every peer connected\n     */ async start() {\n        // From pubsub\n        if (this.isStarted()) {\n            return;\n        }\n        this.log(\"starting\");\n        this.publishConfig = await (0,_utils_publishConfig_js__WEBPACK_IMPORTED_MODULE_17__.getPublishConfigFromPeerId)(this.globalSignaturePolicy, this.components.peerId);\n        // Create the outbound inflight queue\n        // This ensures that outbound stream creation happens sequentially\n        this.outboundInflightQueue = (0,it_pushable__WEBPACK_IMPORTED_MODULE_2__.pushable)({\n            objectMode: true\n        });\n        (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(this.outboundInflightQueue, async (source)=>{\n            for await (const { peerId, connection } of source){\n                await this.createOutboundStream(peerId, connection);\n            }\n        }).catch((e)=>{\n            this.log.error(\"outbound inflight queue error\", e);\n        });\n        // set direct peer addresses in the address book\n        await Promise.all(this.opts.directPeers.map(async (p)=>{\n            await this.components.peerStore.merge(p.id, {\n                multiaddrs: p.addrs\n            });\n        }));\n        const registrar = this.components.registrar;\n        // Incoming streams\n        // Called after a peer dials us\n        await Promise.all(this.multicodecs.map(async (multicodec)=>registrar.handle(multicodec, this.onIncomingStream.bind(this), {\n                maxInboundStreams: this.maxInboundStreams,\n                maxOutboundStreams: this.maxOutboundStreams,\n                runOnTransientConnection: this.runOnTransientConnection\n            })));\n        // # How does Gossipsub interact with libp2p? Rough guide from Mar 2022\n        //\n        // ## Setup:\n        // Gossipsub requests libp2p to callback, TBD\n        //\n        // `this.libp2p.handle()` registers a handler for `/meshsub/1.1.0` and other Gossipsub protocols\n        // The handler callback is registered in libp2p Upgrader.protocols map.\n        //\n        // Upgrader receives an inbound connection from some transport and (`Upgrader.upgradeInbound`):\n        // - Adds encryption (NOISE in our case)\n        // - Multiplex stream\n        // - Create a muxer and register that for each new stream call Upgrader.protocols handler\n        //\n        // ## Topology\n        // - new instance of Topology (unlinked to libp2p) with handlers\n        // - registar.register(topology)\n        // register protocol with topology\n        // Topology callbacks called on connection manager changes\n        const topology = {\n            onConnect: this.onPeerConnected.bind(this),\n            onDisconnect: this.onPeerDisconnected.bind(this),\n            notifyOnTransient: this.runOnTransientConnection\n        };\n        const registrarTopologyIds = await Promise.all(this.multicodecs.map(async (multicodec)=>registrar.register(multicodec, topology)));\n        // Schedule to start heartbeat after `GossipsubHeartbeatInitialDelay`\n        const heartbeatTimeout = setTimeout(this.runHeartbeat, _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubHeartbeatInitialDelay);\n        // Then, run heartbeat every `heartbeatInterval` offset by `GossipsubHeartbeatInitialDelay`\n        this.status = {\n            code: GossipStatusCode.started,\n            registrarTopologyIds,\n            heartbeatTimeout,\n            hearbeatStartMs: Date.now() + _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubHeartbeatInitialDelay\n        };\n        this.score.start();\n        // connect to direct peers\n        this.directPeerInitial = setTimeout(()=>{\n            Promise.resolve().then(async ()=>{\n                await Promise.all(Array.from(this.direct).map(async (id)=>this.connect(id)));\n            }).catch((err)=>{\n                this.log(err);\n            });\n        }, _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubDirectConnectInitialDelay);\n        this.log(\"started\");\n    }\n    /**\n     * Unmounts the gossipsub protocol and shuts down every connection\n     */ async stop() {\n        this.log(\"stopping\");\n        // From pubsub\n        if (this.status.code !== GossipStatusCode.started) {\n            return;\n        }\n        const { registrarTopologyIds } = this.status;\n        this.status = {\n            code: GossipStatusCode.stopped\n        };\n        // unregister protocol and handlers\n        const registrar = this.components.registrar;\n        await Promise.all(this.multicodecs.map(async (multicodec)=>registrar.unhandle(multicodec)));\n        registrarTopologyIds.forEach((id)=>{\n            registrar.unregister(id);\n        });\n        this.outboundInflightQueue.end();\n        const closePromises = [];\n        for (const outboundStream of this.streamsOutbound.values()){\n            closePromises.push(outboundStream.close());\n        }\n        this.streamsOutbound.clear();\n        for (const inboundStream of this.streamsInbound.values()){\n            closePromises.push(inboundStream.close());\n        }\n        this.streamsInbound.clear();\n        await Promise.all(closePromises);\n        this.peers.clear();\n        this.subscriptions.clear();\n        // Gossipsub\n        if (this.heartbeatTimer != null) {\n            this.heartbeatTimer.cancel();\n            this.heartbeatTimer = null;\n        }\n        this.score.stop();\n        this.mesh.clear();\n        this.fanout.clear();\n        this.fanoutLastpub.clear();\n        this.gossip.clear();\n        this.control.clear();\n        this.peerhave.clear();\n        this.iasked.clear();\n        this.backoff.clear();\n        this.outbound.clear();\n        this.gossipTracer.clear();\n        this.seenCache.clear();\n        if (this.fastMsgIdCache != null) this.fastMsgIdCache.clear();\n        if (this.directPeerInitial != null) clearTimeout(this.directPeerInitial);\n        this.log(\"stopped\");\n    }\n    /** FOR DEBUG ONLY - Dump peer stats for all peers. Data is cloned, safe to mutate */ dumpPeerScoreStats() {\n        return this.score.dumpPeerScoreStats();\n    }\n    /**\n     * On an inbound stream opened\n     */ onIncomingStream({ stream, connection }) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const peerId = connection.remotePeer;\n        // add peer to router\n        this.addPeer(peerId, connection.direction, connection.remoteAddr);\n        // create inbound stream\n        this.createInboundStream(peerId, stream);\n        // attempt to create outbound stream\n        this.outboundInflightQueue.push({\n            peerId,\n            connection\n        });\n    }\n    /**\n     * Registrar notifies an established connection with pubsub protocol\n     */ onPeerConnected(peerId, connection) {\n        this.metrics?.newConnectionCount.inc({\n            status: connection.status\n        });\n        // libp2p may emit a closed connection and never issue peer:disconnect event\n        // see https://github.com/ChainSafe/js-libp2p-gossipsub/issues/398\n        if (!this.isStarted() || connection.status !== \"open\") {\n            return;\n        }\n        this.addPeer(peerId, connection.direction, connection.remoteAddr);\n        this.outboundInflightQueue.push({\n            peerId,\n            connection\n        });\n    }\n    /**\n     * Registrar notifies a closing connection with pubsub protocol\n     */ onPeerDisconnected(peerId) {\n        this.log(\"connection ended %p\", peerId);\n        this.removePeer(peerId);\n    }\n    async createOutboundStream(peerId, connection) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // TODO make this behavior more robust\n        // This behavior is different than for inbound streams\n        // If an outbound stream already exists, don't create a new stream\n        if (this.streamsOutbound.has(id)) {\n            return;\n        }\n        try {\n            const stream = new _stream_js__WEBPACK_IMPORTED_MODULE_18__.OutboundStream(await connection.newStream(this.multicodecs, {\n                runOnTransientConnection: this.runOnTransientConnection\n            }), (e)=>{\n                this.log.error(\"outbound pipe error\", e);\n            }, {\n                maxBufferSize: this.opts.maxOutboundBufferSize\n            });\n            this.log(\"create outbound stream %p\", peerId);\n            this.streamsOutbound.set(id, stream);\n            const protocol = stream.protocol;\n            if (protocol === _constants_js__WEBPACK_IMPORTED_MODULE_3__.FloodsubID) {\n                this.floodsubPeers.add(id);\n            }\n            this.metrics?.peersPerProtocol.inc({\n                protocol\n            }, 1);\n            // Immediately send own subscriptions via the newly attached stream\n            if (this.subscriptions.size > 0) {\n                this.log(\"send subscriptions to\", id);\n                this.sendSubscriptions(id, Array.from(this.subscriptions), true);\n            }\n        } catch (e) {\n            this.log.error(\"createOutboundStream error\", e);\n        }\n    }\n    createInboundStream(peerId, stream) {\n        if (!this.isStarted()) {\n            return;\n        }\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // TODO make this behavior more robust\n        // This behavior is different than for outbound streams\n        // If a peer initiates a new inbound connection\n        // we assume that one is the new canonical inbound stream\n        const priorInboundStream = this.streamsInbound.get(id);\n        if (priorInboundStream !== undefined) {\n            this.log(\"replacing existing inbound steam %s\", id);\n            priorInboundStream.close().catch((err)=>{\n                this.log.error(err);\n            });\n        }\n        this.log(\"create inbound stream %s\", id);\n        const inboundStream = new _stream_js__WEBPACK_IMPORTED_MODULE_18__.InboundStream(stream, {\n            maxDataLength: this.opts.maxInboundDataLength\n        });\n        this.streamsInbound.set(id, inboundStream);\n        this.pipePeerReadStream(peerId, inboundStream.source).catch((err)=>{\n            this.log(err);\n        });\n    }\n    /**\n     * Add a peer to the router\n     */ addPeer(peerId, direction, addr) {\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            this.log(\"new peer %p\", peerId);\n            this.peers.add(id);\n            // Add to peer scoring\n            this.score.addPeer(id);\n            const currentIP = (0,_utils_multiaddr_js__WEBPACK_IMPORTED_MODULE_19__.multiaddrToIPStr)(addr);\n            if (currentIP !== null) {\n                this.score.addIP(id, currentIP);\n            } else {\n                this.log(\"Added peer has no IP in current address %s %s\", id, addr.toString());\n            }\n            // track the connection direction. Don't allow to unset outbound\n            if (!this.outbound.has(id)) {\n                this.outbound.set(id, direction === \"outbound\");\n            }\n        }\n    }\n    /**\n     * Removes a peer from the router\n     */ removePeer(peerId) {\n        const id = peerId.toString();\n        if (!this.peers.has(id)) {\n            return;\n        }\n        // delete peer\n        this.log(\"delete peer %p\", peerId);\n        this.peers.delete(id);\n        const outboundStream = this.streamsOutbound.get(id);\n        const inboundStream = this.streamsInbound.get(id);\n        if (outboundStream != null) {\n            this.metrics?.peersPerProtocol.inc({\n                protocol: outboundStream.protocol\n            }, -1);\n        }\n        // close streams\n        outboundStream?.close().catch((err)=>{\n            this.log.error(err);\n        });\n        inboundStream?.close().catch((err)=>{\n            this.log.error(err);\n        });\n        // remove streams\n        this.streamsOutbound.delete(id);\n        this.streamsInbound.delete(id);\n        // remove peer from topics map\n        for (const peers of this.topics.values()){\n            peers.delete(id);\n        }\n        // Remove this peer from the mesh\n        for (const [topicStr, peers] of this.mesh){\n            if (peers.delete(id)) {\n                this.metrics?.onRemoveFromMesh(topicStr, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ChurnReason.Dc, 1);\n            }\n        }\n        // Remove this peer from the fanout\n        for (const peers of this.fanout.values()){\n            peers.delete(id);\n        }\n        // Remove from floodsubPeers\n        this.floodsubPeers.delete(id);\n        // Remove from gossip mapping\n        this.gossip.delete(id);\n        // Remove from control mapping\n        this.control.delete(id);\n        // Remove from backoff mapping\n        this.outbound.delete(id);\n        // Remove from peer scoring\n        this.score.removePeer(id);\n        this.acceptFromWhitelist.delete(id);\n    }\n    // API METHODS\n    get started() {\n        return this.status.code === GossipStatusCode.started;\n    }\n    /**\n     * Get a the peer-ids in a topic mesh\n     */ getMeshPeers(topic) {\n        const peersInTopic = this.mesh.get(topic);\n        return peersInTopic != null ? Array.from(peersInTopic) : [];\n    }\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     */ getSubscribers(topic) {\n        const peersInTopic = this.topics.get(topic);\n        return (peersInTopic != null ? Array.from(peersInTopic) : []).map((str)=>(0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__.peerIdFromString)(str));\n    }\n    /**\n     * Get the list of topics which the peer is subscribed to.\n     */ getTopics() {\n        return Array.from(this.subscriptions);\n    }\n    // TODO: Reviewing Pubsub API\n    // MESSAGE METHODS\n    /**\n     * Responsible for processing each RPC message received by other peers.\n     */ async pipePeerReadStream(peerId, stream) {\n        try {\n            await (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(stream, async (source)=>{\n                for await (const data of source){\n                    try {\n                        // TODO: Check max gossip message size, before decodeRpc()\n                        const rpcBytes = data.subarray();\n                        // Note: This function may throw, it must be wrapped in a try {} catch {} to prevent closing the stream.\n                        // TODO: What should we do if the entire RPC is invalid?\n                        const rpc = _message_rpc_js__WEBPACK_IMPORTED_MODULE_20__.RPC.decode(rpcBytes, {\n                            limits: {\n                                subscriptions: this.decodeRpcLimits.maxSubscriptions,\n                                messages: this.decodeRpcLimits.maxMessages,\n                                control$: {\n                                    ihave: this.decodeRpcLimits.maxIhaveMessageIDs,\n                                    iwant: this.decodeRpcLimits.maxIwantMessageIDs,\n                                    graft: this.decodeRpcLimits.maxControlMessages,\n                                    prune: this.decodeRpcLimits.maxControlMessages,\n                                    prune$: {\n                                        peers: this.decodeRpcLimits.maxPeerInfos\n                                    }\n                                }\n                            }\n                        });\n                        this.metrics?.onRpcRecv(rpc, rpcBytes.length);\n                        // Since processRpc may be overridden entirely in unsafe ways,\n                        // the simplest/safest option here is to wrap in a function and capture all errors\n                        // to prevent a top-level unhandled exception\n                        // This processing of rpc messages should happen without awaiting full validation/execution of prior messages\n                        if (this.opts.awaitRpcHandler) {\n                            try {\n                                await this.handleReceivedRpc(peerId, rpc);\n                            } catch (err) {\n                                this.metrics?.onRpcRecvError();\n                                this.log(err);\n                            }\n                        } else {\n                            this.handleReceivedRpc(peerId, rpc).catch((err)=>{\n                                this.metrics?.onRpcRecvError();\n                                this.log(err);\n                            });\n                        }\n                    } catch (e) {\n                        this.metrics?.onRpcDataError();\n                        this.log(e);\n                    }\n                }\n            });\n        } catch (err) {\n            this.metrics?.onPeerReadStreamError();\n            this.handlePeerReadStreamError(err, peerId);\n        }\n    }\n    /**\n     * Handle error when read stream pipe throws, less of the functional use but more\n     * to for testing purposes to spy on the error handling\n     * */ handlePeerReadStreamError(err, peerId) {\n        this.log.error(err);\n        this.onPeerDisconnected(peerId);\n    }\n    /**\n     * Handles an rpc request from a peer\n     */ async handleReceivedRpc(from, rpc) {\n        // Check if peer is graylisted in which case we ignore the event\n        if (!this.acceptFrom(from.toString())) {\n            this.log(\"received message from unacceptable peer %p\", from);\n            this.metrics?.rpcRecvNotAccepted.inc();\n            return;\n        }\n        const subscriptions = rpc.subscriptions != null ? rpc.subscriptions.length : 0;\n        const messages = rpc.messages != null ? rpc.messages.length : 0;\n        let ihave = 0;\n        let iwant = 0;\n        let graft = 0;\n        let prune = 0;\n        if (rpc.control != null) {\n            if (rpc.control.ihave != null) ihave = rpc.control.ihave.length;\n            if (rpc.control.iwant != null) iwant = rpc.control.iwant.length;\n            if (rpc.control.graft != null) graft = rpc.control.graft.length;\n            if (rpc.control.prune != null) prune = rpc.control.prune.length;\n        }\n        this.log(`rpc.from ${from.toString()} subscriptions ${subscriptions} messages ${messages} ihave ${ihave} iwant ${iwant} graft ${graft} prune ${prune}`);\n        // Handle received subscriptions\n        if (rpc.subscriptions != null && rpc.subscriptions.length > 0) {\n            // update peer subscriptions\n            const subscriptions = [];\n            rpc.subscriptions.forEach((subOpt)=>{\n                const topic = subOpt.topic;\n                const subscribe = subOpt.subscribe === true;\n                if (topic != null) {\n                    if (this.allowedTopics != null && !this.allowedTopics.has(topic)) {\n                        // Not allowed: subscription data-structures are not bounded by topic count\n                        // TODO: Should apply behaviour penalties?\n                        return;\n                    }\n                    this.handleReceivedSubscription(from, topic, subscribe);\n                    subscriptions.push({\n                        topic,\n                        subscribe\n                    });\n                }\n            });\n            this.safeDispatchEvent(\"subscription-change\", {\n                detail: {\n                    peerId: from,\n                    subscriptions\n                }\n            });\n        }\n        // Handle messages\n        // TODO: (up to limit)\n        for (const message of rpc.messages){\n            if (this.allowedTopics != null && !this.allowedTopics.has(message.topic)) {\n                continue;\n            }\n            const handleReceivedMessagePromise = this.handleReceivedMessage(from, message)// Should never throw, but handle just in case\n            .catch((err)=>{\n                this.metrics?.onMsgRecvError(message.topic);\n                this.log(err);\n            });\n            if (this.opts.awaitRpcMessageHandler) {\n                await handleReceivedMessagePromise;\n            }\n        }\n        // Handle control messages\n        if (rpc.control != null) {\n            await this.handleControlMessage(from.toString(), rpc.control);\n        }\n    }\n    /**\n     * Handles a subscription change from a peer\n     */ handleReceivedSubscription(from, topic, subscribe) {\n        this.log(\"subscription update from %p topic %s\", from, topic);\n        let topicSet = this.topics.get(topic);\n        if (topicSet == null) {\n            topicSet = new Set();\n            this.topics.set(topic, topicSet);\n        }\n        if (subscribe) {\n            // subscribe peer to new topic\n            topicSet.add(from.toString());\n        } else {\n            // unsubscribe from existing topic\n            topicSet.delete(from.toString());\n        }\n    // TODO: rust-libp2p has A LOT more logic here\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */ async handleReceivedMessage(from, rpcMsg) {\n        this.metrics?.onMsgRecvPreValidation(rpcMsg.topic);\n        const validationResult = await this.validateReceivedMessage(from, rpcMsg);\n        this.metrics?.onPrevalidationResult(rpcMsg.topic, validationResult.code);\n        const validationCode = validationResult.code;\n        switch(validationCode){\n            case _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.duplicate:\n                // Report the duplicate\n                this.score.duplicateMessage(from.toString(), validationResult.msgIdStr, rpcMsg.topic);\n                // due to the collision of fastMsgIdFn, 2 different messages may end up the same fastMsgId\n                // so we need to also mark the duplicate message as delivered or the promise is not resolved\n                // and peer gets penalized. See https://github.com/ChainSafe/js-libp2p-gossipsub/pull/385\n                this.gossipTracer.deliverMessage(validationResult.msgIdStr, true);\n                this.mcache.observeDuplicate(validationResult.msgIdStr, from.toString());\n                return;\n            case _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.invalid:\n                // invalid messages received\n                // metrics.register_invalid_message(&raw_message.topic)\n                // Tell peer_score about reject\n                // Reject the original source, and any duplicates we've seen from other peers.\n                if (validationResult.msgIdStr != null) {\n                    const msgIdStr = validationResult.msgIdStr;\n                    this.score.rejectMessage(from.toString(), msgIdStr, rpcMsg.topic, validationResult.reason);\n                    this.gossipTracer.rejectMessage(msgIdStr, validationResult.reason);\n                } else {\n                    this.score.rejectInvalidMessage(from.toString(), rpcMsg.topic);\n                }\n                this.metrics?.onMsgRecvInvalid(rpcMsg.topic, validationResult);\n                return;\n            case _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.valid:\n                // Tells score that message arrived (but is maybe not fully validated yet).\n                // Consider the message as delivered for gossip promises.\n                this.score.validateMessage(validationResult.messageId.msgIdStr);\n                this.gossipTracer.deliverMessage(validationResult.messageId.msgIdStr);\n                // Add the message to our memcache\n                // if no validation is required, mark the message as validated\n                this.mcache.put(validationResult.messageId, rpcMsg, !this.opts.asyncValidation);\n                // Dispatch the message to the user if we are subscribed to the topic\n                if (this.subscriptions.has(rpcMsg.topic)) {\n                    const isFromSelf = this.components.peerId.equals(from);\n                    if (!isFromSelf || this.opts.emitSelf) {\n                        super.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(\"gossipsub:message\", {\n                            detail: {\n                                propagationSource: from,\n                                msgId: validationResult.messageId.msgIdStr,\n                                msg: validationResult.msg\n                            }\n                        }));\n                        // TODO: Add option to switch between emit per topic or all messages in one\n                        super.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(\"message\", {\n                            detail: validationResult.msg\n                        }));\n                    }\n                }\n                // Forward the message to mesh peers, if no validation is required\n                // If asyncValidation is ON, expect the app layer to call reportMessageValidationResult(), then forward\n                if (!this.opts.asyncValidation) {\n                    // TODO: in rust-libp2p\n                    // .forward_msg(&msg_id, raw_message, Some(propagation_source))\n                    this.forwardMessage(validationResult.messageId.msgIdStr, rpcMsg, from.toString());\n                }\n                break;\n            default:\n                throw new Error(`Invalid validation result: ${validationCode}`);\n        }\n    }\n    /**\n     * Handles a newly received message from an RPC.\n     * May forward to all peers in the mesh.\n     */ async validateReceivedMessage(propagationSource, rpcMsg) {\n        // Fast message ID stuff\n        const fastMsgIdStr = this.fastMsgIdFn?.(rpcMsg);\n        const msgIdCached = fastMsgIdStr !== undefined ? this.fastMsgIdCache?.get(fastMsgIdStr) : undefined;\n        if (msgIdCached != null) {\n            // This message has been seen previously. Ignore it\n            return {\n                code: _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.duplicate,\n                msgIdStr: msgIdCached\n            };\n        }\n        // Perform basic validation on message and convert to RawGossipsubMessage for fastMsgIdFn()\n        const validationResult = await (0,_utils_buildRawMessage_js__WEBPACK_IMPORTED_MODULE_22__.validateToRawMessage)(this.globalSignaturePolicy, rpcMsg);\n        if (!validationResult.valid) {\n            return {\n                code: _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.invalid,\n                reason: _types_js__WEBPACK_IMPORTED_MODULE_21__.RejectReason.Error,\n                error: validationResult.error\n            };\n        }\n        const msg = validationResult.message;\n        // Try and perform the data transform to the message. If it fails, consider it invalid.\n        try {\n            if (this.dataTransform != null) {\n                msg.data = this.dataTransform.inboundTransform(rpcMsg.topic, msg.data);\n            }\n        } catch (e) {\n            this.log(\"Invalid message, transform failed\", e);\n            return {\n                code: _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.invalid,\n                reason: _types_js__WEBPACK_IMPORTED_MODULE_21__.RejectReason.Error,\n                error: _types_js__WEBPACK_IMPORTED_MODULE_21__.ValidateError.TransformFailed\n            };\n        }\n        // TODO: Check if message is from a blacklisted source or propagation origin\n        // - Reject any message from a blacklisted peer\n        // - Also reject any message that originated from a blacklisted peer\n        // - reject messages claiming to be from ourselves but not locally published\n        // Calculate the message id on the transformed data.\n        const msgId = await this.msgIdFn(msg);\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        const messageId = {\n            msgId,\n            msgIdStr\n        };\n        // Add the message to the duplicate caches\n        if (fastMsgIdStr !== undefined && this.fastMsgIdCache != null) {\n            const collision = this.fastMsgIdCache.put(fastMsgIdStr, msgIdStr);\n            if (collision) {\n                this.metrics?.fastMsgIdCacheCollision.inc();\n            }\n        }\n        if (this.seenCache.has(msgIdStr)) {\n            return {\n                code: _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.duplicate,\n                msgIdStr\n            };\n        } else {\n            this.seenCache.put(msgIdStr);\n        }\n        // (Optional) Provide custom validation here with dynamic validators per topic\n        // NOTE: This custom topicValidator() must resolve fast (< 100ms) to allow scores\n        // to not penalize peers for long validation times.\n        const topicValidator = this.topicValidators.get(rpcMsg.topic);\n        if (topicValidator != null) {\n            let acceptance;\n            // Use try {} catch {} in case topicValidator() is synchronous\n            try {\n                acceptance = await topicValidator(propagationSource, msg);\n            } catch (e) {\n                const errCode = e.code;\n                if (errCode === _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_TOPIC_VALIDATOR_IGNORE) acceptance = _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.TopicValidatorResult.Ignore;\n                if (errCode === _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_TOPIC_VALIDATOR_REJECT) acceptance = _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.TopicValidatorResult.Reject;\n                else acceptance = _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.TopicValidatorResult.Ignore;\n            }\n            if (acceptance !== _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.TopicValidatorResult.Accept) {\n                return {\n                    code: _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.invalid,\n                    reason: (0,_types_js__WEBPACK_IMPORTED_MODULE_21__.rejectReasonFromAcceptance)(acceptance),\n                    msgIdStr\n                };\n            }\n        }\n        return {\n            code: _types_js__WEBPACK_IMPORTED_MODULE_21__.MessageStatus.valid,\n            messageId,\n            msg\n        };\n    }\n    /**\n     * Return score of a peer.\n     */ getScore(peerId) {\n        return this.score.score(peerId);\n    }\n    /**\n     * Send an rpc object to a peer with subscriptions\n     */ sendSubscriptions(toPeer, topics, subscribe) {\n        this.sendRpc(toPeer, {\n            subscriptions: topics.map((topic)=>({\n                    topic,\n                    subscribe\n                })),\n            messages: []\n        });\n    }\n    /**\n     * Handles an rpc control message from a peer\n     */ async handleControlMessage(id, controlMsg) {\n        if (controlMsg === undefined) {\n            return;\n        }\n        const iwant = controlMsg.ihave != null ? this.handleIHave(id, controlMsg.ihave) : [];\n        const ihave = controlMsg.iwant != null ? this.handleIWant(id, controlMsg.iwant) : [];\n        const prune = controlMsg.graft != null ? await this.handleGraft(id, controlMsg.graft) : [];\n        controlMsg.prune != null && await this.handlePrune(id, controlMsg.prune);\n        if (iwant.length === 0 && ihave.length === 0 && prune.length === 0) {\n            return;\n        }\n        const sent = this.sendRpc(id, (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)(ihave, {\n            iwant,\n            prune\n        }));\n        const iwantMessageIds = iwant[0]?.messageIDs;\n        if (iwantMessageIds != null) {\n            if (sent) {\n                this.gossipTracer.addPromise(id, iwantMessageIds);\n            } else {\n                this.metrics?.iwantPromiseUntracked.inc(1);\n            }\n        }\n    }\n    /**\n     * Whether to accept a message from a peer\n     */ acceptFrom(id) {\n        if (this.direct.has(id)) {\n            return true;\n        }\n        const now = Date.now();\n        const entry = this.acceptFromWhitelist.get(id);\n        if (entry != null && entry.messagesAccepted < _constants_js__WEBPACK_IMPORTED_MODULE_3__.ACCEPT_FROM_WHITELIST_MAX_MESSAGES && entry.acceptUntil >= now) {\n            entry.messagesAccepted += 1;\n            return true;\n        }\n        const score = this.score.score(id);\n        if (score >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {\n            // peer is unlikely to be able to drop its score to `graylistThreshold`\n            // after 128 messages or 1s\n            this.acceptFromWhitelist.set(id, {\n                messagesAccepted: 0,\n                acceptUntil: now + _constants_js__WEBPACK_IMPORTED_MODULE_3__.ACCEPT_FROM_WHITELIST_DURATION_MS\n            });\n        } else {\n            this.acceptFromWhitelist.delete(id);\n        }\n        return score >= this.opts.scoreThresholds.graylistThreshold;\n    }\n    /**\n     * Handles IHAVE messages\n     */ handleIHave(id, ihave) {\n        if (ihave.length === 0) {\n            return [];\n        }\n        // we ignore IHAVE gossip from any peer whose score is below the gossips threshold\n        const score = this.score.score(id);\n        if (score < this.opts.scoreThresholds.gossipThreshold) {\n            this.log(\"IHAVE: ignoring peer %s with score below threshold [ score = %d ]\", id, score);\n            this.metrics?.ihaveRcvIgnored.inc({\n                reason: _metrics_js__WEBPACK_IMPORTED_MODULE_13__.IHaveIgnoreReason.LowScore\n            });\n            return [];\n        }\n        // IHAVE flood protection\n        const peerhave = (this.peerhave.get(id) ?? 0) + 1;\n        this.peerhave.set(id, peerhave);\n        if (peerhave > _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveMessages) {\n            this.log(\"IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring\", id, peerhave);\n            this.metrics?.ihaveRcvIgnored.inc({\n                reason: _metrics_js__WEBPACK_IMPORTED_MODULE_13__.IHaveIgnoreReason.MaxIhave\n            });\n            return [];\n        }\n        const iasked = this.iasked.get(id) ?? 0;\n        if (iasked >= _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveLength) {\n            this.log(\"IHAVE: peer %s has already advertised too many messages (%d); ignoring\", id, iasked);\n            this.metrics?.ihaveRcvIgnored.inc({\n                reason: _metrics_js__WEBPACK_IMPORTED_MODULE_13__.IHaveIgnoreReason.MaxIasked\n            });\n            return [];\n        }\n        // string msgId => msgId\n        const iwant = new Map();\n        ihave.forEach(({ topicID, messageIDs })=>{\n            if (topicID == null || messageIDs == null || !this.mesh.has(topicID)) {\n                return;\n            }\n            let idonthave = 0;\n            messageIDs.forEach((msgId)=>{\n                const msgIdStr = this.msgIdToStrFn(msgId);\n                if (!this.seenCache.has(msgIdStr)) {\n                    iwant.set(msgIdStr, msgId);\n                    idonthave++;\n                }\n            });\n            this.metrics?.onIhaveRcv(topicID, messageIDs.length, idonthave);\n        });\n        if (iwant.size === 0) {\n            return [];\n        }\n        let iask = iwant.size;\n        if (iask + iasked > _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveLength) {\n            iask = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveLength - iasked;\n        }\n        this.log(\"IHAVE: Asking for %d out of %d messages from %s\", iask, iwant.size, id);\n        let iwantList = Array.from(iwant.values());\n        // ask in random order\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(iwantList);\n        // truncate to the messages we are actually asking for and update the iasked counter\n        iwantList = iwantList.slice(0, iask);\n        this.iasked.set(id, iasked + iask);\n        // do not add gossipTracer promise here until a successful sendRpc()\n        return [\n            {\n                messageIDs: iwantList\n            }\n        ];\n    }\n    /**\n     * Handles IWANT messages\n     * Returns messages to send back to peer\n     */ handleIWant(id, iwant) {\n        if (iwant.length === 0) {\n            return [];\n        }\n        // we don't respond to IWANT requests from any per whose score is below the gossip threshold\n        const score = this.score.score(id);\n        if (score < this.opts.scoreThresholds.gossipThreshold) {\n            this.log(\"IWANT: ignoring peer %s with score below threshold [score = %d]\", id, score);\n            return [];\n        }\n        const ihave = new Map();\n        const iwantByTopic = new Map();\n        let iwantDonthave = 0;\n        iwant.forEach(({ messageIDs })=>{\n            messageIDs?.forEach((msgId)=>{\n                const msgIdStr = this.msgIdToStrFn(msgId);\n                const entry = this.mcache.getWithIWantCount(msgIdStr, id);\n                if (entry == null) {\n                    iwantDonthave++;\n                    return;\n                }\n                iwantByTopic.set(entry.msg.topic, 1 + (iwantByTopic.get(entry.msg.topic) ?? 0));\n                if (entry.count > _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubGossipRetransmission) {\n                    this.log(\"IWANT: Peer %s has asked for message %s too many times: ignoring request\", id, msgId);\n                    return;\n                }\n                ihave.set(msgIdStr, entry.msg);\n            });\n        });\n        this.metrics?.onIwantRcv(iwantByTopic, iwantDonthave);\n        if (ihave.size === 0) {\n            this.log(\"IWANT: Could not provide any wanted messages to %s\", id);\n            return [];\n        }\n        this.log(\"IWANT: Sending %d messages to %s\", ihave.size, id);\n        return Array.from(ihave.values());\n    }\n    /**\n     * Handles Graft messages\n     */ async handleGraft(id, graft) {\n        const prune = [];\n        const score = this.score.score(id);\n        const now = Date.now();\n        let doPX = this.opts.doPX;\n        graft.forEach(({ topicID })=>{\n            if (topicID == null) {\n                return;\n            }\n            const peersInMesh = this.mesh.get(topicID);\n            if (peersInMesh == null) {\n                // don't do PX when there is an unknown topic to avoid leaking our peers\n                doPX = false;\n                // spam hardening: ignore GRAFTs for unknown topics\n                return;\n            }\n            // check if peer is already in the mesh; if so do nothing\n            if (peersInMesh.has(id)) {\n                return;\n            }\n            // we don't GRAFT to/from direct peers; complain loudly if this happens\n            if (this.direct.has(id)) {\n                this.log(\"GRAFT: ignoring request from direct peer %s\", id);\n                // this is possibly a bug from a non-reciprical configuration; send a PRUNE\n                prune.push(topicID);\n                // but don't px\n                doPX = false;\n                return;\n            }\n            // make sure we are not backing off that peer\n            const expire = this.backoff.get(topicID)?.get(id);\n            if (typeof expire === \"number\" && now < expire) {\n                this.log(\"GRAFT: ignoring backed off peer %s\", id);\n                // add behavioral penalty\n                this.score.addPenalty(id, 1, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ScorePenalty.GraftBackoff);\n                // no PX\n                doPX = false;\n                // check the flood cutoff -- is the GRAFT coming too fast?\n                const floodCutoff = expire + this.opts.graftFloodThreshold - this.opts.pruneBackoff;\n                if (now < floodCutoff) {\n                    // extra penalty\n                    this.score.addPenalty(id, 1, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ScorePenalty.GraftBackoff);\n                }\n                // refresh the backoff\n                this.addBackoff(id, topicID);\n                prune.push(topicID);\n                return;\n            }\n            // check the score\n            if (score < 0) {\n                // we don't GRAFT peers with negative score\n                this.log(\"GRAFT: ignoring peer %s with negative score: score=%d, topic=%s\", id, score, topicID);\n                // we do send them PRUNE however, because it's a matter of protocol correctness\n                prune.push(topicID);\n                // but we won't PX to them\n                doPX = false;\n                // add/refresh backoff so that we don't reGRAFT too early even if the score decays\n                this.addBackoff(id, topicID);\n                return;\n            }\n            // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts\n            // from peers with outbound connections; this is a defensive check to restrict potential\n            // mesh takeover attacks combined with love bombing\n            if (peersInMesh.size >= this.opts.Dhi && !(this.outbound.get(id) ?? false)) {\n                prune.push(topicID);\n                this.addBackoff(id, topicID);\n                return;\n            }\n            this.log(\"GRAFT: Add mesh link from %s in %s\", id, topicID);\n            this.score.graft(id, topicID);\n            peersInMesh.add(id);\n            this.metrics?.onAddToMesh(topicID, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.InclusionReason.Subscribed, 1);\n        });\n        if (prune.length === 0) {\n            return [];\n        }\n        const onUnsubscribe = false;\n        return Promise.all(prune.map(async (topic)=>this.makePrune(id, topic, doPX, onUnsubscribe)));\n    }\n    /**\n     * Handles Prune messages\n     */ async handlePrune(id, prune) {\n        const score = this.score.score(id);\n        for (const { topicID, backoff, peers } of prune){\n            if (topicID == null) {\n                continue;\n            }\n            const peersInMesh = this.mesh.get(topicID);\n            if (peersInMesh == null) {\n                return;\n            }\n            this.log(\"PRUNE: Remove mesh link to %s in %s\", id, topicID);\n            this.score.prune(id, topicID);\n            if (peersInMesh.has(id)) {\n                peersInMesh.delete(id);\n                this.metrics?.onRemoveFromMesh(topicID, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ChurnReason.Prune, 1);\n            }\n            // is there a backoff specified by the peer? if so obey it\n            if (typeof backoff === \"number\" && backoff > 0) {\n                this.doAddBackoff(id, topicID, backoff * 1000);\n            } else {\n                this.addBackoff(id, topicID);\n            }\n            // PX\n            if (peers != null && peers.length > 0) {\n                // we ignore PX from peers with insufficient scores\n                if (score < this.opts.scoreThresholds.acceptPXThreshold) {\n                    this.log(\"PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]\", id, score, topicID);\n                    continue;\n                }\n                await this.pxConnect(peers);\n            }\n        }\n    }\n    /**\n     * Add standard backoff log for a peer in a topic\n     */ addBackoff(id, topic) {\n        this.doAddBackoff(id, topic, this.opts.pruneBackoff);\n    }\n    /**\n     * Add backoff expiry interval for a peer in a topic\n     *\n     * @param id\n     * @param topic\n     * @param intervalMs - backoff duration in milliseconds\n     */ doAddBackoff(id, topic, intervalMs) {\n        let backoff = this.backoff.get(topic);\n        if (backoff == null) {\n            backoff = new Map();\n            this.backoff.set(topic, backoff);\n        }\n        const expire = Date.now() + intervalMs;\n        const existingExpire = backoff.get(id) ?? 0;\n        if (existingExpire < expire) {\n            backoff.set(id, expire);\n        }\n    }\n    /**\n     * Apply penalties from broken IHAVE/IWANT promises\n     */ applyIwantPenalties() {\n        this.gossipTracer.getBrokenPromises().forEach((count, p)=>{\n            this.log(\"peer %s didn't follow up in %d IWANT requests; adding penalty\", p, count);\n            this.score.addPenalty(p, count, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ScorePenalty.BrokenPromise);\n        });\n    }\n    /**\n     * Clear expired backoff expiries\n     */ clearBackoff() {\n        // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much\n        if (this.heartbeatTicks % _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubPruneBackoffTicks !== 0) {\n            return;\n        }\n        const now = Date.now();\n        this.backoff.forEach((backoff, topic)=>{\n            backoff.forEach((expire, id)=>{\n                // add some slack time to the expiration, see https://github.com/libp2p/specs/pull/289\n                if (expire + _constants_js__WEBPACK_IMPORTED_MODULE_3__.BACKOFF_SLACK * this.opts.heartbeatInterval < now) {\n                    backoff.delete(id);\n                }\n            });\n            if (backoff.size === 0) {\n                this.backoff.delete(topic);\n            }\n        });\n    }\n    /**\n     * Maybe reconnect to direct peers\n     */ async directConnect() {\n        const toconnect = [];\n        this.direct.forEach((id)=>{\n            if (!this.streamsOutbound.has(id)) {\n                toconnect.push(id);\n            }\n        });\n        await Promise.all(toconnect.map(async (id)=>this.connect(id)));\n    }\n    /**\n     * Maybe attempt connection given signed peer records\n     */ async pxConnect(peers) {\n        if (peers.length > this.opts.prunePeers) {\n            (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(peers);\n            peers = peers.slice(0, this.opts.prunePeers);\n        }\n        const toconnect = [];\n        await Promise.all(peers.map(async (pi)=>{\n            if (pi.peerID == null) {\n                return;\n            }\n            const peer = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__.peerIdFromBytes)(pi.peerID);\n            const p = peer.toString();\n            if (this.peers.has(p)) {\n                return;\n            }\n            if (pi.signedPeerRecord == null) {\n                toconnect.push(p);\n                return;\n            }\n            // The peer sent us a signed record\n            // This is not a record from the peer who sent the record, but another peer who is connected with it\n            // Ensure that it is valid\n            try {\n                if (!await this.components.peerStore.consumePeerRecord(pi.signedPeerRecord, peer)) {\n                    this.log(\"bogus peer record obtained through px: could not add peer record to address book\");\n                    return;\n                }\n                toconnect.push(p);\n            } catch (e) {\n                this.log(\"bogus peer record obtained through px: invalid signature or not a peer record\");\n            }\n        }));\n        if (toconnect.length === 0) {\n            return;\n        }\n        await Promise.all(toconnect.map(async (id)=>this.connect(id)));\n    }\n    /**\n     * Connect to a peer using the gossipsub protocol\n     */ async connect(id) {\n        this.log(\"Initiating connection with %s\", id);\n        const peerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__.peerIdFromString)(id);\n        const connection = await this.components.connectionManager.openConnection(peerId);\n        for (const multicodec of this.multicodecs){\n            for (const topology of this.components.registrar.getTopologies(multicodec)){\n                topology.onConnect?.(peerId, connection);\n            }\n        }\n    }\n    /**\n     * Subscribes to a topic\n     */ subscribe(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error(\"Pubsub has not started\");\n        }\n        if (!this.subscriptions.has(topic)) {\n            this.subscriptions.add(topic);\n            for (const peerId of this.peers.keys()){\n                this.sendSubscriptions(peerId, [\n                    topic\n                ], true);\n            }\n        }\n        this.join(topic);\n    }\n    /**\n     * Unsubscribe to a topic\n     */ unsubscribe(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error(\"Pubsub is not started\");\n        }\n        const wasSubscribed = this.subscriptions.delete(topic);\n        this.log(\"unsubscribe from %s - am subscribed %s\", topic, wasSubscribed);\n        if (wasSubscribed) {\n            for (const peerId of this.peers.keys()){\n                this.sendSubscriptions(peerId, [\n                    topic\n                ], false);\n            }\n        }\n        this.leave(topic);\n    }\n    /**\n     * Join topic\n     */ join(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error(\"Gossipsub has not started\");\n        }\n        // if we are already in the mesh, return\n        if (this.mesh.has(topic)) {\n            return;\n        }\n        this.log(\"JOIN %s\", topic);\n        this.metrics?.onJoin(topic);\n        const toAdd = new Set();\n        const backoff = this.backoff.get(topic);\n        // check if we have mesh_n peers in fanout[topic] and add them to the mesh if we do,\n        // removing the fanout entry.\n        const fanoutPeers = this.fanout.get(topic);\n        if (fanoutPeers != null) {\n            // Remove fanout entry and the last published time\n            this.fanout.delete(topic);\n            this.fanoutLastpub.delete(topic);\n            // remove explicit peers, peers with negative scores, and backoffed peers\n            fanoutPeers.forEach((id)=>{\n                if (!this.direct.has(id) && this.score.score(id) >= 0 && (backoff == null || !backoff.has(id))) {\n                    toAdd.add(id);\n                }\n            });\n            this.metrics?.onAddToMesh(topic, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.InclusionReason.Fanout, toAdd.size);\n        }\n        // check if we need to get more peers, which we randomly select\n        if (toAdd.size < this.opts.D) {\n            const fanoutCount = toAdd.size;\n            const newPeers = this.getRandomGossipPeers(topic, this.opts.D, (id)=>// filter direct peers and peers with negative score\n                !toAdd.has(id) && !this.direct.has(id) && this.score.score(id) >= 0 && (backoff == null || !backoff.has(id)));\n            newPeers.forEach((peer)=>{\n                toAdd.add(peer);\n            });\n            this.metrics?.onAddToMesh(topic, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.InclusionReason.Random, toAdd.size - fanoutCount);\n        }\n        this.mesh.set(topic, toAdd);\n        toAdd.forEach((id)=>{\n            this.log(\"JOIN: Add mesh link to %s in %s\", id, topic);\n            this.sendGraft(id, topic);\n        // rust-libp2p\n        // - peer_score.graft()\n        // - Self::control_pool_add()\n        // - peer_added_to_mesh()\n        });\n    }\n    /**\n     * Leave topic\n     */ leave(topic) {\n        if (this.status.code !== GossipStatusCode.started) {\n            throw new Error(\"Gossipsub has not started\");\n        }\n        this.log(\"LEAVE %s\", topic);\n        this.metrics?.onLeave(topic);\n        // Send PRUNE to mesh peers\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers != null) {\n            Promise.all(Array.from(meshPeers).map(async (id)=>{\n                this.log(\"LEAVE: Remove mesh link to %s in %s\", id, topic);\n                await this.sendPrune(id, topic);\n            })).catch((err)=>{\n                this.log(\"Error sending prunes to mesh peers\", err);\n            });\n            this.mesh.delete(topic);\n        }\n    }\n    selectPeersToForward(topic, propagationSource, excludePeers) {\n        const tosend = new Set();\n        // Add explicit peers\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic != null) {\n            this.direct.forEach((peer)=>{\n                if (peersInTopic.has(peer) && propagationSource !== peer && !(excludePeers?.has(peer) ?? false)) {\n                    tosend.add(peer);\n                }\n            });\n            // As of Mar 2022, spec + golang-libp2p include this while rust-libp2p does not\n            // rust-libp2p: https://github.com/libp2p/rust-libp2p/blob/6cc3b4ec52c922bfcf562a29b5805c3150e37c75/protocols/gossipsub/src/behaviour.rs#L2693\n            // spec: https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.0.md?plain=1#L361\n            this.floodsubPeers.forEach((peer)=>{\n                if (peersInTopic.has(peer) && propagationSource !== peer && !(excludePeers?.has(peer) ?? false) && this.score.score(peer) >= this.opts.scoreThresholds.publishThreshold) {\n                    tosend.add(peer);\n                }\n            });\n        }\n        // add mesh peers\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers != null && meshPeers.size > 0) {\n            meshPeers.forEach((peer)=>{\n                if (propagationSource !== peer && !(excludePeers?.has(peer) ?? false)) {\n                    tosend.add(peer);\n                }\n            });\n        }\n        return tosend;\n    }\n    selectPeersToPublish(topic) {\n        const tosend = new Set();\n        const tosendCount = {\n            direct: 0,\n            floodsub: 0,\n            mesh: 0,\n            fanout: 0\n        };\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic != null) {\n            // flood-publish behavior\n            // send to direct peers and _all_ peers meeting the publishThreshold\n            if (this.opts.floodPublish) {\n                peersInTopic.forEach((id)=>{\n                    if (this.direct.has(id)) {\n                        tosend.add(id);\n                        tosendCount.direct++;\n                    } else if (this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n                        tosend.add(id);\n                        tosendCount.floodsub++;\n                    }\n                });\n            } else {\n                // non-flood-publish behavior\n                // send to direct peers, subscribed floodsub peers\n                // and some mesh peers above publishThreshold\n                // direct peers (if subscribed)\n                this.direct.forEach((id)=>{\n                    if (peersInTopic.has(id)) {\n                        tosend.add(id);\n                        tosendCount.direct++;\n                    }\n                });\n                // floodsub peers\n                // Note: if there are no floodsub peers, we save a loop through peersInTopic Map\n                this.floodsubPeers.forEach((id)=>{\n                    if (peersInTopic.has(id) && this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n                        tosend.add(id);\n                        tosendCount.floodsub++;\n                    }\n                });\n                // Gossipsub peers handling\n                const meshPeers = this.mesh.get(topic);\n                if (meshPeers != null && meshPeers.size > 0) {\n                    meshPeers.forEach((peer)=>{\n                        tosend.add(peer);\n                        tosendCount.mesh++;\n                    });\n                // eslint-disable-next-line @typescript-eslint/brace-style\n                } else {\n                    const fanoutPeers = this.fanout.get(topic);\n                    if (fanoutPeers != null && fanoutPeers.size > 0) {\n                        fanoutPeers.forEach((peer)=>{\n                            tosend.add(peer);\n                            tosendCount.fanout++;\n                        });\n                    // eslint-disable-next-line @typescript-eslint/brace-style\n                    } else {\n                        // If we are not in the fanout, then pick peers in topic above the publishThreshold\n                        const newFanoutPeers = this.getRandomGossipPeers(topic, this.opts.D, (id)=>{\n                            return this.score.score(id) >= this.opts.scoreThresholds.publishThreshold;\n                        });\n                        // eslint-disable-next-line max-depth\n                        if (newFanoutPeers.size > 0) {\n                            this.fanout.set(topic, newFanoutPeers);\n                            newFanoutPeers.forEach((peer)=>{\n                                tosend.add(peer);\n                                tosendCount.fanout++;\n                            });\n                        }\n                    }\n                    // We are publishing to fanout peers - update the time we published\n                    this.fanoutLastpub.set(topic, Date.now());\n                }\n            }\n        }\n        return {\n            tosend,\n            tosendCount\n        };\n    }\n    /**\n     * Forwards a message from our peers.\n     *\n     * For messages published by us (the app layer), this class uses `publish`\n     */ forwardMessage(msgIdStr, rawMsg, propagationSource, excludePeers) {\n        // message is fully validated inform peer_score\n        if (propagationSource != null) {\n            this.score.deliverMessage(propagationSource, msgIdStr, rawMsg.topic);\n        }\n        const tosend = this.selectPeersToForward(rawMsg.topic, propagationSource, excludePeers);\n        // Note: Don't throw if tosend is empty, we can have a mesh with a single peer\n        // forward the message to peers\n        tosend.forEach((id)=>{\n            // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n            this.sendRpc(id, (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([\n                rawMsg\n            ]));\n        });\n        this.metrics?.onForwardMsg(rawMsg.topic, tosend.size);\n    }\n    /**\n     * App layer publishes a message to peers, return number of peers this message is published to\n     * Note: `async` due to crypto only if `StrictSign`, otherwise it's a sync fn.\n     *\n     * For messages not from us, this class uses `forwardMessage`.\n     */ async publish(topic, data, opts) {\n        const startMs = Date.now();\n        const transformedData = this.dataTransform != null ? this.dataTransform.outboundTransform(topic, data) : data;\n        if (this.publishConfig == null) {\n            throw Error(\"PublishError.Uninitialized\");\n        }\n        // Prepare raw message with user's publishConfig\n        const { raw: rawMsg, msg } = await (0,_utils_buildRawMessage_js__WEBPACK_IMPORTED_MODULE_22__.buildRawMessage)(this.publishConfig, topic, data, transformedData);\n        // calculate the message id from the un-transformed data\n        const msgId = await this.msgIdFn(msg);\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        // Current publish opt takes precedence global opts, while preserving false value\n        const ignoreDuplicatePublishError = opts?.ignoreDuplicatePublishError ?? this.opts.ignoreDuplicatePublishError;\n        if (this.seenCache.has(msgIdStr)) {\n            // This message has already been seen. We don't re-publish messages that have already\n            // been published on the network.\n            if (ignoreDuplicatePublishError) {\n                this.metrics?.onPublishDuplicateMsg(topic);\n                return {\n                    recipients: []\n                };\n            }\n            throw Error(\"PublishError.Duplicate\");\n        }\n        const { tosend, tosendCount } = this.selectPeersToPublish(topic);\n        const willSendToSelf = this.opts.emitSelf && this.subscriptions.has(topic);\n        // Current publish opt takes precedence global opts, while preserving false value\n        const allowPublishToZeroPeers = opts?.allowPublishToZeroPeers ?? this.opts.allowPublishToZeroPeers;\n        if (tosend.size === 0 && !allowPublishToZeroPeers && !willSendToSelf) {\n            throw Error(\"PublishError.InsufficientPeers\");\n        }\n        // If the message isn't a duplicate and we have sent it to some peers add it to the\n        // duplicate cache and memcache.\n        this.seenCache.put(msgIdStr);\n        // all published messages are valid\n        this.mcache.put({\n            msgId,\n            msgIdStr\n        }, rawMsg, true);\n        // If the message is anonymous or has a random author add it to the published message ids cache.\n        this.publishedMessageIds.put(msgIdStr);\n        const batchPublish = opts?.batchPublish ?? this.opts.batchPublish;\n        const rpc = (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([\n            rawMsg\n        ]);\n        if (batchPublish) {\n            this.sendRpcInBatch(tosend, rpc);\n        } else {\n            // Send to set of peers aggregated from direct, mesh, fanout\n            for (const id of tosend){\n                // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n                const sent = this.sendRpc(id, rpc);\n                // did not actually send the message\n                if (!sent) {\n                    tosend.delete(id);\n                }\n            }\n        }\n        const durationMs = Date.now() - startMs;\n        this.metrics?.onPublishMsg(topic, tosendCount, tosend.size, rawMsg.data != null ? rawMsg.data.length : 0, durationMs);\n        // Dispatch the message to the user if we are subscribed to the topic\n        if (willSendToSelf) {\n            tosend.add(this.components.peerId.toString());\n            super.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(\"gossipsub:message\", {\n                detail: {\n                    propagationSource: this.components.peerId,\n                    msgId: msgIdStr,\n                    msg\n                }\n            }));\n            // TODO: Add option to switch between emit per topic or all messages in one\n            super.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(\"message\", {\n                detail: msg\n            }));\n        }\n        return {\n            recipients: Array.from(tosend.values()).map((str)=>(0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__.peerIdFromString)(str))\n        };\n    }\n    /**\n     * Send the same data in batch to tosend list without considering cached control messages\n     * This is not only faster but also avoid allocating memory for each peer\n     * see https://github.com/ChainSafe/js-libp2p-gossipsub/issues/344\n     */ sendRpcInBatch(tosend, rpc) {\n        const rpcBytes = _message_rpc_js__WEBPACK_IMPORTED_MODULE_20__.RPC.encode(rpc);\n        const prefixedData = it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.encode.single(rpcBytes);\n        for (const id of tosend){\n            const outboundStream = this.streamsOutbound.get(id);\n            if (outboundStream == null) {\n                this.log(`Cannot send RPC to ${id} as there is no open stream to it available`);\n                tosend.delete(id);\n                continue;\n            }\n            try {\n                outboundStream.pushPrefixed(prefixedData);\n            } catch (e) {\n                tosend.delete(id);\n                this.log.error(`Cannot send rpc to ${id}`, e);\n            }\n            this.metrics?.onRpcSent(rpc, rpcBytes.length);\n        }\n    }\n    /**\n     * This function should be called when `asyncValidation` is `true` after\n     * the message got validated by the caller. Messages are stored in the `mcache` and\n     * validation is expected to be fast enough that the messages should still exist in the cache.\n     * There are three possible validation outcomes and the outcome is given in acceptance.\n     *\n     * If acceptance = `MessageAcceptance.Accept` the message will get propagated to the\n     * network. The `propagation_source` parameter indicates who the message was received by and\n     * will not be forwarded back to that peer.\n     *\n     * If acceptance = `MessageAcceptance.Reject` the message will be deleted from the memcache\n     * and the P₄ penalty will be applied to the `propagationSource`.\n     *\n     * If acceptance = `MessageAcceptance.Ignore` the message will be deleted from the memcache\n     * but no P₄ penalty will be applied.\n     *\n     * This function will return true if the message was found in the cache and false if was not\n     * in the cache anymore.\n     *\n     * This should only be called once per message.\n     */ reportMessageValidationResult(msgId, propagationSource, acceptance) {\n        let cacheEntry;\n        if (acceptance === _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.TopicValidatorResult.Accept) {\n            cacheEntry = this.mcache.validate(msgId);\n            if (cacheEntry != null) {\n                const { message: rawMsg, originatingPeers } = cacheEntry;\n                // message is fully validated inform peer_score\n                this.score.deliverMessage(propagationSource, msgId, rawMsg.topic);\n                this.forwardMessage(msgId, cacheEntry.message, propagationSource, originatingPeers);\n            }\n        // else, Message not in cache. Ignoring forwarding\n        // eslint-disable-next-line @typescript-eslint/brace-style\n        } else {\n            cacheEntry = this.mcache.remove(msgId);\n            if (cacheEntry != null) {\n                const rejectReason = (0,_types_js__WEBPACK_IMPORTED_MODULE_21__.rejectReasonFromAcceptance)(acceptance);\n                const { message: rawMsg, originatingPeers } = cacheEntry;\n                // Tell peer_score about reject\n                // Reject the original source, and any duplicates we've seen from other peers.\n                this.score.rejectMessage(propagationSource, msgId, rawMsg.topic, rejectReason);\n                for (const peer of originatingPeers){\n                    this.score.rejectMessage(peer, msgId, rawMsg.topic, rejectReason);\n                }\n            }\n        // else, Message not in cache. Ignoring forwarding\n        }\n        const firstSeenTimestampMs = this.score.messageFirstSeenTimestampMs(msgId);\n        this.metrics?.onReportValidation(cacheEntry, acceptance, firstSeenTimestampMs);\n    }\n    /**\n     * Sends a GRAFT message to a peer\n     */ sendGraft(id, topic) {\n        const graft = [\n            {\n                topicID: topic\n            }\n        ];\n        const out = (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([], {\n            graft\n        });\n        this.sendRpc(id, out);\n    }\n    /**\n     * Sends a PRUNE message to a peer\n     */ async sendPrune(id, topic) {\n        // this is only called from leave() function\n        const onUnsubscribe = true;\n        const prune = [\n            await this.makePrune(id, topic, this.opts.doPX, onUnsubscribe)\n        ];\n        const out = (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([], {\n            prune\n        });\n        this.sendRpc(id, out);\n    }\n    /**\n     * Send an rpc object to a peer\n     */ sendRpc(id, rpc) {\n        const outboundStream = this.streamsOutbound.get(id);\n        if (outboundStream == null) {\n            this.log(`Cannot send RPC to ${id} as there is no open stream to it available`);\n            return false;\n        }\n        // piggyback control message retries\n        const ctrl = this.control.get(id);\n        if (ctrl != null) {\n            this.piggybackControl(id, rpc, ctrl);\n            this.control.delete(id);\n        }\n        // piggyback gossip\n        const ihave = this.gossip.get(id);\n        if (ihave != null) {\n            this.piggybackGossip(id, rpc, ihave);\n            this.gossip.delete(id);\n        }\n        const rpcBytes = _message_rpc_js__WEBPACK_IMPORTED_MODULE_20__.RPC.encode(rpc);\n        try {\n            outboundStream.push(rpcBytes);\n        } catch (e) {\n            this.log.error(`Cannot send rpc to ${id}`, e);\n            // if the peer had control messages or gossip, re-attach\n            if (ctrl != null) {\n                this.control.set(id, ctrl);\n            }\n            if (ihave != null) {\n                this.gossip.set(id, ihave);\n            }\n            return false;\n        }\n        this.metrics?.onRpcSent(rpc, rpcBytes.length);\n        return true;\n    }\n    /** Mutates `outRpc` adding graft and prune control messages */ piggybackControl(id, outRpc, ctrl) {\n        const rpc = (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.ensureControl)(outRpc);\n        for (const graft of ctrl.graft){\n            if (graft.topicID != null && (this.mesh.get(graft.topicID)?.has(id) ?? false)) {\n                rpc.control.graft.push(graft);\n            }\n        }\n        for (const prune of ctrl.prune){\n            if (prune.topicID != null && !(this.mesh.get(prune.topicID)?.has(id) ?? false)) {\n                rpc.control.prune.push(prune);\n            }\n        }\n    }\n    /** Mutates `outRpc` adding ihave control messages */ piggybackGossip(id, outRpc, ihave) {\n        const rpc = (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.ensureControl)(outRpc);\n        rpc.control.ihave = ihave;\n    }\n    /**\n     * Send graft and prune messages\n     *\n     * @param tograft - peer id => topic[]\n     * @param toprune - peer id => topic[]\n     */ async sendGraftPrune(tograft, toprune, noPX) {\n        const doPX = this.opts.doPX;\n        const onUnsubscribe = false;\n        for (const [id, topics] of tograft){\n            const graft = topics.map((topicID)=>({\n                    topicID\n                }));\n            let prune = [];\n            // If a peer also has prunes, process them now\n            const pruning = toprune.get(id);\n            if (pruning != null) {\n                prune = await Promise.all(pruning.map(async (topicID)=>this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false), onUnsubscribe)));\n                toprune.delete(id);\n            }\n            this.sendRpc(id, (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([], {\n                graft,\n                prune\n            }));\n        }\n        for (const [id, topics] of toprune){\n            const prune = await Promise.all(topics.map(async (topicID)=>this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false), onUnsubscribe)));\n            this.sendRpc(id, (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([], {\n                prune\n            }));\n        }\n    }\n    /**\n     * Emits gossip - Send IHAVE messages to a random set of gossip peers\n     */ emitGossip(peersToGossipByTopic) {\n        const gossipIDsByTopic = this.mcache.getGossipIDs(new Set(peersToGossipByTopic.keys()));\n        for (const [topic, peersToGossip] of peersToGossipByTopic){\n            this.doEmitGossip(topic, peersToGossip, gossipIDsByTopic.get(topic) ?? []);\n        }\n    }\n    /**\n     * Send gossip messages to GossipFactor peers above threshold with a minimum of D_lazy\n     * Peers are randomly selected from the heartbeat which exclude mesh + fanout peers\n     * We also exclude direct peers, as there is no reason to emit gossip to them\n     *\n     * @param topic\n     * @param candidateToGossip - peers to gossip\n     * @param messageIDs - message ids to gossip\n     */ doEmitGossip(topic, candidateToGossip, messageIDs) {\n        if (messageIDs.length === 0) {\n            return;\n        }\n        // shuffle to emit in random order\n        (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(messageIDs);\n        // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list\n        if (messageIDs.length > _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveLength) {\n            // we do the truncation (with shuffling) per peer below\n            this.log(\"too many messages for gossip; will truncate IHAVE list (%d messages)\", messageIDs.length);\n        }\n        if (candidateToGossip.size === 0) return;\n        let target = this.opts.Dlazy;\n        const factor = _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubGossipFactor * candidateToGossip.size;\n        let peersToGossip = candidateToGossip;\n        if (factor > target) {\n            target = factor;\n        }\n        if (target > peersToGossip.size) {\n            target = peersToGossip.size;\n        } else {\n            // only shuffle if needed\n            peersToGossip = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(Array.from(peersToGossip)).slice(0, target);\n        }\n        // Emit the IHAVE gossip to the selected peers up to the target\n        peersToGossip.forEach((id)=>{\n            let peerMessageIDs = messageIDs;\n            if (messageIDs.length > _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveLength) {\n                // shuffle and slice message IDs per peer so that we emit a different set for each peer\n                // we have enough reduncancy in the system that this will significantly increase the message\n                // coverage when we do truncate\n                peerMessageIDs = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(peerMessageIDs.slice()).slice(0, _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubMaxIHaveLength);\n            }\n            this.pushGossip(id, {\n                topicID: topic,\n                messageIDs: peerMessageIDs\n            });\n        });\n    }\n    /**\n     * Flush gossip and control messages\n     */ flush() {\n        // send gossip first, which will also piggyback control\n        for (const [peer, ihave] of this.gossip.entries()){\n            this.gossip.delete(peer);\n            this.sendRpc(peer, (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([], {\n                ihave\n            }));\n        }\n        // send the remaining control messages\n        for (const [peer, control] of this.control.entries()){\n            this.control.delete(peer);\n            const out = (0,_utils_create_gossip_rpc_js__WEBPACK_IMPORTED_MODULE_23__.createGossipRpc)([], {\n                graft: control.graft,\n                prune: control.prune\n            });\n            this.sendRpc(peer, out);\n        }\n    }\n    /**\n     * Adds new IHAVE messages to pending gossip\n     */ pushGossip(id, controlIHaveMsgs) {\n        this.log(\"Add gossip to %s\", id);\n        const gossip = this.gossip.get(id) ?? [];\n        this.gossip.set(id, gossip.concat(controlIHaveMsgs));\n    }\n    /**\n     * Make a PRUNE control message for a peer in a topic\n     */ async makePrune(id, topic, doPX, onUnsubscribe) {\n        this.score.prune(id, topic);\n        if (this.streamsOutbound.get(id)?.protocol === _constants_js__WEBPACK_IMPORTED_MODULE_3__.GossipsubIDv10) {\n            // Gossipsub v1.0 -- no backoff, the peer won't be able to parse it anyway\n            return {\n                topicID: topic,\n                peers: []\n            };\n        }\n        // backoff is measured in seconds\n        // GossipsubPruneBackoff and GossipsubUnsubscribeBackoff are measured in milliseconds\n        // The protobuf has it as a uint64\n        const backoffMs = onUnsubscribe ? this.opts.unsubcribeBackoff : this.opts.pruneBackoff;\n        const backoff = backoffMs / 1000;\n        this.doAddBackoff(id, topic, backoffMs);\n        if (!doPX) {\n            return {\n                topicID: topic,\n                peers: [],\n                backoff\n            };\n        }\n        // select peers for Peer eXchange\n        const peers = this.getRandomGossipPeers(topic, this.opts.prunePeers, (xid)=>{\n            return xid !== id && this.score.score(xid) >= 0;\n        });\n        const px = await Promise.all(Array.from(peers).map(async (peerId)=>{\n            // see if we have a signed record to send back; if we don't, just send\n            // the peer ID and let the pruned peer find them in the DHT -- we can't trust\n            // unsigned address records through PX anyways\n            // Finding signed records in the DHT is not supported at the time of writing in js-libp2p\n            const id = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_16__.peerIdFromString)(peerId);\n            let peerInfo;\n            try {\n                peerInfo = await this.components.peerStore.get(id);\n            } catch (err) {\n                if (err.code !== \"ERR_NOT_FOUND\") {\n                    throw err;\n                }\n            }\n            return {\n                peerID: id.toBytes(),\n                signedPeerRecord: peerInfo?.peerRecordEnvelope\n            };\n        }));\n        return {\n            topicID: topic,\n            peers: px,\n            backoff\n        };\n    }\n    /**\n     * Maintains the mesh and fanout maps in gossipsub.\n     */ async heartbeat() {\n        const { D, Dlo, Dhi, Dscore, Dout, fanoutTTL } = this.opts;\n        this.heartbeatTicks++;\n        // cache scores throught the heartbeat\n        const scores = new Map();\n        const getScore = (id)=>{\n            let s = scores.get(id);\n            if (s === undefined) {\n                s = this.score.score(id);\n                scores.set(id, s);\n            }\n            return s;\n        };\n        // peer id => topic[]\n        const tograft = new Map();\n        // peer id => topic[]\n        const toprune = new Map();\n        // peer id => don't px\n        const noPX = new Map();\n        // clean up expired backoffs\n        this.clearBackoff();\n        // clean up peerhave/iasked counters\n        this.peerhave.clear();\n        this.metrics?.cacheSize.set({\n            cache: \"iasked\"\n        }, this.iasked.size);\n        this.iasked.clear();\n        // apply IWANT request penalties\n        this.applyIwantPenalties();\n        // ensure direct peers are connected\n        if (this.heartbeatTicks % this.opts.directConnectTicks === 0) {\n            // we only do this every few ticks to allow pending connections to complete and account for restarts/downtime\n            await this.directConnect();\n        }\n        // EXTRA: Prune caches\n        this.fastMsgIdCache?.prune();\n        this.seenCache.prune();\n        this.gossipTracer.prune();\n        this.publishedMessageIds.prune();\n        /**\n         * Instead of calling getRandomGossipPeers multiple times to:\n         * + get more mesh peers\n         * + more outbound peers\n         * + oppportunistic grafting\n         * + emitGossip\n         *\n         * We want to loop through the topic peers only a single time and prepare gossip peers for all topics to improve the performance\n         */ const peersToGossipByTopic = new Map();\n        // maintain the mesh for topics we have joined\n        // eslint-disable-next-line complexity\n        this.mesh.forEach((peers, topic)=>{\n            const peersInTopic = this.topics.get(topic);\n            const candidateMeshPeers = new Set();\n            const peersToGossip = new Set();\n            peersToGossipByTopic.set(topic, peersToGossip);\n            if (peersInTopic != null) {\n                const shuffledPeers = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(Array.from(peersInTopic));\n                const backoff = this.backoff.get(topic);\n                for (const id of shuffledPeers){\n                    const peerStreams = this.streamsOutbound.get(id);\n                    if (peerStreams != null && this.multicodecs.includes(peerStreams.protocol) && !peers.has(id) && !this.direct.has(id)) {\n                        const score = getScore(id);\n                        if ((backoff == null || !backoff.has(id)) && score >= 0) candidateMeshPeers.add(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= this.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n                    }\n                }\n            }\n            // prune/graft helper functions (defined per topic)\n            const prunePeer = (id, reason)=>{\n                this.log(\"HEARTBEAT: Remove mesh link to %s in %s\", id, topic);\n                // no need to update peer score here as we do it in makePrune\n                // add prune backoff record\n                this.addBackoff(id, topic);\n                // remove peer from mesh\n                peers.delete(id);\n                // after pruning a peer from mesh, we want to gossip topic to it if its score meet the gossip threshold\n                if (getScore(id) >= this.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n                this.metrics?.onRemoveFromMesh(topic, reason, 1);\n                // add to toprune\n                const topics = toprune.get(id);\n                if (topics == null) {\n                    toprune.set(id, [\n                        topic\n                    ]);\n                } else {\n                    topics.push(topic);\n                }\n            };\n            const graftPeer = (id, reason)=>{\n                this.log(\"HEARTBEAT: Add mesh link to %s in %s\", id, topic);\n                // update peer score\n                this.score.graft(id, topic);\n                // add peer to mesh\n                peers.add(id);\n                // when we add a new mesh peer, we don't want to gossip messages to it\n                peersToGossip.delete(id);\n                this.metrics?.onAddToMesh(topic, reason, 1);\n                // add to tograft\n                const topics = tograft.get(id);\n                if (topics == null) {\n                    tograft.set(id, [\n                        topic\n                    ]);\n                } else {\n                    topics.push(topic);\n                }\n            };\n            // drop all peers with negative score, without PX\n            peers.forEach((id)=>{\n                const score = getScore(id);\n                // Record the score\n                if (score < 0) {\n                    this.log(\"HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s\", id, score, topic);\n                    prunePeer(id, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ChurnReason.BadScore);\n                    noPX.set(id, true);\n                }\n            });\n            // do we have enough peers?\n            if (peers.size < Dlo) {\n                const ineed = D - peers.size;\n                // slice up to first `ineed` items and remove them from candidateMeshPeers\n                // same to `const newMeshPeers = candidateMeshPeers.slice(0, ineed)`\n                const newMeshPeers = (0,_utils_set_js__WEBPACK_IMPORTED_MODULE_25__.removeFirstNItemsFromSet)(candidateMeshPeers, ineed);\n                newMeshPeers.forEach((p)=>{\n                    graftPeer(p, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.InclusionReason.NotEnough);\n                });\n            }\n            // do we have to many peers?\n            if (peers.size > Dhi) {\n                let peersArray = Array.from(peers);\n                // sort by score\n                peersArray.sort((a, b)=>getScore(b) - getScore(a));\n                // We keep the first D_score peers by score and the remaining up to D randomly\n                // under the constraint that we keep D_out peers in the mesh (if we have that many)\n                peersArray = peersArray.slice(0, Dscore).concat((0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(peersArray.slice(Dscore)));\n                // count the outbound peers we are keeping\n                let outbound = 0;\n                peersArray.slice(0, D).forEach((p)=>{\n                    if (this.outbound.get(p) ?? false) {\n                        outbound++;\n                    }\n                });\n                // if it's less than D_out, bubble up some outbound peers from the random selection\n                if (outbound < Dout) {\n                    const rotate = (i)=>{\n                        // rotate the peersArray to the right and put the ith peer in the front\n                        const p = peersArray[i];\n                        for(let j = i; j > 0; j--){\n                            peersArray[j] = peersArray[j - 1];\n                        }\n                        peersArray[0] = p;\n                    };\n                    // first bubble up all outbound peers already in the selection to the front\n                    if (outbound > 0) {\n                        let ihave = outbound;\n                        for(let i = 1; i < D && ihave > 0; i++){\n                            // eslint-disable-next-line max-depth\n                            if (this.outbound.get(peersArray[i]) ?? false) {\n                                rotate(i);\n                                ihave--;\n                            }\n                        }\n                    }\n                    // now bubble up enough outbound peers outside the selection to the front\n                    let ineed = D - outbound;\n                    for(let i = D; i < peersArray.length && ineed > 0; i++){\n                        if (this.outbound.get(peersArray[i]) ?? false) {\n                            rotate(i);\n                            ineed--;\n                        }\n                    }\n                }\n                // prune the excess peers\n                peersArray.slice(D).forEach((p)=>{\n                    prunePeer(p, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.ChurnReason.Excess);\n                });\n            }\n            // do we have enough outbound peers?\n            if (peers.size >= Dlo) {\n                // count the outbound peers we have\n                let outbound = 0;\n                peers.forEach((p)=>{\n                    if (this.outbound.get(p) ?? false) {\n                        outbound++;\n                    }\n                });\n                // if it's less than D_out, select some peers with outbound connections and graft them\n                if (outbound < Dout) {\n                    const ineed = Dout - outbound;\n                    const newMeshPeers = (0,_utils_set_js__WEBPACK_IMPORTED_MODULE_25__.removeItemsFromSet)(candidateMeshPeers, ineed, (id)=>this.outbound.get(id) === true);\n                    newMeshPeers.forEach((p)=>{\n                        graftPeer(p, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.InclusionReason.Outbound);\n                    });\n                }\n            }\n            // should we try to improve the mesh with opportunistic grafting?\n            if (this.heartbeatTicks % this.opts.opportunisticGraftTicks === 0 && peers.size > 1) {\n                // Opportunistic grafting works as follows: we check the median score of peers in the\n                // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at\n                // random with score over the median.\n                // The intention is to (slowly) improve an underperforming mesh by introducing good\n                // scoring peers that may have been gossiping at us. This allows us to get out of sticky\n                // situations where we are stuck with poor peers and also recover from churn of good peers.\n                // now compute the median peer score in the mesh\n                const peersList = Array.from(peers).sort((a, b)=>getScore(a) - getScore(b));\n                const medianIndex = Math.floor(peers.size / 2);\n                const medianScore = getScore(peersList[medianIndex]);\n                // if the median score is below the threshold, select a better peer (if any) and GRAFT\n                if (medianScore < this.opts.scoreThresholds.opportunisticGraftThreshold) {\n                    const ineed = this.opts.opportunisticGraftPeers;\n                    const newMeshPeers = (0,_utils_set_js__WEBPACK_IMPORTED_MODULE_25__.removeItemsFromSet)(candidateMeshPeers, ineed, (id)=>getScore(id) > medianScore);\n                    for (const id of newMeshPeers){\n                        this.log(\"HEARTBEAT: Opportunistically graft peer %s on topic %s\", id, topic);\n                        graftPeer(id, _metrics_js__WEBPACK_IMPORTED_MODULE_13__.InclusionReason.Opportunistic);\n                    }\n                }\n            }\n        });\n        // expire fanout for topics we haven't published to in a while\n        const now = Date.now();\n        this.fanoutLastpub.forEach((lastpb, topic)=>{\n            if (lastpb + fanoutTTL < now) {\n                this.fanout.delete(topic);\n                this.fanoutLastpub.delete(topic);\n            }\n        });\n        // maintain our fanout for topics we are publishing but we have not joined\n        this.fanout.forEach((fanoutPeers, topic)=>{\n            // checks whether our peers are still in the topic and have a score above the publish threshold\n            const topicPeers = this.topics.get(topic);\n            fanoutPeers.forEach((id)=>{\n                if (!(topicPeers?.has(id) ?? false) || getScore(id) < this.opts.scoreThresholds.publishThreshold) {\n                    fanoutPeers.delete(id);\n                }\n            });\n            const peersInTopic = this.topics.get(topic);\n            const candidateFanoutPeers = [];\n            // the fanout map contains topics to which we are not subscribed.\n            const peersToGossip = new Set();\n            peersToGossipByTopic.set(topic, peersToGossip);\n            if (peersInTopic != null) {\n                const shuffledPeers = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(Array.from(peersInTopic));\n                for (const id of shuffledPeers){\n                    const peerStreams = this.streamsOutbound.get(id);\n                    if (peerStreams != null && this.multicodecs.includes(peerStreams.protocol) && !fanoutPeers.has(id) && !this.direct.has(id)) {\n                        const score = getScore(id);\n                        if (score >= this.opts.scoreThresholds.publishThreshold) candidateFanoutPeers.push(id);\n                        // instead of having to find gossip peers after heartbeat which require another loop\n                        // we prepare peers to gossip in a topic within heartbeat to improve performance\n                        if (score >= this.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n                    }\n                }\n            }\n            // do we need more peers?\n            if (fanoutPeers.size < D) {\n                const ineed = D - fanoutPeers.size;\n                candidateFanoutPeers.slice(0, ineed).forEach((id)=>{\n                    fanoutPeers.add(id);\n                    peersToGossip?.delete(id);\n                });\n            }\n        });\n        this.emitGossip(peersToGossipByTopic);\n        // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n        await this.sendGraftPrune(tograft, toprune, noPX);\n        // flush pending gossip that wasn't piggybacked above\n        this.flush();\n        // advance the message history window\n        this.mcache.shift();\n        this.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(\"gossipsub:heartbeat\"));\n    }\n    /**\n     * Given a topic, returns up to count peers subscribed to that topic\n     * that pass an optional filter function\n     *\n     * @param topic\n     * @param count\n     * @param filter - a function to filter acceptable peers\n     */ getRandomGossipPeers(topic, count, filter = ()=>true) {\n        const peersInTopic = this.topics.get(topic);\n        if (peersInTopic == null) {\n            return new Set();\n        }\n        // Adds all peers using our protocol\n        // that also pass the filter function\n        let peers = [];\n        peersInTopic.forEach((id)=>{\n            const peerStreams = this.streamsOutbound.get(id);\n            if (peerStreams == null) {\n                return;\n            }\n            if (this.multicodecs.includes(peerStreams.protocol) && filter(id)) {\n                peers.push(id);\n            }\n        });\n        // Pseudo-randomly shuffles peers\n        peers = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_24__.shuffle)(peers);\n        if (count > 0 && peers.length > count) {\n            peers = peers.slice(0, count);\n        }\n        return new Set(peers);\n    }\n    onScrapeMetrics(metrics) {\n        /* Data structure sizes */ metrics.mcacheSize.set(this.mcache.size);\n        metrics.mcacheNotValidatedCount.set(this.mcache.notValidatedCount);\n        // Arbitrary size\n        metrics.cacheSize.set({\n            cache: \"direct\"\n        }, this.direct.size);\n        metrics.cacheSize.set({\n            cache: \"seenCache\"\n        }, this.seenCache.size);\n        metrics.cacheSize.set({\n            cache: \"fastMsgIdCache\"\n        }, this.fastMsgIdCache?.size ?? 0);\n        metrics.cacheSize.set({\n            cache: \"publishedMessageIds\"\n        }, this.publishedMessageIds.size);\n        metrics.cacheSize.set({\n            cache: \"mcache\"\n        }, this.mcache.size);\n        metrics.cacheSize.set({\n            cache: \"score\"\n        }, this.score.size);\n        metrics.cacheSize.set({\n            cache: \"gossipTracer.promises\"\n        }, this.gossipTracer.size);\n        metrics.cacheSize.set({\n            cache: \"gossipTracer.requests\"\n        }, this.gossipTracer.requestMsByMsgSize);\n        // Bounded by topic\n        metrics.cacheSize.set({\n            cache: \"topics\"\n        }, this.topics.size);\n        metrics.cacheSize.set({\n            cache: \"subscriptions\"\n        }, this.subscriptions.size);\n        metrics.cacheSize.set({\n            cache: \"mesh\"\n        }, this.mesh.size);\n        metrics.cacheSize.set({\n            cache: \"fanout\"\n        }, this.fanout.size);\n        // Bounded by peer\n        metrics.cacheSize.set({\n            cache: \"peers\"\n        }, this.peers.size);\n        metrics.cacheSize.set({\n            cache: \"streamsOutbound\"\n        }, this.streamsOutbound.size);\n        metrics.cacheSize.set({\n            cache: \"streamsInbound\"\n        }, this.streamsInbound.size);\n        metrics.cacheSize.set({\n            cache: \"acceptFromWhitelist\"\n        }, this.acceptFromWhitelist.size);\n        metrics.cacheSize.set({\n            cache: \"gossip\"\n        }, this.gossip.size);\n        metrics.cacheSize.set({\n            cache: \"control\"\n        }, this.control.size);\n        metrics.cacheSize.set({\n            cache: \"peerhave\"\n        }, this.peerhave.size);\n        metrics.cacheSize.set({\n            cache: \"outbound\"\n        }, this.outbound.size);\n        // 2D nested data structure\n        let backoffSize = 0;\n        const now = Date.now();\n        metrics.connectedPeersBackoffSec.reset();\n        for (const backoff of this.backoff.values()){\n            backoffSize += backoff.size;\n            for (const [peer, expiredMs] of backoff.entries()){\n                if (this.peers.has(peer)) {\n                    metrics.connectedPeersBackoffSec.observe(Math.max(0, expiredMs - now) / 1000);\n                }\n            }\n        }\n        metrics.cacheSize.set({\n            cache: \"backoff\"\n        }, backoffSize);\n        // Peer counts\n        for (const [topicStr, peers] of this.topics){\n            metrics.topicPeersCount.set({\n                topicStr\n            }, peers.size);\n        }\n        for (const [topicStr, peers] of this.mesh){\n            metrics.meshPeerCounts.set({\n                topicStr\n            }, peers.size);\n        }\n        // Peer scores\n        const scores = [];\n        const scoreByPeer = new Map();\n        metrics.behaviourPenalty.reset();\n        for (const peerIdStr of this.peers.keys()){\n            const score = this.score.score(peerIdStr);\n            scores.push(score);\n            scoreByPeer.set(peerIdStr, score);\n            metrics.behaviourPenalty.observe(this.score.peerStats.get(peerIdStr)?.behaviourPenalty ?? 0);\n        }\n        metrics.registerScores(scores, this.opts.scoreThresholds);\n        // Breakdown score per mesh topicLabel\n        metrics.registerScorePerMesh(this.mesh, scoreByPeer);\n        // Breakdown on each score weight\n        const sw = (0,_score_scoreMetrics_js__WEBPACK_IMPORTED_MODULE_26__.computeAllPeersScoreWeights)(this.peers.keys(), this.score.peerStats, this.score.params, this.score.peerIPs, metrics.topicStrToLabel);\n        metrics.registerScoreWeights(sw);\n    }\n}\nfunction gossipsub(init = {}) {\n    return (components)=>new GossipSub(components, init);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message-cache.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message-cache.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageCache: () => (/* binding */ MessageCache)\n/* harmony export */ });\nclass MessageCache {\n    /**\n     * Holds history of messages in timebounded history arrays\n     */ constructor(/**\n     * The number of indices in the cache history used for gossiping. That means that a message\n     * won't get gossiped anymore when shift got called `gossip` many times after inserting the\n     * message in the cache.\n     */ gossip, historyCapacity, msgIdToStrFn){\n        this.msgs = new Map();\n        this.history = [];\n        /** Track with accounting of messages in the mcache that are not yet validated */ this.notValidatedCount = 0;\n        this.gossip = gossip;\n        this.msgIdToStrFn = msgIdToStrFn;\n        for(let i = 0; i < historyCapacity; i++){\n            this.history[i] = [];\n        }\n    }\n    get size() {\n        return this.msgs.size;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     * Returns true if the message is not known and is inserted in the cache\n     */ put(messageId, msg, validated = false) {\n        const { msgIdStr } = messageId;\n        // Don't add duplicate entries to the cache.\n        if (this.msgs.has(msgIdStr)) {\n            return false;\n        }\n        this.msgs.set(msgIdStr, {\n            message: msg,\n            validated,\n            originatingPeers: new Set(),\n            iwantCounts: new Map()\n        });\n        this.history[0].push({\n            ...messageId,\n            topic: msg.topic\n        });\n        if (!validated) {\n            this.notValidatedCount++;\n        }\n        return true;\n    }\n    observeDuplicate(msgId, fromPeerIdStr) {\n        const entry = this.msgs.get(msgId);\n        if (entry != null && // if the message is already validated, we don't need to store extra peers sending us\n        // duplicates as the message has already been forwarded\n        !entry.validated) {\n            entry.originatingPeers.add(fromPeerIdStr);\n        }\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     */ get(msgId) {\n        return this.msgs.get(this.msgIdToStrFn(msgId))?.message;\n    }\n    /**\n     * Increases the iwant count for the given message by one and returns the message together\n     * with the iwant if the message exists.\n     */ getWithIWantCount(msgIdStr, p) {\n        const msg = this.msgs.get(msgIdStr);\n        if (msg == null) {\n            return null;\n        }\n        const count = (msg.iwantCounts.get(p) ?? 0) + 1;\n        msg.iwantCounts.set(p, count);\n        return {\n            msg: msg.message,\n            count\n        };\n    }\n    /**\n     * Retrieves a list of message IDs for a set of topics\n     */ getGossipIDs(topics) {\n        const msgIdsByTopic = new Map();\n        for(let i = 0; i < this.gossip; i++){\n            this.history[i].forEach((entry)=>{\n                const msg = this.msgs.get(entry.msgIdStr);\n                if ((msg?.validated ?? false) && topics.has(entry.topic)) {\n                    let msgIds = msgIdsByTopic.get(entry.topic);\n                    if (msgIds == null) {\n                        msgIds = [];\n                        msgIdsByTopic.set(entry.topic, msgIds);\n                    }\n                    msgIds.push(entry.msgId);\n                }\n            });\n        }\n        return msgIdsByTopic;\n    }\n    /**\n     * Gets a message with msgId and tags it as validated.\n     * This function also returns the known peers that have sent us this message. This is used to\n     * prevent us sending redundant messages to peers who have already propagated it.\n     */ validate(msgId) {\n        const entry = this.msgs.get(msgId);\n        if (entry == null) {\n            return null;\n        }\n        if (!entry.validated) {\n            this.notValidatedCount--;\n        }\n        const { message, originatingPeers } = entry;\n        entry.validated = true;\n        // Clear the known peers list (after a message is validated, it is forwarded and we no\n        // longer need to store the originating peers).\n        entry.originatingPeers = new Set();\n        return {\n            message,\n            originatingPeers\n        };\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     */ shift() {\n        const lastCacheEntries = this.history[this.history.length - 1];\n        lastCacheEntries.forEach((cacheEntry)=>{\n            const entry = this.msgs.get(cacheEntry.msgIdStr);\n            if (entry != null) {\n                this.msgs.delete(cacheEntry.msgIdStr);\n                if (!entry.validated) {\n                    this.notValidatedCount--;\n                }\n            }\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n    remove(msgId) {\n        const entry = this.msgs.get(msgId);\n        if (entry == null) {\n            return null;\n        }\n        // Keep the message on the history vector, it will be dropped on a shift()\n        this.msgs.delete(msgId);\n        return entry;\n    }\n} //# sourceMappingURL=message-cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message-cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/decodeRpc.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/decodeRpc.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultDecodeRpcLimits: () => (/* binding */ defaultDecodeRpcLimits)\n/* harmony export */ });\nconst defaultDecodeRpcLimits = {\n    maxSubscriptions: Infinity,\n    maxMessages: Infinity,\n    maxIhaveMessageIDs: Infinity,\n    maxIwantMessageIDs: Infinity,\n    maxControlMessages: Infinity,\n    maxPeerInfos: Infinity\n}; //# sourceMappingURL=decodeRpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL21lc3NhZ2UvZGVjb2RlUnBjLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSx5QkFBeUI7SUFDbENDLGtCQUFrQkM7SUFDbEJDLGFBQWFEO0lBQ2JFLG9CQUFvQkY7SUFDcEJHLG9CQUFvQkg7SUFDcEJJLG9CQUFvQko7SUFDcEJLLGNBQWNMO0FBQ2xCLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvbWVzc2FnZS9kZWNvZGVScGMuanM/ZGY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZGVmYXVsdERlY29kZVJwY0xpbWl0cyA9IHtcbiAgICBtYXhTdWJzY3JpcHRpb25zOiBJbmZpbml0eSxcbiAgICBtYXhNZXNzYWdlczogSW5maW5pdHksXG4gICAgbWF4SWhhdmVNZXNzYWdlSURzOiBJbmZpbml0eSxcbiAgICBtYXhJd2FudE1lc3NhZ2VJRHM6IEluZmluaXR5LFxuICAgIG1heENvbnRyb2xNZXNzYWdlczogSW5maW5pdHksXG4gICAgbWF4UGVlckluZm9zOiBJbmZpbml0eVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kZVJwYy5qcy5tYXAiXSwibmFtZXMiOlsiZGVmYXVsdERlY29kZVJwY0xpbWl0cyIsIm1heFN1YnNjcmlwdGlvbnMiLCJJbmZpbml0eSIsIm1heE1lc3NhZ2VzIiwibWF4SWhhdmVNZXNzYWdlSURzIiwibWF4SXdhbnRNZXNzYWdlSURzIiwibWF4Q29udHJvbE1lc3NhZ2VzIiwibWF4UGVlckluZm9zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/decodeRpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RPC: () => (/* binding */ RPC)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"(ssr)/./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */ /* eslint-disable complexity */ /* eslint-disable @typescript-eslint/no-namespace */ /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */ /* eslint-disable @typescript-eslint/no-empty-interface */ \nvar RPC;\n(function(RPC) {\n    let SubOpts;\n    (function(SubOpts) {\n        let _codec;\n        SubOpts.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.subscribe != null) {\n                        w.uint32(8);\n                        w.bool(obj.subscribe);\n                    }\n                    if (obj.topic != null) {\n                        w.uint32(18);\n                        w.string(obj.topic);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {};\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    obj.subscribe = reader.bool();\n                                    break;\n                                }\n                            case 2:\n                                {\n                                    obj.topic = reader.string();\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        SubOpts.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, SubOpts.codec());\n        };\n        SubOpts.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, SubOpts.codec(), opts);\n        };\n    })(SubOpts = RPC.SubOpts || (RPC.SubOpts = {}));\n    let Message;\n    (function(Message) {\n        let _codec;\n        Message.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.from != null) {\n                        w.uint32(10);\n                        w.bytes(obj.from);\n                    }\n                    if (obj.data != null) {\n                        w.uint32(18);\n                        w.bytes(obj.data);\n                    }\n                    if (obj.seqno != null) {\n                        w.uint32(26);\n                        w.bytes(obj.seqno);\n                    }\n                    if (obj.topic != null && obj.topic !== \"\") {\n                        w.uint32(34);\n                        w.string(obj.topic);\n                    }\n                    if (obj.signature != null) {\n                        w.uint32(42);\n                        w.bytes(obj.signature);\n                    }\n                    if (obj.key != null) {\n                        w.uint32(50);\n                        w.bytes(obj.key);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {\n                        topic: \"\"\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    obj.from = reader.bytes();\n                                    break;\n                                }\n                            case 2:\n                                {\n                                    obj.data = reader.bytes();\n                                    break;\n                                }\n                            case 3:\n                                {\n                                    obj.seqno = reader.bytes();\n                                    break;\n                                }\n                            case 4:\n                                {\n                                    obj.topic = reader.string();\n                                    break;\n                                }\n                            case 5:\n                                {\n                                    obj.signature = reader.bytes();\n                                    break;\n                                }\n                            case 6:\n                                {\n                                    obj.key = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Message.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Message.codec());\n        };\n        Message.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Message.codec(), opts);\n        };\n    })(Message = RPC.Message || (RPC.Message = {}));\n    let ControlMessage;\n    (function(ControlMessage) {\n        let _codec;\n        ControlMessage.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.ihave != null) {\n                        for (const value of obj.ihave){\n                            w.uint32(10);\n                            RPC.ControlIHave.codec().encode(value, w);\n                        }\n                    }\n                    if (obj.iwant != null) {\n                        for (const value of obj.iwant){\n                            w.uint32(18);\n                            RPC.ControlIWant.codec().encode(value, w);\n                        }\n                    }\n                    if (obj.graft != null) {\n                        for (const value of obj.graft){\n                            w.uint32(26);\n                            RPC.ControlGraft.codec().encode(value, w);\n                        }\n                    }\n                    if (obj.prune != null) {\n                        for (const value of obj.prune){\n                            w.uint32(34);\n                            RPC.ControlPrune.codec().encode(value, w);\n                        }\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {\n                        ihave: [],\n                        iwant: [],\n                        graft: [],\n                        prune: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    if (opts.limits?.ihave != null && obj.ihave.length === opts.limits.ihave) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"ihave\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.ihave.push(RPC.ControlIHave.codec().decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2:\n                                {\n                                    if (opts.limits?.iwant != null && obj.iwant.length === opts.limits.iwant) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"iwant\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.iwant.push(RPC.ControlIWant.codec().decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3:\n                                {\n                                    if (opts.limits?.graft != null && obj.graft.length === opts.limits.graft) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"graft\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.graft.push(RPC.ControlGraft.codec().decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 4:\n                                {\n                                    if (opts.limits?.prune != null && obj.prune.length === opts.limits.prune) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"prune\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.prune.push(RPC.ControlPrune.codec().decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        ControlMessage.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, ControlMessage.codec());\n        };\n        ControlMessage.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, ControlMessage.codec(), opts);\n        };\n    })(ControlMessage = RPC.ControlMessage || (RPC.ControlMessage = {}));\n    let ControlIHave;\n    (function(ControlIHave) {\n        let _codec;\n        ControlIHave.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.topicID != null) {\n                        w.uint32(10);\n                        w.string(obj.topicID);\n                    }\n                    if (obj.messageIDs != null) {\n                        for (const value of obj.messageIDs){\n                            w.uint32(18);\n                            w.bytes(value);\n                        }\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {\n                        messageIDs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    obj.topicID = reader.string();\n                                    break;\n                                }\n                            case 2:\n                                {\n                                    if (opts.limits?.messageIDs != null && obj.messageIDs.length === opts.limits.messageIDs) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"messageIDs\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.messageIDs.push(reader.bytes());\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        ControlIHave.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, ControlIHave.codec());\n        };\n        ControlIHave.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, ControlIHave.codec(), opts);\n        };\n    })(ControlIHave = RPC.ControlIHave || (RPC.ControlIHave = {}));\n    let ControlIWant;\n    (function(ControlIWant) {\n        let _codec;\n        ControlIWant.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.messageIDs != null) {\n                        for (const value of obj.messageIDs){\n                            w.uint32(10);\n                            w.bytes(value);\n                        }\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {\n                        messageIDs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    if (opts.limits?.messageIDs != null && obj.messageIDs.length === opts.limits.messageIDs) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"messageIDs\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.messageIDs.push(reader.bytes());\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        ControlIWant.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, ControlIWant.codec());\n        };\n        ControlIWant.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, ControlIWant.codec(), opts);\n        };\n    })(ControlIWant = RPC.ControlIWant || (RPC.ControlIWant = {}));\n    let ControlGraft;\n    (function(ControlGraft) {\n        let _codec;\n        ControlGraft.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.topicID != null) {\n                        w.uint32(10);\n                        w.string(obj.topicID);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {};\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    obj.topicID = reader.string();\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        ControlGraft.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, ControlGraft.codec());\n        };\n        ControlGraft.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, ControlGraft.codec(), opts);\n        };\n    })(ControlGraft = RPC.ControlGraft || (RPC.ControlGraft = {}));\n    let ControlPrune;\n    (function(ControlPrune) {\n        let _codec;\n        ControlPrune.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.topicID != null) {\n                        w.uint32(10);\n                        w.string(obj.topicID);\n                    }\n                    if (obj.peers != null) {\n                        for (const value of obj.peers){\n                            w.uint32(18);\n                            RPC.PeerInfo.codec().encode(value, w);\n                        }\n                    }\n                    if (obj.backoff != null) {\n                        w.uint32(24);\n                        w.uint64Number(obj.backoff);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {\n                        peers: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    obj.topicID = reader.string();\n                                    break;\n                                }\n                            case 2:\n                                {\n                                    if (opts.limits?.peers != null && obj.peers.length === opts.limits.peers) {\n                                        throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"peers\" had too many elements', \"ERR_MAX_LENGTH\");\n                                    }\n                                    obj.peers.push(RPC.PeerInfo.codec().decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3:\n                                {\n                                    obj.backoff = reader.uint64Number();\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        ControlPrune.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, ControlPrune.codec());\n        };\n        ControlPrune.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, ControlPrune.codec(), opts);\n        };\n    })(ControlPrune = RPC.ControlPrune || (RPC.ControlPrune = {}));\n    let PeerInfo;\n    (function(PeerInfo) {\n        let _codec;\n        PeerInfo.codec = ()=>{\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.peerID != null) {\n                        w.uint32(10);\n                        w.bytes(obj.peerID);\n                    }\n                    if (obj.signedPeerRecord != null) {\n                        w.uint32(18);\n                        w.bytes(obj.signedPeerRecord);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length, opts = {})=>{\n                    const obj = {};\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while(reader.pos < end){\n                        const tag = reader.uint32();\n                        switch(tag >>> 3){\n                            case 1:\n                                {\n                                    obj.peerID = reader.bytes();\n                                    break;\n                                }\n                            case 2:\n                                {\n                                    obj.signedPeerRecord = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                {\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        PeerInfo.encode = (obj)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PeerInfo.codec());\n        };\n        PeerInfo.decode = (buf, opts)=>{\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PeerInfo.codec(), opts);\n        };\n    })(PeerInfo = RPC.PeerInfo || (RPC.PeerInfo = {}));\n    let _codec;\n    RPC.codec = ()=>{\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.subscriptions != null) {\n                    for (const value of obj.subscriptions){\n                        w.uint32(10);\n                        RPC.SubOpts.codec().encode(value, w);\n                    }\n                }\n                if (obj.messages != null) {\n                    for (const value of obj.messages){\n                        w.uint32(18);\n                        RPC.Message.codec().encode(value, w);\n                    }\n                }\n                if (obj.control != null) {\n                    w.uint32(26);\n                    RPC.ControlMessage.codec().encode(obj.control, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length, opts = {})=>{\n                const obj = {\n                    subscriptions: [],\n                    messages: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while(reader.pos < end){\n                    const tag = reader.uint32();\n                    switch(tag >>> 3){\n                        case 1:\n                            {\n                                if (opts.limits?.subscriptions != null && obj.subscriptions.length === opts.limits.subscriptions) {\n                                    throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"subscriptions\" had too many elements', \"ERR_MAX_LENGTH\");\n                                }\n                                obj.subscriptions.push(RPC.SubOpts.codec().decode(reader, reader.uint32()));\n                                break;\n                            }\n                        case 2:\n                            {\n                                if (opts.limits?.messages != null && obj.messages.length === opts.limits.messages) {\n                                    throw new protons_runtime__WEBPACK_IMPORTED_MODULE_0__.CodeError('decode error - map field \"messages\" had too many elements', \"ERR_MAX_LENGTH\");\n                                }\n                                obj.messages.push(RPC.Message.codec().decode(reader, reader.uint32()));\n                                break;\n                            }\n                        case 3:\n                            {\n                                obj.control = RPC.ControlMessage.codec().decode(reader, reader.uint32());\n                                break;\n                            }\n                        default:\n                            {\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    RPC.encode = (obj)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, RPC.codec());\n    };\n    RPC.decode = (buf, opts)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, RPC.codec(), opts);\n    };\n})(RPC || (RPC = {})); //# sourceMappingURL=rpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/metrics.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/metrics.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChurnReason: () => (/* binding */ ChurnReason),\n/* harmony export */   IHaveIgnoreReason: () => (/* binding */ IHaveIgnoreReason),\n/* harmony export */   InclusionReason: () => (/* binding */ InclusionReason),\n/* harmony export */   MessageSource: () => (/* binding */ MessageSource),\n/* harmony export */   ScorePenalty: () => (/* binding */ ScorePenalty),\n/* harmony export */   ScoreThreshold: () => (/* binding */ ScoreThreshold),\n/* harmony export */   getMetrics: () => (/* binding */ getMetrics)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/pubsub/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\");\n\n\nvar MessageSource;\n(function(MessageSource) {\n    MessageSource[\"forward\"] = \"forward\";\n    MessageSource[\"publish\"] = \"publish\";\n})(MessageSource || (MessageSource = {}));\nvar InclusionReason;\n(function(InclusionReason) {\n    /** Peer was a fanaout peer. */ InclusionReason[\"Fanout\"] = \"fanout\";\n    /** Included from random selection. */ InclusionReason[\"Random\"] = \"random\";\n    /** Peer subscribed. */ InclusionReason[\"Subscribed\"] = \"subscribed\";\n    /** On heartbeat, peer was included to fill the outbound quota. */ InclusionReason[\"Outbound\"] = \"outbound\";\n    /** On heartbeat, not enough peers in mesh */ InclusionReason[\"NotEnough\"] = \"not_enough\";\n    /** On heartbeat opportunistic grafting due to low mesh score */ InclusionReason[\"Opportunistic\"] = \"opportunistic\";\n})(InclusionReason || (InclusionReason = {}));\n/// Reasons why a peer was removed from the mesh.\nvar ChurnReason;\n(function(ChurnReason) {\n    /// Peer disconnected.\n    ChurnReason[\"Dc\"] = \"disconnected\";\n    /// Peer had a bad score.\n    ChurnReason[\"BadScore\"] = \"bad_score\";\n    /// Peer sent a PRUNE.\n    ChurnReason[\"Prune\"] = \"prune\";\n    /// Too many peers.\n    ChurnReason[\"Excess\"] = \"excess\";\n})(ChurnReason || (ChurnReason = {}));\n/// Kinds of reasons a peer's score has been penalized\nvar ScorePenalty;\n(function(ScorePenalty) {\n    /// A peer grafted before waiting the back-off time.\n    ScorePenalty[\"GraftBackoff\"] = \"graft_backoff\";\n    /// A Peer did not respond to an IWANT request in time.\n    ScorePenalty[\"BrokenPromise\"] = \"broken_promise\";\n    /// A Peer did not send enough messages as expected.\n    ScorePenalty[\"MessageDeficit\"] = \"message_deficit\";\n    /// Too many peers under one IP address.\n    ScorePenalty[\"IPColocation\"] = \"IP_colocation\";\n})(ScorePenalty || (ScorePenalty = {}));\nvar IHaveIgnoreReason;\n(function(IHaveIgnoreReason) {\n    IHaveIgnoreReason[\"LowScore\"] = \"low_score\";\n    IHaveIgnoreReason[\"MaxIhave\"] = \"max_ihave\";\n    IHaveIgnoreReason[\"MaxIasked\"] = \"max_iasked\";\n})(IHaveIgnoreReason || (IHaveIgnoreReason = {}));\nvar ScoreThreshold;\n(function(ScoreThreshold) {\n    ScoreThreshold[\"graylist\"] = \"graylist\";\n    ScoreThreshold[\"publish\"] = \"publish\";\n    ScoreThreshold[\"gossip\"] = \"gossip\";\n    ScoreThreshold[\"mesh\"] = \"mesh\";\n})(ScoreThreshold || (ScoreThreshold = {}));\n/**\n * A collection of metrics used throughout the Gossipsub behaviour.\n * NOTE: except for special reasons, do not add more than 1 label for frequent metrics,\n * there's a performance penalty as of June 2023.\n */ // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nfunction getMetrics(register, topicStrToLabel, opts) {\n    // Using function style instead of class to prevent having to re-declare all MetricsPrometheus types.\n    return {\n        /* Metrics for static config */ protocolsEnabled: register.gauge({\n            name: \"gossipsub_protocol\",\n            help: \"Status of enabled protocols\",\n            labelNames: [\n                \"protocol\"\n            ]\n        }),\n        /* Metrics per known topic */ /**\n         * Status of our subscription to this topic. This metric allows analyzing other topic metrics\n         * filtered by our current subscription status.\n         * = rust-libp2p `topic_subscription_status` */ topicSubscriptionStatus: register.gauge({\n            name: \"gossipsub_topic_subscription_status\",\n            help: \"Status of our subscription to this topic\",\n            labelNames: [\n                \"topicStr\"\n            ]\n        }),\n        /** Number of peers subscribed to each topic. This allows us to analyze a topic's behaviour\n         * regardless of our subscription status. */ topicPeersCount: register.gauge({\n            name: \"gossipsub_topic_peer_count\",\n            help: \"Number of peers subscribed to each topic\",\n            labelNames: [\n                \"topicStr\"\n            ]\n        }),\n        /* Metrics regarding mesh state */ /**\n         * Number of peers in our mesh. This metric should be updated with the count of peers for a\n         * topic in the mesh regardless of inclusion and churn events.\n         * = rust-libp2p `mesh_peer_counts` */ meshPeerCounts: register.gauge({\n            name: \"gossipsub_mesh_peer_count\",\n            help: \"Number of peers in our mesh\",\n            labelNames: [\n                \"topicStr\"\n            ]\n        }),\n        /**\n         * Number of times we include peers in a topic mesh for different reasons.\n         * = rust-libp2p `mesh_peer_inclusion_events` */ meshPeerInclusionEventsFanout: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_fanout_total\",\n            help: \"Number of times we include peers in a topic mesh for fanout reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerInclusionEventsRandom: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_random_total\",\n            help: \"Number of times we include peers in a topic mesh for random reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerInclusionEventsSubscribed: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_subscribed_total\",\n            help: \"Number of times we include peers in a topic mesh for subscribed reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerInclusionEventsOutbound: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_outbound_total\",\n            help: \"Number of times we include peers in a topic mesh for outbound reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerInclusionEventsNotEnough: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_not_enough_total\",\n            help: \"Number of times we include peers in a topic mesh for not_enough reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerInclusionEventsOpportunistic: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_opportunistic_total\",\n            help: \"Number of times we include peers in a topic mesh for opportunistic reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerInclusionEventsUnknown: register.gauge({\n            name: \"gossipsub_mesh_peer_inclusion_events_unknown_total\",\n            help: \"Number of times we include peers in a topic mesh for unknown reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /**\n         * Number of times we remove peers in a topic mesh for different reasons.\n         * = rust-libp2p `mesh_peer_churn_events` */ meshPeerChurnEventsDisconnected: register.gauge({\n            name: \"gossipsub_peer_churn_events_disconnected_total\",\n            help: \"Number of times we remove peers in a topic mesh for disconnected reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerChurnEventsBadScore: register.gauge({\n            name: \"gossipsub_peer_churn_events_bad_score_total\",\n            help: \"Number of times we remove peers in a topic mesh for bad_score reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerChurnEventsPrune: register.gauge({\n            name: \"gossipsub_peer_churn_events_prune_total\",\n            help: \"Number of times we remove peers in a topic mesh for prune reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerChurnEventsExcess: register.gauge({\n            name: \"gossipsub_peer_churn_events_excess_total\",\n            help: \"Number of times we remove peers in a topic mesh for excess reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeerChurnEventsUnknown: register.gauge({\n            name: \"gossipsub_peer_churn_events_unknown_total\",\n            help: \"Number of times we remove peers in a topic mesh for unknown reasons\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /* General Metrics */ /**\n         * Gossipsub supports floodsub, gossipsub v1.0 and gossipsub v1.1. Peers are classified based\n         * on which protocol they support. This metric keeps track of the number of peers that are\n         * connected of each type. */ peersPerProtocol: register.gauge({\n            name: \"gossipsub_peers_per_protocol_count\",\n            help: \"Peers connected for each topic\",\n            labelNames: [\n                \"protocol\"\n            ]\n        }),\n        /** The time it takes to complete one iteration of the heartbeat. */ heartbeatDuration: register.histogram({\n            name: \"gossipsub_heartbeat_duration_seconds\",\n            help: \"The time it takes to complete one iteration of the heartbeat\",\n            // Should take <10ms, over 1s it's a huge issue that needs debugging, since a heartbeat will be cancelled\n            buckets: [\n                0.01,\n                0.1,\n                1\n            ]\n        }),\n        /** Heartbeat run took longer than heartbeat interval so next is skipped */ heartbeatSkipped: register.gauge({\n            name: \"gossipsub_heartbeat_skipped\",\n            help: \"Heartbeat run took longer than heartbeat interval so next is skipped\"\n        }),\n        /**\n         * Message validation results for each topic.\n         * Invalid == Reject?\n         * = rust-libp2p `invalid_messages`, `accepted_messages`, `ignored_messages`, `rejected_messages` */ acceptedMessagesTotal: register.gauge({\n            name: \"gossipsub_accepted_messages_total\",\n            help: \"Total accepted messages for each topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        ignoredMessagesTotal: register.gauge({\n            name: \"gossipsub_ignored_messages_total\",\n            help: \"Total ignored messages for each topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        rejectedMessagesTotal: register.gauge({\n            name: \"gossipsub_rejected_messages_total\",\n            help: \"Total rejected messages for each topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        unknownValidationResultsTotal: register.gauge({\n            name: \"gossipsub_unknown_validation_results_total\",\n            help: \"Total unknown validation results for each topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /**\n         * When the user validates a message, it tries to re propagate it to its mesh peers. If the\n         * message expires from the memcache before it can be validated, we count this a cache miss\n         * and it is an indicator that the memcache size should be increased.\n         * = rust-libp2p `mcache_misses` */ asyncValidationMcacheHit: register.gauge({\n            name: \"gossipsub_async_validation_mcache_hit_total\",\n            help: \"Async validation result reported by the user layer\",\n            labelNames: [\n                \"hit\"\n            ]\n        }),\n        asyncValidationDelayFromFirstSeenSec: register.histogram({\n            name: \"gossipsub_async_validation_delay_from_first_seen\",\n            help: \"Async validation report delay from first seen in second\",\n            buckets: [\n                0.01,\n                0.03,\n                0.1,\n                0.3,\n                1,\n                3,\n                10\n            ]\n        }),\n        asyncValidationUnknownFirstSeen: register.gauge({\n            name: \"gossipsub_async_validation_unknown_first_seen_count_total\",\n            help: \"Async validation report unknown first seen value for message\"\n        }),\n        // peer stream\n        peerReadStreamError: register.gauge({\n            name: \"gossipsub_peer_read_stream_err_count_total\",\n            help: \"Peer read stream error\"\n        }),\n        // RPC outgoing. Track byte length + data structure sizes\n        rpcRecvBytes: register.gauge({\n            name: \"gossipsub_rpc_recv_bytes_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvCount: register.gauge({\n            name: \"gossipsub_rpc_recv_count_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvSubscription: register.gauge({\n            name: \"gossipsub_rpc_recv_subscription_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvMessage: register.gauge({\n            name: \"gossipsub_rpc_recv_message_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvControl: register.gauge({\n            name: \"gossipsub_rpc_recv_control_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvIHave: register.gauge({\n            name: \"gossipsub_rpc_recv_ihave_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvIWant: register.gauge({\n            name: \"gossipsub_rpc_recv_iwant_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvGraft: register.gauge({\n            name: \"gossipsub_rpc_recv_graft_total\",\n            help: \"RPC recv\"\n        }),\n        rpcRecvPrune: register.gauge({\n            name: \"gossipsub_rpc_recv_prune_total\",\n            help: \"RPC recv\"\n        }),\n        rpcDataError: register.gauge({\n            name: \"gossipsub_rpc_data_err_count_total\",\n            help: \"RPC data error\"\n        }),\n        rpcRecvError: register.gauge({\n            name: \"gossipsub_rpc_recv_err_count_total\",\n            help: \"RPC recv error\"\n        }),\n        /** Total count of RPC dropped because acceptFrom() == false */ rpcRecvNotAccepted: register.gauge({\n            name: \"gossipsub_rpc_rcv_not_accepted_total\",\n            help: \"Total count of RPC dropped because acceptFrom() == false\"\n        }),\n        // RPC incoming. Track byte length + data structure sizes\n        rpcSentBytes: register.gauge({\n            name: \"gossipsub_rpc_sent_bytes_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentCount: register.gauge({\n            name: \"gossipsub_rpc_sent_count_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentSubscription: register.gauge({\n            name: \"gossipsub_rpc_sent_subscription_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentMessage: register.gauge({\n            name: \"gossipsub_rpc_sent_message_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentControl: register.gauge({\n            name: \"gossipsub_rpc_sent_control_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentIHave: register.gauge({\n            name: \"gossipsub_rpc_sent_ihave_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentIWant: register.gauge({\n            name: \"gossipsub_rpc_sent_iwant_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentGraft: register.gauge({\n            name: \"gossipsub_rpc_sent_graft_total\",\n            help: \"RPC sent\"\n        }),\n        rpcSentPrune: register.gauge({\n            name: \"gossipsub_rpc_sent_prune_total\",\n            help: \"RPC sent\"\n        }),\n        // publish message. Track peers sent to and bytes\n        /** Total count of msg published by topic */ msgPublishCount: register.gauge({\n            name: \"gossipsub_msg_publish_count_total\",\n            help: \"Total count of msg published by topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of peers that we publish a msg to */ msgPublishPeersByTopic: register.gauge({\n            name: \"gossipsub_msg_publish_peers_total\",\n            help: \"Total count of peers that we publish a msg to\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of peers (by group) that we publish a msg to */ directPeersPublishedTotal: register.gauge({\n            name: \"gossipsub_direct_peers_published_total\",\n            help: \"Total direct peers that we publish a msg to\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        floodsubPeersPublishedTotal: register.gauge({\n            name: \"gossipsub_floodsub_peers_published_total\",\n            help: \"Total floodsub peers that we publish a msg to\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        meshPeersPublishedTotal: register.gauge({\n            name: \"gossipsub_mesh_peers_published_total\",\n            help: \"Total mesh peers that we publish a msg to\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        fanoutPeersPublishedTotal: register.gauge({\n            name: \"gossipsub_fanout_peers_published_total\",\n            help: \"Total fanout peers that we publish a msg to\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of msg publish data.length bytes */ msgPublishBytes: register.gauge({\n            name: \"gossipsub_msg_publish_bytes_total\",\n            help: \"Total count of msg publish data.length bytes\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total time in seconds to publish a message */ msgPublishTime: register.histogram({\n            name: \"gossipsub_msg_publish_seconds\",\n            help: \"Total time in seconds to publish a message\",\n            buckets: [\n                0.001,\n                0.002,\n                0.005,\n                0.01,\n                0.1,\n                0.5,\n                1\n            ],\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of msg forwarded by topic */ msgForwardCount: register.gauge({\n            name: \"gossipsub_msg_forward_count_total\",\n            help: \"Total count of msg forwarded by topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of peers that we forward a msg to */ msgForwardPeers: register.gauge({\n            name: \"gossipsub_msg_forward_peers_total\",\n            help: \"Total count of peers that we forward a msg to\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of recv msgs before any validation */ msgReceivedPreValidation: register.gauge({\n            name: \"gossipsub_msg_received_prevalidation_total\",\n            help: \"Total count of recv msgs before any validation\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total count of recv msgs error */ msgReceivedError: register.gauge({\n            name: \"gossipsub_msg_received_error_total\",\n            help: \"Total count of recv msgs error\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Tracks distribution of recv msgs by duplicate, invalid, valid */ prevalidationInvalidTotal: register.gauge({\n            name: \"gossipsub_pre_validation_invalid_total\",\n            help: \"Total count of invalid messages received\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        prevalidationValidTotal: register.gauge({\n            name: \"gossipsub_pre_validation_valid_total\",\n            help: \"Total count of valid messages received\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        prevalidationDuplicateTotal: register.gauge({\n            name: \"gossipsub_pre_validation_duplicate_total\",\n            help: \"Total count of duplicate messages received\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        prevalidationUnknownTotal: register.gauge({\n            name: \"gossipsub_pre_validation_unknown_status_total\",\n            help: \"Total count of unknown_status messages received\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Tracks specific reason of invalid */ msgReceivedInvalid: register.gauge({\n            name: \"gossipsub_msg_received_invalid_total\",\n            help: \"Tracks specific reason of invalid\",\n            labelNames: [\n                \"error\"\n            ]\n        }),\n        msgReceivedInvalidByTopic: register.gauge({\n            name: \"gossipsub_msg_received_invalid_by_topic_total\",\n            help: \"Tracks specific invalid message by topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Track duplicate message delivery time */ duplicateMsgDeliveryDelay: register.histogram({\n            name: \"gossisub_duplicate_msg_delivery_delay_seconds\",\n            help: \"Time since the 1st duplicated message validated\",\n            labelNames: [\n                \"topic\"\n            ],\n            buckets: [\n                0.25 * opts.maxMeshMessageDeliveriesWindowSec,\n                0.5 * opts.maxMeshMessageDeliveriesWindowSec,\n                Number(opts.maxMeshMessageDeliveriesWindowSec),\n                2 * opts.maxMeshMessageDeliveriesWindowSec,\n                4 * opts.maxMeshMessageDeliveriesWindowSec\n            ]\n        }),\n        /** Total count of late msg delivery total by topic */ duplicateMsgLateDelivery: register.gauge({\n            name: \"gossisub_duplicate_msg_late_delivery_total\",\n            help: \"Total count of late duplicate message delivery by topic, which triggers P3 penalty\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        duplicateMsgIgnored: register.gauge({\n            name: \"gossisub_ignored_published_duplicate_msgs_total\",\n            help: \"Total count of published duplicate message ignored by topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /* Metrics related to scoring */ /** Total times score() is called */ scoreFnCalls: register.gauge({\n            name: \"gossipsub_score_fn_calls_total\",\n            help: \"Total times score() is called\"\n        }),\n        /** Total times score() call actually computed computeScore(), no cache */ scoreFnRuns: register.gauge({\n            name: \"gossipsub_score_fn_runs_total\",\n            help: \"Total times score() call actually computed computeScore(), no cache\"\n        }),\n        scoreCachedDelta: register.histogram({\n            name: \"gossipsub_score_cache_delta\",\n            help: \"Delta of score between cached values that expired\",\n            buckets: [\n                10,\n                100,\n                1000\n            ]\n        }),\n        /** Current count of peers by score threshold */ peersByScoreThreshold: register.gauge({\n            name: \"gossipsub_peers_by_score_threshold_count\",\n            help: \"Current count of peers by score threshold\",\n            labelNames: [\n                \"threshold\"\n            ]\n        }),\n        score: register.avgMinMax({\n            name: \"gossipsub_score\",\n            help: \"Avg min max of gossip scores\"\n        }),\n        /**\n         * Separate score weights\n         * Need to use 2-label metrics in this case to debug the score weights\n         **/ scoreWeights: register.avgMinMax({\n            name: \"gossipsub_score_weights\",\n            help: \"Separate score weights\",\n            labelNames: [\n                \"topic\",\n                \"p\"\n            ]\n        }),\n        /** Histogram of the scores for each mesh topic. */ // TODO: Not implemented\n        scorePerMesh: register.avgMinMax({\n            name: \"gossipsub_score_per_mesh\",\n            help: \"Histogram of the scores for each mesh topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** A counter of the kind of penalties being applied to peers. */ // TODO: Not fully implemented\n        scoringPenalties: register.gauge({\n            name: \"gossipsub_scoring_penalties_total\",\n            help: \"A counter of the kind of penalties being applied to peers\",\n            labelNames: [\n                \"penalty\"\n            ]\n        }),\n        behaviourPenalty: register.histogram({\n            name: \"gossipsub_peer_stat_behaviour_penalty\",\n            help: \"Current peer stat behaviour_penalty at each scrape\",\n            buckets: [\n                0.25 * opts.behaviourPenaltyThreshold,\n                0.5 * opts.behaviourPenaltyThreshold,\n                Number(opts.behaviourPenaltyThreshold),\n                2 * opts.behaviourPenaltyThreshold,\n                4 * opts.behaviourPenaltyThreshold\n            ]\n        }),\n        // TODO:\n        // - iasked per peer (on heartbeat)\n        // - when promise is resolved, track messages from promises\n        /** Total received IHAVE messages that we ignore for some reason */ ihaveRcvIgnored: register.gauge({\n            name: \"gossipsub_ihave_rcv_ignored_total\",\n            help: \"Total received IHAVE messages that we ignore for some reason\",\n            labelNames: [\n                \"reason\"\n            ]\n        }),\n        /** Total received IHAVE messages by topic */ ihaveRcvMsgids: register.gauge({\n            name: \"gossipsub_ihave_rcv_msgids_total\",\n            help: \"Total received IHAVE messages by topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /**\n         * Total messages per topic we don't have. Not actual requests.\n         * The number of times we have decided that an IWANT control message is required for this\n         * topic. A very high metric might indicate an underperforming network.\n         * = rust-libp2p `topic_iwant_msgs` */ ihaveRcvNotSeenMsgids: register.gauge({\n            name: \"gossipsub_ihave_rcv_not_seen_msgids_total\",\n            help: \"Total messages per topic we do not have, not actual requests\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total received IWANT messages by topic */ iwantRcvMsgids: register.gauge({\n            name: \"gossipsub_iwant_rcv_msgids_total\",\n            help: \"Total received IWANT messages by topic\",\n            labelNames: [\n                \"topic\"\n            ]\n        }),\n        /** Total requested messageIDs that we don't have */ iwantRcvDonthaveMsgids: register.gauge({\n            name: \"gossipsub_iwant_rcv_dont_have_msgids_total\",\n            help: \"Total requested messageIDs that we do not have\"\n        }),\n        iwantPromiseStarted: register.gauge({\n            name: \"gossipsub_iwant_promise_sent_total\",\n            help: \"Total count of started IWANT promises\"\n        }),\n        /** Total count of resolved IWANT promises */ iwantPromiseResolved: register.gauge({\n            name: \"gossipsub_iwant_promise_resolved_total\",\n            help: \"Total count of resolved IWANT promises\"\n        }),\n        /** Total count of resolved IWANT promises from duplicate messages */ iwantPromiseResolvedFromDuplicate: register.gauge({\n            name: \"gossipsub_iwant_promise_resolved_from_duplicate_total\",\n            help: \"Total count of resolved IWANT promises from duplicate messages\"\n        }),\n        /** Total count of peers we have asked IWANT promises that are resolved */ iwantPromiseResolvedPeers: register.gauge({\n            name: \"gossipsub_iwant_promise_resolved_peers\",\n            help: \"Total count of peers we have asked IWANT promises that are resolved\"\n        }),\n        iwantPromiseBroken: register.gauge({\n            name: \"gossipsub_iwant_promise_broken\",\n            help: \"Total count of broken IWANT promises\"\n        }),\n        iwantMessagePruned: register.gauge({\n            name: \"gossipsub_iwant_message_pruned\",\n            help: \"Total count of pruned IWANT messages\"\n        }),\n        /** Histogram of delivery time of resolved IWANT promises */ iwantPromiseDeliveryTime: register.histogram({\n            name: \"gossipsub_iwant_promise_delivery_seconds\",\n            help: \"Histogram of delivery time of resolved IWANT promises\",\n            buckets: [\n                0.5 * opts.gossipPromiseExpireSec,\n                Number(opts.gossipPromiseExpireSec),\n                2 * opts.gossipPromiseExpireSec,\n                4 * opts.gossipPromiseExpireSec\n            ]\n        }),\n        iwantPromiseUntracked: register.gauge({\n            name: \"gossip_iwant_promise_untracked\",\n            help: \"Total count of untracked IWANT promise\"\n        }),\n        /** Backoff time */ connectedPeersBackoffSec: register.histogram({\n            name: \"gossipsub_connected_peers_backoff_seconds\",\n            help: \"Backoff time in seconds\",\n            // Using 1 seconds as minimum as that's close to the heartbeat duration, no need for more resolution.\n            // As per spec, backoff times are 10 seconds for UnsubscribeBackoff and 60 seconds for PruneBackoff.\n            // Higher values of 60 seconds should not occur, but we add 120 seconds just in case\n            // https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md#overview-of-new-parameters\n            buckets: [\n                1,\n                2,\n                4,\n                10,\n                20,\n                60,\n                120\n            ]\n        }),\n        /* Data structure sizes */ /** Unbounded cache sizes */ cacheSize: register.gauge({\n            name: \"gossipsub_cache_size\",\n            help: \"Unbounded cache sizes\",\n            labelNames: [\n                \"cache\"\n            ]\n        }),\n        /** Current mcache msg count */ mcacheSize: register.gauge({\n            name: \"gossipsub_mcache_size\",\n            help: \"Current mcache msg count\"\n        }),\n        mcacheNotValidatedCount: register.gauge({\n            name: \"gossipsub_mcache_not_validated_count\",\n            help: \"Current mcache msg count not validated\"\n        }),\n        fastMsgIdCacheCollision: register.gauge({\n            name: \"gossipsub_fastmsgid_cache_collision_total\",\n            help: \"Total count of key collisions on fastmsgid cache put\"\n        }),\n        newConnectionCount: register.gauge({\n            name: \"gossipsub_new_connection_total\",\n            help: \"Total new connection by status\",\n            labelNames: [\n                \"status\"\n            ]\n        }),\n        topicStrToLabel,\n        toTopic (topicStr) {\n            return this.topicStrToLabel.get(topicStr) ?? topicStr;\n        },\n        /** We joined a topic */ onJoin (topicStr) {\n            this.topicSubscriptionStatus.set({\n                topicStr\n            }, 1);\n            this.meshPeerCounts.set({\n                topicStr\n            }, 0); // Reset count\n        },\n        /** We left a topic */ onLeave (topicStr) {\n            this.topicSubscriptionStatus.set({\n                topicStr\n            }, 0);\n            this.meshPeerCounts.set({\n                topicStr\n            }, 0); // Reset count\n        },\n        /** Register the inclusion of peers in our mesh due to some reason. */ onAddToMesh (topicStr, reason, count) {\n            const topic = this.toTopic(topicStr);\n            switch(reason){\n                case InclusionReason.Fanout:\n                    this.meshPeerInclusionEventsFanout.inc({\n                        topic\n                    }, count);\n                    break;\n                case InclusionReason.Random:\n                    this.meshPeerInclusionEventsRandom.inc({\n                        topic\n                    }, count);\n                    break;\n                case InclusionReason.Subscribed:\n                    this.meshPeerInclusionEventsSubscribed.inc({\n                        topic\n                    }, count);\n                    break;\n                case InclusionReason.Outbound:\n                    this.meshPeerInclusionEventsOutbound.inc({\n                        topic\n                    }, count);\n                    break;\n                case InclusionReason.NotEnough:\n                    this.meshPeerInclusionEventsNotEnough.inc({\n                        topic\n                    }, count);\n                    break;\n                case InclusionReason.Opportunistic:\n                    this.meshPeerInclusionEventsOpportunistic.inc({\n                        topic\n                    }, count);\n                    break;\n                default:\n                    this.meshPeerInclusionEventsUnknown.inc({\n                        topic\n                    }, count);\n                    break;\n            }\n        },\n        /** Register the removal of peers in our mesh due to some reason */ // - remove_peer_from_mesh()\n        // - heartbeat() Churn::BadScore\n        // - heartbeat() Churn::Excess\n        // - on_disconnect() Churn::Ds\n        onRemoveFromMesh (topicStr, reason, count) {\n            const topic = this.toTopic(topicStr);\n            switch(reason){\n                case ChurnReason.Dc:\n                    this.meshPeerChurnEventsDisconnected.inc({\n                        topic\n                    }, count);\n                    break;\n                case ChurnReason.BadScore:\n                    this.meshPeerChurnEventsBadScore.inc({\n                        topic\n                    }, count);\n                    break;\n                case ChurnReason.Prune:\n                    this.meshPeerChurnEventsPrune.inc({\n                        topic\n                    }, count);\n                    break;\n                case ChurnReason.Excess:\n                    this.meshPeerChurnEventsExcess.inc({\n                        topic\n                    }, count);\n                    break;\n                default:\n                    this.meshPeerChurnEventsUnknown.inc({\n                        topic\n                    }, count);\n                    break;\n            }\n        },\n        /**\n         * Update validation result to metrics\n         *\n         * @param messageRecord - null means the message's mcache record was not known at the time of acceptance report\n         */ onReportValidation (messageRecord, acceptance, firstSeenTimestampMs) {\n            this.asyncValidationMcacheHit.inc({\n                hit: messageRecord != null ? \"hit\" : \"miss\"\n            });\n            if (messageRecord != null) {\n                const topic = this.toTopic(messageRecord.message.topic);\n                switch(acceptance){\n                    case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TopicValidatorResult.Accept:\n                        this.acceptedMessagesTotal.inc({\n                            topic\n                        });\n                        break;\n                    case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TopicValidatorResult.Ignore:\n                        this.ignoredMessagesTotal.inc({\n                            topic\n                        });\n                        break;\n                    case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TopicValidatorResult.Reject:\n                        this.rejectedMessagesTotal.inc({\n                            topic\n                        });\n                        break;\n                    default:\n                        this.unknownValidationResultsTotal.inc({\n                            topic\n                        });\n                        break;\n                }\n            }\n            if (firstSeenTimestampMs != null) {\n                this.asyncValidationDelayFromFirstSeenSec.observe((Date.now() - firstSeenTimestampMs) / 1000);\n            } else {\n                this.asyncValidationUnknownFirstSeen.inc();\n            }\n        },\n        /**\n         * - in handle_graft() Penalty::GraftBackoff\n         * - in apply_iwant_penalties() Penalty::BrokenPromise\n         * - in metric_score() P3 Penalty::MessageDeficit\n         * - in metric_score() P6 Penalty::IPColocation\n         */ onScorePenalty (penalty) {\n            // Can this be labeled by topic too?\n            this.scoringPenalties.inc({\n                penalty\n            }, 1);\n        },\n        onIhaveRcv (topicStr, ihave, idonthave) {\n            const topic = this.toTopic(topicStr);\n            this.ihaveRcvMsgids.inc({\n                topic\n            }, ihave);\n            this.ihaveRcvNotSeenMsgids.inc({\n                topic\n            }, idonthave);\n        },\n        onIwantRcv (iwantByTopic, iwantDonthave) {\n            for (const [topicStr, iwant] of iwantByTopic){\n                const topic = this.toTopic(topicStr);\n                this.iwantRcvMsgids.inc({\n                    topic\n                }, iwant);\n            }\n            this.iwantRcvDonthaveMsgids.inc(iwantDonthave);\n        },\n        onForwardMsg (topicStr, tosendCount) {\n            const topic = this.toTopic(topicStr);\n            this.msgForwardCount.inc({\n                topic\n            }, 1);\n            this.msgForwardPeers.inc({\n                topic\n            }, tosendCount);\n        },\n        onPublishMsg (topicStr, tosendGroupCount, tosendCount, dataLen, ms) {\n            const topic = this.toTopic(topicStr);\n            this.msgPublishCount.inc({\n                topic\n            }, 1);\n            this.msgPublishBytes.inc({\n                topic\n            }, tosendCount * dataLen);\n            this.msgPublishPeersByTopic.inc({\n                topic\n            }, tosendCount);\n            this.directPeersPublishedTotal.inc({\n                topic\n            }, tosendGroupCount.direct);\n            this.floodsubPeersPublishedTotal.inc({\n                topic\n            }, tosendGroupCount.floodsub);\n            this.meshPeersPublishedTotal.inc({\n                topic\n            }, tosendGroupCount.mesh);\n            this.fanoutPeersPublishedTotal.inc({\n                topic\n            }, tosendGroupCount.fanout);\n            this.msgPublishTime.observe({\n                topic\n            }, ms / 1000);\n        },\n        onMsgRecvPreValidation (topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedPreValidation.inc({\n                topic\n            }, 1);\n        },\n        onMsgRecvError (topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.msgReceivedError.inc({\n                topic\n            }, 1);\n        },\n        onPrevalidationResult (topicStr, status) {\n            const topic = this.toTopic(topicStr);\n            switch(status){\n                case _types_js__WEBPACK_IMPORTED_MODULE_1__.MessageStatus.duplicate:\n                    this.prevalidationDuplicateTotal.inc({\n                        topic\n                    });\n                    break;\n                case _types_js__WEBPACK_IMPORTED_MODULE_1__.MessageStatus.invalid:\n                    this.prevalidationInvalidTotal.inc({\n                        topic\n                    });\n                    break;\n                case _types_js__WEBPACK_IMPORTED_MODULE_1__.MessageStatus.valid:\n                    this.prevalidationValidTotal.inc({\n                        topic\n                    });\n                    break;\n                default:\n                    this.prevalidationUnknownTotal.inc({\n                        topic\n                    });\n                    break;\n            }\n        },\n        onMsgRecvInvalid (topicStr, reason) {\n            const topic = this.toTopic(topicStr);\n            const error = reason.reason === _types_js__WEBPACK_IMPORTED_MODULE_1__.RejectReason.Error ? reason.error : reason.reason;\n            this.msgReceivedInvalid.inc({\n                error\n            }, 1);\n            this.msgReceivedInvalidByTopic.inc({\n                topic\n            }, 1);\n        },\n        onDuplicateMsgDelivery (topicStr, deliveryDelayMs, isLateDelivery) {\n            const topic = this.toTopic(topicStr);\n            this.duplicateMsgDeliveryDelay.observe({\n                topic\n            }, deliveryDelayMs / 1000);\n            if (isLateDelivery) {\n                this.duplicateMsgLateDelivery.inc({\n                    topic\n                }, 1);\n            }\n        },\n        onPublishDuplicateMsg (topicStr) {\n            const topic = this.toTopic(topicStr);\n            this.duplicateMsgIgnored.inc({\n                topic\n            }, 1);\n        },\n        onPeerReadStreamError () {\n            this.peerReadStreamError.inc(1);\n        },\n        onRpcRecvError () {\n            this.rpcRecvError.inc(1);\n        },\n        onRpcDataError () {\n            this.rpcDataError.inc(1);\n        },\n        onRpcRecv (rpc, rpcBytes) {\n            this.rpcRecvBytes.inc(rpcBytes);\n            this.rpcRecvCount.inc(1);\n            if (rpc.subscriptions != null) this.rpcRecvSubscription.inc(rpc.subscriptions.length);\n            if (rpc.messages != null) this.rpcRecvMessage.inc(rpc.messages.length);\n            if (rpc.control != null) {\n                this.rpcRecvControl.inc(1);\n                if (rpc.control.ihave != null) this.rpcRecvIHave.inc(rpc.control.ihave.length);\n                if (rpc.control.iwant != null) this.rpcRecvIWant.inc(rpc.control.iwant.length);\n                if (rpc.control.graft != null) this.rpcRecvGraft.inc(rpc.control.graft.length);\n                if (rpc.control.prune != null) this.rpcRecvPrune.inc(rpc.control.prune.length);\n            }\n        },\n        onRpcSent (rpc, rpcBytes) {\n            this.rpcSentBytes.inc(rpcBytes);\n            this.rpcSentCount.inc(1);\n            if (rpc.subscriptions != null) this.rpcSentSubscription.inc(rpc.subscriptions.length);\n            if (rpc.messages != null) this.rpcSentMessage.inc(rpc.messages.length);\n            if (rpc.control != null) {\n                const ihave = rpc.control.ihave?.length ?? 0;\n                const iwant = rpc.control.iwant?.length ?? 0;\n                const graft = rpc.control.graft?.length ?? 0;\n                const prune = rpc.control.prune?.length ?? 0;\n                if (ihave > 0) this.rpcSentIHave.inc(ihave);\n                if (iwant > 0) this.rpcSentIWant.inc(iwant);\n                if (graft > 0) this.rpcSentGraft.inc(graft);\n                if (prune > 0) this.rpcSentPrune.inc(prune);\n                if (ihave > 0 || iwant > 0 || graft > 0 || prune > 0) this.rpcSentControl.inc(1);\n            }\n        },\n        registerScores (scores, scoreThresholds) {\n            let graylist = 0;\n            let publish = 0;\n            let gossip = 0;\n            let mesh = 0;\n            for (const score of scores){\n                if (score >= scoreThresholds.graylistThreshold) graylist++;\n                if (score >= scoreThresholds.publishThreshold) publish++;\n                if (score >= scoreThresholds.gossipThreshold) gossip++;\n                if (score >= 0) mesh++;\n            }\n            this.peersByScoreThreshold.set({\n                threshold: ScoreThreshold.graylist\n            }, graylist);\n            this.peersByScoreThreshold.set({\n                threshold: ScoreThreshold.publish\n            }, publish);\n            this.peersByScoreThreshold.set({\n                threshold: ScoreThreshold.gossip\n            }, gossip);\n            this.peersByScoreThreshold.set({\n                threshold: ScoreThreshold.mesh\n            }, mesh);\n            // Register full score too\n            this.score.set(scores);\n        },\n        registerScoreWeights (sw) {\n            for (const [topic, wsTopic] of sw.byTopic){\n                this.scoreWeights.set({\n                    topic,\n                    p: \"p1\"\n                }, wsTopic.p1w);\n                this.scoreWeights.set({\n                    topic,\n                    p: \"p2\"\n                }, wsTopic.p2w);\n                this.scoreWeights.set({\n                    topic,\n                    p: \"p3\"\n                }, wsTopic.p3w);\n                this.scoreWeights.set({\n                    topic,\n                    p: \"p3b\"\n                }, wsTopic.p3bw);\n                this.scoreWeights.set({\n                    topic,\n                    p: \"p4\"\n                }, wsTopic.p4w);\n            }\n            this.scoreWeights.set({\n                p: \"p5\"\n            }, sw.p5w);\n            this.scoreWeights.set({\n                p: \"p6\"\n            }, sw.p6w);\n            this.scoreWeights.set({\n                p: \"p7\"\n            }, sw.p7w);\n        },\n        registerScorePerMesh (mesh, scoreByPeer) {\n            const peersPerTopicLabel = new Map();\n            mesh.forEach((peers, topicStr)=>{\n                // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n                const topicLabel = this.topicStrToLabel.get(topicStr) ?? \"unknown\";\n                let peersInMesh = peersPerTopicLabel.get(topicLabel);\n                if (peersInMesh == null) {\n                    peersInMesh = new Set();\n                    peersPerTopicLabel.set(topicLabel, peersInMesh);\n                }\n                peers.forEach((p)=>peersInMesh?.add(p));\n            });\n            for (const [topic, peers] of peersPerTopicLabel){\n                const meshScores = [];\n                peers.forEach((peer)=>{\n                    meshScores.push(scoreByPeer.get(peer) ?? 0);\n                });\n                this.scorePerMesh.set({\n                    topic\n                }, meshScores);\n            }\n        }\n    };\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/compute-score.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/compute-score.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeScore: () => (/* binding */ computeScore)\n/* harmony export */ });\nfunction computeScore(peer, pstats, params, peerIPs) {\n    let score = 0;\n    // topic stores\n    Object.entries(pstats.topics).forEach(([topic, tstats])=>{\n        // the topic parameters\n        const topicParams = params.topics[topic];\n        if (topicParams === undefined) {\n            // we are not scoring this topic\n            return;\n        }\n        let topicScore = 0;\n        // P1: time in Mesh\n        if (tstats.inMesh) {\n            let p1 = tstats.meshTime / topicParams.timeInMeshQuantum;\n            if (p1 > topicParams.timeInMeshCap) {\n                p1 = topicParams.timeInMeshCap;\n            }\n            topicScore += p1 * topicParams.timeInMeshWeight;\n        }\n        // P2: first message deliveries\n        let p2 = tstats.firstMessageDeliveries;\n        if (p2 > topicParams.firstMessageDeliveriesCap) {\n            p2 = topicParams.firstMessageDeliveriesCap;\n        }\n        topicScore += p2 * topicParams.firstMessageDeliveriesWeight;\n        // P3: mesh message deliveries\n        if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n            const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n            const p3 = deficit * deficit;\n            topicScore += p3 * topicParams.meshMessageDeliveriesWeight;\n        }\n        // P3b:\n        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n        const p3b = tstats.meshFailurePenalty;\n        topicScore += p3b * topicParams.meshFailurePenaltyWeight;\n        // P4: invalid messages\n        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n        topicScore += p4 * topicParams.invalidMessageDeliveriesWeight;\n        // update score, mixing with topic weight\n        score += topicScore * topicParams.topicWeight;\n    });\n    // apply the topic score cap, if any\n    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n        score = params.topicScoreCap;\n    }\n    // P5: application-specific score\n    const p5 = params.appSpecificScore(peer);\n    score += p5 * params.appSpecificWeight;\n    // P6: IP colocation factor\n    pstats.knownIPs.forEach((ip)=>{\n        if (params.IPColocationFactorWhitelist.has(ip)) {\n            return;\n        }\n        // P6 has a cliff (IPColocationFactorThreshold)\n        // It's only applied if at least that many peers are connected to us from that source IP addr.\n        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n        const peersInIP = peerIPs.get(ip);\n        const numPeersInIP = peersInIP != null ? peersInIP.size : 0;\n        if (numPeersInIP > params.IPColocationFactorThreshold) {\n            const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n            const p6 = surplus * surplus;\n            score += p6 * params.IPColocationFactorWeight;\n        }\n    });\n    // P7: behavioural pattern penalty\n    if (pstats.behaviourPenalty > params.behaviourPenaltyThreshold) {\n        const excess = pstats.behaviourPenalty - params.behaviourPenaltyThreshold;\n        const p7 = excess * excess;\n        score += p7 * params.behaviourPenaltyWeight;\n    }\n    return score;\n} //# sourceMappingURL=compute-score.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3Njb3JlL2NvbXB1dGUtc2NvcmUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGFBQWFDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDdEQsSUFBSUMsUUFBUTtJQUNaLGVBQWU7SUFDZkMsT0FBT0MsT0FBTyxDQUFDTCxPQUFPTSxNQUFNLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLE9BQU9DLE9BQU87UUFDbEQsdUJBQXVCO1FBQ3ZCLE1BQU1DLGNBQWNULE9BQU9LLE1BQU0sQ0FBQ0UsTUFBTTtRQUN4QyxJQUFJRSxnQkFBZ0JDLFdBQVc7WUFDM0IsZ0NBQWdDO1lBQ2hDO1FBQ0o7UUFDQSxJQUFJQyxhQUFhO1FBQ2pCLG1CQUFtQjtRQUNuQixJQUFJSCxPQUFPSSxNQUFNLEVBQUU7WUFDZixJQUFJQyxLQUFLTCxPQUFPTSxRQUFRLEdBQUdMLFlBQVlNLGlCQUFpQjtZQUN4RCxJQUFJRixLQUFLSixZQUFZTyxhQUFhLEVBQUU7Z0JBQ2hDSCxLQUFLSixZQUFZTyxhQUFhO1lBQ2xDO1lBQ0FMLGNBQWNFLEtBQUtKLFlBQVlRLGdCQUFnQjtRQUNuRDtRQUNBLCtCQUErQjtRQUMvQixJQUFJQyxLQUFLVixPQUFPVyxzQkFBc0I7UUFDdEMsSUFBSUQsS0FBS1QsWUFBWVcseUJBQXlCLEVBQUU7WUFDNUNGLEtBQUtULFlBQVlXLHlCQUF5QjtRQUM5QztRQUNBVCxjQUFjTyxLQUFLVCxZQUFZWSw0QkFBNEI7UUFDM0QsOEJBQThCO1FBQzlCLElBQUliLE9BQU9jLDJCQUEyQixJQUNsQ2QsT0FBT2UscUJBQXFCLEdBQUdkLFlBQVllLDhCQUE4QixFQUFFO1lBQzNFLE1BQU1DLFVBQVVoQixZQUFZZSw4QkFBOEIsR0FBR2hCLE9BQU9lLHFCQUFxQjtZQUN6RixNQUFNRyxLQUFLRCxVQUFVQTtZQUNyQmQsY0FBY2UsS0FBS2pCLFlBQVlrQiwyQkFBMkI7UUFDOUQ7UUFDQSxPQUFPO1FBQ1AsK0ZBQStGO1FBQy9GLE1BQU1DLE1BQU1wQixPQUFPcUIsa0JBQWtCO1FBQ3JDbEIsY0FBY2lCLE1BQU1uQixZQUFZcUIsd0JBQXdCO1FBQ3hELHVCQUF1QjtRQUN2Qiw4RkFBOEY7UUFDOUYsTUFBTUMsS0FBS3ZCLE9BQU93Qix3QkFBd0IsR0FBR3hCLE9BQU93Qix3QkFBd0I7UUFDNUVyQixjQUFjb0IsS0FBS3RCLFlBQVl3Qiw4QkFBOEI7UUFDN0QseUNBQXlDO1FBQ3pDL0IsU0FBU1MsYUFBYUYsWUFBWXlCLFdBQVc7SUFDakQ7SUFDQSxvQ0FBb0M7SUFDcEMsSUFBSWxDLE9BQU9tQyxhQUFhLEdBQUcsS0FBS2pDLFFBQVFGLE9BQU9tQyxhQUFhLEVBQUU7UUFDMURqQyxRQUFRRixPQUFPbUMsYUFBYTtJQUNoQztJQUNBLGlDQUFpQztJQUNqQyxNQUFNQyxLQUFLcEMsT0FBT3FDLGdCQUFnQixDQUFDdkM7SUFDbkNJLFNBQVNrQyxLQUFLcEMsT0FBT3NDLGlCQUFpQjtJQUN0QywyQkFBMkI7SUFDM0J2QyxPQUFPd0MsUUFBUSxDQUFDakMsT0FBTyxDQUFDLENBQUNrQztRQUNyQixJQUFJeEMsT0FBT3lDLDJCQUEyQixDQUFDQyxHQUFHLENBQUNGLEtBQUs7WUFDNUM7UUFDSjtRQUNBLCtDQUErQztRQUMvQyw4RkFBOEY7UUFDOUYscUZBQXFGO1FBQ3JGLE1BQU1HLFlBQVkxQyxRQUFRMkMsR0FBRyxDQUFDSjtRQUM5QixNQUFNSyxlQUFlLGFBQWMsT0FBUUYsVUFBVUcsSUFBSSxHQUFHO1FBQzVELElBQUlELGVBQWU3QyxPQUFPK0MsMkJBQTJCLEVBQUU7WUFDbkQsTUFBTUMsVUFBVUgsZUFBZTdDLE9BQU8rQywyQkFBMkI7WUFDakUsTUFBTUUsS0FBS0QsVUFBVUE7WUFDckI5QyxTQUFTK0MsS0FBS2pELE9BQU9rRCx3QkFBd0I7UUFDakQ7SUFDSjtJQUNBLGtDQUFrQztJQUNsQyxJQUFJbkQsT0FBT29ELGdCQUFnQixHQUFHbkQsT0FBT29ELHlCQUF5QixFQUFFO1FBQzVELE1BQU1DLFNBQVN0RCxPQUFPb0QsZ0JBQWdCLEdBQUduRCxPQUFPb0QseUJBQXlCO1FBQ3pFLE1BQU1FLEtBQUtELFNBQVNBO1FBQ3BCbkQsU0FBU29ELEtBQUt0RCxPQUFPdUQsc0JBQXNCO0lBQy9DO0lBQ0EsT0FBT3JEO0FBQ1gsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvc2NvcmUvY29tcHV0ZS1zY29yZS5qcz9kOTg4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjb21wdXRlU2NvcmUocGVlciwgcHN0YXRzLCBwYXJhbXMsIHBlZXJJUHMpIHtcbiAgICBsZXQgc2NvcmUgPSAwO1xuICAgIC8vIHRvcGljIHN0b3Jlc1xuICAgIE9iamVjdC5lbnRyaWVzKHBzdGF0cy50b3BpY3MpLmZvckVhY2goKFt0b3BpYywgdHN0YXRzXSkgPT4ge1xuICAgICAgICAvLyB0aGUgdG9waWMgcGFyYW1ldGVyc1xuICAgICAgICBjb25zdCB0b3BpY1BhcmFtcyA9IHBhcmFtcy50b3BpY3NbdG9waWNdO1xuICAgICAgICBpZiAodG9waWNQYXJhbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCBzY29yaW5nIHRoaXMgdG9waWNcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdG9waWNTY29yZSA9IDA7XG4gICAgICAgIC8vIFAxOiB0aW1lIGluIE1lc2hcbiAgICAgICAgaWYgKHRzdGF0cy5pbk1lc2gpIHtcbiAgICAgICAgICAgIGxldCBwMSA9IHRzdGF0cy5tZXNoVGltZSAvIHRvcGljUGFyYW1zLnRpbWVJbk1lc2hRdWFudHVtO1xuICAgICAgICAgICAgaWYgKHAxID4gdG9waWNQYXJhbXMudGltZUluTWVzaENhcCkge1xuICAgICAgICAgICAgICAgIHAxID0gdG9waWNQYXJhbXMudGltZUluTWVzaENhcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvcGljU2NvcmUgKz0gcDEgKiB0b3BpY1BhcmFtcy50aW1lSW5NZXNoV2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFAyOiBmaXJzdCBtZXNzYWdlIGRlbGl2ZXJpZXNcbiAgICAgICAgbGV0IHAyID0gdHN0YXRzLmZpcnN0TWVzc2FnZURlbGl2ZXJpZXM7XG4gICAgICAgIGlmIChwMiA+IHRvcGljUGFyYW1zLmZpcnN0TWVzc2FnZURlbGl2ZXJpZXNDYXApIHtcbiAgICAgICAgICAgIHAyID0gdG9waWNQYXJhbXMuZmlyc3RNZXNzYWdlRGVsaXZlcmllc0NhcDtcbiAgICAgICAgfVxuICAgICAgICB0b3BpY1Njb3JlICs9IHAyICogdG9waWNQYXJhbXMuZmlyc3RNZXNzYWdlRGVsaXZlcmllc1dlaWdodDtcbiAgICAgICAgLy8gUDM6IG1lc2ggbWVzc2FnZSBkZWxpdmVyaWVzXG4gICAgICAgIGlmICh0c3RhdHMubWVzaE1lc3NhZ2VEZWxpdmVyaWVzQWN0aXZlICYmXG4gICAgICAgICAgICB0c3RhdHMubWVzaE1lc3NhZ2VEZWxpdmVyaWVzIDwgdG9waWNQYXJhbXMubWVzaE1lc3NhZ2VEZWxpdmVyaWVzVGhyZXNob2xkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZpY2l0ID0gdG9waWNQYXJhbXMubWVzaE1lc3NhZ2VEZWxpdmVyaWVzVGhyZXNob2xkIC0gdHN0YXRzLm1lc2hNZXNzYWdlRGVsaXZlcmllcztcbiAgICAgICAgICAgIGNvbnN0IHAzID0gZGVmaWNpdCAqIGRlZmljaXQ7XG4gICAgICAgICAgICB0b3BpY1Njb3JlICs9IHAzICogdG9waWNQYXJhbXMubWVzaE1lc3NhZ2VEZWxpdmVyaWVzV2VpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFAzYjpcbiAgICAgICAgLy8gTk9URTogdGhlIHdlaWdodCBvZiBQM2IgaXMgbmVnYXRpdmUgKHZhbGlkYXRlZCBpbiB2YWxpZGF0ZVRvcGljU2NvcmVQYXJhbXMpIHNvIHRoaXMgZGV0cmFjdHNcbiAgICAgICAgY29uc3QgcDNiID0gdHN0YXRzLm1lc2hGYWlsdXJlUGVuYWx0eTtcbiAgICAgICAgdG9waWNTY29yZSArPSBwM2IgKiB0b3BpY1BhcmFtcy5tZXNoRmFpbHVyZVBlbmFsdHlXZWlnaHQ7XG4gICAgICAgIC8vIFA0OiBpbnZhbGlkIG1lc3NhZ2VzXG4gICAgICAgIC8vIE5PVEU6IHRoZSB3ZWlnaHQgb2YgUDQgaXMgbmVnYXRpdmUgKHZhbGlkYXRlZCBpbiB2YWxpZGF0ZVRvcGljU2NvcmVQYXJhbXMpIHNvIHRoaXMgZGV0cmFjdHNcbiAgICAgICAgY29uc3QgcDQgPSB0c3RhdHMuaW52YWxpZE1lc3NhZ2VEZWxpdmVyaWVzICogdHN0YXRzLmludmFsaWRNZXNzYWdlRGVsaXZlcmllcztcbiAgICAgICAgdG9waWNTY29yZSArPSBwNCAqIHRvcGljUGFyYW1zLmludmFsaWRNZXNzYWdlRGVsaXZlcmllc1dlaWdodDtcbiAgICAgICAgLy8gdXBkYXRlIHNjb3JlLCBtaXhpbmcgd2l0aCB0b3BpYyB3ZWlnaHRcbiAgICAgICAgc2NvcmUgKz0gdG9waWNTY29yZSAqIHRvcGljUGFyYW1zLnRvcGljV2VpZ2h0O1xuICAgIH0pO1xuICAgIC8vIGFwcGx5IHRoZSB0b3BpYyBzY29yZSBjYXAsIGlmIGFueVxuICAgIGlmIChwYXJhbXMudG9waWNTY29yZUNhcCA+IDAgJiYgc2NvcmUgPiBwYXJhbXMudG9waWNTY29yZUNhcCkge1xuICAgICAgICBzY29yZSA9IHBhcmFtcy50b3BpY1Njb3JlQ2FwO1xuICAgIH1cbiAgICAvLyBQNTogYXBwbGljYXRpb24tc3BlY2lmaWMgc2NvcmVcbiAgICBjb25zdCBwNSA9IHBhcmFtcy5hcHBTcGVjaWZpY1Njb3JlKHBlZXIpO1xuICAgIHNjb3JlICs9IHA1ICogcGFyYW1zLmFwcFNwZWNpZmljV2VpZ2h0O1xuICAgIC8vIFA2OiBJUCBjb2xvY2F0aW9uIGZhY3RvclxuICAgIHBzdGF0cy5rbm93bklQcy5mb3JFYWNoKChpcCkgPT4ge1xuICAgICAgICBpZiAocGFyYW1zLklQQ29sb2NhdGlvbkZhY3RvcldoaXRlbGlzdC5oYXMoaXApKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUDYgaGFzIGEgY2xpZmYgKElQQ29sb2NhdGlvbkZhY3RvclRocmVzaG9sZClcbiAgICAgICAgLy8gSXQncyBvbmx5IGFwcGxpZWQgaWYgYXQgbGVhc3QgdGhhdCBtYW55IHBlZXJzIGFyZSBjb25uZWN0ZWQgdG8gdXMgZnJvbSB0aGF0IHNvdXJjZSBJUCBhZGRyLlxuICAgICAgICAvLyBJdCBpcyBxdWFkcmF0aWMsIGFuZCB0aGUgd2VpZ2h0IGlzIG5lZ2F0aXZlICh2YWxpZGF0ZWQgaW4gdmFsaWRhdGVQZWVyU2NvcmVQYXJhbXMpXG4gICAgICAgIGNvbnN0IHBlZXJzSW5JUCA9IHBlZXJJUHMuZ2V0KGlwKTtcbiAgICAgICAgY29uc3QgbnVtUGVlcnNJbklQID0gKHBlZXJzSW5JUCAhPSBudWxsKSA/IHBlZXJzSW5JUC5zaXplIDogMDtcbiAgICAgICAgaWYgKG51bVBlZXJzSW5JUCA+IHBhcmFtcy5JUENvbG9jYXRpb25GYWN0b3JUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1cnBsdXMgPSBudW1QZWVyc0luSVAgLSBwYXJhbXMuSVBDb2xvY2F0aW9uRmFjdG9yVGhyZXNob2xkO1xuICAgICAgICAgICAgY29uc3QgcDYgPSBzdXJwbHVzICogc3VycGx1cztcbiAgICAgICAgICAgIHNjb3JlICs9IHA2ICogcGFyYW1zLklQQ29sb2NhdGlvbkZhY3RvcldlaWdodDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFA3OiBiZWhhdmlvdXJhbCBwYXR0ZXJuIHBlbmFsdHlcbiAgICBpZiAocHN0YXRzLmJlaGF2aW91clBlbmFsdHkgPiBwYXJhbXMuYmVoYXZpb3VyUGVuYWx0eVRocmVzaG9sZCkge1xuICAgICAgICBjb25zdCBleGNlc3MgPSBwc3RhdHMuYmVoYXZpb3VyUGVuYWx0eSAtIHBhcmFtcy5iZWhhdmlvdXJQZW5hbHR5VGhyZXNob2xkO1xuICAgICAgICBjb25zdCBwNyA9IGV4Y2VzcyAqIGV4Y2VzcztcbiAgICAgICAgc2NvcmUgKz0gcDcgKiBwYXJhbXMuYmVoYXZpb3VyUGVuYWx0eVdlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHNjb3JlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcHV0ZS1zY29yZS5qcy5tYXAiXSwibmFtZXMiOlsiY29tcHV0ZVNjb3JlIiwicGVlciIsInBzdGF0cyIsInBhcmFtcyIsInBlZXJJUHMiLCJzY29yZSIsIk9iamVjdCIsImVudHJpZXMiLCJ0b3BpY3MiLCJmb3JFYWNoIiwidG9waWMiLCJ0c3RhdHMiLCJ0b3BpY1BhcmFtcyIsInVuZGVmaW5lZCIsInRvcGljU2NvcmUiLCJpbk1lc2giLCJwMSIsIm1lc2hUaW1lIiwidGltZUluTWVzaFF1YW50dW0iLCJ0aW1lSW5NZXNoQ2FwIiwidGltZUluTWVzaFdlaWdodCIsInAyIiwiZmlyc3RNZXNzYWdlRGVsaXZlcmllcyIsImZpcnN0TWVzc2FnZURlbGl2ZXJpZXNDYXAiLCJmaXJzdE1lc3NhZ2VEZWxpdmVyaWVzV2VpZ2h0IiwibWVzaE1lc3NhZ2VEZWxpdmVyaWVzQWN0aXZlIiwibWVzaE1lc3NhZ2VEZWxpdmVyaWVzIiwibWVzaE1lc3NhZ2VEZWxpdmVyaWVzVGhyZXNob2xkIiwiZGVmaWNpdCIsInAzIiwibWVzaE1lc3NhZ2VEZWxpdmVyaWVzV2VpZ2h0IiwicDNiIiwibWVzaEZhaWx1cmVQZW5hbHR5IiwibWVzaEZhaWx1cmVQZW5hbHR5V2VpZ2h0IiwicDQiLCJpbnZhbGlkTWVzc2FnZURlbGl2ZXJpZXMiLCJpbnZhbGlkTWVzc2FnZURlbGl2ZXJpZXNXZWlnaHQiLCJ0b3BpY1dlaWdodCIsInRvcGljU2NvcmVDYXAiLCJwNSIsImFwcFNwZWNpZmljU2NvcmUiLCJhcHBTcGVjaWZpY1dlaWdodCIsImtub3duSVBzIiwiaXAiLCJJUENvbG9jYXRpb25GYWN0b3JXaGl0ZWxpc3QiLCJoYXMiLCJwZWVyc0luSVAiLCJnZXQiLCJudW1QZWVyc0luSVAiLCJzaXplIiwiSVBDb2xvY2F0aW9uRmFjdG9yVGhyZXNob2xkIiwic3VycGx1cyIsInA2IiwiSVBDb2xvY2F0aW9uRmFjdG9yV2VpZ2h0IiwiYmVoYXZpb3VyUGVuYWx0eSIsImJlaGF2aW91clBlbmFsdHlUaHJlc2hvbGQiLCJleGNlc3MiLCJwNyIsImJlaGF2aW91clBlbmFsdHlXZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/compute-score.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERR_INVALID_PEER_SCORE_PARAMS: () => (/* binding */ ERR_INVALID_PEER_SCORE_PARAMS),\n/* harmony export */   ERR_INVALID_PEER_SCORE_THRESHOLDS: () => (/* binding */ ERR_INVALID_PEER_SCORE_THRESHOLDS)\n/* harmony export */ });\nconst ERR_INVALID_PEER_SCORE_PARAMS = \"ERR_INVALID_PEER_SCORE_PARAMS\";\nconst ERR_INVALID_PEER_SCORE_THRESHOLDS = \"ERR_INVALID_PEER_SCORE_THRESHOLDS\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3Njb3JlL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLGdDQUFnQyxnQ0FBZ0M7QUFDdEUsTUFBTUMsb0NBQW9DLG9DQUFvQyxDQUNyRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvc2NvcmUvY29uc3RhbnRzLmpzP2FlYjYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEVSUl9JTlZBTElEX1BFRVJfU0NPUkVfUEFSQU1TID0gJ0VSUl9JTlZBTElEX1BFRVJfU0NPUkVfUEFSQU1TJztcbmV4cG9ydCBjb25zdCBFUlJfSU5WQUxJRF9QRUVSX1NDT1JFX1RIUkVTSE9MRFMgPSAnRVJSX0lOVkFMSURfUEVFUl9TQ09SRV9USFJFU0hPTERTJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiRVJSX0lOVkFMSURfUEVFUl9TQ09SRV9QQVJBTVMiLCJFUlJfSU5WQUxJRF9QRUVSX1NDT1JFX1RIUkVTSE9MRFMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/message-deliveries.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/message-deliveries.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeliveryRecordStatus: () => (/* binding */ DeliveryRecordStatus),\n/* harmony export */   MessageDeliveries: () => (/* binding */ MessageDeliveries)\n/* harmony export */ });\n/* harmony import */ var denque__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! denque */ \"(ssr)/./node_modules/denque/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/constants.js\");\n\n\nvar DeliveryRecordStatus;\n(function(DeliveryRecordStatus) {\n    /**\n     * we don't know (yet) if the message is valid\n     */ DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n    /**\n     * we know the message is valid\n     */ DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n    /**\n     * we know the message is invalid\n     */ DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n    /**\n     * we were instructed by the validator to ignore the message\n     */ DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus || (DeliveryRecordStatus = {}));\n/**\n * Map of canonical message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */ class MessageDeliveries {\n    constructor(){\n        this.records = new Map();\n        this.queue = new denque__WEBPACK_IMPORTED_MODULE_0__();\n    }\n    getRecord(msgIdStr) {\n        return this.records.get(msgIdStr);\n    }\n    ensureRecord(msgIdStr) {\n        let drec = this.records.get(msgIdStr);\n        if (drec != null) {\n            return drec;\n        }\n        // record doesn't exist yet\n        // create record\n        drec = {\n            status: DeliveryRecordStatus.unknown,\n            firstSeenTsMs: Date.now(),\n            validated: 0,\n            peers: new Set()\n        };\n        this.records.set(msgIdStr, drec);\n        // and add msgId to the queue\n        const entry = {\n            msgId: msgIdStr,\n            expire: Date.now() + _constants_js__WEBPACK_IMPORTED_MODULE_1__.TimeCacheDuration\n        };\n        this.queue.push(entry);\n        return drec;\n    }\n    gc() {\n        const now = Date.now();\n        // queue is sorted by expiry time\n        // remove expired messages, remove from queue until first un-expired message found\n        let head = this.queue.peekFront();\n        while(head != null && head.expire < now){\n            this.records.delete(head.msgId);\n            this.queue.shift();\n            head = this.queue.peekFront();\n        }\n    }\n    clear() {\n        this.records.clear();\n        this.queue.clear();\n    }\n} //# sourceMappingURL=message-deliveries.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3Njb3JlL21lc3NhZ2UtZGVsaXZlcmllcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRCO0FBQ3dCO0FBQzdDLElBQUlFLHFCQUFxQjtBQUMvQixVQUFVQSxvQkFBb0I7SUFDM0I7O0tBRUMsR0FDREEsb0JBQW9CLENBQUNBLG9CQUFvQixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDNUQ7O0tBRUMsR0FDREEsb0JBQW9CLENBQUNBLG9CQUFvQixDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDMUQ7O0tBRUMsR0FDREEsb0JBQW9CLENBQUNBLG9CQUFvQixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDNUQ7O0tBRUMsR0FDREEsb0JBQW9CLENBQUNBLG9CQUFvQixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7QUFDaEUsR0FBR0Esd0JBQXlCQSxDQUFBQSx1QkFBdUIsQ0FBQztBQUNwRDs7OztDQUlDLEdBQ00sTUFBTUM7SUFHVEMsYUFBYztRQUNWLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlDO1FBQ25CLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlQLG1DQUFNQTtJQUMzQjtJQUNBUSxVQUFVQyxRQUFRLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDRDtJQUM1QjtJQUNBRSxhQUFhRixRQUFRLEVBQUU7UUFDbkIsSUFBSUcsT0FBTyxJQUFJLENBQUNQLE9BQU8sQ0FBQ0ssR0FBRyxDQUFDRDtRQUM1QixJQUFJRyxRQUFRLE1BQU07WUFDZCxPQUFPQTtRQUNYO1FBQ0EsMkJBQTJCO1FBQzNCLGdCQUFnQjtRQUNoQkEsT0FBTztZQUNIQyxRQUFRWCxxQkFBcUJZLE9BQU87WUFDcENDLGVBQWVDLEtBQUtDLEdBQUc7WUFDdkJDLFdBQVc7WUFDWEMsT0FBTyxJQUFJQztRQUNmO1FBQ0EsSUFBSSxDQUFDZixPQUFPLENBQUNnQixHQUFHLENBQUNaLFVBQVVHO1FBQzNCLDZCQUE2QjtRQUM3QixNQUFNVSxRQUFRO1lBQ1ZDLE9BQU9kO1lBQ1BlLFFBQVFSLEtBQUtDLEdBQUcsS0FBS2hCLDREQUFpQkE7UUFDMUM7UUFDQSxJQUFJLENBQUNNLEtBQUssQ0FBQ2tCLElBQUksQ0FBQ0g7UUFDaEIsT0FBT1Y7SUFDWDtJQUNBYyxLQUFLO1FBQ0QsTUFBTVQsTUFBTUQsS0FBS0MsR0FBRztRQUNwQixpQ0FBaUM7UUFDakMsa0ZBQWtGO1FBQ2xGLElBQUlVLE9BQU8sSUFBSSxDQUFDcEIsS0FBSyxDQUFDcUIsU0FBUztRQUMvQixNQUFPLFFBQVMsUUFBU0QsS0FBS0gsTUFBTSxHQUFHUCxJQUFLO1lBQ3hDLElBQUksQ0FBQ1osT0FBTyxDQUFDd0IsTUFBTSxDQUFDRixLQUFLSixLQUFLO1lBQzlCLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ3VCLEtBQUs7WUFDaEJILE9BQU8sSUFBSSxDQUFDcEIsS0FBSyxDQUFDcUIsU0FBUztRQUMvQjtJQUNKO0lBQ0FHLFFBQVE7UUFDSixJQUFJLENBQUMxQixPQUFPLENBQUMwQixLQUFLO1FBQ2xCLElBQUksQ0FBQ3hCLEtBQUssQ0FBQ3dCLEtBQUs7SUFDcEI7QUFDSixFQUNBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLWdvc3NpcHN1Yi9kaXN0L3NyYy9zY29yZS9tZXNzYWdlLWRlbGl2ZXJpZXMuanM/ZDVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGVucXVlIGZyb20gJ2RlbnF1ZSc7XG5pbXBvcnQgeyBUaW1lQ2FjaGVEdXJhdGlvbiB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5leHBvcnQgdmFyIERlbGl2ZXJ5UmVjb3JkU3RhdHVzO1xuKGZ1bmN0aW9uIChEZWxpdmVyeVJlY29yZFN0YXR1cykge1xuICAgIC8qKlxuICAgICAqIHdlIGRvbid0IGtub3cgKHlldCkgaWYgdGhlIG1lc3NhZ2UgaXMgdmFsaWRcbiAgICAgKi9cbiAgICBEZWxpdmVyeVJlY29yZFN0YXR1c1tEZWxpdmVyeVJlY29yZFN0YXR1c1tcInVua25vd25cIl0gPSAwXSA9IFwidW5rbm93blwiO1xuICAgIC8qKlxuICAgICAqIHdlIGtub3cgdGhlIG1lc3NhZ2UgaXMgdmFsaWRcbiAgICAgKi9cbiAgICBEZWxpdmVyeVJlY29yZFN0YXR1c1tEZWxpdmVyeVJlY29yZFN0YXR1c1tcInZhbGlkXCJdID0gMV0gPSBcInZhbGlkXCI7XG4gICAgLyoqXG4gICAgICogd2Uga25vdyB0aGUgbWVzc2FnZSBpcyBpbnZhbGlkXG4gICAgICovXG4gICAgRGVsaXZlcnlSZWNvcmRTdGF0dXNbRGVsaXZlcnlSZWNvcmRTdGF0dXNbXCJpbnZhbGlkXCJdID0gMl0gPSBcImludmFsaWRcIjtcbiAgICAvKipcbiAgICAgKiB3ZSB3ZXJlIGluc3RydWN0ZWQgYnkgdGhlIHZhbGlkYXRvciB0byBpZ25vcmUgdGhlIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBEZWxpdmVyeVJlY29yZFN0YXR1c1tEZWxpdmVyeVJlY29yZFN0YXR1c1tcImlnbm9yZWRcIl0gPSAzXSA9IFwiaWdub3JlZFwiO1xufSkoRGVsaXZlcnlSZWNvcmRTdGF0dXMgfHwgKERlbGl2ZXJ5UmVjb3JkU3RhdHVzID0ge30pKTtcbi8qKlxuICogTWFwIG9mIGNhbm9uaWNhbCBtZXNzYWdlIElEIHRvIERlbGl2ZXJ5UmVjb3JkXG4gKlxuICogTWFpbnRhaW5zIGFuIGludGVybmFsIHF1ZXVlIGZvciBlZmZpY2llbnQgZ2Mgb2Ygb2xkIG1lc3NhZ2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlRGVsaXZlcmllcyB7XG4gICAgcmVjb3JkcztcbiAgICBxdWV1ZTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZWNvcmRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnF1ZXVlID0gbmV3IERlbnF1ZSgpO1xuICAgIH1cbiAgICBnZXRSZWNvcmQobXNnSWRTdHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3Jkcy5nZXQobXNnSWRTdHIpO1xuICAgIH1cbiAgICBlbnN1cmVSZWNvcmQobXNnSWRTdHIpIHtcbiAgICAgICAgbGV0IGRyZWMgPSB0aGlzLnJlY29yZHMuZ2V0KG1zZ0lkU3RyKTtcbiAgICAgICAgaWYgKGRyZWMgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRyZWM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVjb3JkIGRvZXNuJ3QgZXhpc3QgeWV0XG4gICAgICAgIC8vIGNyZWF0ZSByZWNvcmRcbiAgICAgICAgZHJlYyA9IHtcbiAgICAgICAgICAgIHN0YXR1czogRGVsaXZlcnlSZWNvcmRTdGF0dXMudW5rbm93bixcbiAgICAgICAgICAgIGZpcnN0U2VlblRzTXM6IERhdGUubm93KCksXG4gICAgICAgICAgICB2YWxpZGF0ZWQ6IDAsXG4gICAgICAgICAgICBwZWVyczogbmV3IFNldCgpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVjb3Jkcy5zZXQobXNnSWRTdHIsIGRyZWMpO1xuICAgICAgICAvLyBhbmQgYWRkIG1zZ0lkIHRvIHRoZSBxdWV1ZVxuICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgIG1zZ0lkOiBtc2dJZFN0cixcbiAgICAgICAgICAgIGV4cGlyZTogRGF0ZS5ub3coKSArIFRpbWVDYWNoZUR1cmF0aW9uXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucXVldWUucHVzaChlbnRyeSk7XG4gICAgICAgIHJldHVybiBkcmVjO1xuICAgIH1cbiAgICBnYygpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy8gcXVldWUgaXMgc29ydGVkIGJ5IGV4cGlyeSB0aW1lXG4gICAgICAgIC8vIHJlbW92ZSBleHBpcmVkIG1lc3NhZ2VzLCByZW1vdmUgZnJvbSBxdWV1ZSB1bnRpbCBmaXJzdCB1bi1leHBpcmVkIG1lc3NhZ2UgZm91bmRcbiAgICAgICAgbGV0IGhlYWQgPSB0aGlzLnF1ZXVlLnBlZWtGcm9udCgpO1xuICAgICAgICB3aGlsZSAoKGhlYWQgIT0gbnVsbCkgJiYgaGVhZC5leHBpcmUgPCBub3cpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb3Jkcy5kZWxldGUoaGVhZC5tc2dJZCk7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBoZWFkID0gdGhpcy5xdWV1ZS5wZWVrRnJvbnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5yZWNvcmRzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMucXVldWUuY2xlYXIoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlLWRlbGl2ZXJpZXMuanMubWFwIl0sIm5hbWVzIjpbIkRlbnF1ZSIsIlRpbWVDYWNoZUR1cmF0aW9uIiwiRGVsaXZlcnlSZWNvcmRTdGF0dXMiLCJNZXNzYWdlRGVsaXZlcmllcyIsImNvbnN0cnVjdG9yIiwicmVjb3JkcyIsIk1hcCIsInF1ZXVlIiwiZ2V0UmVjb3JkIiwibXNnSWRTdHIiLCJnZXQiLCJlbnN1cmVSZWNvcmQiLCJkcmVjIiwic3RhdHVzIiwidW5rbm93biIsImZpcnN0U2VlblRzTXMiLCJEYXRlIiwibm93IiwidmFsaWRhdGVkIiwicGVlcnMiLCJTZXQiLCJzZXQiLCJlbnRyeSIsIm1zZ0lkIiwiZXhwaXJlIiwicHVzaCIsImdjIiwiaGVhZCIsInBlZWtGcm9udCIsImRlbGV0ZSIsInNoaWZ0IiwiY2xlYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/message-deliveries.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPeerScoreParams: () => (/* binding */ createPeerScoreParams),\n/* harmony export */   createTopicScoreParams: () => (/* binding */ createTopicScoreParams),\n/* harmony export */   defaultPeerScoreParams: () => (/* binding */ defaultPeerScoreParams),\n/* harmony export */   defaultTopicScoreParams: () => (/* binding */ defaultTopicScoreParams),\n/* harmony export */   validatePeerScoreParams: () => (/* binding */ validatePeerScoreParams),\n/* harmony export */   validateTopicScoreParams: () => (/* binding */ validateTopicScoreParams)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js\");\n\n\nconst defaultPeerScoreParams = {\n    topics: {},\n    topicScoreCap: 10.0,\n    appSpecificScore: ()=>0.0,\n    appSpecificWeight: 10.0,\n    IPColocationFactorWeight: -5.0,\n    IPColocationFactorThreshold: 10.0,\n    IPColocationFactorWhitelist: new Set(),\n    behaviourPenaltyWeight: -10.0,\n    behaviourPenaltyThreshold: 0.0,\n    behaviourPenaltyDecay: 0.2,\n    decayInterval: 1000.0,\n    decayToZero: 0.1,\n    retainScore: 3600 * 1000\n};\nconst defaultTopicScoreParams = {\n    topicWeight: 0.5,\n    timeInMeshWeight: 1,\n    timeInMeshQuantum: 1,\n    timeInMeshCap: 3600,\n    firstMessageDeliveriesWeight: 1,\n    firstMessageDeliveriesDecay: 0.5,\n    firstMessageDeliveriesCap: 2000,\n    meshMessageDeliveriesWeight: -1,\n    meshMessageDeliveriesDecay: 0.5,\n    meshMessageDeliveriesCap: 100,\n    meshMessageDeliveriesThreshold: 20,\n    meshMessageDeliveriesWindow: 10,\n    meshMessageDeliveriesActivation: 5000,\n    meshFailurePenaltyWeight: -1,\n    meshFailurePenaltyDecay: 0.5,\n    invalidMessageDeliveriesWeight: -1,\n    invalidMessageDeliveriesDecay: 0.3\n};\nfunction createPeerScoreParams(p = {}) {\n    return {\n        ...defaultPeerScoreParams,\n        ...p,\n        topics: p.topics != null ? Object.entries(p.topics).reduce((topics, [topic, topicScoreParams])=>{\n            topics[topic] = createTopicScoreParams(topicScoreParams);\n            return topics;\n        }, {}) : {}\n    };\n}\nfunction createTopicScoreParams(p = {}) {\n    return {\n        ...defaultTopicScoreParams,\n        ...p\n    };\n}\n// peer score parameter validation\nfunction validatePeerScoreParams(p) {\n    for (const [topic, params] of Object.entries(p.topics)){\n        try {\n            validateTopicScoreParams(params);\n        } catch (e) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(`invalid score parameters for topic ${topic}: ${e.message}`, _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n        }\n    }\n    // check that the topic score is 0 or something positive\n    if (p.topicScoreCap < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid topic score cap; must be positive (or 0 for no cap)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check that we have an app specific score; the weight can be anything (but expected positive)\n    if (p.appSpecificScore === null || p.appSpecificScore === undefined) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"missing application specific score function\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the IP colocation factor\n    if (p.IPColocationFactorWeight > 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid IPColocationFactorWeight; must be negative (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid IPColocationFactorThreshold; must be at least 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the behaviour penalty\n    if (p.behaviourPenaltyWeight > 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid BehaviourPenaltyDecay; must be between 0 and 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check the decay parameters\n    if (p.decayInterval < 1000) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid DecayInterval; must be at least 1s\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.decayToZero <= 0 || p.decayToZero >= 1) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid DecayToZero; must be between 0 and 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n// no need to check the score retention; a value of 0 means that we don't retain scores\n}\n// eslint-disable-next-line complexity\nfunction validateTopicScoreParams(p) {\n    // make sure we have a sane topic weight\n    if (p.topicWeight < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid topic weight; must be >= 0\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P1\n    if (p.timeInMeshQuantum === 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid TimeInMeshQuantum; must be non zero\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid TimeInMeshWeight; must be positive (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid TimeInMeshQuantum; must be positive\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid TimeInMeshCap; must be positive\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P2\n    if (p.firstMessageDeliveriesWeight < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.firstMessageDeliveriesWeight !== 0 && (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid FirstMessageDeliveriesDecay; must be between 0 and 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid FirstMessageDeliveriesCap; must be positive\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P3\n    if (p.meshMessageDeliveriesWeight > 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshMessageDeliveriesDecay; must be between 0 and 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshMessageDeliveriesCap; must be positive\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshMessageDeliveriesThreshold; must be positive\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWindow < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshMessageDeliveriesWindow; must be non-negative\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshMessageDeliveriesActivation; must be at least 1s\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P3b\n    if (p.meshFailurePenaltyWeight > 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid MeshFailurePenaltyDecay; must be between 0 and 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    // check P4\n    if (p.invalidMessageDeliveriesWeight > 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n    if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid InvalidMessageDeliveriesDecay; must be between 0 and 1\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n} //# sourceMappingURL=peer-score-params.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-thresholds.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-thresholds.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPeerScoreThresholds: () => (/* binding */ createPeerScoreThresholds),\n/* harmony export */   defaultPeerScoreThresholds: () => (/* binding */ defaultPeerScoreThresholds),\n/* harmony export */   validatePeerScoreThresholds: () => (/* binding */ validatePeerScoreThresholds)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/constants.js\");\n\n\nconst defaultPeerScoreThresholds = {\n    gossipThreshold: -10,\n    publishThreshold: -50,\n    graylistThreshold: -80,\n    acceptPXThreshold: 10,\n    opportunisticGraftThreshold: 20\n};\nfunction createPeerScoreThresholds(p = {}) {\n    return {\n        ...defaultPeerScoreThresholds,\n        ...p\n    };\n}\nfunction validatePeerScoreThresholds(p) {\n    if (p.gossipThreshold > 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid gossip threshold; it must be <= 0\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.publishThreshold > 0 || p.publishThreshold > p.gossipThreshold) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid publish threshold; it must be <= 0 and <= gossip threshold\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.graylistThreshold > 0 || p.graylistThreshold > p.publishThreshold) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid graylist threshold; it must be <= 0 and <= publish threshold\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.acceptPXThreshold < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid accept PX threshold; it must be >= 0\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n    if (p.opportunisticGraftThreshold < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"invalid opportunistic grafting threshold; it must be >= 0\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_INVALID_PEER_SCORE_THRESHOLDS);\n    }\n} //# sourceMappingURL=peer-score-thresholds.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3Njb3JlL3BlZXItc2NvcmUtdGhyZXNob2xkcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QztBQUNxQjtBQUM1RCxNQUFNRSw2QkFBNkI7SUFDdENDLGlCQUFpQixDQUFDO0lBQ2xCQyxrQkFBa0IsQ0FBQztJQUNuQkMsbUJBQW1CLENBQUM7SUFDcEJDLG1CQUFtQjtJQUNuQkMsNkJBQTZCO0FBQ2pDLEVBQUU7QUFDSyxTQUFTQywwQkFBMEJDLElBQUksQ0FBQyxDQUFDO0lBQzVDLE9BQU87UUFDSCxHQUFHUCwwQkFBMEI7UUFDN0IsR0FBR08sQ0FBQztJQUNSO0FBQ0o7QUFDTyxTQUFTQyw0QkFBNEJELENBQUM7SUFDekMsSUFBSUEsRUFBRU4sZUFBZSxHQUFHLEdBQUc7UUFDdkIsTUFBTSxJQUFJSCx3REFBU0EsQ0FBQyw2Q0FBNkNDLDRFQUFpQ0E7SUFDdEc7SUFDQSxJQUFJUSxFQUFFTCxnQkFBZ0IsR0FBRyxLQUFLSyxFQUFFTCxnQkFBZ0IsR0FBR0ssRUFBRU4sZUFBZSxFQUFFO1FBQ2xFLE1BQU0sSUFBSUgsd0RBQVNBLENBQUMsc0VBQXNFQyw0RUFBaUNBO0lBQy9IO0lBQ0EsSUFBSVEsRUFBRUosaUJBQWlCLEdBQUcsS0FBS0ksRUFBRUosaUJBQWlCLEdBQUdJLEVBQUVMLGdCQUFnQixFQUFFO1FBQ3JFLE1BQU0sSUFBSUosd0RBQVNBLENBQUMsd0VBQXdFQyw0RUFBaUNBO0lBQ2pJO0lBQ0EsSUFBSVEsRUFBRUgsaUJBQWlCLEdBQUcsR0FBRztRQUN6QixNQUFNLElBQUlOLHdEQUFTQSxDQUFDLGdEQUFnREMsNEVBQWlDQTtJQUN6RztJQUNBLElBQUlRLEVBQUVGLDJCQUEyQixHQUFHLEdBQUc7UUFDbkMsTUFBTSxJQUFJUCx3REFBU0EsQ0FBQyw2REFBNkRDLDRFQUFpQ0E7SUFDdEg7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLWdvc3NpcHN1Yi9kaXN0L3NyYy9zY29yZS9wZWVyLXNjb3JlLXRocmVzaG9sZHMuanM/ZWIyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2RlRXJyb3IgfSBmcm9tICdAbGlicDJwL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBFUlJfSU5WQUxJRF9QRUVSX1NDT1JFX1RIUkVTSE9MRFMgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5leHBvcnQgY29uc3QgZGVmYXVsdFBlZXJTY29yZVRocmVzaG9sZHMgPSB7XG4gICAgZ29zc2lwVGhyZXNob2xkOiAtMTAsXG4gICAgcHVibGlzaFRocmVzaG9sZDogLTUwLFxuICAgIGdyYXlsaXN0VGhyZXNob2xkOiAtODAsXG4gICAgYWNjZXB0UFhUaHJlc2hvbGQ6IDEwLFxuICAgIG9wcG9ydHVuaXN0aWNHcmFmdFRocmVzaG9sZDogMjBcbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGVlclNjb3JlVGhyZXNob2xkcyhwID0ge30pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0UGVlclNjb3JlVGhyZXNob2xkcyxcbiAgICAgICAgLi4ucFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQZWVyU2NvcmVUaHJlc2hvbGRzKHApIHtcbiAgICBpZiAocC5nb3NzaXBUaHJlc2hvbGQgPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IoJ2ludmFsaWQgZ29zc2lwIHRocmVzaG9sZDsgaXQgbXVzdCBiZSA8PSAwJywgRVJSX0lOVkFMSURfUEVFUl9TQ09SRV9USFJFU0hPTERTKTtcbiAgICB9XG4gICAgaWYgKHAucHVibGlzaFRocmVzaG9sZCA+IDAgfHwgcC5wdWJsaXNoVGhyZXNob2xkID4gcC5nb3NzaXBUaHJlc2hvbGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignaW52YWxpZCBwdWJsaXNoIHRocmVzaG9sZDsgaXQgbXVzdCBiZSA8PSAwIGFuZCA8PSBnb3NzaXAgdGhyZXNob2xkJywgRVJSX0lOVkFMSURfUEVFUl9TQ09SRV9USFJFU0hPTERTKTtcbiAgICB9XG4gICAgaWYgKHAuZ3JheWxpc3RUaHJlc2hvbGQgPiAwIHx8IHAuZ3JheWxpc3RUaHJlc2hvbGQgPiBwLnB1Ymxpc2hUaHJlc2hvbGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignaW52YWxpZCBncmF5bGlzdCB0aHJlc2hvbGQ7IGl0IG11c3QgYmUgPD0gMCBhbmQgPD0gcHVibGlzaCB0aHJlc2hvbGQnLCBFUlJfSU5WQUxJRF9QRUVSX1NDT1JFX1RIUkVTSE9MRFMpO1xuICAgIH1cbiAgICBpZiAocC5hY2NlcHRQWFRocmVzaG9sZCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignaW52YWxpZCBhY2NlcHQgUFggdGhyZXNob2xkOyBpdCBtdXN0IGJlID49IDAnLCBFUlJfSU5WQUxJRF9QRUVSX1NDT1JFX1RIUkVTSE9MRFMpO1xuICAgIH1cbiAgICBpZiAocC5vcHBvcnR1bmlzdGljR3JhZnRUaHJlc2hvbGQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IoJ2ludmFsaWQgb3Bwb3J0dW5pc3RpYyBncmFmdGluZyB0aHJlc2hvbGQ7IGl0IG11c3QgYmUgPj0gMCcsIEVSUl9JTlZBTElEX1BFRVJfU0NPUkVfVEhSRVNIT0xEUyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVlci1zY29yZS10aHJlc2hvbGRzLmpzLm1hcCJdLCJuYW1lcyI6WyJDb2RlRXJyb3IiLCJFUlJfSU5WQUxJRF9QRUVSX1NDT1JFX1RIUkVTSE9MRFMiLCJkZWZhdWx0UGVlclNjb3JlVGhyZXNob2xkcyIsImdvc3NpcFRocmVzaG9sZCIsInB1Ymxpc2hUaHJlc2hvbGQiLCJncmF5bGlzdFRocmVzaG9sZCIsImFjY2VwdFBYVGhyZXNob2xkIiwib3Bwb3J0dW5pc3RpY0dyYWZ0VGhyZXNob2xkIiwiY3JlYXRlUGVlclNjb3JlVGhyZXNob2xkcyIsInAiLCJ2YWxpZGF0ZVBlZXJTY29yZVRocmVzaG9sZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-thresholds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerScore: () => (/* binding */ PeerScore)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\");\n/* harmony import */ var _utils_set_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/set.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js\");\n/* harmony import */ var _compute_score_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./compute-score.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/compute-score.js\");\n/* harmony import */ var _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./message-deliveries.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/message-deliveries.js\");\n/* harmony import */ var _peer_score_params_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./peer-score-params.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score-params.js\");\n\n\n\n\n\nclass PeerScore {\n    constructor(params, metrics, componentLogger, opts){\n        /**\n     * Per-peer stats for score calculation\n     */ this.peerStats = new Map();\n        /**\n     * IP colocation tracking; maps IP => set of peers.\n     */ this.peerIPs = new _utils_set_js__WEBPACK_IMPORTED_MODULE_0__.MapDef(()=>new Set());\n        /**\n     * Cache score up to decayInterval if topic stats are unchanged.\n     */ this.scoreCache = new Map();\n        /**\n     * Recent message delivery timing/participants\n     */ this.deliveryRecords = new _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.MessageDeliveries();\n        this.params = params;\n        this.metrics = metrics;\n        (0,_peer_score_params_js__WEBPACK_IMPORTED_MODULE_2__.validatePeerScoreParams)(params);\n        this.scoreCacheValidityMs = opts.scoreCacheValidityMs;\n        this.computeScore = opts.computeScore ?? _compute_score_js__WEBPACK_IMPORTED_MODULE_3__.computeScore;\n        this.log = componentLogger.forComponent(\"libp2p:gossipsub:score\");\n    }\n    get size() {\n        return this.peerStats.size;\n    }\n    /**\n     * Start PeerScore instance\n     */ start() {\n        if (this._backgroundInterval != null) {\n            this.log(\"Peer score already running\");\n            return;\n        }\n        this._backgroundInterval = setInterval(()=>{\n            this.background();\n        }, this.params.decayInterval);\n        this.log(\"started\");\n    }\n    /**\n     * Stop PeerScore instance\n     */ stop() {\n        if (this._backgroundInterval == null) {\n            this.log(\"Peer score already stopped\");\n            return;\n        }\n        clearInterval(this._backgroundInterval);\n        delete this._backgroundInterval;\n        this.peerIPs.clear();\n        this.peerStats.clear();\n        this.deliveryRecords.clear();\n        this.log(\"stopped\");\n    }\n    /**\n     * Periodic maintenance\n     */ background() {\n        this.refreshScores();\n        this.deliveryRecords.gc();\n    }\n    dumpPeerScoreStats() {\n        return Object.fromEntries(Array.from(this.peerStats.entries()).map(([peer, stats])=>[\n                peer,\n                stats\n            ]));\n    }\n    messageFirstSeenTimestampMs(msgIdStr) {\n        const drec = this.deliveryRecords.getRecord(msgIdStr);\n        return drec != null ? drec.firstSeenTsMs : null;\n    }\n    /**\n     * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.\n     */ refreshScores() {\n        const now = Date.now();\n        const decayToZero = this.params.decayToZero;\n        this.peerStats.forEach((pstats, id)=>{\n            if (!pstats.connected) {\n                // has the retention period expired?\n                if (now > pstats.expire) {\n                    // yes, throw it away (but clean up the IP tracking first)\n                    this.removeIPsForPeer(id, pstats.knownIPs);\n                    this.peerStats.delete(id);\n                    this.scoreCache.delete(id);\n                }\n                // we don't decay retained scores, as the peer is not active.\n                // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,\n                // unless the retention period has elapsed.\n                // similarly, a well behaved peer does not lose its score by getting disconnected.\n                return;\n            }\n            Object.entries(pstats.topics).forEach(([topic, tstats])=>{\n                const tparams = this.params.topics[topic];\n                if (tparams === undefined) {\n                    // we are not scoring this topic\n                    // should be unreachable, we only add scored topics to pstats\n                    return;\n                }\n                // decay counters\n                tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;\n                if (tstats.firstMessageDeliveries < decayToZero) {\n                    tstats.firstMessageDeliveries = 0;\n                }\n                tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;\n                if (tstats.meshMessageDeliveries < decayToZero) {\n                    tstats.meshMessageDeliveries = 0;\n                }\n                tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;\n                if (tstats.meshFailurePenalty < decayToZero) {\n                    tstats.meshFailurePenalty = 0;\n                }\n                tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;\n                if (tstats.invalidMessageDeliveries < decayToZero) {\n                    tstats.invalidMessageDeliveries = 0;\n                }\n                // update mesh time and activate mesh message delivery parameter if need be\n                if (tstats.inMesh) {\n                    tstats.meshTime = now - tstats.graftTime;\n                    if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {\n                        tstats.meshMessageDeliveriesActive = true;\n                    }\n                }\n            });\n            // decay P7 counter\n            pstats.behaviourPenalty *= this.params.behaviourPenaltyDecay;\n            if (pstats.behaviourPenalty < decayToZero) {\n                pstats.behaviourPenalty = 0;\n            }\n        });\n    }\n    /**\n     * Return the score for a peer\n     */ score(id) {\n        this.metrics?.scoreFnCalls.inc();\n        const pstats = this.peerStats.get(id);\n        if (pstats == null) {\n            return 0;\n        }\n        const now = Date.now();\n        const cacheEntry = this.scoreCache.get(id);\n        // Found cached score within validity period\n        if (cacheEntry != null && cacheEntry.cacheUntil > now) {\n            return cacheEntry.score;\n        }\n        this.metrics?.scoreFnRuns.inc();\n        const score = this.computeScore(id, pstats, this.params, this.peerIPs);\n        const cacheUntil = now + this.scoreCacheValidityMs;\n        if (cacheEntry != null) {\n            this.metrics?.scoreCachedDelta.observe(Math.abs(score - cacheEntry.score));\n            cacheEntry.score = score;\n            cacheEntry.cacheUntil = cacheUntil;\n        } else {\n            this.scoreCache.set(id, {\n                score,\n                cacheUntil\n            });\n        }\n        return score;\n    }\n    /**\n     * Apply a behavioural penalty to a peer\n     */ addPenalty(id, penalty, penaltyLabel) {\n        const pstats = this.peerStats.get(id);\n        if (pstats != null) {\n            pstats.behaviourPenalty += penalty;\n            this.metrics?.onScorePenalty(penaltyLabel);\n        }\n    }\n    addPeer(id) {\n        // create peer stats (not including topic stats for each topic to be scored)\n        // topic stats will be added as needed\n        const pstats = {\n            connected: true,\n            expire: 0,\n            topics: {},\n            knownIPs: new Set(),\n            behaviourPenalty: 0\n        };\n        this.peerStats.set(id, pstats);\n    }\n    /** Adds a new IP to a peer, if the peer is not known the update is ignored */ addIP(id, ip) {\n        const pstats = this.peerStats.get(id);\n        if (pstats != null) {\n            pstats.knownIPs.add(ip);\n        }\n        this.peerIPs.getOrDefault(ip).add(id);\n    }\n    /** Remove peer association with IP */ removeIP(id, ip) {\n        const pstats = this.peerStats.get(id);\n        if (pstats != null) {\n            pstats.knownIPs.delete(ip);\n        }\n        const peersWithIP = this.peerIPs.get(ip);\n        if (peersWithIP != null) {\n            peersWithIP.delete(id);\n            if (peersWithIP.size === 0) {\n                this.peerIPs.delete(ip);\n            }\n        }\n    }\n    removePeer(id) {\n        const pstats = this.peerStats.get(id);\n        if (pstats == null) {\n            return;\n        }\n        // decide whether to retain the score; this currently only retains non-positive scores\n        // to dissuade attacks on the score function.\n        if (this.score(id) > 0) {\n            this.removeIPsForPeer(id, pstats.knownIPs);\n            this.peerStats.delete(id);\n            return;\n        }\n        // furthermore, when we decide to retain the score, the firstMessageDelivery counters are\n        // reset to 0 and mesh delivery penalties applied.\n        Object.entries(pstats.topics).forEach(([topic, tstats])=>{\n            tstats.firstMessageDeliveries = 0;\n            const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n            if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n                const deficit = threshold - tstats.meshMessageDeliveries;\n                tstats.meshFailurePenalty += deficit * deficit;\n            }\n            tstats.inMesh = false;\n            tstats.meshMessageDeliveriesActive = false;\n        });\n        pstats.connected = false;\n        pstats.expire = Date.now() + this.params.retainScore;\n    }\n    /** Handles scoring functionality as a peer GRAFTs to a topic. */ graft(id, topic) {\n        const pstats = this.peerStats.get(id);\n        if (pstats != null) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats != null) {\n                // if we are scoring the topic, update the mesh status.\n                tstats.inMesh = true;\n                tstats.graftTime = Date.now();\n                tstats.meshTime = 0;\n                tstats.meshMessageDeliveriesActive = false;\n            }\n        }\n    }\n    /** Handles scoring functionality as a peer PRUNEs from a topic. */ prune(id, topic) {\n        const pstats = this.peerStats.get(id);\n        if (pstats != null) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats != null) {\n                // sticky mesh delivery rate failure penalty\n                const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n                if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n                    const deficit = threshold - tstats.meshMessageDeliveries;\n                    tstats.meshFailurePenalty += deficit * deficit;\n                }\n                tstats.meshMessageDeliveriesActive = false;\n                tstats.inMesh = false;\n            // TODO: Consider clearing score cache on important penalties\n            // this.scoreCache.delete(id)\n            }\n        }\n    }\n    validateMessage(msgIdStr) {\n        this.deliveryRecords.ensureRecord(msgIdStr);\n    }\n    deliverMessage(from, msgIdStr, topic) {\n        this.markFirstMessageDelivery(from, topic);\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        const now = Date.now();\n        // defensive check that this is the first delivery trace -- delivery status should be unknown\n        if (drec.status !== _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.unknown) {\n            this.log(\"unexpected delivery: message from %s was first seen %s ago and has delivery status %s\", from, now - drec.firstSeenTsMs, _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus[drec.status]);\n            return;\n        }\n        // mark the message as valid and reward mesh peers that have already forwarded it to us\n        drec.status = _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.valid;\n        drec.validated = now;\n        drec.peers.forEach((p)=>{\n            // this check is to make sure a peer can't send us a message twice and get a double count\n            // if it is a first delivery.\n            if (p !== from.toString()) {\n                this.markDuplicateMessageDelivery(p, topic);\n            }\n        });\n    }\n    /**\n     * Similar to `rejectMessage` except does not require the message id or reason for an invalid message.\n     */ rejectInvalidMessage(from, topic) {\n        this.markInvalidMessageDelivery(from, topic);\n    }\n    rejectMessage(from, msgIdStr, topic, reason) {\n        // eslint-disable-next-line default-case\n        switch(reason){\n            // these messages are not tracked, but the peer is penalized as they are invalid\n            case _types_js__WEBPACK_IMPORTED_MODULE_4__.RejectReason.Error:\n                this.markInvalidMessageDelivery(from, topic);\n                return;\n            // we ignore those messages, so do nothing.\n            case _types_js__WEBPACK_IMPORTED_MODULE_4__.RejectReason.Blacklisted:\n                return;\n        }\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        // defensive check that this is the first rejection -- delivery status should be unknown\n        if (drec.status !== _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.unknown) {\n            this.log(\"unexpected rejection: message from %s was first seen %s ago and has delivery status %d\", from, Date.now() - drec.firstSeenTsMs, _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus[drec.status]);\n            return;\n        }\n        if (reason === _types_js__WEBPACK_IMPORTED_MODULE_4__.RejectReason.Ignore) {\n            // we were explicitly instructed by the validator to ignore the message but not penalize the peer\n            drec.status = _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.ignored;\n            drec.peers.clear();\n            return;\n        }\n        // mark the message as invalid and penalize peers that have already forwarded it.\n        drec.status = _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.invalid;\n        this.markInvalidMessageDelivery(from, topic);\n        drec.peers.forEach((p)=>{\n            this.markInvalidMessageDelivery(p, topic);\n        });\n        // release the delivery time tracking map to free some memory early\n        drec.peers.clear();\n    }\n    duplicateMessage(from, msgIdStr, topic) {\n        const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n        if (drec.peers.has(from)) {\n            // we have already seen this duplicate\n            return;\n        }\n        // eslint-disable-next-line default-case\n        switch(drec.status){\n            case _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.unknown:\n                // the message is being validated; track the peer delivery and wait for\n                // the Deliver/Reject/Ignore notification.\n                drec.peers.add(from);\n                break;\n            case _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.valid:\n                // mark the peer delivery time to only count a duplicate delivery once.\n                drec.peers.add(from);\n                this.markDuplicateMessageDelivery(from, topic, drec.validated);\n                break;\n            case _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.invalid:\n                // we no longer track delivery time\n                this.markInvalidMessageDelivery(from, topic);\n                break;\n            case _message_deliveries_js__WEBPACK_IMPORTED_MODULE_1__.DeliveryRecordStatus.ignored:\n                break;\n        }\n    }\n    /**\n     * Increments the \"invalid message deliveries\" counter for all scored topics the message is published in.\n     */ markInvalidMessageDelivery(from, topic) {\n        const pstats = this.peerStats.get(from);\n        if (pstats != null) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats != null) {\n                tstats.invalidMessageDeliveries += 1;\n            }\n        }\n    }\n    /**\n     * Increments the \"first message deliveries\" counter for all scored topics the message is published in,\n     * as well as the \"mesh message deliveries\" counter, if the peer is in the mesh for the topic.\n     * Messages already known (with the seenCache) are counted with markDuplicateMessageDelivery()\n     */ markFirstMessageDelivery(from, topic) {\n        const pstats = this.peerStats.get(from);\n        if (pstats != null) {\n            const tstats = this.getPtopicStats(pstats, topic);\n            if (tstats != null) {\n                let cap = this.params.topics[topic].firstMessageDeliveriesCap;\n                tstats.firstMessageDeliveries = Math.min(cap, tstats.firstMessageDeliveries + 1);\n                if (tstats.inMesh) {\n                    cap = this.params.topics[topic].meshMessageDeliveriesCap;\n                    tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n                }\n            }\n        }\n    }\n    /**\n     * Increments the \"mesh message deliveries\" counter for messages we've seen before,\n     * as long the message was received within the P3 window.\n     */ markDuplicateMessageDelivery(from, topic, validatedTime) {\n        const pstats = this.peerStats.get(from);\n        if (pstats != null) {\n            const now = validatedTime !== undefined ? Date.now() : 0;\n            const tstats = this.getPtopicStats(pstats, topic);\n            // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n            if (tstats != null && tstats.inMesh) {\n                const tparams = this.params.topics[topic];\n                // check against the mesh delivery window -- if the validated time is passed as 0, then\n                // the message was received before we finished validation and thus falls within the mesh\n                // delivery window.\n                if (validatedTime !== undefined) {\n                    const deliveryDelayMs = now - validatedTime;\n                    const isLateDelivery = deliveryDelayMs > tparams.meshMessageDeliveriesWindow;\n                    this.metrics?.onDuplicateMsgDelivery(topic, deliveryDelayMs, isLateDelivery);\n                    if (isLateDelivery) {\n                        return;\n                    }\n                }\n                const cap = tparams.meshMessageDeliveriesCap;\n                tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n            }\n        }\n    }\n    /**\n     * Removes an IP list from the tracking list for a peer.\n     */ removeIPsForPeer(id, ipsToRemove) {\n        for (const ipToRemove of ipsToRemove){\n            const peerSet = this.peerIPs.get(ipToRemove);\n            if (peerSet != null) {\n                peerSet.delete(id);\n                if (peerSet.size === 0) {\n                    this.peerIPs.delete(ipToRemove);\n                }\n            }\n        }\n    }\n    /**\n     * Returns topic stats if they exist, otherwise if the supplied parameters score the\n     * topic, inserts the default stats and returns a reference to those. If neither apply, returns None.\n     */ getPtopicStats(pstats, topic) {\n        let topicStats = pstats.topics[topic];\n        if (topicStats !== undefined) {\n            return topicStats;\n        }\n        if (this.params.topics[topic] !== undefined) {\n            topicStats = {\n                inMesh: false,\n                graftTime: 0,\n                meshTime: 0,\n                firstMessageDeliveries: 0,\n                meshMessageDeliveries: 0,\n                meshMessageDeliveriesActive: false,\n                meshFailurePenalty: 0,\n                invalidMessageDeliveries: 0\n            };\n            pstats.topics[topic] = topicStats;\n            return topicStats;\n        }\n        return null;\n    }\n} //# sourceMappingURL=peer-score.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/peer-score.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/scoreMetrics.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/scoreMetrics.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeAllPeersScoreWeights: () => (/* binding */ computeAllPeersScoreWeights),\n/* harmony export */   computeScoreWeights: () => (/* binding */ computeScoreWeights)\n/* harmony export */ });\nfunction computeScoreWeights(peer, pstats, params, peerIPs, topicStrToLabel) {\n    let score = 0;\n    const byTopic = new Map();\n    // topic stores\n    Object.entries(pstats.topics).forEach(([topic, tstats])=>{\n        // the topic parameters\n        // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n        const topicLabel = topicStrToLabel.get(topic) ?? \"unknown\";\n        const topicParams = params.topics[topic];\n        if (topicParams === undefined) {\n            // we are not scoring this topic\n            return;\n        }\n        let topicScores = byTopic.get(topicLabel);\n        if (topicScores == null) {\n            topicScores = {\n                p1w: 0,\n                p2w: 0,\n                p3w: 0,\n                p3bw: 0,\n                p4w: 0\n            };\n            byTopic.set(topicLabel, topicScores);\n        }\n        let p1w = 0;\n        let p2w = 0;\n        let p3w = 0;\n        let p3bw = 0;\n        let p4w = 0;\n        // P1: time in Mesh\n        if (tstats.inMesh) {\n            const p1 = Math.max(tstats.meshTime / topicParams.timeInMeshQuantum, topicParams.timeInMeshCap);\n            p1w += p1 * topicParams.timeInMeshWeight;\n        }\n        // P2: first message deliveries\n        let p2 = tstats.firstMessageDeliveries;\n        if (p2 > topicParams.firstMessageDeliveriesCap) {\n            p2 = topicParams.firstMessageDeliveriesCap;\n        }\n        p2w += p2 * topicParams.firstMessageDeliveriesWeight;\n        // P3: mesh message deliveries\n        if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n            const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n            const p3 = deficit * deficit;\n            p3w += p3 * topicParams.meshMessageDeliveriesWeight;\n        }\n        // P3b:\n        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n        const p3b = tstats.meshFailurePenalty;\n        p3bw += p3b * topicParams.meshFailurePenaltyWeight;\n        // P4: invalid messages\n        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n        p4w += p4 * topicParams.invalidMessageDeliveriesWeight;\n        // update score, mixing with topic weight\n        score += (p1w + p2w + p3w + p3bw + p4w) * topicParams.topicWeight;\n        topicScores.p1w += p1w;\n        topicScores.p2w += p2w;\n        topicScores.p3w += p3w;\n        topicScores.p3bw += p3bw;\n        topicScores.p4w += p4w;\n    });\n    // apply the topic score cap, if any\n    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n        score = params.topicScoreCap;\n        // Proportionally apply cap to all individual contributions\n        const capF = params.topicScoreCap / score;\n        for (const ws of byTopic.values()){\n            ws.p1w *= capF;\n            ws.p2w *= capF;\n            ws.p3w *= capF;\n            ws.p3bw *= capF;\n            ws.p4w *= capF;\n        }\n    }\n    let p5w = 0;\n    let p6w = 0;\n    let p7w = 0;\n    // P5: application-specific score\n    const p5 = params.appSpecificScore(peer);\n    p5w += p5 * params.appSpecificWeight;\n    // P6: IP colocation factor\n    pstats.knownIPs.forEach((ip)=>{\n        if (params.IPColocationFactorWhitelist.has(ip)) {\n            return;\n        }\n        // P6 has a cliff (IPColocationFactorThreshold)\n        // It's only applied if at least that many peers are connected to us from that source IP addr.\n        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n        const peersInIP = peerIPs.get(ip);\n        const numPeersInIP = peersInIP != null ? peersInIP.size : 0;\n        if (numPeersInIP > params.IPColocationFactorThreshold) {\n            const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n            const p6 = surplus * surplus;\n            p6w += p6 * params.IPColocationFactorWeight;\n        }\n    });\n    // P7: behavioural pattern penalty\n    const p7 = pstats.behaviourPenalty * pstats.behaviourPenalty;\n    p7w += p7 * params.behaviourPenaltyWeight;\n    score += p5w + p6w + p7w;\n    return {\n        byTopic,\n        p5w,\n        p6w,\n        p7w,\n        score\n    };\n}\nfunction computeAllPeersScoreWeights(peerIdStrs, peerStats, params, peerIPs, topicStrToLabel) {\n    const sw = {\n        byTopic: new Map(),\n        p5w: [],\n        p6w: [],\n        p7w: [],\n        score: []\n    };\n    for (const peerIdStr of peerIdStrs){\n        const pstats = peerStats.get(peerIdStr);\n        if (pstats != null) {\n            const swPeer = computeScoreWeights(peerIdStr, pstats, params, peerIPs, topicStrToLabel);\n            for (const [topic, swPeerTopic] of swPeer.byTopic){\n                let swTopic = sw.byTopic.get(topic);\n                if (swTopic == null) {\n                    swTopic = {\n                        p1w: [],\n                        p2w: [],\n                        p3w: [],\n                        p3bw: [],\n                        p4w: []\n                    };\n                    sw.byTopic.set(topic, swTopic);\n                }\n                swTopic.p1w.push(swPeerTopic.p1w);\n                swTopic.p2w.push(swPeerTopic.p2w);\n                swTopic.p3w.push(swPeerTopic.p3w);\n                swTopic.p3bw.push(swPeerTopic.p3bw);\n                swTopic.p4w.push(swPeerTopic.p4w);\n            }\n            sw.p5w.push(swPeer.p5w);\n            sw.p6w.push(swPeer.p6w);\n            sw.p7w.push(swPeer.p7w);\n            sw.score.push(swPeer.score);\n        } else {\n            sw.p5w.push(0);\n            sw.p6w.push(0);\n            sw.p7w.push(0);\n            sw.score.push(0);\n        }\n    }\n    return sw;\n} //# sourceMappingURL=scoreMetrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/score/scoreMetrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/stream.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/stream.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InboundStream: () => (/* binding */ InboundStream),\n/* harmony export */   OutboundStream: () => (/* binding */ OutboundStream)\n/* harmony export */ });\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"(ssr)/./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pipe */ \"(ssr)/./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pushable */ \"(ssr)/./node_modules/it-pushable/dist/src/index.js\");\n\n\n\nclass OutboundStream {\n    constructor(rawStream, errCallback, opts){\n        this.rawStream = rawStream;\n        this.pushable = (0,it_pushable__WEBPACK_IMPORTED_MODULE_2__.pushable)();\n        this.closeController = new AbortController();\n        this.maxBufferSize = opts.maxBufferSize ?? Infinity;\n        this.closeController.signal.addEventListener(\"abort\", ()=>{\n            rawStream.close().catch((err)=>{\n                rawStream.abort(err);\n            });\n        });\n        (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(this.pushable, this.rawStream).catch(errCallback);\n    }\n    get protocol() {\n        // TODO remove this non-nullish assertion after https://github.com/libp2p/js-libp2p-interfaces/pull/265 is incorporated\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.rawStream.protocol;\n    }\n    push(data) {\n        if (this.pushable.readableLength > this.maxBufferSize) {\n            throw Error(`OutboundStream buffer full, size > ${this.maxBufferSize}`);\n        }\n        this.pushable.push(it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.encode.single(data));\n    }\n    /**\n     * Same to push() but this is prefixed data so no need to encode length prefixed again\n     */ pushPrefixed(data) {\n        if (this.pushable.readableLength > this.maxBufferSize) {\n            throw Error(`OutboundStream buffer full, size > ${this.maxBufferSize}`);\n        }\n        this.pushable.push(data);\n    }\n    async close() {\n        this.closeController.abort();\n        // similar to pushable.end() but clear the internal buffer\n        await this.pushable.return();\n    }\n}\nclass InboundStream {\n    constructor(rawStream, opts = {}){\n        this.rawStream = rawStream;\n        this.closeController = new AbortController();\n        this.closeController.signal.addEventListener(\"abort\", ()=>{\n            rawStream.close().catch((err)=>{\n                rawStream.abort(err);\n            });\n        });\n        this.source = (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(this.rawStream, (source)=>(0,it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.decode)(source, opts));\n    }\n    async close() {\n        this.closeController.abort();\n    }\n} //# sourceMappingURL=stream.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNyQjtBQUNRO0FBQ2hDLE1BQU1JO0lBS1RDLFlBQVlDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxJQUFJLENBQUU7UUFDdEMsSUFBSSxDQUFDRixTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0gsUUFBUSxHQUFHQSxxREFBUUE7UUFDeEIsSUFBSSxDQUFDTSxlQUFlLEdBQUcsSUFBSUM7UUFDM0IsSUFBSSxDQUFDQyxhQUFhLEdBQUdILEtBQUtHLGFBQWEsSUFBSUM7UUFDM0MsSUFBSSxDQUFDSCxlQUFlLENBQUNJLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUMsU0FBUztZQUNsRFIsVUFBVVMsS0FBSyxHQUNWQyxLQUFLLENBQUNDLENBQUFBO2dCQUNQWCxVQUFVWSxLQUFLLENBQUNEO1lBQ3BCO1FBQ0o7UUFDQWYsNkNBQUlBLENBQUMsSUFBSSxDQUFDQyxRQUFRLEVBQUUsSUFBSSxDQUFDRyxTQUFTLEVBQUVVLEtBQUssQ0FBQ1Q7SUFDOUM7SUFDQSxJQUFJWSxXQUFXO1FBQ1gsdUhBQXVIO1FBQ3ZILG9FQUFvRTtRQUNwRSxPQUFPLElBQUksQ0FBQ2IsU0FBUyxDQUFDYSxRQUFRO0lBQ2xDO0lBQ0FDLEtBQUtDLElBQUksRUFBRTtRQUNQLElBQUksSUFBSSxDQUFDbEIsUUFBUSxDQUFDbUIsY0FBYyxHQUFHLElBQUksQ0FBQ1gsYUFBYSxFQUFFO1lBQ25ELE1BQU1ZLE1BQU0sQ0FBQyxtQ0FBbUMsRUFBRSxJQUFJLENBQUNaLGFBQWEsQ0FBQyxDQUFDO1FBQzFFO1FBQ0EsSUFBSSxDQUFDUixRQUFRLENBQUNpQixJQUFJLENBQUNwQixzREFBTUEsQ0FBQ3dCLE1BQU0sQ0FBQ0g7SUFDckM7SUFDQTs7S0FFQyxHQUNESSxhQUFhSixJQUFJLEVBQUU7UUFDZixJQUFJLElBQUksQ0FBQ2xCLFFBQVEsQ0FBQ21CLGNBQWMsR0FBRyxJQUFJLENBQUNYLGFBQWEsRUFBRTtZQUNuRCxNQUFNWSxNQUFNLENBQUMsbUNBQW1DLEVBQUUsSUFBSSxDQUFDWixhQUFhLENBQUMsQ0FBQztRQUMxRTtRQUNBLElBQUksQ0FBQ1IsUUFBUSxDQUFDaUIsSUFBSSxDQUFDQztJQUN2QjtJQUNBLE1BQU1OLFFBQVE7UUFDVixJQUFJLENBQUNOLGVBQWUsQ0FBQ1MsS0FBSztRQUMxQiwwREFBMEQ7UUFDMUQsTUFBTSxJQUFJLENBQUNmLFFBQVEsQ0FBQ3VCLE1BQU07SUFDOUI7QUFDSjtBQUNPLE1BQU1DO0lBSVR0QixZQUFZQyxTQUFTLEVBQUVFLE9BQU8sQ0FBQyxDQUFDLENBQUU7UUFDOUIsSUFBSSxDQUFDRixTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0csZUFBZSxHQUFHLElBQUlDO1FBQzNCLElBQUksQ0FBQ0QsZUFBZSxDQUFDSSxNQUFNLENBQUNDLGdCQUFnQixDQUFDLFNBQVM7WUFDbERSLFVBQVVTLEtBQUssR0FDVkMsS0FBSyxDQUFDQyxDQUFBQTtnQkFDUFgsVUFBVVksS0FBSyxDQUFDRDtZQUNwQjtRQUNKO1FBQ0EsSUFBSSxDQUFDVyxNQUFNLEdBQUcxQiw2Q0FBSUEsQ0FBQyxJQUFJLENBQUNJLFNBQVMsRUFBRSxDQUFDc0IsU0FBVzNCLDBEQUFNQSxDQUFDMkIsUUFBUXBCO0lBQ2xFO0lBQ0EsTUFBTU8sUUFBUTtRQUNWLElBQUksQ0FBQ04sZUFBZSxDQUFDUyxLQUFLO0lBQzlCO0FBQ0osRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvc3RyZWFtLmpzP2U2N2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW5jb2RlLCBkZWNvZGUgfSBmcm9tICdpdC1sZW5ndGgtcHJlZml4ZWQnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJ2l0LXBpcGUnO1xuaW1wb3J0IHsgcHVzaGFibGUgfSBmcm9tICdpdC1wdXNoYWJsZSc7XG5leHBvcnQgY2xhc3MgT3V0Ym91bmRTdHJlYW0ge1xuICAgIHJhd1N0cmVhbTtcbiAgICBwdXNoYWJsZTtcbiAgICBjbG9zZUNvbnRyb2xsZXI7XG4gICAgbWF4QnVmZmVyU2l6ZTtcbiAgICBjb25zdHJ1Y3RvcihyYXdTdHJlYW0sIGVyckNhbGxiYWNrLCBvcHRzKSB7XG4gICAgICAgIHRoaXMucmF3U3RyZWFtID0gcmF3U3RyZWFtO1xuICAgICAgICB0aGlzLnB1c2hhYmxlID0gcHVzaGFibGUoKTtcbiAgICAgICAgdGhpcy5jbG9zZUNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIHRoaXMubWF4QnVmZmVyU2l6ZSA9IG9wdHMubWF4QnVmZmVyU2l6ZSA/PyBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5jbG9zZUNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4ge1xuICAgICAgICAgICAgcmF3U3RyZWFtLmNsb3NlKClcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICByYXdTdHJlYW0uYWJvcnQoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcGlwZSh0aGlzLnB1c2hhYmxlLCB0aGlzLnJhd1N0cmVhbSkuY2F0Y2goZXJyQ2FsbGJhY2spO1xuICAgIH1cbiAgICBnZXQgcHJvdG9jb2woKSB7XG4gICAgICAgIC8vIFRPRE8gcmVtb3ZlIHRoaXMgbm9uLW51bGxpc2ggYXNzZXJ0aW9uIGFmdGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9saWJwMnAvanMtbGlicDJwLWludGVyZmFjZXMvcHVsbC8yNjUgaXMgaW5jb3Jwb3JhdGVkXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLnJhd1N0cmVhbS5wcm90b2NvbDtcbiAgICB9XG4gICAgcHVzaChkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLnB1c2hhYmxlLnJlYWRhYmxlTGVuZ3RoID4gdGhpcy5tYXhCdWZmZXJTaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgT3V0Ym91bmRTdHJlYW0gYnVmZmVyIGZ1bGwsIHNpemUgPiAke3RoaXMubWF4QnVmZmVyU2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnB1c2hhYmxlLnB1c2goZW5jb2RlLnNpbmdsZShkYXRhKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgdG8gcHVzaCgpIGJ1dCB0aGlzIGlzIHByZWZpeGVkIGRhdGEgc28gbm8gbmVlZCB0byBlbmNvZGUgbGVuZ3RoIHByZWZpeGVkIGFnYWluXG4gICAgICovXG4gICAgcHVzaFByZWZpeGVkKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMucHVzaGFibGUucmVhZGFibGVMZW5ndGggPiB0aGlzLm1heEJ1ZmZlclNpemUpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBPdXRib3VuZFN0cmVhbSBidWZmZXIgZnVsbCwgc2l6ZSA+ICR7dGhpcy5tYXhCdWZmZXJTaXplfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaGFibGUucHVzaChkYXRhKTtcbiAgICB9XG4gICAgYXN5bmMgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgIC8vIHNpbWlsYXIgdG8gcHVzaGFibGUuZW5kKCkgYnV0IGNsZWFyIHRoZSBpbnRlcm5hbCBidWZmZXJcbiAgICAgICAgYXdhaXQgdGhpcy5wdXNoYWJsZS5yZXR1cm4oKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW5ib3VuZFN0cmVhbSB7XG4gICAgc291cmNlO1xuICAgIHJhd1N0cmVhbTtcbiAgICBjbG9zZUNvbnRyb2xsZXI7XG4gICAgY29uc3RydWN0b3IocmF3U3RyZWFtLCBvcHRzID0ge30pIHtcbiAgICAgICAgdGhpcy5yYXdTdHJlYW0gPSByYXdTdHJlYW07XG4gICAgICAgIHRoaXMuY2xvc2VDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLmNsb3NlQ29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgICAgICByYXdTdHJlYW0uY2xvc2UoKVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgIHJhd1N0cmVhbS5hYm9ydChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHBpcGUodGhpcy5yYXdTdHJlYW0sIChzb3VyY2UpID0+IGRlY29kZShzb3VyY2UsIG9wdHMpKTtcbiAgICB9XG4gICAgYXN5bmMgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VDb250cm9sbGVyLmFib3J0KCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGUiLCJkZWNvZGUiLCJwaXBlIiwicHVzaGFibGUiLCJPdXRib3VuZFN0cmVhbSIsImNvbnN0cnVjdG9yIiwicmF3U3RyZWFtIiwiZXJyQ2FsbGJhY2siLCJvcHRzIiwiY2xvc2VDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwibWF4QnVmZmVyU2l6ZSIsIkluZmluaXR5Iiwic2lnbmFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsb3NlIiwiY2F0Y2giLCJlcnIiLCJhYm9ydCIsInByb3RvY29sIiwicHVzaCIsImRhdGEiLCJyZWFkYWJsZUxlbmd0aCIsIkVycm9yIiwic2luZ2xlIiwicHVzaFByZWZpeGVkIiwicmV0dXJuIiwiSW5ib3VuZFN0cmVhbSIsInNvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/tracer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/tracer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IWantTracer: () => (/* binding */ IWantTracer)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\");\n\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */ class IWantTracer {\n    constructor(gossipsubIWantFollowupMs, msgIdToStrFn, metrics){\n        /**\n     * Promises to deliver a message\n     * Map per message id, per peer, promise expiration time\n     */ this.promises = new Map();\n        /**\n     * First request time by msgId. Used for metrics to track expire times.\n     * Necessary to know if peers are actually breaking promises or simply sending them a bit later\n     */ this.requestMsByMsg = new Map();\n        this.gossipsubIWantFollowupMs = gossipsubIWantFollowupMs;\n        this.msgIdToStrFn = msgIdToStrFn;\n        this.metrics = metrics;\n        this.requestMsByMsgExpire = 10 * gossipsubIWantFollowupMs;\n    }\n    get size() {\n        return this.promises.size;\n    }\n    get requestMsByMsgSize() {\n        return this.requestMsByMsg.size;\n    }\n    /**\n     * Track a promise to deliver a message from a list of msgIds we are requesting\n     */ addPromise(from, msgIds) {\n        // pick msgId randomly from the list\n        const ix = Math.floor(Math.random() * msgIds.length);\n        const msgId = msgIds[ix];\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        let expireByPeer = this.promises.get(msgIdStr);\n        if (expireByPeer == null) {\n            expireByPeer = new Map();\n            this.promises.set(msgIdStr, expireByPeer);\n        }\n        const now = Date.now();\n        // If a promise for this message id and peer already exists we don't update the expiry\n        if (!expireByPeer.has(from)) {\n            expireByPeer.set(from, now + this.gossipsubIWantFollowupMs);\n            if (this.metrics != null) {\n                this.metrics.iwantPromiseStarted.inc(1);\n                if (!this.requestMsByMsg.has(msgIdStr)) {\n                    this.requestMsByMsg.set(msgIdStr, now);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n     *\n     * This should be called not too often relative to the expire times, since it iterates over the whole data.\n     */ getBrokenPromises() {\n        const now = Date.now();\n        const result = new Map();\n        let brokenPromises = 0;\n        this.promises.forEach((expireByPeer, msgId)=>{\n            expireByPeer.forEach((expire, p)=>{\n                // the promise has been broken\n                if (expire < now) {\n                    // add 1 to result\n                    result.set(p, (result.get(p) ?? 0) + 1);\n                    // delete from tracked promises\n                    expireByPeer.delete(p);\n                    // for metrics\n                    brokenPromises++;\n                }\n            });\n            // clean up empty promises for a msgId\n            if (expireByPeer.size === 0) {\n                this.promises.delete(msgId);\n            }\n        });\n        this.metrics?.iwantPromiseBroken.inc(brokenPromises);\n        return result;\n    }\n    /**\n     * Someone delivered a message, stop tracking promises for it\n     */ deliverMessage(msgIdStr, isDuplicate = false) {\n        this.trackMessage(msgIdStr);\n        const expireByPeer = this.promises.get(msgIdStr);\n        // Expired promise, check requestMsByMsg\n        if (expireByPeer != null) {\n            this.promises.delete(msgIdStr);\n            if (this.metrics != null) {\n                this.metrics.iwantPromiseResolved.inc(1);\n                if (isDuplicate) this.metrics.iwantPromiseResolvedFromDuplicate.inc(1);\n                this.metrics.iwantPromiseResolvedPeers.inc(expireByPeer.size);\n            }\n        }\n    }\n    /**\n     * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n     * unless its an obviously invalid message.\n     */ rejectMessage(msgIdStr, reason) {\n        this.trackMessage(msgIdStr);\n        // A message got rejected, so we can stop tracking promises and let the score penalty apply.\n        // With the expection of obvious invalid messages\n        switch(reason){\n            case _types_js__WEBPACK_IMPORTED_MODULE_0__.RejectReason.Error:\n                return;\n            default:\n                break;\n        }\n        this.promises.delete(msgIdStr);\n    }\n    clear() {\n        this.promises.clear();\n    }\n    prune() {\n        const maxMs = Date.now() - this.requestMsByMsgExpire;\n        let count = 0;\n        for (const [k, v] of this.requestMsByMsg.entries()){\n            if (v < maxMs) {\n                // messages that stay too long in the requestMsByMsg map, delete\n                this.requestMsByMsg.delete(k);\n                count++;\n            } else {\n                break;\n            }\n        }\n        this.metrics?.iwantMessagePruned.inc(count);\n    }\n    trackMessage(msgIdStr) {\n        if (this.metrics != null) {\n            const requestMs = this.requestMsByMsg.get(msgIdStr);\n            if (requestMs !== undefined) {\n                this.metrics.iwantPromiseDeliveryTime.observe((Date.now() - requestMs) / 1000);\n                this.requestMsByMsg.delete(msgIdStr);\n            }\n        }\n    }\n} //# sourceMappingURL=tracer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/tracer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageStatus: () => (/* binding */ MessageStatus),\n/* harmony export */   PublishConfigType: () => (/* binding */ PublishConfigType),\n/* harmony export */   RejectReason: () => (/* binding */ RejectReason),\n/* harmony export */   SignaturePolicy: () => (/* binding */ SignaturePolicy),\n/* harmony export */   ValidateError: () => (/* binding */ ValidateError),\n/* harmony export */   rejectReasonFromAcceptance: () => (/* binding */ rejectReasonFromAcceptance)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/pubsub/index.js\");\n\nvar SignaturePolicy;\n(function(SignaturePolicy) {\n    /**\n     * On the producing side:\n     * - Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n     *\n     * On the consuming side:\n     * - Enforce the fields to be present, reject otherwise.\n     * - Propagate only if the fields are valid and signature can be verified, reject otherwise.\n     */ SignaturePolicy[\"StrictSign\"] = \"StrictSign\";\n    /**\n     * On the producing side:\n     * - Build messages without the signature, key, from and seqno fields.\n     * - The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n     *\n     * On the consuming side:\n     * - Enforce the fields to be absent, reject otherwise.\n     * - Propagate only if the fields are absent, reject otherwise.\n     * - A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n     */ SignaturePolicy[\"StrictNoSign\"] = \"StrictNoSign\";\n})(SignaturePolicy || (SignaturePolicy = {}));\nvar PublishConfigType;\n(function(PublishConfigType) {\n    PublishConfigType[PublishConfigType[\"Signing\"] = 0] = \"Signing\";\n    PublishConfigType[PublishConfigType[\"Anonymous\"] = 1] = \"Anonymous\";\n})(PublishConfigType || (PublishConfigType = {}));\nvar RejectReason;\n(function(RejectReason) {\n    /**\n     * The message failed the configured validation during decoding.\n     * SelfOrigin is considered a ValidationError\n     */ RejectReason[\"Error\"] = \"error\";\n    /**\n     * Custom validator fn reported status IGNORE.\n     */ RejectReason[\"Ignore\"] = \"ignore\";\n    /**\n     * Custom validator fn reported status REJECT.\n     */ RejectReason[\"Reject\"] = \"reject\";\n    /**\n     * The peer that sent the message OR the source from field is blacklisted.\n     * Causes messages to be ignored, not penalized, neither do score record creation.\n     */ RejectReason[\"Blacklisted\"] = \"blacklisted\";\n})(RejectReason || (RejectReason = {}));\nvar ValidateError;\n(function(ValidateError) {\n    /// The message has an invalid signature,\n    ValidateError[\"InvalidSignature\"] = \"invalid_signature\";\n    /// The sequence number was the incorrect size\n    ValidateError[\"InvalidSeqno\"] = \"invalid_seqno\";\n    /// The PeerId was invalid\n    ValidateError[\"InvalidPeerId\"] = \"invalid_peerid\";\n    /// Signature existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"SignaturePresent\"] = \"signature_present\";\n    /// Sequence number existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"SeqnoPresent\"] = \"seqno_present\";\n    /// Message source existed when validation has been sent to\n    /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n    ValidateError[\"FromPresent\"] = \"from_present\";\n    /// The data transformation failed.\n    ValidateError[\"TransformFailed\"] = \"transform_failed\";\n})(ValidateError || (ValidateError = {}));\nvar MessageStatus;\n(function(MessageStatus) {\n    MessageStatus[\"duplicate\"] = \"duplicate\";\n    MessageStatus[\"invalid\"] = \"invalid\";\n    MessageStatus[\"valid\"] = \"valid\";\n})(MessageStatus || (MessageStatus = {}));\n/**\n * Typesafe conversion of MessageAcceptance -> RejectReason. TS ensures all values covered\n */ function rejectReasonFromAcceptance(acceptance) {\n    switch(acceptance){\n        case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TopicValidatorResult.Ignore:\n            return RejectReason.Ignore;\n        case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TopicValidatorResult.Reject:\n            return RejectReason.Reject;\n        default:\n            throw new Error(\"Unreachable\");\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUQ7QUFDbEQsSUFBSUMsZ0JBQWdCO0FBQzFCLFVBQVVBLGVBQWU7SUFDdEI7Ozs7Ozs7S0FPQyxHQUNEQSxlQUFlLENBQUMsYUFBYSxHQUFHO0lBQ2hDOzs7Ozs7Ozs7S0FTQyxHQUNEQSxlQUFlLENBQUMsZUFBZSxHQUFHO0FBQ3RDLEdBQUdBLG1CQUFvQkEsQ0FBQUEsa0JBQWtCLENBQUM7QUFDbkMsSUFBSUMsa0JBQWtCO0FBQzVCLFVBQVVBLGlCQUFpQjtJQUN4QkEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDdERBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0FBQzVELEdBQUdBLHFCQUFzQkEsQ0FBQUEsb0JBQW9CLENBQUM7QUFDdkMsSUFBSUMsYUFBYTtBQUN2QixVQUFVQSxZQUFZO0lBQ25COzs7S0FHQyxHQUNEQSxZQUFZLENBQUMsUUFBUSxHQUFHO0lBQ3hCOztLQUVDLEdBQ0RBLFlBQVksQ0FBQyxTQUFTLEdBQUc7SUFDekI7O0tBRUMsR0FDREEsWUFBWSxDQUFDLFNBQVMsR0FBRztJQUN6Qjs7O0tBR0MsR0FDREEsWUFBWSxDQUFDLGNBQWMsR0FBRztBQUNsQyxHQUFHQSxnQkFBaUJBLENBQUFBLGVBQWUsQ0FBQztBQUM3QixJQUFJQyxjQUFjO0FBQ3hCLFVBQVVBLGFBQWE7SUFDcEIseUNBQXlDO0lBQ3pDQSxhQUFhLENBQUMsbUJBQW1CLEdBQUc7SUFDcEMsOENBQThDO0lBQzlDQSxhQUFhLENBQUMsZUFBZSxHQUFHO0lBQ2hDLDBCQUEwQjtJQUMxQkEsYUFBYSxDQUFDLGdCQUFnQixHQUFHO0lBQ2pDLHNEQUFzRDtJQUN0RCx5REFBeUQ7SUFDekRBLGFBQWEsQ0FBQyxtQkFBbUIsR0FBRztJQUNwQyw0REFBNEQ7SUFDNUQseURBQXlEO0lBQ3pEQSxhQUFhLENBQUMsZUFBZSxHQUFHO0lBQ2hDLDJEQUEyRDtJQUMzRCx5REFBeUQ7SUFDekRBLGFBQWEsQ0FBQyxjQUFjLEdBQUc7SUFDL0IsbUNBQW1DO0lBQ25DQSxhQUFhLENBQUMsa0JBQWtCLEdBQUc7QUFDdkMsR0FBR0EsaUJBQWtCQSxDQUFBQSxnQkFBZ0IsQ0FBQztBQUMvQixJQUFJQyxjQUFjO0FBQ3hCLFVBQVVBLGFBQWE7SUFDcEJBLGFBQWEsQ0FBQyxZQUFZLEdBQUc7SUFDN0JBLGFBQWEsQ0FBQyxVQUFVLEdBQUc7SUFDM0JBLGFBQWEsQ0FBQyxRQUFRLEdBQUc7QUFDN0IsR0FBR0EsaUJBQWtCQSxDQUFBQSxnQkFBZ0IsQ0FBQztBQUN0Qzs7Q0FFQyxHQUNNLFNBQVNDLDJCQUEyQkMsVUFBVTtJQUNqRCxPQUFRQTtRQUNKLEtBQUtQLG1FQUFvQkEsQ0FBQ1EsTUFBTTtZQUM1QixPQUFPTCxhQUFhSyxNQUFNO1FBQzlCLEtBQUtSLG1FQUFvQkEsQ0FBQ1MsTUFBTTtZQUM1QixPQUFPTixhQUFhTSxNQUFNO1FBQzlCO1lBQ0ksTUFBTSxJQUFJQyxNQUFNO0lBQ3hCO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvdHlwZXMuanM/ODVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb3BpY1ZhbGlkYXRvclJlc3VsdCB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmV4cG9ydCB2YXIgU2lnbmF0dXJlUG9saWN5O1xuKGZ1bmN0aW9uIChTaWduYXR1cmVQb2xpY3kpIHtcbiAgICAvKipcbiAgICAgKiBPbiB0aGUgcHJvZHVjaW5nIHNpZGU6XG4gICAgICogLSBCdWlsZCBtZXNzYWdlcyB3aXRoIHRoZSBzaWduYXR1cmUsIGtleSAoZnJvbSBtYXkgYmUgZW5vdWdoIGZvciBjZXJ0YWluIGlubGluZWFibGUgcHVibGljIGtleSB0eXBlcyksIGZyb20gYW5kIHNlcW5vIGZpZWxkcy5cbiAgICAgKlxuICAgICAqIE9uIHRoZSBjb25zdW1pbmcgc2lkZTpcbiAgICAgKiAtIEVuZm9yY2UgdGhlIGZpZWxkcyB0byBiZSBwcmVzZW50LCByZWplY3Qgb3RoZXJ3aXNlLlxuICAgICAqIC0gUHJvcGFnYXRlIG9ubHkgaWYgdGhlIGZpZWxkcyBhcmUgdmFsaWQgYW5kIHNpZ25hdHVyZSBjYW4gYmUgdmVyaWZpZWQsIHJlamVjdCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgU2lnbmF0dXJlUG9saWN5W1wiU3RyaWN0U2lnblwiXSA9IFwiU3RyaWN0U2lnblwiO1xuICAgIC8qKlxuICAgICAqIE9uIHRoZSBwcm9kdWNpbmcgc2lkZTpcbiAgICAgKiAtIEJ1aWxkIG1lc3NhZ2VzIHdpdGhvdXQgdGhlIHNpZ25hdHVyZSwga2V5LCBmcm9tIGFuZCBzZXFubyBmaWVsZHMuXG4gICAgICogLSBUaGUgY29ycmVzcG9uZGluZyBwcm90b2J1ZiBrZXktdmFsdWUgcGFpcnMgYXJlIGFic2VudCBmcm9tIHRoZSBtYXJzaGFsbGVkIG1lc3NhZ2UsIG5vdCBqdXN0IGVtcHR5LlxuICAgICAqXG4gICAgICogT24gdGhlIGNvbnN1bWluZyBzaWRlOlxuICAgICAqIC0gRW5mb3JjZSB0aGUgZmllbGRzIHRvIGJlIGFic2VudCwgcmVqZWN0IG90aGVyd2lzZS5cbiAgICAgKiAtIFByb3BhZ2F0ZSBvbmx5IGlmIHRoZSBmaWVsZHMgYXJlIGFic2VudCwgcmVqZWN0IG90aGVyd2lzZS5cbiAgICAgKiAtIEEgbWVzc2FnZV9pZCBmdW5jdGlvbiB3aWxsIG5vdCBiZSBhYmxlIHRvIHVzZSB0aGUgYWJvdmUgZmllbGRzLCBhbmQgc2hvdWxkIGluc3RlYWQgcmVseSBvbiB0aGUgZGF0YSBmaWVsZC4gQSBjb21tb25wbGFjZSBzdHJhdGVneSBpcyB0byBjYWxjdWxhdGUgYSBoYXNoLlxuICAgICAqL1xuICAgIFNpZ25hdHVyZVBvbGljeVtcIlN0cmljdE5vU2lnblwiXSA9IFwiU3RyaWN0Tm9TaWduXCI7XG59KShTaWduYXR1cmVQb2xpY3kgfHwgKFNpZ25hdHVyZVBvbGljeSA9IHt9KSk7XG5leHBvcnQgdmFyIFB1Ymxpc2hDb25maWdUeXBlO1xuKGZ1bmN0aW9uIChQdWJsaXNoQ29uZmlnVHlwZSkge1xuICAgIFB1Ymxpc2hDb25maWdUeXBlW1B1Ymxpc2hDb25maWdUeXBlW1wiU2lnbmluZ1wiXSA9IDBdID0gXCJTaWduaW5nXCI7XG4gICAgUHVibGlzaENvbmZpZ1R5cGVbUHVibGlzaENvbmZpZ1R5cGVbXCJBbm9ueW1vdXNcIl0gPSAxXSA9IFwiQW5vbnltb3VzXCI7XG59KShQdWJsaXNoQ29uZmlnVHlwZSB8fCAoUHVibGlzaENvbmZpZ1R5cGUgPSB7fSkpO1xuZXhwb3J0IHZhciBSZWplY3RSZWFzb247XG4oZnVuY3Rpb24gKFJlamVjdFJlYXNvbikge1xuICAgIC8qKlxuICAgICAqIFRoZSBtZXNzYWdlIGZhaWxlZCB0aGUgY29uZmlndXJlZCB2YWxpZGF0aW9uIGR1cmluZyBkZWNvZGluZy5cbiAgICAgKiBTZWxmT3JpZ2luIGlzIGNvbnNpZGVyZWQgYSBWYWxpZGF0aW9uRXJyb3JcbiAgICAgKi9cbiAgICBSZWplY3RSZWFzb25bXCJFcnJvclwiXSA9IFwiZXJyb3JcIjtcbiAgICAvKipcbiAgICAgKiBDdXN0b20gdmFsaWRhdG9yIGZuIHJlcG9ydGVkIHN0YXR1cyBJR05PUkUuXG4gICAgICovXG4gICAgUmVqZWN0UmVhc29uW1wiSWdub3JlXCJdID0gXCJpZ25vcmVcIjtcbiAgICAvKipcbiAgICAgKiBDdXN0b20gdmFsaWRhdG9yIGZuIHJlcG9ydGVkIHN0YXR1cyBSRUpFQ1QuXG4gICAgICovXG4gICAgUmVqZWN0UmVhc29uW1wiUmVqZWN0XCJdID0gXCJyZWplY3RcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgcGVlciB0aGF0IHNlbnQgdGhlIG1lc3NhZ2UgT1IgdGhlIHNvdXJjZSBmcm9tIGZpZWxkIGlzIGJsYWNrbGlzdGVkLlxuICAgICAqIENhdXNlcyBtZXNzYWdlcyB0byBiZSBpZ25vcmVkLCBub3QgcGVuYWxpemVkLCBuZWl0aGVyIGRvIHNjb3JlIHJlY29yZCBjcmVhdGlvbi5cbiAgICAgKi9cbiAgICBSZWplY3RSZWFzb25bXCJCbGFja2xpc3RlZFwiXSA9IFwiYmxhY2tsaXN0ZWRcIjtcbn0pKFJlamVjdFJlYXNvbiB8fCAoUmVqZWN0UmVhc29uID0ge30pKTtcbmV4cG9ydCB2YXIgVmFsaWRhdGVFcnJvcjtcbihmdW5jdGlvbiAoVmFsaWRhdGVFcnJvcikge1xuICAgIC8vLyBUaGUgbWVzc2FnZSBoYXMgYW4gaW52YWxpZCBzaWduYXR1cmUsXG4gICAgVmFsaWRhdGVFcnJvcltcIkludmFsaWRTaWduYXR1cmVcIl0gPSBcImludmFsaWRfc2lnbmF0dXJlXCI7XG4gICAgLy8vIFRoZSBzZXF1ZW5jZSBudW1iZXIgd2FzIHRoZSBpbmNvcnJlY3Qgc2l6ZVxuICAgIFZhbGlkYXRlRXJyb3JbXCJJbnZhbGlkU2Vxbm9cIl0gPSBcImludmFsaWRfc2Vxbm9cIjtcbiAgICAvLy8gVGhlIFBlZXJJZCB3YXMgaW52YWxpZFxuICAgIFZhbGlkYXRlRXJyb3JbXCJJbnZhbGlkUGVlcklkXCJdID0gXCJpbnZhbGlkX3BlZXJpZFwiO1xuICAgIC8vLyBTaWduYXR1cmUgZXhpc3RlZCB3aGVuIHZhbGlkYXRpb24gaGFzIGJlZW4gc2VudCB0b1xuICAgIC8vLyBbYGNyYXRlOjpiZWhhdmlvdXI6Ok1lc3NhZ2VBdXRoZW50aWNpdHk6OkFub255bW91c2BdLlxuICAgIFZhbGlkYXRlRXJyb3JbXCJTaWduYXR1cmVQcmVzZW50XCJdID0gXCJzaWduYXR1cmVfcHJlc2VudFwiO1xuICAgIC8vLyBTZXF1ZW5jZSBudW1iZXIgZXhpc3RlZCB3aGVuIHZhbGlkYXRpb24gaGFzIGJlZW4gc2VudCB0b1xuICAgIC8vLyBbYGNyYXRlOjpiZWhhdmlvdXI6Ok1lc3NhZ2VBdXRoZW50aWNpdHk6OkFub255bW91c2BdLlxuICAgIFZhbGlkYXRlRXJyb3JbXCJTZXFub1ByZXNlbnRcIl0gPSBcInNlcW5vX3ByZXNlbnRcIjtcbiAgICAvLy8gTWVzc2FnZSBzb3VyY2UgZXhpc3RlZCB3aGVuIHZhbGlkYXRpb24gaGFzIGJlZW4gc2VudCB0b1xuICAgIC8vLyBbYGNyYXRlOjpiZWhhdmlvdXI6Ok1lc3NhZ2VBdXRoZW50aWNpdHk6OkFub255bW91c2BdLlxuICAgIFZhbGlkYXRlRXJyb3JbXCJGcm9tUHJlc2VudFwiXSA9IFwiZnJvbV9wcmVzZW50XCI7XG4gICAgLy8vIFRoZSBkYXRhIHRyYW5zZm9ybWF0aW9uIGZhaWxlZC5cbiAgICBWYWxpZGF0ZUVycm9yW1wiVHJhbnNmb3JtRmFpbGVkXCJdID0gXCJ0cmFuc2Zvcm1fZmFpbGVkXCI7XG59KShWYWxpZGF0ZUVycm9yIHx8IChWYWxpZGF0ZUVycm9yID0ge30pKTtcbmV4cG9ydCB2YXIgTWVzc2FnZVN0YXR1cztcbihmdW5jdGlvbiAoTWVzc2FnZVN0YXR1cykge1xuICAgIE1lc3NhZ2VTdGF0dXNbXCJkdXBsaWNhdGVcIl0gPSBcImR1cGxpY2F0ZVwiO1xuICAgIE1lc3NhZ2VTdGF0dXNbXCJpbnZhbGlkXCJdID0gXCJpbnZhbGlkXCI7XG4gICAgTWVzc2FnZVN0YXR1c1tcInZhbGlkXCJdID0gXCJ2YWxpZFwiO1xufSkoTWVzc2FnZVN0YXR1cyB8fCAoTWVzc2FnZVN0YXR1cyA9IHt9KSk7XG4vKipcbiAqIFR5cGVzYWZlIGNvbnZlcnNpb24gb2YgTWVzc2FnZUFjY2VwdGFuY2UgLT4gUmVqZWN0UmVhc29uLiBUUyBlbnN1cmVzIGFsbCB2YWx1ZXMgY292ZXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVqZWN0UmVhc29uRnJvbUFjY2VwdGFuY2UoYWNjZXB0YW5jZSkge1xuICAgIHN3aXRjaCAoYWNjZXB0YW5jZSkge1xuICAgICAgICBjYXNlIFRvcGljVmFsaWRhdG9yUmVzdWx0Lklnbm9yZTpcbiAgICAgICAgICAgIHJldHVybiBSZWplY3RSZWFzb24uSWdub3JlO1xuICAgICAgICBjYXNlIFRvcGljVmFsaWRhdG9yUmVzdWx0LlJlamVjdDpcbiAgICAgICAgICAgIHJldHVybiBSZWplY3RSZWFzb24uUmVqZWN0O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnJlYWNoYWJsZScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJUb3BpY1ZhbGlkYXRvclJlc3VsdCIsIlNpZ25hdHVyZVBvbGljeSIsIlB1Ymxpc2hDb25maWdUeXBlIiwiUmVqZWN0UmVhc29uIiwiVmFsaWRhdGVFcnJvciIsIk1lc3NhZ2VTdGF0dXMiLCJyZWplY3RSZWFzb25Gcm9tQWNjZXB0YW5jZSIsImFjY2VwdGFuY2UiLCJJZ25vcmUiLCJSZWplY3QiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/buildRawMessage.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/buildRawMessage.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignPrefix: () => (/* binding */ SignPrefix),\n/* harmony export */   buildRawMessage: () => (/* binding */ buildRawMessage),\n/* harmony export */   validateToRawMessage: () => (/* binding */ validateToRawMessage)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/crypto */ \"(ssr)/./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"(ssr)/./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/pubsub/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n/* harmony import */ var _message_rpc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../message/rpc.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/message/rpc.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\");\n\n\n\n\n\n\n\n\n\n\nconst SignPrefix = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(\"libp2p-pubsub:\");\nasync function buildRawMessage(publishConfig, topic, originalData, transformedData) {\n    switch(publishConfig.type){\n        case _types_js__WEBPACK_IMPORTED_MODULE_4__.PublishConfigType.Signing:\n            {\n                const rpcMsg = {\n                    from: publishConfig.author.toBytes(),\n                    data: transformedData,\n                    seqno: (0,_libp2p_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(8),\n                    topic,\n                    signature: undefined,\n                    key: undefined // Exclude key field for signing\n                };\n                // Get the message in bytes, and prepend with the pubsub prefix\n                // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n                const bytes = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([\n                    SignPrefix,\n                    _message_rpc_js__WEBPACK_IMPORTED_MODULE_6__.RPC.Message.encode(rpcMsg)\n                ]);\n                rpcMsg.signature = await publishConfig.privateKey.sign(bytes);\n                rpcMsg.key = publishConfig.key;\n                const msg = {\n                    type: \"signed\",\n                    from: publishConfig.author,\n                    data: originalData,\n                    sequenceNumber: BigInt(`0x${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(rpcMsg.seqno, \"base16\")}`),\n                    topic,\n                    signature: rpcMsg.signature,\n                    key: rpcMsg.key\n                };\n                return {\n                    raw: rpcMsg,\n                    msg\n                };\n            }\n        case _types_js__WEBPACK_IMPORTED_MODULE_4__.PublishConfigType.Anonymous:\n            {\n                return {\n                    raw: {\n                        from: undefined,\n                        data: transformedData,\n                        seqno: undefined,\n                        topic,\n                        signature: undefined,\n                        key: undefined\n                    },\n                    msg: {\n                        type: \"unsigned\",\n                        data: originalData,\n                        topic\n                    }\n                };\n            }\n        default:\n            throw new Error(\"Unreachable\");\n    }\n}\nasync function validateToRawMessage(signaturePolicy, msg) {\n    // If strict-sign, verify all\n    // If anonymous (no-sign), ensure no preven\n    switch(signaturePolicy){\n        case _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.StrictNoSign:\n            if (msg.signature != null) return {\n                valid: false,\n                error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.SignaturePresent\n            };\n            if (msg.seqno != null) return {\n                valid: false,\n                error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.SeqnoPresent\n            };\n            if (msg.key != null) return {\n                valid: false,\n                error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.FromPresent\n            };\n            return {\n                valid: true,\n                message: {\n                    type: \"unsigned\",\n                    topic: msg.topic,\n                    data: msg.data ?? new Uint8Array(0)\n                }\n            };\n        case _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.StrictSign:\n            {\n                // Verify seqno\n                if (msg.seqno == null) return {\n                    valid: false,\n                    error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidSeqno\n                };\n                if (msg.seqno.length !== 8) {\n                    return {\n                        valid: false,\n                        error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidSeqno\n                    };\n                }\n                if (msg.signature == null) return {\n                    valid: false,\n                    error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidSignature\n                };\n                if (msg.from == null) return {\n                    valid: false,\n                    error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidPeerId\n                };\n                let fromPeerId;\n                try {\n                    // TODO: Fix PeerId types\n                    fromPeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__.peerIdFromBytes)(msg.from);\n                } catch (e) {\n                    return {\n                        valid: false,\n                        error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidPeerId\n                    };\n                }\n                // - check from defined\n                // - transform source to PeerId\n                // - parse signature\n                // - get .key, else from source\n                // - check key == source if present\n                // - verify sig\n                let publicKey;\n                if (msg.key != null) {\n                    publicKey = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.unmarshalPublicKey)(msg.key);\n                    // TODO: Should `fromPeerId.pubKey` be optional?\n                    if (fromPeerId.publicKey !== undefined && !(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(publicKey.bytes, fromPeerId.publicKey)) {\n                        return {\n                            valid: false,\n                            error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidPeerId\n                        };\n                    }\n                } else {\n                    if (fromPeerId.publicKey == null) {\n                        return {\n                            valid: false,\n                            error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidPeerId\n                        };\n                    }\n                    publicKey = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.unmarshalPublicKey)(fromPeerId.publicKey);\n                }\n                const rpcMsgPreSign = {\n                    from: msg.from,\n                    data: msg.data,\n                    seqno: msg.seqno,\n                    topic: msg.topic,\n                    signature: undefined,\n                    key: undefined // Exclude key field for signing\n                };\n                // Get the message in bytes, and prepend with the pubsub prefix\n                // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n                const bytes = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([\n                    SignPrefix,\n                    _message_rpc_js__WEBPACK_IMPORTED_MODULE_6__.RPC.Message.encode(rpcMsgPreSign)\n                ]);\n                if (!await publicKey.verify(bytes, msg.signature)) {\n                    return {\n                        valid: false,\n                        error: _types_js__WEBPACK_IMPORTED_MODULE_4__.ValidateError.InvalidSignature\n                    };\n                }\n                return {\n                    valid: true,\n                    message: {\n                        type: \"signed\",\n                        from: fromPeerId,\n                        data: msg.data ?? new Uint8Array(0),\n                        sequenceNumber: BigInt(`0x${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(msg.seqno, \"base16\")}`),\n                        topic: msg.topic,\n                        signature: msg.signature,\n                        key: msg.key ?? (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.marshalPublicKey)(publicKey)\n                    }\n                };\n            }\n        default:\n            throw new Error(\"Unreachable\");\n    }\n} //# sourceMappingURL=buildRawMessage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/buildRawMessage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/create-gossip-rpc.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/create-gossip-rpc.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGossipRpc: () => (/* binding */ createGossipRpc),\n/* harmony export */   ensureControl: () => (/* binding */ ensureControl)\n/* harmony export */ });\n/**\n * Create a gossipsub RPC object\n */ function createGossipRpc(messages = [], control) {\n    return {\n        subscriptions: [],\n        messages,\n        control: control !== undefined ? {\n            graft: control.graft ?? [],\n            prune: control.prune ?? [],\n            ihave: control.ihave ?? [],\n            iwant: control.iwant ?? []\n        } : undefined\n    };\n}\nfunction ensureControl(rpc) {\n    if (rpc.control === undefined) {\n        rpc.control = {\n            graft: [],\n            prune: [],\n            ihave: [],\n            iwant: []\n        };\n    }\n    return rpc;\n} //# sourceMappingURL=create-gossip-rpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL2NyZWF0ZS1nb3NzaXAtcnBjLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FDTSxTQUFTQSxnQkFBZ0JDLFdBQVcsRUFBRSxFQUFFQyxPQUFPO0lBQ2xELE9BQU87UUFDSEMsZUFBZSxFQUFFO1FBQ2pCRjtRQUNBQyxTQUFTQSxZQUFZRSxZQUNmO1lBQ0VDLE9BQU9ILFFBQVFHLEtBQUssSUFBSSxFQUFFO1lBQzFCQyxPQUFPSixRQUFRSSxLQUFLLElBQUksRUFBRTtZQUMxQkMsT0FBT0wsUUFBUUssS0FBSyxJQUFJLEVBQUU7WUFDMUJDLE9BQU9OLFFBQVFNLEtBQUssSUFBSSxFQUFFO1FBQzlCLElBQ0VKO0lBQ1Y7QUFDSjtBQUNPLFNBQVNLLGNBQWNDLEdBQUc7SUFDN0IsSUFBSUEsSUFBSVIsT0FBTyxLQUFLRSxXQUFXO1FBQzNCTSxJQUFJUixPQUFPLEdBQUc7WUFDVkcsT0FBTyxFQUFFO1lBQ1RDLE9BQU8sRUFBRTtZQUNUQyxPQUFPLEVBQUU7WUFDVEMsT0FBTyxFQUFFO1FBQ2I7SUFDSjtJQUNBLE9BQU9FO0FBQ1gsRUFDQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvdXRpbHMvY3JlYXRlLWdvc3NpcC1ycGMuanM/ZWFkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZSBhIGdvc3NpcHN1YiBSUEMgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHb3NzaXBScGMobWVzc2FnZXMgPSBbXSwgY29udHJvbCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1YnNjcmlwdGlvbnM6IFtdLFxuICAgICAgICBtZXNzYWdlcyxcbiAgICAgICAgY29udHJvbDogY29udHJvbCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBncmFmdDogY29udHJvbC5ncmFmdCA/PyBbXSxcbiAgICAgICAgICAgICAgICBwcnVuZTogY29udHJvbC5wcnVuZSA/PyBbXSxcbiAgICAgICAgICAgICAgICBpaGF2ZTogY29udHJvbC5paGF2ZSA/PyBbXSxcbiAgICAgICAgICAgICAgICBpd2FudDogY29udHJvbC5pd2FudCA/PyBbXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUNvbnRyb2wocnBjKSB7XG4gICAgaWYgKHJwYy5jb250cm9sID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcnBjLmNvbnRyb2wgPSB7XG4gICAgICAgICAgICBncmFmdDogW10sXG4gICAgICAgICAgICBwcnVuZTogW10sXG4gICAgICAgICAgICBpaGF2ZTogW10sXG4gICAgICAgICAgICBpd2FudDogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJwYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZS1nb3NzaXAtcnBjLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVHb3NzaXBScGMiLCJtZXNzYWdlcyIsImNvbnRyb2wiLCJzdWJzY3JpcHRpb25zIiwidW5kZWZpbmVkIiwiZ3JhZnQiLCJwcnVuZSIsImloYXZlIiwiaXdhbnQiLCJlbnN1cmVDb250cm9sIiwicnBjIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/create-gossip-rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/messageIdToString.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/messageIdToString.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messageIdToString: () => (/* binding */ messageIdToString)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n\n/**\n * Browser friendly function to convert Uint8Array message id to base64 string.\n */ function messageIdToString(msgId) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(msgId, \"base64\");\n} //# sourceMappingURL=messageIdToString.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL21lc3NhZ2VJZFRvU3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWlEO0FBQ2pEOztDQUVDLEdBQ00sU0FBU0Msa0JBQWtCQyxLQUFLO0lBQ25DLE9BQU9GLCtEQUFRQSxDQUFDRSxPQUFPO0FBQzNCLEVBQ0EsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL21lc3NhZ2VJZFRvU3RyaW5nLmpzP2NhYTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICd1aW50OGFycmF5cy90by1zdHJpbmcnO1xuLyoqXG4gKiBCcm93c2VyIGZyaWVuZGx5IGZ1bmN0aW9uIHRvIGNvbnZlcnQgVWludDhBcnJheSBtZXNzYWdlIGlkIHRvIGJhc2U2NCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXNzYWdlSWRUb1N0cmluZyhtc2dJZCkge1xuICAgIHJldHVybiB0b1N0cmluZyhtc2dJZCwgJ2Jhc2U2NCcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZUlkVG9TdHJpbmcuanMubWFwIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwibWVzc2FnZUlkVG9TdHJpbmciLCJtc2dJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/messageIdToString.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/msgIdFn.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/msgIdFn.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   msgIdFnStrictNoSign: () => (/* binding */ msgIdFnStrictNoSign),\n/* harmony export */   msgIdFnStrictSign: () => (/* binding */ msgIdFnStrictSign)\n/* harmony export */ });\n/* harmony import */ var _libp2p_pubsub_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/pubsub/utils */ \"(ssr)/./node_modules/@libp2p/pubsub/dist/src/utils.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"(ssr)/./node_modules/multiformats/dist/src/hashes/sha2.js\");\n\n\n/**\n * Generate a message id, based on the `key` and `seqno`\n */ function msgIdFnStrictSign(msg) {\n    if (msg.type !== \"signed\") {\n        throw new Error(\"expected signed message type\");\n    }\n    // Should never happen\n    if (msg.sequenceNumber == null) throw Error(\"missing seqno field\");\n    // TODO: Should use .from here or key?\n    return (0,_libp2p_pubsub_utils__WEBPACK_IMPORTED_MODULE_1__.msgId)(msg.from.toBytes(), msg.sequenceNumber);\n}\n/**\n * Generate a message id, based on message `data`\n */ async function msgIdFnStrictNoSign(msg) {\n    return multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.encode(msg.data);\n} //# sourceMappingURL=msgIdFn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL21zZ0lkRm4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNLO0FBQ2xEOztDQUVDLEdBQ00sU0FBU0Usa0JBQWtCQyxHQUFHO0lBQ2pDLElBQUlBLElBQUlDLElBQUksS0FBSyxVQUFVO1FBQ3ZCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLHNCQUFzQjtJQUN0QixJQUFJRixJQUFJRyxjQUFjLElBQUksTUFDdEIsTUFBTUQsTUFBTTtJQUNoQixzQ0FBc0M7SUFDdEMsT0FBT0wsMkRBQUtBLENBQUNHLElBQUlJLElBQUksQ0FBQ0MsT0FBTyxJQUFJTCxJQUFJRyxjQUFjO0FBQ3ZEO0FBQ0E7O0NBRUMsR0FDTSxlQUFlRyxvQkFBb0JOLEdBQUc7SUFDekMsT0FBT0YsNERBQU1BLENBQUNTLE1BQU0sQ0FBQ1AsSUFBSVEsSUFBSTtBQUNqQyxFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLWdvc3NpcHN1Yi9kaXN0L3NyYy91dGlscy9tc2dJZEZuLmpzPzU4YjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbXNnSWQgfSBmcm9tICdAbGlicDJwL3B1YnN1Yi91dGlscyc7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdtdWx0aWZvcm1hdHMvaGFzaGVzL3NoYTInO1xuLyoqXG4gKiBHZW5lcmF0ZSBhIG1lc3NhZ2UgaWQsIGJhc2VkIG9uIHRoZSBga2V5YCBhbmQgYHNlcW5vYFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXNnSWRGblN0cmljdFNpZ24obXNnKSB7XG4gICAgaWYgKG1zZy50eXBlICE9PSAnc2lnbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIHNpZ25lZCBtZXNzYWdlIHR5cGUnKTtcbiAgICB9XG4gICAgLy8gU2hvdWxkIG5ldmVyIGhhcHBlblxuICAgIGlmIChtc2cuc2VxdWVuY2VOdW1iZXIgPT0gbnVsbClcbiAgICAgICAgdGhyb3cgRXJyb3IoJ21pc3Npbmcgc2Vxbm8gZmllbGQnKTtcbiAgICAvLyBUT0RPOiBTaG91bGQgdXNlIC5mcm9tIGhlcmUgb3Iga2V5P1xuICAgIHJldHVybiBtc2dJZChtc2cuZnJvbS50b0J5dGVzKCksIG1zZy5zZXF1ZW5jZU51bWJlcik7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgbWVzc2FnZSBpZCwgYmFzZWQgb24gbWVzc2FnZSBgZGF0YWBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1zZ0lkRm5TdHJpY3ROb1NpZ24obXNnKSB7XG4gICAgcmV0dXJuIHNoYTI1Ni5lbmNvZGUobXNnLmRhdGEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXNnSWRGbi5qcy5tYXAiXSwibmFtZXMiOlsibXNnSWQiLCJzaGEyNTYiLCJtc2dJZEZuU3RyaWN0U2lnbiIsIm1zZyIsInR5cGUiLCJFcnJvciIsInNlcXVlbmNlTnVtYmVyIiwiZnJvbSIsInRvQnl0ZXMiLCJtc2dJZEZuU3RyaWN0Tm9TaWduIiwiZW5jb2RlIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/msgIdFn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/multiaddr.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/multiaddr.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multiaddrToIPStr: () => (/* binding */ multiaddrToIPStr)\n/* harmony export */ });\n/* harmony import */ var _multiformats_multiaddr_convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr/convert */ \"(ssr)/./node_modules/@multiformats/multiaddr/dist/src/convert.js\");\n\n// Protocols https://github.com/multiformats/multiaddr/blob/master/protocols.csv\n// code  size  name\n// 4     32    ip4\n// 41    128   ip6\nvar Protocol;\n(function(Protocol) {\n    Protocol[Protocol[\"ip4\"] = 4] = \"ip4\";\n    Protocol[Protocol[\"ip6\"] = 41] = \"ip6\";\n})(Protocol || (Protocol = {}));\nfunction multiaddrToIPStr(multiaddr) {\n    for (const tuple of multiaddr.tuples()){\n        switch(tuple[0]){\n            case Protocol.ip4:\n            case Protocol.ip6:\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return (0,_multiformats_multiaddr_convert__WEBPACK_IMPORTED_MODULE_0__.convertToString)(tuple[0], tuple[1]);\n            default:\n                break;\n        }\n    }\n    return null;\n} //# sourceMappingURL=multiaddr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL211bHRpYWRkci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUNsRSxnRkFBZ0Y7QUFDaEYsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQixrQkFBa0I7QUFDbEIsSUFBSUM7QUFDSCxVQUFVQSxRQUFRO0lBQ2ZBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDaENBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUc7QUFDckMsR0FBR0EsWUFBYUEsQ0FBQUEsV0FBVyxDQUFDO0FBQ3JCLFNBQVNDLGlCQUFpQkMsU0FBUztJQUN0QyxLQUFLLE1BQU1DLFNBQVNELFVBQVVFLE1BQU0sR0FBSTtRQUNwQyxPQUFRRCxLQUFLLENBQUMsRUFBRTtZQUNaLEtBQUtILFNBQVNLLEdBQUc7WUFDakIsS0FBS0wsU0FBU00sR0FBRztnQkFDYixvRUFBb0U7Z0JBQ3BFLE9BQU9QLGdGQUFlQSxDQUFDSSxLQUFLLENBQUMsRUFBRSxFQUFFQSxLQUFLLENBQUMsRUFBRTtZQUM3QztnQkFDSTtRQUNSO0lBQ0o7SUFDQSxPQUFPO0FBQ1gsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvdXRpbHMvbXVsdGlhZGRyLmpzPzE5ODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFRvU3RyaW5nIH0gZnJvbSAnQG11bHRpZm9ybWF0cy9tdWx0aWFkZHIvY29udmVydCc7XG4vLyBQcm90b2NvbHMgaHR0cHM6Ly9naXRodWIuY29tL211bHRpZm9ybWF0cy9tdWx0aWFkZHIvYmxvYi9tYXN0ZXIvcHJvdG9jb2xzLmNzdlxuLy8gY29kZSAgc2l6ZSAgbmFtZVxuLy8gNCAgICAgMzIgICAgaXA0XG4vLyA0MSAgICAxMjggICBpcDZcbnZhciBQcm90b2NvbDtcbihmdW5jdGlvbiAoUHJvdG9jb2wpIHtcbiAgICBQcm90b2NvbFtQcm90b2NvbFtcImlwNFwiXSA9IDRdID0gXCJpcDRcIjtcbiAgICBQcm90b2NvbFtQcm90b2NvbFtcImlwNlwiXSA9IDQxXSA9IFwiaXA2XCI7XG59KShQcm90b2NvbCB8fCAoUHJvdG9jb2wgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpYWRkclRvSVBTdHIobXVsdGlhZGRyKSB7XG4gICAgZm9yIChjb25zdCB0dXBsZSBvZiBtdWx0aWFkZHIudHVwbGVzKCkpIHtcbiAgICAgICAgc3dpdGNoICh0dXBsZVswXSkge1xuICAgICAgICAgICAgY2FzZSBQcm90b2NvbC5pcDQ6XG4gICAgICAgICAgICBjYXNlIFByb3RvY29sLmlwNjpcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgICAgIHJldHVybiBjb252ZXJ0VG9TdHJpbmcodHVwbGVbMF0sIHR1cGxlWzFdKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdWx0aWFkZHIuanMubWFwIl0sIm5hbWVzIjpbImNvbnZlcnRUb1N0cmluZyIsIlByb3RvY29sIiwibXVsdGlhZGRyVG9JUFN0ciIsIm11bHRpYWRkciIsInR1cGxlIiwidHVwbGVzIiwiaXA0IiwiaXA2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/multiaddr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/publishConfig.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/publishConfig.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPublishConfigFromPeerId: () => (/* binding */ getPublishConfigFromPeerId)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"(ssr)/./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/pubsub/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/types.js\");\n\n\n\n/**\n * Prepare a PublishConfig object from a PeerId.\n */ async function getPublishConfigFromPeerId(signaturePolicy, peerId) {\n    switch(signaturePolicy){\n        case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.StrictSign:\n            {\n                if (peerId == null) {\n                    throw Error(\"Must provide PeerId\");\n                }\n                if (peerId.privateKey == null) {\n                    throw Error(\"Cannot sign message, no private key present\");\n                }\n                if (peerId.publicKey == null) {\n                    throw Error(\"Cannot sign message, no public key present\");\n                }\n                // Transform privateKey once at initialization time instead of once per message\n                const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.unmarshalPrivateKey)(peerId.privateKey);\n                return {\n                    type: _types_js__WEBPACK_IMPORTED_MODULE_2__.PublishConfigType.Signing,\n                    author: peerId,\n                    key: peerId.publicKey,\n                    privateKey\n                };\n            }\n        case _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.StrictNoSign:\n            return {\n                type: _types_js__WEBPACK_IMPORTED_MODULE_2__.PublishConfigType.Anonymous\n            };\n        default:\n            throw new Error(`Unknown signature policy \"${signaturePolicy}\"`);\n    }\n} //# sourceMappingURL=publishConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL3B1Ymxpc2hDb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRDtBQUNHO0FBQ2I7QUFDaEQ7O0NBRUMsR0FDTSxlQUFlSSwyQkFBMkJDLGVBQWUsRUFBRUMsTUFBTTtJQUNwRSxPQUFRRDtRQUNKLEtBQUtKLHlEQUFVQTtZQUFFO2dCQUNiLElBQUlLLFVBQVUsTUFBTTtvQkFDaEIsTUFBTUMsTUFBTTtnQkFDaEI7Z0JBQ0EsSUFBSUQsT0FBT0UsVUFBVSxJQUFJLE1BQU07b0JBQzNCLE1BQU1ELE1BQU07Z0JBQ2hCO2dCQUNBLElBQUlELE9BQU9HLFNBQVMsSUFBSSxNQUFNO29CQUMxQixNQUFNRixNQUFNO2dCQUNoQjtnQkFDQSwrRUFBK0U7Z0JBQy9FLE1BQU1DLGFBQWEsTUFBTVIsd0VBQW1CQSxDQUFDTSxPQUFPRSxVQUFVO2dCQUM5RCxPQUFPO29CQUNIRSxNQUFNUCx3REFBaUJBLENBQUNRLE9BQU87b0JBQy9CQyxRQUFRTjtvQkFDUk8sS0FBS1AsT0FBT0csU0FBUztvQkFDckJEO2dCQUNKO1lBQ0o7UUFDQSxLQUFLTiwyREFBWUE7WUFDYixPQUFPO2dCQUNIUSxNQUFNUCx3REFBaUJBLENBQUNXLFNBQVM7WUFDckM7UUFDSjtZQUNJLE1BQU0sSUFBSVAsTUFBTSxDQUFDLDBCQUEwQixFQUFFRixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3ZFO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1nb3NzaXBzdWIvZGlzdC9zcmMvdXRpbHMvcHVibGlzaENvbmZpZy5qcz9mMmYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVubWFyc2hhbFByaXZhdGVLZXkgfSBmcm9tICdAbGlicDJwL2NyeXB0by9rZXlzJztcbmltcG9ydCB7IFN0cmljdFNpZ24sIFN0cmljdE5vU2lnbiB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmltcG9ydCB7IFB1Ymxpc2hDb25maWdUeXBlIH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuLyoqXG4gKiBQcmVwYXJlIGEgUHVibGlzaENvbmZpZyBvYmplY3QgZnJvbSBhIFBlZXJJZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFB1Ymxpc2hDb25maWdGcm9tUGVlcklkKHNpZ25hdHVyZVBvbGljeSwgcGVlcklkKSB7XG4gICAgc3dpdGNoIChzaWduYXR1cmVQb2xpY3kpIHtcbiAgICAgICAgY2FzZSBTdHJpY3RTaWduOiB7XG4gICAgICAgICAgICBpZiAocGVlcklkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignTXVzdCBwcm92aWRlIFBlZXJJZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBlZXJJZC5wcml2YXRlS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignQ2Fubm90IHNpZ24gbWVzc2FnZSwgbm8gcHJpdmF0ZSBrZXkgcHJlc2VudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBlZXJJZC5wdWJsaWNLZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdDYW5ub3Qgc2lnbiBtZXNzYWdlLCBubyBwdWJsaWMga2V5IHByZXNlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBwcml2YXRlS2V5IG9uY2UgYXQgaW5pdGlhbGl6YXRpb24gdGltZSBpbnN0ZWFkIG9mIG9uY2UgcGVyIG1lc3NhZ2VcbiAgICAgICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBhd2FpdCB1bm1hcnNoYWxQcml2YXRlS2V5KHBlZXJJZC5wcml2YXRlS2V5KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogUHVibGlzaENvbmZpZ1R5cGUuU2lnbmluZyxcbiAgICAgICAgICAgICAgICBhdXRob3I6IHBlZXJJZCxcbiAgICAgICAgICAgICAgICBrZXk6IHBlZXJJZC5wdWJsaWNLZXksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZUtleVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFN0cmljdE5vU2lnbjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogUHVibGlzaENvbmZpZ1R5cGUuQW5vbnltb3VzXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHNpZ25hdHVyZSBwb2xpY3kgXCIke3NpZ25hdHVyZVBvbGljeX1cImApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hDb25maWcuanMubWFwIl0sIm5hbWVzIjpbInVubWFyc2hhbFByaXZhdGVLZXkiLCJTdHJpY3RTaWduIiwiU3RyaWN0Tm9TaWduIiwiUHVibGlzaENvbmZpZ1R5cGUiLCJnZXRQdWJsaXNoQ29uZmlnRnJvbVBlZXJJZCIsInNpZ25hdHVyZVBvbGljeSIsInBlZXJJZCIsIkVycm9yIiwicHJpdmF0ZUtleSIsInB1YmxpY0tleSIsInR5cGUiLCJTaWduaW5nIiwiYXV0aG9yIiwia2V5IiwiQW5vbnltb3VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/publishConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js":
/*!************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapDef: () => (/* binding */ MapDef),\n/* harmony export */   removeFirstNItemsFromSet: () => (/* binding */ removeFirstNItemsFromSet),\n/* harmony export */   removeItemsFromSet: () => (/* binding */ removeItemsFromSet)\n/* harmony export */ });\n/**\n * Exclude up to `ineed` items from a set if item meets condition `cond`\n */ function removeItemsFromSet(superSet, ineed, cond = ()=>true) {\n    const subset = new Set();\n    if (ineed <= 0) return subset;\n    for (const id of superSet){\n        if (subset.size >= ineed) break;\n        if (cond(id)) {\n            subset.add(id);\n            superSet.delete(id);\n        }\n    }\n    return subset;\n}\n/**\n * Exclude up to `ineed` items from a set\n */ function removeFirstNItemsFromSet(superSet, ineed) {\n    return removeItemsFromSet(superSet, ineed, ()=>true);\n}\nclass MapDef extends Map {\n    constructor(getDefault){\n        super();\n        this.getDefault = getDefault;\n    }\n    getOrDefault(key) {\n        let value = super.get(key);\n        if (value === undefined) {\n            value = this.getDefault();\n            this.set(key, value);\n        }\n        return value;\n    }\n} //# sourceMappingURL=set.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL3NldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUNNLFNBQVNBLG1CQUFtQkMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sSUFBTSxJQUFJO0lBQ2pFLE1BQU1DLFNBQVMsSUFBSUM7SUFDbkIsSUFBSUgsU0FBUyxHQUNULE9BQU9FO0lBQ1gsS0FBSyxNQUFNRSxNQUFNTCxTQUFVO1FBQ3ZCLElBQUlHLE9BQU9HLElBQUksSUFBSUwsT0FDZjtRQUNKLElBQUlDLEtBQUtHLEtBQUs7WUFDVkYsT0FBT0ksR0FBRyxDQUFDRjtZQUNYTCxTQUFTUSxNQUFNLENBQUNIO1FBQ3BCO0lBQ0o7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7O0NBRUMsR0FDTSxTQUFTTSx5QkFBeUJULFFBQVEsRUFBRUMsS0FBSztJQUNwRCxPQUFPRixtQkFBbUJDLFVBQVVDLE9BQU8sSUFBTTtBQUNyRDtBQUNPLE1BQU1TLGVBQWVDO0lBRXhCQyxZQUFZQyxVQUFVLENBQUU7UUFDcEIsS0FBSztRQUNMLElBQUksQ0FBQ0EsVUFBVSxHQUFHQTtJQUN0QjtJQUNBQyxhQUFhQyxHQUFHLEVBQUU7UUFDZCxJQUFJQyxRQUFRLEtBQUssQ0FBQ0MsSUFBSUY7UUFDdEIsSUFBSUMsVUFBVUUsV0FBVztZQUNyQkYsUUFBUSxJQUFJLENBQUNILFVBQVU7WUFDdkIsSUFBSSxDQUFDTSxHQUFHLENBQUNKLEtBQUtDO1FBQ2xCO1FBQ0EsT0FBT0E7SUFDWDtBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL3NldC5qcz81YzMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXhjbHVkZSB1cCB0byBgaW5lZWRgIGl0ZW1zIGZyb20gYSBzZXQgaWYgaXRlbSBtZWV0cyBjb25kaXRpb24gYGNvbmRgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVJdGVtc0Zyb21TZXQoc3VwZXJTZXQsIGluZWVkLCBjb25kID0gKCkgPT4gdHJ1ZSkge1xuICAgIGNvbnN0IHN1YnNldCA9IG5ldyBTZXQoKTtcbiAgICBpZiAoaW5lZWQgPD0gMClcbiAgICAgICAgcmV0dXJuIHN1YnNldDtcbiAgICBmb3IgKGNvbnN0IGlkIG9mIHN1cGVyU2V0KSB7XG4gICAgICAgIGlmIChzdWJzZXQuc2l6ZSA+PSBpbmVlZClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBpZiAoY29uZChpZCkpIHtcbiAgICAgICAgICAgIHN1YnNldC5hZGQoaWQpO1xuICAgICAgICAgICAgc3VwZXJTZXQuZGVsZXRlKGlkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic2V0O1xufVxuLyoqXG4gKiBFeGNsdWRlIHVwIHRvIGBpbmVlZGAgaXRlbXMgZnJvbSBhIHNldFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmlyc3ROSXRlbXNGcm9tU2V0KHN1cGVyU2V0LCBpbmVlZCkge1xuICAgIHJldHVybiByZW1vdmVJdGVtc0Zyb21TZXQoc3VwZXJTZXQsIGluZWVkLCAoKSA9PiB0cnVlKTtcbn1cbmV4cG9ydCBjbGFzcyBNYXBEZWYgZXh0ZW5kcyBNYXAge1xuICAgIGdldERlZmF1bHQ7XG4gICAgY29uc3RydWN0b3IoZ2V0RGVmYXVsdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmdldERlZmF1bHQgPSBnZXREZWZhdWx0O1xuICAgIH1cbiAgICBnZXRPckRlZmF1bHQoa2V5KSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHN1cGVyLmdldChrZXkpO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmdldERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXQuanMubWFwIl0sIm5hbWVzIjpbInJlbW92ZUl0ZW1zRnJvbVNldCIsInN1cGVyU2V0IiwiaW5lZWQiLCJjb25kIiwic3Vic2V0IiwiU2V0IiwiaWQiLCJzaXplIiwiYWRkIiwiZGVsZXRlIiwicmVtb3ZlRmlyc3ROSXRlbXNGcm9tU2V0IiwiTWFwRGVmIiwiTWFwIiwiY29uc3RydWN0b3IiLCJnZXREZWZhdWx0IiwiZ2V0T3JEZWZhdWx0Iiwia2V5IiwidmFsdWUiLCJnZXQiLCJ1bmRlZmluZWQiLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/set.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/shuffle.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/shuffle.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shuffle: () => (/* binding */ shuffle)\n/* harmony export */ });\n/**\n * Pseudo-randomly shuffles an array\n *\n * Mutates the input array\n */ function shuffle(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const randInt = ()=>{\n        return Math.floor(Math.random() * Math.floor(arr.length));\n    };\n    for(let i = 0; i < arr.length; i++){\n        const j = randInt();\n        const tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n    return arr;\n} //# sourceMappingURL=shuffle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL3NodWZmbGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDTSxTQUFTQSxRQUFRQyxHQUFHO0lBQ3ZCLElBQUlBLElBQUlDLE1BQU0sSUFBSSxHQUFHO1FBQ2pCLE9BQU9EO0lBQ1g7SUFDQSxNQUFNRSxVQUFVO1FBQ1osT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUtGLEtBQUtDLEtBQUssQ0FBQ0osSUFBSUMsTUFBTTtJQUMzRDtJQUNBLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJTixJQUFJQyxNQUFNLEVBQUVLLElBQUs7UUFDakMsTUFBTUMsSUFBSUw7UUFDVixNQUFNTSxNQUFNUixHQUFHLENBQUNNLEVBQUU7UUFDbEJOLEdBQUcsQ0FBQ00sRUFBRSxHQUFHTixHQUFHLENBQUNPLEVBQUU7UUFDZlAsR0FBRyxDQUFDTyxFQUFFLEdBQUdDO0lBQ2I7SUFDQSxPQUFPUjtBQUNYLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL3NodWZmbGUuanM/OWYyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBzZXVkby1yYW5kb21seSBzaHVmZmxlcyBhbiBhcnJheVxuICpcbiAqIE11dGF0ZXMgdGhlIGlucHV0IGFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGFycikge1xuICAgIGlmIChhcnIubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gICAgY29uc3QgcmFuZEludCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGguZmxvb3IoYXJyLmxlbmd0aCkpO1xuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaiA9IHJhbmRJbnQoKTtcbiAgICAgICAgY29uc3QgdG1wID0gYXJyW2ldO1xuICAgICAgICBhcnJbaV0gPSBhcnJbal07XG4gICAgICAgIGFycltqXSA9IHRtcDtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNodWZmbGUuanMubWFwIl0sIm5hbWVzIjpbInNodWZmbGUiLCJhcnIiLCJsZW5ndGgiLCJyYW5kSW50IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiaSIsImoiLCJ0bXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/shuffle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/time-cache.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/time-cache.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleTimeCache: () => (/* binding */ SimpleTimeCache)\n/* harmony export */ });\n/**\n * This is similar to https://github.com/daviddias/time-cache/blob/master/src/index.js\n * for our own need, we don't use lodash throttle to improve performance.\n * This gives 4x - 5x performance gain compared to npm TimeCache\n */ class SimpleTimeCache {\n    constructor(opts){\n        this.entries = new Map();\n        this.validityMs = opts.validityMs;\n    // allow negative validityMs so that this does not cache anything, spec test compliance.spec.js\n    // sends duplicate messages and expect peer to receive all. Application likely uses positive validityMs\n    }\n    get size() {\n        return this.entries.size;\n    }\n    /** Returns true if there was a key collision and the entry is dropped */ put(key, value) {\n        if (this.entries.has(key)) {\n            // Key collisions break insertion order in the entries cache, which break prune logic.\n            // prune relies on each iterated entry to have strictly ascending validUntilMs, else it\n            // won't prune expired entries and SimpleTimeCache will grow unexpectedly.\n            // As of Oct 2022 NodeJS v16, inserting the same key twice with different value does not\n            // change the key position in the iterator stream. A unit test asserts this behaviour.\n            return true;\n        }\n        this.entries.set(key, {\n            value,\n            validUntilMs: Date.now() + this.validityMs\n        });\n        return false;\n    }\n    prune() {\n        const now = Date.now();\n        for (const [k, v] of this.entries.entries()){\n            if (v.validUntilMs < now) {\n                this.entries.delete(k);\n            } else {\n                break;\n            }\n        }\n    }\n    has(key) {\n        return this.entries.has(key);\n    }\n    get(key) {\n        const value = this.entries.get(key);\n        return value != null && value.validUntilMs >= Date.now() ? value.value : undefined;\n    }\n    clear() {\n        this.entries.clear();\n    }\n} //# sourceMappingURL=time-cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtZ29zc2lwc3ViL2Rpc3Qvc3JjL3V0aWxzL3RpbWUtY2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDTSxNQUFNQTtJQUdUQyxZQUFZQyxJQUFJLENBQUU7YUFGbEJDLFVBQVUsSUFBSUM7UUFHVixJQUFJLENBQUNDLFVBQVUsR0FBR0gsS0FBS0csVUFBVTtJQUNqQywrRkFBK0Y7SUFDL0YsdUdBQXVHO0lBQzNHO0lBQ0EsSUFBSUMsT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNHLElBQUk7SUFDNUI7SUFDQSx1RUFBdUUsR0FDdkVDLElBQUlDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO1FBQ1osSUFBSSxJQUFJLENBQUNOLE9BQU8sQ0FBQ08sR0FBRyxDQUFDRixNQUFNO1lBQ3ZCLHNGQUFzRjtZQUN0Rix1RkFBdUY7WUFDdkYsMEVBQTBFO1lBQzFFLHdGQUF3RjtZQUN4RixzRkFBc0Y7WUFDdEYsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDTCxPQUFPLENBQUNRLEdBQUcsQ0FBQ0gsS0FBSztZQUFFQztZQUFPRyxjQUFjQyxLQUFLQyxHQUFHLEtBQUssSUFBSSxDQUFDVCxVQUFVO1FBQUM7UUFDMUUsT0FBTztJQUNYO0lBQ0FVLFFBQVE7UUFDSixNQUFNRCxNQUFNRCxLQUFLQyxHQUFHO1FBQ3BCLEtBQUssTUFBTSxDQUFDRSxHQUFHQyxFQUFFLElBQUksSUFBSSxDQUFDZCxPQUFPLENBQUNBLE9BQU8sR0FBSTtZQUN6QyxJQUFJYyxFQUFFTCxZQUFZLEdBQUdFLEtBQUs7Z0JBQ3RCLElBQUksQ0FBQ1gsT0FBTyxDQUFDZSxNQUFNLENBQUNGO1lBQ3hCLE9BQ0s7Z0JBR0Q7WUFDSjtRQUNKO0lBQ0o7SUFDQU4sSUFBSUYsR0FBRyxFQUFFO1FBQ0wsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ08sR0FBRyxDQUFDRjtJQUM1QjtJQUNBVyxJQUFJWCxHQUFHLEVBQUU7UUFDTCxNQUFNQyxRQUFRLElBQUksQ0FBQ04sT0FBTyxDQUFDZ0IsR0FBRyxDQUFDWDtRQUMvQixPQUFPLFNBQVUsUUFBU0MsTUFBTUcsWUFBWSxJQUFJQyxLQUFLQyxHQUFHLEtBQUtMLE1BQU1BLEtBQUssR0FBR1c7SUFDL0U7SUFDQUMsUUFBUTtRQUNKLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ2tCLEtBQUs7SUFDdEI7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLWdvc3NpcHN1Yi9kaXN0L3NyYy91dGlscy90aW1lLWNhY2hlLmpzPzdkYzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkZGlhcy90aW1lLWNhY2hlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC5qc1xuICogZm9yIG91ciBvd24gbmVlZCwgd2UgZG9uJ3QgdXNlIGxvZGFzaCB0aHJvdHRsZSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICogVGhpcyBnaXZlcyA0eCAtIDV4IHBlcmZvcm1hbmNlIGdhaW4gY29tcGFyZWQgdG8gbnBtIFRpbWVDYWNoZVxuICovXG5leHBvcnQgY2xhc3MgU2ltcGxlVGltZUNhY2hlIHtcbiAgICBlbnRyaWVzID0gbmV3IE1hcCgpO1xuICAgIHZhbGlkaXR5TXM7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLnZhbGlkaXR5TXMgPSBvcHRzLnZhbGlkaXR5TXM7XG4gICAgICAgIC8vIGFsbG93IG5lZ2F0aXZlIHZhbGlkaXR5TXMgc28gdGhhdCB0aGlzIGRvZXMgbm90IGNhY2hlIGFueXRoaW5nLCBzcGVjIHRlc3QgY29tcGxpYW5jZS5zcGVjLmpzXG4gICAgICAgIC8vIHNlbmRzIGR1cGxpY2F0ZSBtZXNzYWdlcyBhbmQgZXhwZWN0IHBlZXIgdG8gcmVjZWl2ZSBhbGwuIEFwcGxpY2F0aW9uIGxpa2VseSB1c2VzIHBvc2l0aXZlIHZhbGlkaXR5TXNcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuc2l6ZTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSB3YXMgYSBrZXkgY29sbGlzaW9uIGFuZCB0aGUgZW50cnkgaXMgZHJvcHBlZCAqL1xuICAgIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmVudHJpZXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIEtleSBjb2xsaXNpb25zIGJyZWFrIGluc2VydGlvbiBvcmRlciBpbiB0aGUgZW50cmllcyBjYWNoZSwgd2hpY2ggYnJlYWsgcHJ1bmUgbG9naWMuXG4gICAgICAgICAgICAvLyBwcnVuZSByZWxpZXMgb24gZWFjaCBpdGVyYXRlZCBlbnRyeSB0byBoYXZlIHN0cmljdGx5IGFzY2VuZGluZyB2YWxpZFVudGlsTXMsIGVsc2UgaXRcbiAgICAgICAgICAgIC8vIHdvbid0IHBydW5lIGV4cGlyZWQgZW50cmllcyBhbmQgU2ltcGxlVGltZUNhY2hlIHdpbGwgZ3JvdyB1bmV4cGVjdGVkbHkuXG4gICAgICAgICAgICAvLyBBcyBvZiBPY3QgMjAyMiBOb2RlSlMgdjE2LCBpbnNlcnRpbmcgdGhlIHNhbWUga2V5IHR3aWNlIHdpdGggZGlmZmVyZW50IHZhbHVlIGRvZXMgbm90XG4gICAgICAgICAgICAvLyBjaGFuZ2UgdGhlIGtleSBwb3NpdGlvbiBpbiB0aGUgaXRlcmF0b3Igc3RyZWFtLiBBIHVuaXQgdGVzdCBhc3NlcnRzIHRoaXMgYmVoYXZpb3VyLlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldChrZXksIHsgdmFsdWUsIHZhbGlkVW50aWxNczogRGF0ZS5ub3coKSArIHRoaXMudmFsaWRpdHlNcyB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwcnVuZSgpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgdGhpcy5lbnRyaWVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgaWYgKHYudmFsaWRVbnRpbE1zIDwgbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRyaWVzLmRlbGV0ZShrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVudHJpZXMgYXJlIGluc2VydGVkIHdpdGggc3RyaWN0bHkgYXNjZW5kaW5nIHZhbGlkVW50aWxNcy5cbiAgICAgICAgICAgICAgICAvLyBTdG9wIGVhcmx5IHRvIHNhdmUgaXRlcmF0aW9uc1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcy5oYXMoa2V5KTtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZW50cmllcy5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAhPSBudWxsKSAmJiB2YWx1ZS52YWxpZFVudGlsTXMgPj0gRGF0ZS5ub3coKSA/IHZhbHVlLnZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzLmNsZWFyKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZS1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOlsiU2ltcGxlVGltZUNhY2hlIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiZW50cmllcyIsIk1hcCIsInZhbGlkaXR5TXMiLCJzaXplIiwicHV0Iiwia2V5IiwidmFsdWUiLCJoYXMiLCJzZXQiLCJ2YWxpZFVudGlsTXMiLCJEYXRlIiwibm93IiwicHJ1bmUiLCJrIiwidiIsImRlbGV0ZSIsImdldCIsInVuZGVmaW5lZCIsImNsZWFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-gossipsub/dist/src/utils/time-cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DUMP_SESSION_KEYS: () => (/* binding */ DUMP_SESSION_KEYS),\n/* harmony export */   NOISE_MSG_MAX_LENGTH_BYTES: () => (/* binding */ NOISE_MSG_MAX_LENGTH_BYTES),\n/* harmony export */   NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG: () => (/* binding */ NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG)\n/* harmony export */ });\nconst NOISE_MSG_MAX_LENGTH_BYTES = 65535;\nconst NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16;\nconst DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS); //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLE1BQU1BLDZCQUE2QixNQUFNO0FBQ3pDLE1BQU1DLHlDQUF5Q0QsNkJBQTZCLEdBQUc7QUFDL0UsTUFBTUUsb0JBQW9CQyxRQUFRQyxXQUFXQyxPQUFPLEVBQUVDLEtBQUtKLG1CQUFtQixDQUNyRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1ub2lzZS9kaXN0L3NyYy9jb25zdGFudHMuanM/NzU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgTk9JU0VfTVNHX01BWF9MRU5HVEhfQllURVMgPSA2NTUzNTtcbmV4cG9ydCBjb25zdCBOT0lTRV9NU0dfTUFYX0xFTkdUSF9CWVRFU19XSVRIT1VUX1RBRyA9IE5PSVNFX01TR19NQVhfTEVOR1RIX0JZVEVTIC0gMTY7XG5leHBvcnQgY29uc3QgRFVNUF9TRVNTSU9OX0tFWVMgPSBCb29sZWFuKGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5EVU1QX1NFU1NJT05fS0VZUyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk5PSVNFX01TR19NQVhfTEVOR1RIX0JZVEVTIiwiTk9JU0VfTVNHX01BWF9MRU5HVEhfQllURVNfV0lUSE9VVF9UQUciLCJEVU1QX1NFU1NJT05fS0VZUyIsIkJvb2xlYW4iLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImVudiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCrypto: () => (/* binding */ defaultCrypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var _chainsafe_as_chacha20poly1305__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chainsafe/as-chacha20poly1305 */ \"(ssr)/./node_modules/@chainsafe/as-chacha20poly1305/lib/src/index.js\");\n/* harmony import */ var _chainsafe_as_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @chainsafe/as-sha256 */ \"(ssr)/./node_modules/@chainsafe/as-sha256/lib/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arraylist */ \"(ssr)/./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var wherearewe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! wherearewe */ \"(ssr)/./node_modules/wherearewe/src/index.js\");\n/* harmony import */ var _js_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js\");\n\n\n\n\n\n\nconst ctx = (0,_chainsafe_as_chacha20poly1305__WEBPACK_IMPORTED_MODULE_1__.newInstance)();\nconst asImpl = new _chainsafe_as_chacha20poly1305__WEBPACK_IMPORTED_MODULE_1__.ChaCha20Poly1305(ctx);\nconst CHACHA_POLY1305 = \"chacha20-poly1305\";\nconst PKCS8_PREFIX = Buffer.from([\n    0x30,\n    0x2e,\n    0x02,\n    0x01,\n    0x00,\n    0x30,\n    0x05,\n    0x06,\n    0x03,\n    0x2b,\n    0x65,\n    0x6e,\n    0x04,\n    0x22,\n    0x04,\n    0x20\n]);\nconst X25519_PREFIX = Buffer.from([\n    0x30,\n    0x2a,\n    0x30,\n    0x05,\n    0x06,\n    0x03,\n    0x2b,\n    0x65,\n    0x6e,\n    0x03,\n    0x21,\n    0x00\n]);\nconst nodeCrypto = {\n    hashSHA256 (data) {\n        const hash = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha256\");\n        if (data instanceof Uint8Array) {\n            return hash.update(data).digest();\n        }\n        for (const buf of data){\n            hash.update(buf);\n        }\n        return hash.digest();\n    },\n    chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n        const cipher = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createCipheriv(CHACHA_POLY1305, k, nonce, {\n            authTagLength: 16\n        });\n        cipher.setAAD(ad, {\n            plaintextLength: plaintext.byteLength\n        });\n        if (plaintext instanceof Uint8Array) {\n            const updated = cipher.update(plaintext);\n            const final = cipher.final();\n            const tag = cipher.getAuthTag();\n            return Buffer.concat([\n                updated,\n                tag,\n                final\n            ], updated.byteLength + tag.byteLength + final.byteLength);\n        }\n        const output = new uint8arraylist__WEBPACK_IMPORTED_MODULE_3__.Uint8ArrayList();\n        for (const buf of plaintext){\n            output.append(cipher.update(buf));\n        }\n        const final = cipher.final();\n        if (final.byteLength > 0) {\n            output.append(final);\n        }\n        output.append(cipher.getAuthTag());\n        return output;\n    },\n    chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, _dst) {\n        const authTag = ciphertext.subarray(ciphertext.length - 16);\n        const decipher = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createDecipheriv(CHACHA_POLY1305, k, nonce, {\n            authTagLength: 16\n        });\n        let text;\n        if (ciphertext instanceof Uint8Array) {\n            text = ciphertext.subarray(0, ciphertext.length - 16);\n        } else {\n            text = ciphertext.sublist(0, ciphertext.length - 16);\n        }\n        decipher.setAAD(ad, {\n            plaintextLength: text.byteLength\n        });\n        decipher.setAuthTag(authTag);\n        if (text instanceof Uint8Array) {\n            const output = decipher.update(text);\n            const final = decipher.final();\n            if (final.byteLength > 0) {\n                return Buffer.concat([\n                    output,\n                    final\n                ], output.byteLength + final.byteLength);\n            }\n            return output;\n        }\n        const output = new uint8arraylist__WEBPACK_IMPORTED_MODULE_3__.Uint8ArrayList();\n        for (const buf of text){\n            output.append(decipher.update(buf));\n        }\n        const final = decipher.final();\n        if (final.byteLength > 0) {\n            output.append(final);\n        }\n        return output;\n    }\n};\nconst asCrypto = {\n    hashSHA256 (data) {\n        return (0,_chainsafe_as_sha256__WEBPACK_IMPORTED_MODULE_2__.digest)(data.subarray());\n    },\n    chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n        return asImpl.seal(k, nonce, plaintext.subarray(), ad);\n    },\n    chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {\n        return asImpl.open(k, nonce, ciphertext.subarray(), ad, dst);\n    }\n};\n// benchmarks show that for chacha20poly1305\n// the as implementation is faster for smaller payloads(<1200)\n// and the node implementation is faster for larger payloads\nconst defaultCrypto = {\n    ..._js_js__WEBPACK_IMPORTED_MODULE_5__.pureJsCrypto,\n    hashSHA256 (data) {\n        return nodeCrypto.hashSHA256(data);\n    },\n    chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n        if (plaintext.byteLength < 1200) {\n            return asCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k);\n        }\n        return nodeCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k);\n    },\n    chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {\n        if (ciphertext.byteLength < 1200) {\n            return asCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst);\n        }\n        return nodeCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst);\n    },\n    generateX25519KeyPair () {\n        const { publicKey, privateKey } = node_crypto__WEBPACK_IMPORTED_MODULE_0__.generateKeyPairSync(\"x25519\", {\n            publicKeyEncoding: {\n                type: \"spki\",\n                format: \"der\"\n            },\n            privateKeyEncoding: {\n                type: \"pkcs8\",\n                format: \"der\"\n            }\n        });\n        return {\n            publicKey: publicKey.subarray(X25519_PREFIX.length),\n            privateKey: privateKey.subarray(PKCS8_PREFIX.length)\n        };\n    },\n    generateX25519KeyPairFromSeed (seed) {\n        const privateKey = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n            key: Buffer.concat([\n                PKCS8_PREFIX,\n                seed\n            ], PKCS8_PREFIX.byteLength + seed.byteLength),\n            type: \"pkcs8\",\n            format: \"der\"\n        });\n        const publicKey = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey(privateKey).export({\n            type: \"spki\",\n            format: \"der\"\n        }).subarray(X25519_PREFIX.length);\n        return {\n            publicKey,\n            privateKey: seed\n        };\n    },\n    generateX25519SharedKey (privateKey, publicKey) {\n        if (publicKey instanceof Uint8Array) {\n            publicKey = Buffer.concat([\n                X25519_PREFIX,\n                publicKey\n            ], X25519_PREFIX.byteLength + publicKey.byteLength);\n        } else {\n            publicKey.prepend(X25519_PREFIX);\n            publicKey = publicKey.subarray();\n        }\n        if (privateKey instanceof Uint8Array) {\n            privateKey = Buffer.concat([\n                PKCS8_PREFIX,\n                privateKey\n            ], PKCS8_PREFIX.byteLength + privateKey.byteLength);\n        } else {\n            privateKey.prepend(PKCS8_PREFIX);\n            privateKey = privateKey.subarray();\n        }\n        return node_crypto__WEBPACK_IMPORTED_MODULE_0__.diffieHellman({\n            publicKey: node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey({\n                key: Buffer.from(publicKey, publicKey.byteOffset, publicKey.byteLength),\n                type: \"spki\",\n                format: \"der\"\n            }),\n            privateKey: node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n                key: Buffer.from(privateKey, privateKey.byteOffset, privateKey.byteLength),\n                type: \"pkcs8\",\n                format: \"der\"\n            })\n        });\n    }\n};\n// no chacha20-poly1305 in electron https://github.com/electron/electron/issues/24024\nif (wherearewe__WEBPACK_IMPORTED_MODULE_4__.isElectronMain) {\n    defaultCrypto.chaCha20Poly1305Encrypt = asCrypto.chaCha20Poly1305Encrypt;\n    defaultCrypto.chaCha20Poly1305Decrypt = asCrypto.chaCha20Poly1305Decrypt;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pureJsCrypto: () => (/* binding */ pureJsCrypto)\n/* harmony export */ });\n/* harmony import */ var _noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/ciphers/chacha */ \"(ssr)/./node_modules/@noble/ciphers/esm/chacha.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/./node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var _noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/hkdf */ \"(ssr)/./node_modules/@noble/hashes/esm/hkdf.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n\n\n\n\nconst pureJsCrypto = {\n    hashSHA256 (data) {\n        return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(data.subarray());\n    },\n    getHKDF (ck, ikm) {\n        const prk = (0,_noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_2__.extract)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, ikm, ck);\n        const okmU8Array = (0,_noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_2__.expand)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, prk, undefined, 96);\n        const okm = okmU8Array;\n        const k1 = okm.subarray(0, 32);\n        const k2 = okm.subarray(32, 64);\n        const k3 = okm.subarray(64, 96);\n        return [\n            k1,\n            k2,\n            k3\n        ];\n    },\n    generateX25519KeyPair () {\n        const secretKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.utils.randomPrivateKey();\n        const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.getPublicKey(secretKey);\n        return {\n            publicKey,\n            privateKey: secretKey\n        };\n    },\n    generateX25519KeyPairFromSeed (seed) {\n        const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.getPublicKey(seed);\n        return {\n            publicKey,\n            privateKey: seed\n        };\n    },\n    generateX25519SharedKey (privateKey, publicKey) {\n        return _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.getSharedSecret(privateKey.subarray(), publicKey.subarray());\n    },\n    chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n        return (0,_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_0__.chacha20poly1305)(k, nonce, ad).encrypt(plaintext.subarray());\n    },\n    chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {\n        return (0,_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_0__.chacha20poly1305)(k, nonce, ad).decrypt(ciphertext.subarray(), dst);\n    }\n}; //# sourceMappingURL=js.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvY3J5cHRvL2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlEO0FBQ1Y7QUFDTTtBQUNQO0FBQ3ZDLE1BQU1LLGVBQWU7SUFDeEJDLFlBQVdDLElBQUk7UUFDWCxPQUFPSCw0REFBTUEsQ0FBQ0csS0FBS0MsUUFBUTtJQUMvQjtJQUNBQyxTQUFRQyxFQUFFLEVBQUVDLEdBQUc7UUFDWCxNQUFNQyxNQUFNViwyREFBT0EsQ0FBQ0Usd0RBQU1BLEVBQUVPLEtBQUtEO1FBQ2pDLE1BQU1HLGFBQWFWLDBEQUFNQSxDQUFDQyx3REFBTUEsRUFBRVEsS0FBS0UsV0FBVztRQUNsRCxNQUFNQyxNQUFNRjtRQUNaLE1BQU1HLEtBQUtELElBQUlQLFFBQVEsQ0FBQyxHQUFHO1FBQzNCLE1BQU1TLEtBQUtGLElBQUlQLFFBQVEsQ0FBQyxJQUFJO1FBQzVCLE1BQU1VLEtBQUtILElBQUlQLFFBQVEsQ0FBQyxJQUFJO1FBQzVCLE9BQU87WUFBQ1E7WUFBSUM7WUFBSUM7U0FBRztJQUN2QjtJQUNBQztRQUNJLE1BQU1DLFlBQVluQix5REFBTUEsQ0FBQ29CLEtBQUssQ0FBQ0MsZ0JBQWdCO1FBQy9DLE1BQU1DLFlBQVl0Qix5REFBTUEsQ0FBQ3VCLFlBQVksQ0FBQ0o7UUFDdEMsT0FBTztZQUNIRztZQUNBRSxZQUFZTDtRQUNoQjtJQUNKO0lBQ0FNLCtCQUE4QkMsSUFBSTtRQUM5QixNQUFNSixZQUFZdEIseURBQU1BLENBQUN1QixZQUFZLENBQUNHO1FBQ3RDLE9BQU87WUFDSEo7WUFDQUUsWUFBWUU7UUFDaEI7SUFDSjtJQUNBQyx5QkFBd0JILFVBQVUsRUFBRUYsU0FBUztRQUN6QyxPQUFPdEIseURBQU1BLENBQUM0QixlQUFlLENBQUNKLFdBQVdqQixRQUFRLElBQUllLFVBQVVmLFFBQVE7SUFDM0U7SUFDQXNCLHlCQUF3QkMsU0FBUyxFQUFFQyxLQUFLLEVBQUVDLEVBQUUsRUFBRUMsQ0FBQztRQUMzQyxPQUFPbEMsdUVBQWdCQSxDQUFDa0MsR0FBR0YsT0FBT0MsSUFBSUUsT0FBTyxDQUFDSixVQUFVdkIsUUFBUTtJQUNwRTtJQUNBNEIseUJBQXdCQyxVQUFVLEVBQUVMLEtBQUssRUFBRUMsRUFBRSxFQUFFQyxDQUFDLEVBQUVJLEdBQUc7UUFDakQsT0FBT3RDLHVFQUFnQkEsQ0FBQ2tDLEdBQUdGLE9BQU9DLElBQUlNLE9BQU8sQ0FBQ0YsV0FBVzdCLFFBQVEsSUFBSThCO0lBQ3pFO0FBQ0osRUFBRSxDQUNGLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL2Rpc3Qvc3JjL2NyeXB0by9qcy5qcz83NTc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNoYWNoYTIwcG9seTEzMDUgfSBmcm9tICdAbm9ibGUvY2lwaGVycy9jaGFjaGEnO1xuaW1wb3J0IHsgeDI1NTE5IH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9lZDI1NTE5JztcbmltcG9ydCB7IGV4dHJhY3QsIGV4cGFuZCB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvaGtkZic7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTI1Nic7XG5leHBvcnQgY29uc3QgcHVyZUpzQ3J5cHRvID0ge1xuICAgIGhhc2hTSEEyNTYoZGF0YSkge1xuICAgICAgICByZXR1cm4gc2hhMjU2KGRhdGEuc3ViYXJyYXkoKSk7XG4gICAgfSxcbiAgICBnZXRIS0RGKGNrLCBpa20pIHtcbiAgICAgICAgY29uc3QgcHJrID0gZXh0cmFjdChzaGEyNTYsIGlrbSwgY2spO1xuICAgICAgICBjb25zdCBva21VOEFycmF5ID0gZXhwYW5kKHNoYTI1NiwgcHJrLCB1bmRlZmluZWQsIDk2KTtcbiAgICAgICAgY29uc3Qgb2ttID0gb2ttVThBcnJheTtcbiAgICAgICAgY29uc3QgazEgPSBva20uc3ViYXJyYXkoMCwgMzIpO1xuICAgICAgICBjb25zdCBrMiA9IG9rbS5zdWJhcnJheSgzMiwgNjQpO1xuICAgICAgICBjb25zdCBrMyA9IG9rbS5zdWJhcnJheSg2NCwgOTYpO1xuICAgICAgICByZXR1cm4gW2sxLCBrMiwgazNdO1xuICAgIH0sXG4gICAgZ2VuZXJhdGVYMjU1MTlLZXlQYWlyKCkge1xuICAgICAgICBjb25zdCBzZWNyZXRLZXkgPSB4MjU1MTkudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpO1xuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSB4MjU1MTkuZ2V0UHVibGljS2V5KHNlY3JldEtleSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwdWJsaWNLZXksXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBzZWNyZXRLZXlcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGdlbmVyYXRlWDI1NTE5S2V5UGFpckZyb21TZWVkKHNlZWQpIHtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0geDI1NTE5LmdldFB1YmxpY0tleShzZWVkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHB1YmxpY0tleSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHNlZWRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGdlbmVyYXRlWDI1NTE5U2hhcmVkS2V5KHByaXZhdGVLZXksIHB1YmxpY0tleSkge1xuICAgICAgICByZXR1cm4geDI1NTE5LmdldFNoYXJlZFNlY3JldChwcml2YXRlS2V5LnN1YmFycmF5KCksIHB1YmxpY0tleS5zdWJhcnJheSgpKTtcbiAgICB9LFxuICAgIGNoYUNoYTIwUG9seTEzMDVFbmNyeXB0KHBsYWludGV4dCwgbm9uY2UsIGFkLCBrKSB7XG4gICAgICAgIHJldHVybiBjaGFjaGEyMHBvbHkxMzA1KGssIG5vbmNlLCBhZCkuZW5jcnlwdChwbGFpbnRleHQuc3ViYXJyYXkoKSk7XG4gICAgfSxcbiAgICBjaGFDaGEyMFBvbHkxMzA1RGVjcnlwdChjaXBoZXJ0ZXh0LCBub25jZSwgYWQsIGssIGRzdCkge1xuICAgICAgICByZXR1cm4gY2hhY2hhMjBwb2x5MTMwNShrLCBub25jZSwgYWQpLmRlY3J5cHQoY2lwaGVydGV4dC5zdWJhcnJheSgpLCBkc3QpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qcy5qcy5tYXAiXSwibmFtZXMiOlsiY2hhY2hhMjBwb2x5MTMwNSIsIngyNTUxOSIsImV4dHJhY3QiLCJleHBhbmQiLCJzaGEyNTYiLCJwdXJlSnNDcnlwdG8iLCJoYXNoU0hBMjU2IiwiZGF0YSIsInN1YmFycmF5IiwiZ2V0SEtERiIsImNrIiwiaWttIiwicHJrIiwib2ttVThBcnJheSIsInVuZGVmaW5lZCIsIm9rbSIsImsxIiwiazIiLCJrMyIsImdlbmVyYXRlWDI1NTE5S2V5UGFpciIsInNlY3JldEtleSIsInV0aWxzIiwicmFuZG9tUHJpdmF0ZUtleSIsInB1YmxpY0tleSIsImdldFB1YmxpY0tleSIsInByaXZhdGVLZXkiLCJnZW5lcmF0ZVgyNTUxOUtleVBhaXJGcm9tU2VlZCIsInNlZWQiLCJnZW5lcmF0ZVgyNTUxOVNoYXJlZEtleSIsImdldFNoYXJlZFNlY3JldCIsImNoYUNoYTIwUG9seTEzMDVFbmNyeXB0IiwicGxhaW50ZXh0Iiwibm9uY2UiLCJhZCIsImsiLCJlbmNyeXB0IiwiY2hhQ2hhMjBQb2x5MTMwNURlY3J5cHQiLCJjaXBoZXJ0ZXh0IiwiZHN0IiwiZGVjcnlwdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/streaming.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/streaming.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptStream: () => (/* binding */ decryptStream),\n/* harmony export */   encryptStream: () => (/* binding */ encryptStream)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"(ssr)/./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\");\n/* harmony import */ var _encoder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoder.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js\");\n\n\n\nconst CHACHA_TAG_LENGTH = 16;\n// Returns generator that encrypts payload from the user\nfunction encryptStream(handshake, metrics) {\n    return async function*(source) {\n        for await (const chunk of source){\n            for(let i = 0; i < chunk.length; i += _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG){\n                let end = i + _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                let data;\n                if (chunk instanceof Uint8Array) {\n                    data = handshake.encrypt(chunk.subarray(i, end), handshake.session);\n                } else {\n                    data = handshake.encrypt(chunk.sublist(i, end), handshake.session);\n                }\n                metrics?.encryptedPackets.increment();\n                yield new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList((0,_encoder_js__WEBPACK_IMPORTED_MODULE_2__.uint16BEEncode)(data.byteLength), data);\n            }\n        }\n    };\n}\n// Decrypt received payload to the user\nfunction decryptStream(handshake, metrics) {\n    return async function*(source) {\n        for await (const chunk of source){\n            for(let i = 0; i < chunk.length; i += _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES){\n                let end = i + _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                if (end - CHACHA_TAG_LENGTH < i) {\n                    throw new Error(\"Invalid chunk\");\n                }\n                const encrypted = chunk.sublist(i, end);\n                // memory allocation is not cheap so reuse the encrypted Uint8Array\n                // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n                // this is ok because chacha20 reads bytes one by one and don't reread after that\n                // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n                const dst = chunk.subarray(i, end - CHACHA_TAG_LENGTH);\n                const { plaintext: decrypted, valid } = handshake.decrypt(encrypted, handshake.session, dst);\n                if (!valid) {\n                    metrics?.decryptErrors.increment();\n                    throw new Error(\"Failed to validate decrypted chunk\");\n                }\n                metrics?.decryptedPackets.increment();\n                yield decrypted;\n            }\n        }\n    };\n} //# sourceMappingURL=streaming.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvY3J5cHRvL3N0cmVhbWluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRDtBQUNxRDtBQUN0RDtBQUMvQyxNQUFNSSxvQkFBb0I7QUFDMUIsd0RBQXdEO0FBQ2pELFNBQVNDLGNBQWNDLFNBQVMsRUFBRUMsT0FBTztJQUM1QyxPQUFPLGdCQUFpQkMsTUFBTTtRQUMxQixXQUFXLE1BQU1DLFNBQVNELE9BQVE7WUFDOUIsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlELE1BQU1FLE1BQU0sRUFBRUQsS0FBS1IsaUZBQXNDQSxDQUFFO2dCQUMzRSxJQUFJVSxNQUFNRixJQUFJUixpRkFBc0NBO2dCQUNwRCxJQUFJVSxNQUFNSCxNQUFNRSxNQUFNLEVBQUU7b0JBQ3BCQyxNQUFNSCxNQUFNRSxNQUFNO2dCQUN0QjtnQkFDQSxJQUFJRTtnQkFDSixJQUFJSixpQkFBaUJLLFlBQVk7b0JBQzdCRCxPQUFPUCxVQUFVUyxPQUFPLENBQUNOLE1BQU1PLFFBQVEsQ0FBQ04sR0FBR0UsTUFBTU4sVUFBVVcsT0FBTztnQkFDdEUsT0FDSztvQkFDREosT0FBT1AsVUFBVVMsT0FBTyxDQUFDTixNQUFNUyxPQUFPLENBQUNSLEdBQUdFLE1BQU1OLFVBQVVXLE9BQU87Z0JBQ3JFO2dCQUNBVixTQUFTWSxpQkFBaUJDO2dCQUMxQixNQUFNLElBQUlwQiwwREFBY0EsQ0FBQ0csMkRBQWNBLENBQUNVLEtBQUtRLFVBQVUsR0FBR1I7WUFDOUQ7UUFDSjtJQUNKO0FBQ0o7QUFDQSx1Q0FBdUM7QUFDaEMsU0FBU1MsY0FBY2hCLFNBQVMsRUFBRUMsT0FBTztJQUM1QyxPQUFPLGdCQUFpQkMsTUFBTTtRQUMxQixXQUFXLE1BQU1DLFNBQVNELE9BQVE7WUFDOUIsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlELE1BQU1FLE1BQU0sRUFBRUQsS0FBS1QscUVBQTBCQSxDQUFFO2dCQUMvRCxJQUFJVyxNQUFNRixJQUFJVCxxRUFBMEJBO2dCQUN4QyxJQUFJVyxNQUFNSCxNQUFNRSxNQUFNLEVBQUU7b0JBQ3BCQyxNQUFNSCxNQUFNRSxNQUFNO2dCQUN0QjtnQkFDQSxJQUFJQyxNQUFNUixvQkFBb0JNLEdBQUc7b0JBQzdCLE1BQU0sSUFBSWEsTUFBTTtnQkFDcEI7Z0JBQ0EsTUFBTUMsWUFBWWYsTUFBTVMsT0FBTyxDQUFDUixHQUFHRTtnQkFDbkMsbUVBQW1FO2dCQUNuRSw2RUFBNkU7Z0JBQzdFLGlGQUFpRjtnQkFDakYsNkpBQTZKO2dCQUM3SixNQUFNYSxNQUFNaEIsTUFBTU8sUUFBUSxDQUFDTixHQUFHRSxNQUFNUjtnQkFDcEMsTUFBTSxFQUFFc0IsV0FBV0MsU0FBUyxFQUFFQyxLQUFLLEVBQUUsR0FBR3RCLFVBQVV1QixPQUFPLENBQUNMLFdBQVdsQixVQUFVVyxPQUFPLEVBQUVRO2dCQUN4RixJQUFJLENBQUNHLE9BQU87b0JBQ1JyQixTQUFTdUIsY0FBY1Y7b0JBQ3ZCLE1BQU0sSUFBSUcsTUFBTTtnQkFDcEI7Z0JBQ0FoQixTQUFTd0IsaUJBQWlCWDtnQkFDMUIsTUFBTU87WUFDVjtRQUNKO0lBQ0o7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL2Rpc3Qvc3JjL2NyeXB0by9zdHJlYW1pbmcuanM/NjI1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVaW50OEFycmF5TGlzdCB9IGZyb20gJ3VpbnQ4YXJyYXlsaXN0JztcbmltcG9ydCB7IE5PSVNFX01TR19NQVhfTEVOR1RIX0JZVEVTLCBOT0lTRV9NU0dfTUFYX0xFTkdUSF9CWVRFU19XSVRIT1VUX1RBRyB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyB1aW50MTZCRUVuY29kZSB9IGZyb20gJy4uL2VuY29kZXIuanMnO1xuY29uc3QgQ0hBQ0hBX1RBR19MRU5HVEggPSAxNjtcbi8vIFJldHVybnMgZ2VuZXJhdG9yIHRoYXQgZW5jcnlwdHMgcGF5bG9hZCBmcm9tIHRoZSB1c2VyXG5leHBvcnQgZnVuY3Rpb24gZW5jcnlwdFN0cmVhbShoYW5kc2hha2UsIG1ldHJpY3MpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24qIChzb3VyY2UpIHtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmsubGVuZ3RoOyBpICs9IE5PSVNFX01TR19NQVhfTEVOR1RIX0JZVEVTX1dJVEhPVVRfVEFHKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IGkgKyBOT0lTRV9NU0dfTUFYX0xFTkdUSF9CWVRFU19XSVRIT1VUX1RBRztcbiAgICAgICAgICAgICAgICBpZiAoZW5kID4gY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKGNodW5rIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gaGFuZHNoYWtlLmVuY3J5cHQoY2h1bmsuc3ViYXJyYXkoaSwgZW5kKSwgaGFuZHNoYWtlLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGhhbmRzaGFrZS5lbmNyeXB0KGNodW5rLnN1Ymxpc3QoaSwgZW5kKSwgaGFuZHNoYWtlLnNlc3Npb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXRyaWNzPy5lbmNyeXB0ZWRQYWNrZXRzLmluY3JlbWVudCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBVaW50OEFycmF5TGlzdCh1aW50MTZCRUVuY29kZShkYXRhLmJ5dGVMZW5ndGgpLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4vLyBEZWNyeXB0IHJlY2VpdmVkIHBheWxvYWQgdG8gdGhlIHVzZXJcbmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0U3RyZWFtKGhhbmRzaGFrZSwgbWV0cmljcykge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiogKHNvdXJjZSkge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHNvdXJjZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaHVuay5sZW5ndGg7IGkgKz0gTk9JU0VfTVNHX01BWF9MRU5HVEhfQllURVMpIHtcbiAgICAgICAgICAgICAgICBsZXQgZW5kID0gaSArIE5PSVNFX01TR19NQVhfTEVOR1RIX0JZVEVTO1xuICAgICAgICAgICAgICAgIGlmIChlbmQgPiBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gY2h1bmsubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5kIC0gQ0hBQ0hBX1RBR19MRU5HVEggPCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjaHVuaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlbmNyeXB0ZWQgPSBjaHVuay5zdWJsaXN0KGksIGVuZCk7XG4gICAgICAgICAgICAgICAgLy8gbWVtb3J5IGFsbG9jYXRpb24gaXMgbm90IGNoZWFwIHNvIHJldXNlIHRoZSBlbmNyeXB0ZWQgVWludDhBcnJheVxuICAgICAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vQ2hhaW5TYWZlL2pzLWxpYnAycC1ub2lzZS9wdWxsLzI0MiNpc3N1ZS0xNDIyMTI2MTY0XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBvayBiZWNhdXNlIGNoYWNoYTIwIHJlYWRzIGJ5dGVzIG9uZSBieSBvbmUgYW5kIGRvbid0IHJlcmVhZCBhZnRlciB0aGF0XG4gICAgICAgICAgICAgICAgLy8gaXQncyBhbHNvIHRlc3RlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vQ2hhaW5TYWZlL2FzLWNoYWNoYTIwcG9seTEzMDUvcHVsbC8xL2ZpbGVzI2RpZmYtMjUyNTI4NDZiNTg5NzlkY2FmNGU0MWQ0N2IzZWFkZDdlNGYzMzVlN2ZiOThkYTZjMDQ5YjFmOWNkMDExZjM4MVI0OFxuICAgICAgICAgICAgICAgIGNvbnN0IGRzdCA9IGNodW5rLnN1YmFycmF5KGksIGVuZCAtIENIQUNIQV9UQUdfTEVOR1RIKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHBsYWludGV4dDogZGVjcnlwdGVkLCB2YWxpZCB9ID0gaGFuZHNoYWtlLmRlY3J5cHQoZW5jcnlwdGVkLCBoYW5kc2hha2Uuc2Vzc2lvbiwgZHN0KTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldHJpY3M/LmRlY3J5cHRFcnJvcnMuaW5jcmVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHZhbGlkYXRlIGRlY3J5cHRlZCBjaHVuaycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXRyaWNzPy5kZWNyeXB0ZWRQYWNrZXRzLmluY3JlbWVudCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkIGRlY3J5cHRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmcuanMubWFwIl0sIm5hbWVzIjpbIlVpbnQ4QXJyYXlMaXN0IiwiTk9JU0VfTVNHX01BWF9MRU5HVEhfQllURVMiLCJOT0lTRV9NU0dfTUFYX0xFTkdUSF9CWVRFU19XSVRIT1VUX1RBRyIsInVpbnQxNkJFRW5jb2RlIiwiQ0hBQ0hBX1RBR19MRU5HVEgiLCJlbmNyeXB0U3RyZWFtIiwiaGFuZHNoYWtlIiwibWV0cmljcyIsInNvdXJjZSIsImNodW5rIiwiaSIsImxlbmd0aCIsImVuZCIsImRhdGEiLCJVaW50OEFycmF5IiwiZW5jcnlwdCIsInN1YmFycmF5Iiwic2Vzc2lvbiIsInN1Ymxpc3QiLCJlbmNyeXB0ZWRQYWNrZXRzIiwiaW5jcmVtZW50IiwiYnl0ZUxlbmd0aCIsImRlY3J5cHRTdHJlYW0iLCJFcnJvciIsImVuY3J5cHRlZCIsImRzdCIsInBsYWludGV4dCIsImRlY3J5cHRlZCIsInZhbGlkIiwiZGVjcnlwdCIsImRlY3J5cHRFcnJvcnMiLCJkZWNyeXB0ZWRQYWNrZXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/streaming.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js":
/*!******************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode0: () => (/* binding */ decode0),\n/* harmony export */   decode1: () => (/* binding */ decode1),\n/* harmony export */   decode2: () => (/* binding */ decode2),\n/* harmony export */   encode0: () => (/* binding */ encode0),\n/* harmony export */   encode1: () => (/* binding */ encode1),\n/* harmony export */   encode2: () => (/* binding */ encode2),\n/* harmony export */   uint16BEDecode: () => (/* binding */ uint16BEDecode),\n/* harmony export */   uint16BEEncode: () => (/* binding */ uint16BEEncode)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"(ssr)/./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n\n\nconst uint16BEEncode = (value)=>{\n    const target = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(2);\n    new DataView(target.buffer, target.byteOffset, target.byteLength).setUint16(0, value, false);\n    return target;\n};\nuint16BEEncode.bytes = 2;\nconst uint16BEDecode = (data)=>{\n    if (data.length < 2) throw RangeError(\"Could not decode int16BE\");\n    if (data instanceof Uint8Array) {\n        return new DataView(data.buffer, data.byteOffset, data.byteLength).getUint16(0, false);\n    }\n    return data.getUint16(0);\n};\nuint16BEDecode.bytes = 2;\n// Note: IK and XX encoder usage is opposite (XX uses in stages encode0 where IK uses encode1)\nfunction encode0(message) {\n    return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(message.ne, message.ciphertext);\n}\nfunction encode1(message) {\n    return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(message.ne, message.ns, message.ciphertext);\n}\nfunction encode2(message) {\n    return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(message.ns, message.ciphertext);\n}\nfunction decode0(input) {\n    if (input.length < 32) {\n        throw new Error(\"Cannot decode stage 0 MessageBuffer: length less than 32 bytes.\");\n    }\n    return {\n        ne: input.subarray(0, 32),\n        ciphertext: input.subarray(32, input.length),\n        ns: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0)\n    };\n}\nfunction decode1(input) {\n    if (input.length < 80) {\n        throw new Error(\"Cannot decode stage 1 MessageBuffer: length less than 80 bytes.\");\n    }\n    return {\n        ne: input.subarray(0, 32),\n        ns: input.subarray(32, 80),\n        ciphertext: input.subarray(80, input.length)\n    };\n}\nfunction decode2(input) {\n    if (input.length < 48) {\n        throw new Error(\"Cannot decode stage 2 MessageBuffer: length less than 48 bytes.\");\n    }\n    return {\n        ne: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0),\n        ns: input.subarray(0, 48),\n        ciphertext: input.subarray(48, input.length)\n    };\n} //# sourceMappingURL=encoder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvZW5jb2Rlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ21EO0FBQzVGLE1BQU1LLGlCQUFpQixDQUFDQztJQUMzQixNQUFNQyxTQUFTSCw4REFBcUJBLENBQUM7SUFDckMsSUFBSUksU0FBU0QsT0FBT0UsTUFBTSxFQUFFRixPQUFPRyxVQUFVLEVBQUVILE9BQU9JLFVBQVUsRUFBRUMsU0FBUyxDQUFDLEdBQUdOLE9BQU87SUFDdEYsT0FBT0M7QUFDWCxFQUFFO0FBQ0ZGLGVBQWVRLEtBQUssR0FBRztBQUNoQixNQUFNQyxpQkFBaUIsQ0FBQ0M7SUFDM0IsSUFBSUEsS0FBS0MsTUFBTSxHQUFHLEdBQ2QsTUFBTUMsV0FBVztJQUNyQixJQUFJRixnQkFBZ0JHLFlBQVk7UUFDNUIsT0FBTyxJQUFJVixTQUFTTyxLQUFLTixNQUFNLEVBQUVNLEtBQUtMLFVBQVUsRUFBRUssS0FBS0osVUFBVSxFQUFFUSxTQUFTLENBQUMsR0FBRztJQUNwRjtJQUNBLE9BQU9KLEtBQUtJLFNBQVMsQ0FBQztBQUMxQixFQUFFO0FBQ0ZMLGVBQWVELEtBQUssR0FBRztBQUN2Qiw4RkFBOEY7QUFDdkYsU0FBU08sUUFBUUMsT0FBTztJQUMzQixPQUFPLElBQUlyQiwwREFBY0EsQ0FBQ3FCLFFBQVFDLEVBQUUsRUFBRUQsUUFBUUUsVUFBVTtBQUM1RDtBQUNPLFNBQVNDLFFBQVFILE9BQU87SUFDM0IsT0FBTyxJQUFJckIsMERBQWNBLENBQUNxQixRQUFRQyxFQUFFLEVBQUVELFFBQVFJLEVBQUUsRUFBRUosUUFBUUUsVUFBVTtBQUN4RTtBQUNPLFNBQVNHLFFBQVFMLE9BQU87SUFDM0IsT0FBTyxJQUFJckIsMERBQWNBLENBQUNxQixRQUFRSSxFQUFFLEVBQUVKLFFBQVFFLFVBQVU7QUFDNUQ7QUFDTyxTQUFTSSxRQUFRQyxLQUFLO0lBQ3pCLElBQUlBLE1BQU1aLE1BQU0sR0FBRyxJQUFJO1FBQ25CLE1BQU0sSUFBSWEsTUFBTTtJQUNwQjtJQUNBLE9BQU87UUFDSFAsSUFBSU0sTUFBTUUsUUFBUSxDQUFDLEdBQUc7UUFDdEJQLFlBQVlLLE1BQU1FLFFBQVEsQ0FBQyxJQUFJRixNQUFNWixNQUFNO1FBQzNDUyxJQUFJdkIsd0RBQWVBLENBQUM7SUFDeEI7QUFDSjtBQUNPLFNBQVM2QixRQUFRSCxLQUFLO0lBQ3pCLElBQUlBLE1BQU1aLE1BQU0sR0FBRyxJQUFJO1FBQ25CLE1BQU0sSUFBSWEsTUFBTTtJQUNwQjtJQUNBLE9BQU87UUFDSFAsSUFBSU0sTUFBTUUsUUFBUSxDQUFDLEdBQUc7UUFDdEJMLElBQUlHLE1BQU1FLFFBQVEsQ0FBQyxJQUFJO1FBQ3ZCUCxZQUFZSyxNQUFNRSxRQUFRLENBQUMsSUFBSUYsTUFBTVosTUFBTTtJQUMvQztBQUNKO0FBQ08sU0FBU2dCLFFBQVFKLEtBQUs7SUFDekIsSUFBSUEsTUFBTVosTUFBTSxHQUFHLElBQUk7UUFDbkIsTUFBTSxJQUFJYSxNQUFNO0lBQ3BCO0lBQ0EsT0FBTztRQUNIUCxJQUFJcEIsd0RBQWVBLENBQUM7UUFDcEJ1QixJQUFJRyxNQUFNRSxRQUFRLENBQUMsR0FBRztRQUN0QlAsWUFBWUssTUFBTUUsUUFBUSxDQUFDLElBQUlGLE1BQU1aLE1BQU07SUFDL0M7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL2Rpc3Qvc3JjL2VuY29kZXIuanM/YTA2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVaW50OEFycmF5TGlzdCB9IGZyb20gJ3VpbnQ4YXJyYXlsaXN0JztcbmltcG9ydCB7IGFsbG9jIGFzIHVpbnQ4QXJyYXlBbGxvYywgYWxsb2NVbnNhZmUgYXMgdWludDhBcnJheUFsbG9jVW5zYWZlIH0gZnJvbSAndWludDhhcnJheXMvYWxsb2MnO1xuZXhwb3J0IGNvbnN0IHVpbnQxNkJFRW5jb2RlID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdWludDhBcnJheUFsbG9jVW5zYWZlKDIpO1xuICAgIG5ldyBEYXRhVmlldyh0YXJnZXQuYnVmZmVyLCB0YXJnZXQuYnl0ZU9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpLnNldFVpbnQxNigwLCB2YWx1ZSwgZmFsc2UpO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xudWludDE2QkVFbmNvZGUuYnl0ZXMgPSAyO1xuZXhwb3J0IGNvbnN0IHVpbnQxNkJFRGVjb2RlID0gKGRhdGEpID0+IHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAyKVxuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKCdDb3VsZCBub3QgZGVjb2RlIGludDE2QkUnKTtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpLmdldFVpbnQxNigwLCBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhLmdldFVpbnQxNigwKTtcbn07XG51aW50MTZCRURlY29kZS5ieXRlcyA9IDI7XG4vLyBOb3RlOiBJSyBhbmQgWFggZW5jb2RlciB1c2FnZSBpcyBvcHBvc2l0ZSAoWFggdXNlcyBpbiBzdGFnZXMgZW5jb2RlMCB3aGVyZSBJSyB1c2VzIGVuY29kZTEpXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlMChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5TGlzdChtZXNzYWdlLm5lLCBtZXNzYWdlLmNpcGhlcnRleHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZTEobWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheUxpc3QobWVzc2FnZS5uZSwgbWVzc2FnZS5ucywgbWVzc2FnZS5jaXBoZXJ0ZXh0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUyKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXlMaXN0KG1lc3NhZ2UubnMsIG1lc3NhZ2UuY2lwaGVydGV4dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlMChpbnB1dCkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPCAzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWNvZGUgc3RhZ2UgMCBNZXNzYWdlQnVmZmVyOiBsZW5ndGggbGVzcyB0aGFuIDMyIGJ5dGVzLicpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuZTogaW5wdXQuc3ViYXJyYXkoMCwgMzIpLFxuICAgICAgICBjaXBoZXJ0ZXh0OiBpbnB1dC5zdWJhcnJheSgzMiwgaW5wdXQubGVuZ3RoKSxcbiAgICAgICAgbnM6IHVpbnQ4QXJyYXlBbGxvYygwKVxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlMShpbnB1dCkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPCA4MCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWNvZGUgc3RhZ2UgMSBNZXNzYWdlQnVmZmVyOiBsZW5ndGggbGVzcyB0aGFuIDgwIGJ5dGVzLicpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuZTogaW5wdXQuc3ViYXJyYXkoMCwgMzIpLFxuICAgICAgICBuczogaW5wdXQuc3ViYXJyYXkoMzIsIDgwKSxcbiAgICAgICAgY2lwaGVydGV4dDogaW5wdXQuc3ViYXJyYXkoODAsIGlucHV0Lmxlbmd0aClcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZTIoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoIDwgNDgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVjb2RlIHN0YWdlIDIgTWVzc2FnZUJ1ZmZlcjogbGVuZ3RoIGxlc3MgdGhhbiA0OCBieXRlcy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmU6IHVpbnQ4QXJyYXlBbGxvYygwKSxcbiAgICAgICAgbnM6IGlucHV0LnN1YmFycmF5KDAsIDQ4KSxcbiAgICAgICAgY2lwaGVydGV4dDogaW5wdXQuc3ViYXJyYXkoNDgsIGlucHV0Lmxlbmd0aClcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2Rlci5qcy5tYXAiXSwibmFtZXMiOlsiVWludDhBcnJheUxpc3QiLCJhbGxvYyIsInVpbnQ4QXJyYXlBbGxvYyIsImFsbG9jVW5zYWZlIiwidWludDhBcnJheUFsbG9jVW5zYWZlIiwidWludDE2QkVFbmNvZGUiLCJ2YWx1ZSIsInRhcmdldCIsIkRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJzZXRVaW50MTYiLCJieXRlcyIsInVpbnQxNkJFRGVjb2RlIiwiZGF0YSIsImxlbmd0aCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiZ2V0VWludDE2IiwiZW5jb2RlMCIsIm1lc3NhZ2UiLCJuZSIsImNpcGhlcnRleHQiLCJlbmNvZGUxIiwibnMiLCJlbmNvZGUyIiwiZGVjb2RlMCIsImlucHV0IiwiRXJyb3IiLCJzdWJhcnJheSIsImRlY29kZTEiLCJkZWNvZGUyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidCryptoExchangeError: () => (/* binding */ InvalidCryptoExchangeError),\n/* harmony export */   UnexpectedPeerError: () => (/* binding */ UnexpectedPeerError)\n/* harmony export */ });\nclass UnexpectedPeerError extends Error {\n    constructor(message = \"Unexpected Peer\"){\n        super(message);\n        this.code = UnexpectedPeerError.code;\n    }\n    static{\n        this.code = \"ERR_UNEXPECTED_PEER\";\n    }\n}\nclass InvalidCryptoExchangeError extends Error {\n    constructor(message = \"Invalid crypto exchange\"){\n        super(message);\n        this.code = InvalidCryptoExchangeError.code;\n    }\n    static{\n        this.code = \"ERR_INVALID_CRYPTO_EXCHANGE\";\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsNEJBQTRCQztJQUVyQ0MsWUFBWUMsVUFBVSxpQkFBaUIsQ0FBRTtRQUNyQyxLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUdKLG9CQUFvQkksSUFBSTtJQUN4Qzs7YUFDT0EsT0FBTzs7QUFDbEI7QUFDTyxNQUFNQyxtQ0FBbUNKO0lBRTVDQyxZQUFZQyxVQUFVLHlCQUF5QixDQUFFO1FBQzdDLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLElBQUksR0FBR0MsMkJBQTJCRCxJQUFJO0lBQy9DOzthQUNPQSxPQUFPOztBQUNsQixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL2Rpc3Qvc3JjL2Vycm9ycy5qcz82NmMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBVbmV4cGVjdGVkUGVlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvZGU7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9ICdVbmV4cGVjdGVkIFBlZXInKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvZGUgPSBVbmV4cGVjdGVkUGVlckVycm9yLmNvZGU7XG4gICAgfVxuICAgIHN0YXRpYyBjb2RlID0gJ0VSUl9VTkVYUEVDVEVEX1BFRVInO1xufVxuZXhwb3J0IGNsYXNzIEludmFsaWRDcnlwdG9FeGNoYW5nZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvZGU7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSA9ICdJbnZhbGlkIGNyeXB0byBleGNoYW5nZScpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IEludmFsaWRDcnlwdG9FeGNoYW5nZUVycm9yLmNvZGU7XG4gICAgfVxuICAgIHN0YXRpYyBjb2RlID0gJ0VSUl9JTlZBTElEX0NSWVBUT19FWENIQU5HRSc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbIlVuZXhwZWN0ZWRQZWVyRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNvZGUiLCJJbnZhbGlkQ3J5cHRvRXhjaGFuZ2VFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshake-xx.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/handshake-xx.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XXHandshake: () => (/* binding */ XXHandshake)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n/* harmony import */ var _encoder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoder.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js\");\n/* harmony import */ var _handshakes_xx_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./handshakes/xx.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/xx.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logger.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js\");\n\n\n\n\n\n\nclass XXHandshake {\n    constructor(components, isInitiator, payload, prologue, crypto, staticKeypair, connection, remotePeer, handshake){\n        this.remoteExtensions = {\n            webtransportCerthashes: []\n        };\n        this.log = components.logger.forComponent(\"libp2p:noise:xxhandshake\");\n        this.isInitiator = isInitiator;\n        this.payload = payload;\n        this.prologue = prologue;\n        this.staticKeypair = staticKeypair;\n        this.connection = connection;\n        if (remotePeer) {\n            this.remotePeer = remotePeer;\n        }\n        this.xx = handshake ?? new _handshakes_xx_js__WEBPACK_IMPORTED_MODULE_3__.XX(components, crypto);\n        this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    }\n    // stage 0\n    async propose() {\n        (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logLocalStaticKeys)(this.session.hs.s, this.log);\n        if (this.isInitiator) {\n            this.log.trace(\"Stage 0 - Initiator starting to send first message.\");\n            const messageBuffer = this.xx.sendMessage(this.session, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(0));\n            await this.connection.write((0,_encoder_js__WEBPACK_IMPORTED_MODULE_1__.encode0)(messageBuffer));\n            this.log.trace(\"Stage 0 - Initiator finished sending first message.\");\n            (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logLocalEphemeralKeys)(this.session.hs.e, this.log);\n        } else {\n            this.log.trace(\"Stage 0 - Responder waiting to receive first message...\");\n            const receivedMessageBuffer = (0,_encoder_js__WEBPACK_IMPORTED_MODULE_1__.decode0)((await this.connection.read()).subarray());\n            const { valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidCryptoExchangeError(\"xx handshake stage 0 validation fail\");\n            }\n            this.log.trace(\"Stage 0 - Responder received first message.\");\n            (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logRemoteEphemeralKey)(this.session.hs.re, this.log);\n        }\n    }\n    // stage 1\n    async exchange() {\n        if (this.isInitiator) {\n            this.log.trace(\"Stage 1 - Initiator waiting to receive first message from responder...\");\n            const receivedMessageBuffer = (0,_encoder_js__WEBPACK_IMPORTED_MODULE_1__.decode1)((await this.connection.read()).subarray());\n            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidCryptoExchangeError(\"xx handshake stage 1 validation fail\");\n            }\n            this.log.trace(\"Stage 1 - Initiator received the message.\");\n            (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logRemoteEphemeralKey)(this.session.hs.re, this.log);\n            (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logRemoteStaticKey)(this.session.hs.rs, this.log);\n            this.log.trace(\"Initiator going to check remote's signature...\");\n            try {\n                const decodedPayload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.decodePayload)(plaintext);\n                this.remotePeer = this.remotePeer || await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.getPeerIdFromPayload)(decodedPayload);\n                await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.verifySignedPayload)(this.session.hs.rs, decodedPayload, this.remotePeer);\n                this.setRemoteNoiseExtension(decodedPayload.extensions);\n            } catch (e) {\n                const err = e;\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n            }\n            this.log.trace(\"All good with the signature!\");\n        } else {\n            this.log.trace(\"Stage 1 - Responder sending out first message with signed payload and static key.\");\n            const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n            await this.connection.write((0,_encoder_js__WEBPACK_IMPORTED_MODULE_1__.encode1)(messageBuffer));\n            this.log.trace(\"Stage 1 - Responder sent the second handshake message with signed payload.\");\n            (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logLocalEphemeralKeys)(this.session.hs.e, this.log);\n        }\n    }\n    // stage 2\n    async finish() {\n        if (this.isInitiator) {\n            this.log.trace(\"Stage 2 - Initiator sending third handshake message.\");\n            const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n            await this.connection.write((0,_encoder_js__WEBPACK_IMPORTED_MODULE_1__.encode2)(messageBuffer));\n            this.log.trace(\"Stage 2 - Initiator sent message with signed payload.\");\n        } else {\n            this.log.trace(\"Stage 2 - Responder waiting for third handshake message...\");\n            const receivedMessageBuffer = (0,_encoder_js__WEBPACK_IMPORTED_MODULE_1__.decode2)((await this.connection.read()).subarray());\n            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n            if (!valid) {\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidCryptoExchangeError(\"xx handshake stage 2 validation fail\");\n            }\n            this.log.trace(\"Stage 2 - Responder received the message, finished handshake.\");\n            try {\n                const decodedPayload = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.decodePayload)(plaintext);\n                this.remotePeer = this.remotePeer || await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.getPeerIdFromPayload)(decodedPayload);\n                await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.verifySignedPayload)(this.session.hs.rs, decodedPayload, this.remotePeer);\n                this.setRemoteNoiseExtension(decodedPayload.extensions);\n            } catch (e) {\n                const err = e;\n                throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n            }\n        }\n        (0,_logger_js__WEBPACK_IMPORTED_MODULE_4__.logCipherState)(this.session, this.log);\n    }\n    encrypt(plaintext, session) {\n        const cs = this.getCS(session);\n        return this.xx.encryptWithAd(cs, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(0), plaintext);\n    }\n    decrypt(ciphertext, session, dst) {\n        const cs = this.getCS(session, false);\n        return this.xx.decryptWithAd(cs, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(0), ciphertext, dst);\n    }\n    getRemoteStaticKey() {\n        return this.session.hs.rs;\n    }\n    getCS(session, encryption = true) {\n        if (!session.cs1 || !session.cs2) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_2__.InvalidCryptoExchangeError(\"Handshake not completed properly, cipher state does not exist.\");\n        }\n        if (this.isInitiator) {\n            return encryption ? session.cs1 : session.cs2;\n        } else {\n            return encryption ? session.cs2 : session.cs1;\n        }\n    }\n    setRemoteNoiseExtension(e) {\n        if (e) {\n            this.remoteExtensions = e;\n        }\n    }\n} //# sourceMappingURL=handshake-xx.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshake-xx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/abstract-handshake.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/abstract-handshake.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractHandshake: () => (/* binding */ AbstractHandshake)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"(ssr)/./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _nonce_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../nonce.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js\");\n\n\n\n\n\nclass AbstractHandshake {\n    constructor(components, crypto){\n        this.log = components.logger.forComponent(\"libp2p:noise:abstract-handshake\");\n        this.crypto = crypto;\n    }\n    encryptWithAd(cs, ad, plaintext) {\n        const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n        cs.n.increment();\n        return e;\n    }\n    decryptWithAd(cs, ad, ciphertext, dst) {\n        const { plaintext, valid } = this.decrypt(cs.k, cs.n, ad, ciphertext, dst);\n        if (valid) cs.n.increment();\n        return {\n            plaintext,\n            valid\n        };\n    }\n    // Cipher state related\n    hasKey(cs) {\n        return !this.isEmptyKey(cs.k);\n    }\n    createEmptyKey() {\n        return (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(32);\n    }\n    isEmptyKey(k) {\n        const emptyKey = this.createEmptyKey();\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(emptyKey, k);\n    }\n    encrypt(k, n, ad, plaintext) {\n        n.assertValue();\n        return this.crypto.chaCha20Poly1305Encrypt(plaintext, n.getBytes(), ad, k);\n    }\n    encryptAndHash(ss, plaintext) {\n        let ciphertext;\n        if (this.hasKey(ss.cs)) {\n            ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n        } else {\n            ciphertext = plaintext;\n        }\n        this.mixHash(ss, ciphertext);\n        return ciphertext;\n    }\n    decrypt(k, n, ad, ciphertext, dst) {\n        n.assertValue();\n        const encryptedMessage = this.crypto.chaCha20Poly1305Decrypt(ciphertext, n.getBytes(), ad, k, dst);\n        if (encryptedMessage) {\n            return {\n                plaintext: encryptedMessage,\n                valid: true\n            };\n        } else {\n            return {\n                plaintext: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0),\n                valid: false\n            };\n        }\n    }\n    decryptAndHash(ss, ciphertext) {\n        let plaintext;\n        let valid = true;\n        if (this.hasKey(ss.cs)) {\n            ({ plaintext, valid } = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n        } else {\n            plaintext = ciphertext;\n        }\n        this.mixHash(ss, ciphertext);\n        return {\n            plaintext,\n            valid\n        };\n    }\n    dh(privateKey, publicKey) {\n        try {\n            const derivedU8 = this.crypto.generateX25519SharedKey(privateKey, publicKey);\n            if (derivedU8.length === 32) {\n                return derivedU8;\n            }\n            return derivedU8.subarray(0, 32);\n        } catch (e) {\n            const err = e;\n            this.log.error(\"error deriving shared key\", err);\n            return (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(32);\n        }\n    }\n    mixHash(ss, data) {\n        ss.h = this.getHash(ss.h, data);\n    }\n    getHash(a, b) {\n        const u = this.crypto.hashSHA256(new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(a, b));\n        return u;\n    }\n    mixKey(ss, ikm) {\n        const [ck, tempK] = this.crypto.getHKDF(ss.ck, ikm);\n        ss.cs = this.initializeKey(tempK);\n        ss.ck = ck;\n    }\n    initializeKey(k) {\n        return {\n            k,\n            n: new _nonce_js__WEBPACK_IMPORTED_MODULE_4__.Nonce()\n        };\n    }\n    // Symmetric state related\n    initializeSymmetric(protocolName) {\n        const protocolNameBytes = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_1__.fromString)(protocolName, \"utf-8\");\n        const h = this.hashProtocolName(protocolNameBytes);\n        const ck = h;\n        const key = this.createEmptyKey();\n        const cs = this.initializeKey(key);\n        return {\n            cs,\n            ck,\n            h\n        };\n    }\n    hashProtocolName(protocolName) {\n        if (protocolName.length <= 32) {\n            const h = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(32);\n            h.set(protocolName);\n            return h;\n        } else {\n            return this.getHash(protocolName, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0));\n        }\n    }\n    split(ss) {\n        const [tempk1, tempk2] = this.crypto.getHKDF(ss.ck, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0));\n        const cs1 = this.initializeKey(tempk1);\n        const cs2 = this.initializeKey(tempk2);\n        return {\n            cs1,\n            cs2\n        };\n    }\n    writeMessageRegular(cs, payload) {\n        const ciphertext = this.encryptWithAd(cs, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0), payload);\n        const ne = this.createEmptyKey();\n        const ns = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0);\n        return {\n            ne,\n            ns,\n            ciphertext\n        };\n    }\n    readMessageRegular(cs, message) {\n        return this.decryptWithAd(cs, (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0), message.ciphertext);\n    }\n} //# sourceMappingURL=abstract-handshake.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/abstract-handshake.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/xx.js":
/*!************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/xx.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XX: () => (/* binding */ XX)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js\");\n/* harmony import */ var _abstract_handshake_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-handshake.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/abstract-handshake.js\");\n\n\n\nclass XX extends _abstract_handshake_js__WEBPACK_IMPORTED_MODULE_2__.AbstractHandshake {\n    initializeInitiator(prologue, s, rs, psk) {\n        const name = \"Noise_XX_25519_ChaChaPoly_SHA256\";\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        const re = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(32);\n        return {\n            ss,\n            s,\n            rs,\n            psk,\n            re\n        };\n    }\n    initializeResponder(prologue, s, rs, psk) {\n        const name = \"Noise_XX_25519_ChaChaPoly_SHA256\";\n        const ss = this.initializeSymmetric(name);\n        this.mixHash(ss, prologue);\n        const re = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(32);\n        return {\n            ss,\n            s,\n            rs,\n            psk,\n            re\n        };\n    }\n    writeMessageA(hs, payload, e) {\n        const ns = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(0);\n        if (e !== undefined) {\n            hs.e = e;\n        } else {\n            hs.e = this.crypto.generateX25519KeyPair();\n        }\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return {\n            ne,\n            ns,\n            ciphertext\n        };\n    }\n    writeMessageB(hs, payload) {\n        hs.e = this.crypto.generateX25519KeyPair();\n        const ne = hs.e.publicKey;\n        this.mixHash(hs.ss, ne);\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        const spk = hs.s.publicKey;\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        return {\n            ne,\n            ns,\n            ciphertext\n        };\n    }\n    writeMessageC(hs, payload) {\n        const spk = hs.s.publicKey;\n        const ns = this.encryptAndHash(hs.ss, spk);\n        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n        const ciphertext = this.encryptAndHash(hs.ss, payload);\n        const ne = this.createEmptyKey();\n        const messageBuffer = {\n            ne,\n            ns,\n            ciphertext\n        };\n        const { cs1, cs2 } = this.split(hs.ss);\n        return {\n            h: hs.ss.h,\n            messageBuffer,\n            cs1,\n            cs2\n        };\n    }\n    readMessageA(hs, message) {\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidPublicKey)(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        return this.decryptAndHash(hs.ss, message.ciphertext);\n    }\n    readMessageB(hs, message) {\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidPublicKey)(message.ne)) {\n            hs.re = message.ne;\n        }\n        this.mixHash(hs.ss, hs.re);\n        if (!hs.e) {\n            throw new Error(\"Handshake state `e` param is missing.\");\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidPublicKey)(ns)) {\n            hs.rs = ns;\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        return {\n            plaintext,\n            valid: valid1 && valid2\n        };\n    }\n    readMessageC(hs, message) {\n        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);\n        if (valid1 && (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidPublicKey)(ns)) {\n            hs.rs = ns;\n        }\n        if (!hs.e) {\n            throw new Error(\"Handshake state `e` param is missing.\");\n        }\n        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);\n        const { cs1, cs2 } = this.split(hs.ss);\n        return {\n            h: hs.ss.h,\n            plaintext,\n            valid: valid1 && valid2,\n            cs1,\n            cs2\n        };\n    }\n    initSession(initiator, prologue, s) {\n        const psk = this.createEmptyKey();\n        const rs = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(32); // no static key yet\n        let hs;\n        if (initiator) {\n            hs = this.initializeInitiator(prologue, s, rs, psk);\n        } else {\n            hs = this.initializeResponder(prologue, s, rs, psk);\n        }\n        return {\n            hs,\n            i: initiator,\n            mc: 0\n        };\n    }\n    sendMessage(session, message, ephemeral) {\n        let messageBuffer;\n        if (session.mc === 0) {\n            messageBuffer = this.writeMessageA(session.hs, message, ephemeral);\n        } else if (session.mc === 1) {\n            messageBuffer = this.writeMessageB(session.hs, message);\n        } else if (session.mc === 2) {\n            const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message);\n            messageBuffer = resultingBuffer;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        } else if (session.mc > 2) {\n            if (session.i) {\n                if (!session.cs1) {\n                    throw new Error(\"CS1 (cipher state) is not defined\");\n                }\n                messageBuffer = this.writeMessageRegular(session.cs1, message);\n            } else {\n                if (!session.cs2) {\n                    throw new Error(\"CS2 (cipher state) is not defined\");\n                }\n                messageBuffer = this.writeMessageRegular(session.cs2, message);\n            }\n        } else {\n            throw new Error(\"Session invalid.\");\n        }\n        session.mc++;\n        return messageBuffer;\n    }\n    recvMessage(session, message) {\n        let plaintext = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(0);\n        let valid = false;\n        if (session.mc === 0) {\n            ({ plaintext, valid } = this.readMessageA(session.hs, message));\n        } else if (session.mc === 1) {\n            ({ plaintext, valid } = this.readMessageB(session.hs, message));\n        } else if (session.mc === 2) {\n            const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message);\n            plaintext = resultingPlaintext;\n            valid = resultingValid;\n            session.h = h;\n            session.cs1 = cs1;\n            session.cs2 = cs2;\n        }\n        session.mc++;\n        return {\n            plaintext,\n            valid\n        };\n    }\n} //# sourceMappingURL=xx.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshakes/xx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noise: () => (/* binding */ noise),\n/* harmony export */   pureJsCrypto: () => (/* reexport safe */ _crypto_js_js__WEBPACK_IMPORTED_MODULE_1__.pureJsCrypto)\n/* harmony export */ });\n/* harmony import */ var _noise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noise.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js\");\n/* harmony import */ var _crypto_js_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto/js.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js\");\n\n\nfunction noise(init = {}) {\n    return (components)=>new _noise_js__WEBPACK_IMPORTED_MODULE_0__.Noise(components, init);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUNXO0FBQ3ZDLFNBQVNFLE1BQU1DLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLE9BQU8sQ0FBQ0MsYUFBZSxJQUFJSiw0Q0FBS0EsQ0FBQ0ksWUFBWUQ7QUFDakQsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1ub2lzZS9kaXN0L3NyYy9pbmRleC5qcz9hMTE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vaXNlIH0gZnJvbSAnLi9ub2lzZS5qcyc7XG5leHBvcnQgeyBwdXJlSnNDcnlwdG8gfSBmcm9tICcuL2NyeXB0by9qcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gbm9pc2UoaW5pdCA9IHt9KSB7XG4gICAgcmV0dXJuIChjb21wb25lbnRzKSA9PiBuZXcgTm9pc2UoY29tcG9uZW50cywgaW5pdCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiTm9pc2UiLCJwdXJlSnNDcnlwdG8iLCJub2lzZSIsImluaXQiLCJjb21wb25lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logCipherState: () => (/* binding */ logCipherState),\n/* harmony export */   logLocalEphemeralKeys: () => (/* binding */ logLocalEphemeralKeys),\n/* harmony export */   logLocalStaticKeys: () => (/* binding */ logLocalStaticKeys),\n/* harmony export */   logRemoteEphemeralKey: () => (/* binding */ logRemoteEphemeralKey),\n/* harmony export */   logRemoteStaticKey: () => (/* binding */ logRemoteStaticKey)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\");\n\n\nfunction logLocalStaticKeys(s, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(s.publicKey, \"hex\")}`);\n    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(s.privateKey, \"hex\")}`);\n}\nfunction logLocalEphemeralKeys(e, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    if (e) {\n        keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(e.publicKey, \"hex\")}`);\n        keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(e.privateKey, \"hex\")}`);\n    } else {\n        keyLogger(\"Missing local ephemeral keys.\");\n    }\n}\nfunction logRemoteStaticKey(rs, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(rs.subarray(), \"hex\")}`);\n}\nfunction logRemoteEphemeralKey(re, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(re.subarray(), \"hex\")}`);\n}\nfunction logCipherState(session, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    if (session.cs1 && session.cs2) {\n        keyLogger(`CIPHER_STATE_1 ${session.cs1.n.getUint64()} ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(session.cs1.k, \"hex\")}`);\n        keyLogger(`CIPHER_STATE_2 ${session.cs2.n.getUint64()} ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(session.cs2.k, \"hex\")}`);\n    } else {\n        keyLogger(\"Missing cipher state.\");\n    }\n} //# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBdUU7QUFDcEI7QUFDNUMsU0FBU0csbUJBQW1CQyxDQUFDLEVBQUVDLFNBQVM7SUFDM0MsSUFBSSxDQUFDQSxVQUFVQyxPQUFPLElBQUksQ0FBQ0osNERBQWlCQSxFQUFFO1FBQzFDO0lBQ0o7SUFDQUcsVUFBVSxDQUFDLHdCQUF3QixFQUFFSiwrREFBa0JBLENBQUNHLEVBQUVHLFNBQVMsRUFBRSxPQUFPLENBQUM7SUFDN0VGLFVBQVUsQ0FBQyx5QkFBeUIsRUFBRUosK0RBQWtCQSxDQUFDRyxFQUFFSSxVQUFVLEVBQUUsT0FBTyxDQUFDO0FBQ25GO0FBQ08sU0FBU0Msc0JBQXNCQyxDQUFDLEVBQUVMLFNBQVM7SUFDOUMsSUFBSSxDQUFDQSxVQUFVQyxPQUFPLElBQUksQ0FBQ0osNERBQWlCQSxFQUFFO1FBQzFDO0lBQ0o7SUFDQSxJQUFJUSxHQUFHO1FBQ0hMLFVBQVUsQ0FBQywyQkFBMkIsRUFBRUosK0RBQWtCQSxDQUFDUyxFQUFFSCxTQUFTLEVBQUUsT0FBTyxDQUFDO1FBQ2hGRixVQUFVLENBQUMsNEJBQTRCLEVBQUVKLCtEQUFrQkEsQ0FBQ1MsRUFBRUYsVUFBVSxFQUFFLE9BQU8sQ0FBQztJQUN0RixPQUNLO1FBQ0RILFVBQVU7SUFDZDtBQUNKO0FBQ08sU0FBU00sbUJBQW1CQyxFQUFFLEVBQUVQLFNBQVM7SUFDNUMsSUFBSSxDQUFDQSxVQUFVQyxPQUFPLElBQUksQ0FBQ0osNERBQWlCQSxFQUFFO1FBQzFDO0lBQ0o7SUFDQUcsVUFBVSxDQUFDLHlCQUF5QixFQUFFSiwrREFBa0JBLENBQUNXLEdBQUdDLFFBQVEsSUFBSSxPQUFPLENBQUM7QUFDcEY7QUFDTyxTQUFTQyxzQkFBc0JDLEVBQUUsRUFBRVYsU0FBUztJQUMvQyxJQUFJLENBQUNBLFVBQVVDLE9BQU8sSUFBSSxDQUFDSiw0REFBaUJBLEVBQUU7UUFDMUM7SUFDSjtJQUNBRyxVQUFVLENBQUMsNEJBQTRCLEVBQUVKLCtEQUFrQkEsQ0FBQ2MsR0FBR0YsUUFBUSxJQUFJLE9BQU8sQ0FBQztBQUN2RjtBQUNPLFNBQVNHLGVBQWVDLE9BQU8sRUFBRVosU0FBUztJQUM3QyxJQUFJLENBQUNBLFVBQVVDLE9BQU8sSUFBSSxDQUFDSiw0REFBaUJBLEVBQUU7UUFDMUM7SUFDSjtJQUNBLElBQUllLFFBQVFDLEdBQUcsSUFBSUQsUUFBUUUsR0FBRyxFQUFFO1FBQzVCZCxVQUFVLENBQUMsZUFBZSxFQUFFWSxRQUFRQyxHQUFHLENBQUNFLENBQUMsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsRUFBRXBCLCtEQUFrQkEsQ0FBQ2dCLFFBQVFDLEdBQUcsQ0FBQ0ksQ0FBQyxFQUFFLE9BQU8sQ0FBQztRQUNuR2pCLFVBQVUsQ0FBQyxlQUFlLEVBQUVZLFFBQVFFLEdBQUcsQ0FBQ0MsQ0FBQyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxFQUFFcEIsK0RBQWtCQSxDQUFDZ0IsUUFBUUUsR0FBRyxDQUFDRyxDQUFDLEVBQUUsT0FBTyxDQUFDO0lBQ3ZHLE9BQ0s7UUFDRGpCLFVBQVU7SUFDZDtBQUNKLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvbG9nZ2VyLmpzP2RkMWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdG9TdHJpbmcgYXMgdWludDhBcnJheVRvU3RyaW5nIH0gZnJvbSAndWludDhhcnJheXMvdG8tc3RyaW5nJztcbmltcG9ydCB7IERVTVBfU0VTU0lPTl9LRVlTIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGxvZ0xvY2FsU3RhdGljS2V5cyhzLCBrZXlMb2dnZXIpIHtcbiAgICBpZiAoIWtleUxvZ2dlci5lbmFibGVkIHx8ICFEVU1QX1NFU1NJT05fS0VZUykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGtleUxvZ2dlcihgTE9DQUxfU1RBVElDX1BVQkxJQ19LRVkgJHt1aW50OEFycmF5VG9TdHJpbmcocy5wdWJsaWNLZXksICdoZXgnKX1gKTtcbiAgICBrZXlMb2dnZXIoYExPQ0FMX1NUQVRJQ19QUklWQVRFX0tFWSAke3VpbnQ4QXJyYXlUb1N0cmluZyhzLnByaXZhdGVLZXksICdoZXgnKX1gKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2dMb2NhbEVwaGVtZXJhbEtleXMoZSwga2V5TG9nZ2VyKSB7XG4gICAgaWYgKCFrZXlMb2dnZXIuZW5hYmxlZCB8fCAhRFVNUF9TRVNTSU9OX0tFWVMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZSkge1xuICAgICAgICBrZXlMb2dnZXIoYExPQ0FMX1BVQkxJQ19FUEhFTUVSQUxfS0VZICR7dWludDhBcnJheVRvU3RyaW5nKGUucHVibGljS2V5LCAnaGV4Jyl9YCk7XG4gICAgICAgIGtleUxvZ2dlcihgTE9DQUxfUFJJVkFURV9FUEhFTUVSQUxfS0VZICR7dWludDhBcnJheVRvU3RyaW5nKGUucHJpdmF0ZUtleSwgJ2hleCcpfWApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAga2V5TG9nZ2VyKCdNaXNzaW5nIGxvY2FsIGVwaGVtZXJhbCBrZXlzLicpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBsb2dSZW1vdGVTdGF0aWNLZXkocnMsIGtleUxvZ2dlcikge1xuICAgIGlmICgha2V5TG9nZ2VyLmVuYWJsZWQgfHwgIURVTVBfU0VTU0lPTl9LRVlTKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAga2V5TG9nZ2VyKGBSRU1PVEVfU1RBVElDX1BVQkxJQ19LRVkgJHt1aW50OEFycmF5VG9TdHJpbmcocnMuc3ViYXJyYXkoKSwgJ2hleCcpfWApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGxvZ1JlbW90ZUVwaGVtZXJhbEtleShyZSwga2V5TG9nZ2VyKSB7XG4gICAgaWYgKCFrZXlMb2dnZXIuZW5hYmxlZCB8fCAhRFVNUF9TRVNTSU9OX0tFWVMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBrZXlMb2dnZXIoYFJFTU9URV9FUEhFTUVSQUxfUFVCTElDX0tFWSAke3VpbnQ4QXJyYXlUb1N0cmluZyhyZS5zdWJhcnJheSgpLCAnaGV4Jyl9YCk7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9nQ2lwaGVyU3RhdGUoc2Vzc2lvbiwga2V5TG9nZ2VyKSB7XG4gICAgaWYgKCFrZXlMb2dnZXIuZW5hYmxlZCB8fCAhRFVNUF9TRVNTSU9OX0tFWVMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2Vzc2lvbi5jczEgJiYgc2Vzc2lvbi5jczIpIHtcbiAgICAgICAga2V5TG9nZ2VyKGBDSVBIRVJfU1RBVEVfMSAke3Nlc3Npb24uY3MxLm4uZ2V0VWludDY0KCl9ICR7dWludDhBcnJheVRvU3RyaW5nKHNlc3Npb24uY3MxLmssICdoZXgnKX1gKTtcbiAgICAgICAga2V5TG9nZ2VyKGBDSVBIRVJfU1RBVEVfMiAke3Nlc3Npb24uY3MyLm4uZ2V0VWludDY0KCl9ICR7dWludDhBcnJheVRvU3RyaW5nKHNlc3Npb24uY3MyLmssICdoZXgnKX1gKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGtleUxvZ2dlcignTWlzc2luZyBjaXBoZXIgc3RhdGUuJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsInVpbnQ4QXJyYXlUb1N0cmluZyIsIkRVTVBfU0VTU0lPTl9LRVlTIiwibG9nTG9jYWxTdGF0aWNLZXlzIiwicyIsImtleUxvZ2dlciIsImVuYWJsZWQiLCJwdWJsaWNLZXkiLCJwcml2YXRlS2V5IiwibG9nTG9jYWxFcGhlbWVyYWxLZXlzIiwiZSIsImxvZ1JlbW90ZVN0YXRpY0tleSIsInJzIiwic3ViYXJyYXkiLCJsb2dSZW1vdGVFcGhlbWVyYWxLZXkiLCJyZSIsImxvZ0NpcGhlclN0YXRlIiwic2Vzc2lvbiIsImNzMSIsImNzMiIsIm4iLCJnZXRVaW50NjQiLCJrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerMetrics: () => (/* binding */ registerMetrics)\n/* harmony export */ });\nfunction registerMetrics(metrics) {\n    return {\n        xxHandshakeSuccesses: metrics.registerCounter(\"libp2p_noise_xxhandshake_successes_total\", {\n            help: \"Total count of noise xxHandshakes successes_\"\n        }),\n        xxHandshakeErrors: metrics.registerCounter(\"libp2p_noise_xxhandshake_error_total\", {\n            help: \"Total count of noise xxHandshakes errors\"\n        }),\n        encryptedPackets: metrics.registerCounter(\"libp2p_noise_encrypted_packets_total\", {\n            help: \"Total count of noise encrypted packets successfully\"\n        }),\n        decryptedPackets: metrics.registerCounter(\"libp2p_noise_decrypted_packets_total\", {\n            help: \"Total count of noise decrypted packets\"\n        }),\n        decryptErrors: metrics.registerCounter(\"libp2p_noise_decrypt_errors_total\", {\n            help: \"Total count of noise decrypt errors\"\n        })\n    };\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvbWV0cmljcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxPQUFPO0lBQ25DLE9BQU87UUFDSEMsc0JBQXNCRCxRQUFRRSxlQUFlLENBQUMsNENBQTRDO1lBQ3RGQyxNQUFNO1FBQ1Y7UUFDQUMsbUJBQW1CSixRQUFRRSxlQUFlLENBQUMsd0NBQXdDO1lBQy9FQyxNQUFNO1FBQ1Y7UUFDQUUsa0JBQWtCTCxRQUFRRSxlQUFlLENBQUMsd0NBQXdDO1lBQzlFQyxNQUFNO1FBQ1Y7UUFDQUcsa0JBQWtCTixRQUFRRSxlQUFlLENBQUMsd0NBQXdDO1lBQzlFQyxNQUFNO1FBQ1Y7UUFDQUksZUFBZVAsUUFBUUUsZUFBZSxDQUFDLHFDQUFxQztZQUN4RUMsTUFBTTtRQUNWO0lBQ0o7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL2Rpc3Qvc3JjL21ldHJpY3MuanM/MzY4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJNZXRyaWNzKG1ldHJpY3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4eEhhbmRzaGFrZVN1Y2Nlc3NlczogbWV0cmljcy5yZWdpc3RlckNvdW50ZXIoJ2xpYnAycF9ub2lzZV94eGhhbmRzaGFrZV9zdWNjZXNzZXNfdG90YWwnLCB7XG4gICAgICAgICAgICBoZWxwOiAnVG90YWwgY291bnQgb2Ygbm9pc2UgeHhIYW5kc2hha2VzIHN1Y2Nlc3Nlc18nXG4gICAgICAgIH0pLFxuICAgICAgICB4eEhhbmRzaGFrZUVycm9yczogbWV0cmljcy5yZWdpc3RlckNvdW50ZXIoJ2xpYnAycF9ub2lzZV94eGhhbmRzaGFrZV9lcnJvcl90b3RhbCcsIHtcbiAgICAgICAgICAgIGhlbHA6ICdUb3RhbCBjb3VudCBvZiBub2lzZSB4eEhhbmRzaGFrZXMgZXJyb3JzJ1xuICAgICAgICB9KSxcbiAgICAgICAgZW5jcnlwdGVkUGFja2V0czogbWV0cmljcy5yZWdpc3RlckNvdW50ZXIoJ2xpYnAycF9ub2lzZV9lbmNyeXB0ZWRfcGFja2V0c190b3RhbCcsIHtcbiAgICAgICAgICAgIGhlbHA6ICdUb3RhbCBjb3VudCBvZiBub2lzZSBlbmNyeXB0ZWQgcGFja2V0cyBzdWNjZXNzZnVsbHknXG4gICAgICAgIH0pLFxuICAgICAgICBkZWNyeXB0ZWRQYWNrZXRzOiBtZXRyaWNzLnJlZ2lzdGVyQ291bnRlcignbGlicDJwX25vaXNlX2RlY3J5cHRlZF9wYWNrZXRzX3RvdGFsJywge1xuICAgICAgICAgICAgaGVscDogJ1RvdGFsIGNvdW50IG9mIG5vaXNlIGRlY3J5cHRlZCBwYWNrZXRzJ1xuICAgICAgICB9KSxcbiAgICAgICAgZGVjcnlwdEVycm9yczogbWV0cmljcy5yZWdpc3RlckNvdW50ZXIoJ2xpYnAycF9ub2lzZV9kZWNyeXB0X2Vycm9yc190b3RhbCcsIHtcbiAgICAgICAgICAgIGhlbHA6ICdUb3RhbCBjb3VudCBvZiBub2lzZSBkZWNyeXB0IGVycm9ycydcbiAgICAgICAgfSlcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljcy5qcy5tYXAiXSwibmFtZXMiOlsicmVnaXN0ZXJNZXRyaWNzIiwibWV0cmljcyIsInh4SGFuZHNoYWtlU3VjY2Vzc2VzIiwicmVnaXN0ZXJDb3VudGVyIiwiaGVscCIsInh4SGFuZHNoYWtlRXJyb3JzIiwiZW5jcnlwdGVkUGFja2V0cyIsImRlY3J5cHRlZFBhY2tldHMiLCJkZWNyeXB0RXJyb3JzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Noise: () => (/* binding */ Noise)\n/* harmony export */ });\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"(ssr)/./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-length-prefixed-stream */ \"(ssr)/./node_modules/it-length-prefixed-stream/dist/src/index.js\");\n/* harmony import */ var it_pair_duplex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pair/duplex */ \"(ssr)/./node_modules/it-pair/dist/src/duplex.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-pipe */ \"(ssr)/./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./crypto/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.js\");\n/* harmony import */ var _crypto_streaming_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./crypto/streaming.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/streaming.js\");\n/* harmony import */ var _encoder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./encoder.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js\");\n/* harmony import */ var _handshake_xx_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./handshake-xx.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/handshake-xx.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./metrics.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass Noise {\n    constructor(components, init = {}){\n        this.protocol = \"/noise\";\n        const { staticNoiseKey, extensions, crypto, prologueBytes } = init;\n        const { metrics } = components;\n        this.components = components;\n        this.crypto = crypto ?? _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.defaultCrypto;\n        this.extensions = extensions;\n        this.metrics = metrics ? (0,_metrics_js__WEBPACK_IMPORTED_MODULE_10__.registerMetrics)(metrics) : undefined;\n        if (staticNoiseKey) {\n            // accepts x25519 private key of length 32\n            this.staticKeys = this.crypto.generateX25519KeyPairFromSeed(staticNoiseKey);\n        } else {\n            this.staticKeys = this.crypto.generateX25519KeyPair();\n        }\n        this.prologue = prologueBytes ?? (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_4__.alloc)(0);\n    }\n    /**\n     * Encrypt outgoing data to the remote party (handshake as initiator)\n     *\n     * @param {PeerId} localPeer - PeerId of the receiving peer\n     * @param {Stream} connection - streaming iterable duplex that will be encrypted\n     * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n     * @returns {Promise<SecuredConnection<Stream, NoiseExtensions>>}\n     */ async secureOutbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__.lpStream)(connection, {\n            lengthEncoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEEncode,\n            lengthDecoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEDecode,\n            maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_5__.NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        const handshake = await this.performHandshake({\n            connection: wrappedConnection,\n            isInitiator: true,\n            localPeer,\n            remotePeer\n        });\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        connection.source = conn.source;\n        connection.sink = conn.sink;\n        return {\n            conn: connection,\n            remoteExtensions: handshake.remoteExtensions,\n            remotePeer: handshake.remotePeer\n        };\n    }\n    /**\n     * Decrypt incoming data (handshake as responder).\n     *\n     * @param {PeerId} localPeer - PeerId of the receiving peer.\n     * @param {Stream} connection - streaming iterable duplex that will be encrypted.\n     * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n     * @returns {Promise<SecuredConnection<Stream, NoiseExtensions>>}\n     */ async secureInbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__.lpStream)(connection, {\n            lengthEncoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEEncode,\n            lengthDecoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEDecode,\n            maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_5__.NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        const handshake = await this.performHandshake({\n            connection: wrappedConnection,\n            isInitiator: false,\n            localPeer,\n            remotePeer\n        });\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        connection.source = conn.source;\n        connection.sink = conn.sink;\n        return {\n            conn: connection,\n            remotePeer: handshake.remotePeer,\n            remoteExtensions: handshake.remoteExtensions\n        };\n    }\n    /**\n     * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.\n     * If noise pipes disabled or remote peer static key is unknown, use XX.\n     *\n     * @param {HandshakeParams} params\n     */ async performHandshake(params) {\n        const payload = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_11__.getPayload)(params.localPeer, this.staticKeys.publicKey, this.extensions);\n        // run XX handshake\n        return this.performXXHandshake(params, payload);\n    }\n    async performXXHandshake(params, payload) {\n        const { isInitiator, remotePeer, connection } = params;\n        const handshake = new _handshake_xx_js__WEBPACK_IMPORTED_MODULE_9__.XXHandshake(this.components, isInitiator, payload, this.prologue, this.crypto, this.staticKeys, connection, remotePeer);\n        try {\n            await handshake.propose();\n            await handshake.exchange();\n            await handshake.finish();\n            this.metrics?.xxHandshakeSuccesses.increment();\n        } catch (e) {\n            this.metrics?.xxHandshakeErrors.increment();\n            if (e instanceof Error) {\n                e.message = `Error occurred during XX handshake: ${e.message}`;\n                throw e;\n            }\n        }\n        return handshake;\n    }\n    async createSecureConnection(connection, handshake) {\n        // Create encryption box/unbox wrapper\n        const [secure, user] = (0,it_pair_duplex__WEBPACK_IMPORTED_MODULE_2__.duplexPair)();\n        const network = connection.unwrap();\n        await (0,it_pipe__WEBPACK_IMPORTED_MODULE_3__.pipe)(secure, (0,_crypto_streaming_js__WEBPACK_IMPORTED_MODULE_7__.encryptStream)(handshake, this.metrics), network, (source)=>(0,it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.decode)(source, {\n                lengthDecoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEDecode\n            }), (0,_crypto_streaming_js__WEBPACK_IMPORTED_MODULE_7__.decryptStream)(handshake, this.metrics), secure // pipe to the wrapper\n        );\n        return user;\n    }\n} //# sourceMappingURL=noise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_NONCE: () => (/* binding */ MAX_NONCE),\n/* harmony export */   MIN_NONCE: () => (/* binding */ MIN_NONCE),\n/* harmony export */   Nonce: () => (/* binding */ Nonce)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n\nconst MIN_NONCE = 0;\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nconst MAX_NONCE = 0xffffffff;\nconst ERR_MAX_NONCE = \"Cipherstate has reached maximum n, a new handshake must be performed\";\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */ class Nonce {\n    constructor(n = MIN_NONCE){\n        this.n = n;\n        this.bytes = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(12);\n        this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength);\n        this.view.setUint32(4, n, true);\n    }\n    increment() {\n        this.n++;\n        // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n        this.view.setUint32(4, this.n, true);\n    }\n    getBytes() {\n        return this.bytes;\n    }\n    getUint64() {\n        return this.n;\n    }\n    assertValue() {\n        if (this.n > MAX_NONCE) {\n            throw new Error(ERR_MAX_NONCE);\n        }\n    }\n} //# sourceMappingURL=nonce.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2UvZGlzdC9zcmMvbm9uY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2RDtBQUN0RCxNQUFNRSxZQUFZLEVBQUU7QUFDM0IscUVBQXFFO0FBQ3JFLDhGQUE4RjtBQUM5RixvREFBb0Q7QUFDcEQsK0ZBQStGO0FBQy9GLDBLQUEwSztBQUMxSyxxR0FBcUc7QUFDOUYsTUFBTUMsWUFBWSxXQUFXO0FBQ3BDLE1BQU1DLGdCQUFnQjtBQUN0Qjs7O0NBR0MsR0FDTSxNQUFNQztJQUlUQyxZQUFZQyxJQUFJTCxTQUFTLENBQUU7UUFDdkIsSUFBSSxDQUFDSyxDQUFDLEdBQUdBO1FBQ1QsSUFBSSxDQUFDQyxLQUFLLEdBQUdQLHdEQUFlQSxDQUFDO1FBQzdCLElBQUksQ0FBQ1EsSUFBSSxHQUFHLElBQUlDLFNBQVMsSUFBSSxDQUFDRixLQUFLLENBQUNHLE1BQU0sRUFBRSxJQUFJLENBQUNILEtBQUssQ0FBQ0ksVUFBVSxFQUFFLElBQUksQ0FBQ0osS0FBSyxDQUFDSyxVQUFVO1FBQ3hGLElBQUksQ0FBQ0osSUFBSSxDQUFDSyxTQUFTLENBQUMsR0FBR1AsR0FBRztJQUM5QjtJQUNBUSxZQUFZO1FBQ1IsSUFBSSxDQUFDUixDQUFDO1FBQ04sMkZBQTJGO1FBQzNGLElBQUksQ0FBQ0UsSUFBSSxDQUFDSyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUNQLENBQUMsRUFBRTtJQUNuQztJQUNBUyxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUNSLEtBQUs7SUFDckI7SUFDQVMsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDVixDQUFDO0lBQ2pCO0lBQ0FXLGNBQWM7UUFDVixJQUFJLElBQUksQ0FBQ1gsQ0FBQyxHQUFHSixXQUFXO1lBQ3BCLE1BQU0sSUFBSWdCLE1BQU1mO1FBQ3BCO0lBQ0o7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL2Rpc3Qvc3JjL25vbmNlLmpzP2EyNWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWxsb2MgYXMgdWludDhBcnJheUFsbG9jIH0gZnJvbSAndWludDhhcnJheXMvYWxsb2MnO1xuZXhwb3J0IGNvbnN0IE1JTl9OT05DRSA9IDA7XG4vLyBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgdGhlIG5vbmNlIGlzIHJlcHJlc2VudGVkIGFzIGEgSlMgYG51bWJlcmBcbi8vIEFsdGhvdWdoIEpTIGBudW1iZXJgIGNhbiBzYWZlbHkgcmVwcmVzZW50IGludGVnZXJzIHVwIHRvIDIgKiogNTMgLSAxLCB3ZSBjaG9vc2UgdG8gb25seSB1c2Vcbi8vIDQgYnl0ZXMgdG8gc3RvcmUgdGhlIGRhdGEgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbi5cbi8vIFRoaXMgaXMgYSBzbGlnaHQgZGV2aWF0aW9uIGZyb20gdGhlIG5vaXNlIHNwZWMsIHdoaWNoIGRlc2NyaWJlcyB0aGUgbWF4IG5vbmNlIGFzIDIgKiogNjQgLSAyXG4vLyBUaGUgZWZmZWN0IGlzIHRoYXQgdGhpcyBpbXBsZW1lbnRhdGlvbiB3aWxsIG5lZWQgYSBuZXcgaGFuZHNoYWtlIHRvIGJlIHBlcmZvcm1lZCBhZnRlciBmZXdlciBtZXNzYWdlcyBhcmUgZXhjaGFuZ2VkIHRoYW4gb3RoZXIgaW1wbGVtZW50YXRpb25zIHdpdGggZnVsbCB1aW50NjQgbm9uY2VzLlxuLy8gdGhpcyBNQVhfTk9OQ0UgaXMgc3RpbGwgYSBsYXJnZSBudW1iZXIgb2YgbWVzc2FnZXMsIHNvIHRoZSBwcmFjdGljYWwgZWZmZWN0IG9mIHRoaXMgaXMgbmVnbGlnaWJsZS5cbmV4cG9ydCBjb25zdCBNQVhfTk9OQ0UgPSAweGZmZmZmZmZmO1xuY29uc3QgRVJSX01BWF9OT05DRSA9ICdDaXBoZXJzdGF0ZSBoYXMgcmVhY2hlZCBtYXhpbXVtIG4sIGEgbmV3IGhhbmRzaGFrZSBtdXN0IGJlIHBlcmZvcm1lZCc7XG4vKipcbiAqIFRoZSBub25jZSBpcyBhbiB1aW50IHRoYXQncyBpbmNyZWFzZWQgb3ZlciB0aW1lLlxuICogTWFpbnRhaW5pbmcgZGlmZmVyZW50IHJlcHJlc2VudGF0aW9ucyBoZWxwIGltcHJvdmUgcGVyZm9ybWFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb25jZSB7XG4gICAgbjtcbiAgICBieXRlcztcbiAgICB2aWV3O1xuICAgIGNvbnN0cnVjdG9yKG4gPSBNSU5fTk9OQ0UpIHtcbiAgICAgICAgdGhpcy5uID0gbjtcbiAgICAgICAgdGhpcy5ieXRlcyA9IHVpbnQ4QXJyYXlBbGxvYygxMik7XG4gICAgICAgIHRoaXMudmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLmJ5dGVzLmJ1ZmZlciwgdGhpcy5ieXRlcy5ieXRlT2Zmc2V0LCB0aGlzLmJ5dGVzLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLnZpZXcuc2V0VWludDMyKDQsIG4sIHRydWUpO1xuICAgIH1cbiAgICBpbmNyZW1lbnQoKSB7XG4gICAgICAgIHRoaXMubisrO1xuICAgICAgICAvLyBFdmVuIHRob3VnaCB3ZSdyZSB0cmVhdGluZyB0aGUgbm9uY2UgYXMgOCBieXRlcywgUkZDNzUzOSBzcGVjaWZpZXMgMTIgYnl0ZXMgZm9yIGEgbm9uY2UuXG4gICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoNCwgdGhpcy5uLCB0cnVlKTtcbiAgICB9XG4gICAgZ2V0Qnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzO1xuICAgIH1cbiAgICBnZXRVaW50NjQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm47XG4gICAgfVxuICAgIGFzc2VydFZhbHVlKCkge1xuICAgICAgICBpZiAodGhpcy5uID4gTUFYX05PTkNFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJSX01BWF9OT05DRSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub25jZS5qcy5tYXAiXSwibmFtZXMiOlsiYWxsb2MiLCJ1aW50OEFycmF5QWxsb2MiLCJNSU5fTk9OQ0UiLCJNQVhfTk9OQ0UiLCJFUlJfTUFYX05PTkNFIiwiTm9uY2UiLCJjb25zdHJ1Y3RvciIsIm4iLCJieXRlcyIsInZpZXciLCJEYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwic2V0VWludDMyIiwiaW5jcmVtZW50IiwiZ2V0Qnl0ZXMiLCJnZXRVaW50NjQiLCJhc3NlcnRWYWx1ZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js":
/*!************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoiseExtensions: () => (/* binding */ NoiseExtensions),\n/* harmony export */   NoiseHandshakePayload: () => (/* binding */ NoiseHandshakePayload)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"(ssr)/./node_modules/protons-runtime/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"(ssr)/./node_modules/uint8arrays/dist/src/alloc.node.js\");\n/* eslint-disable import/export */ /* eslint-disable complexity */ /* eslint-disable @typescript-eslint/no-namespace */ /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */ /* eslint-disable @typescript-eslint/no-empty-interface */ \n\nvar NoiseExtensions;\n(function(NoiseExtensions) {\n    let _codec;\n    NoiseExtensions.codec = ()=>{\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.webtransportCerthashes != null) {\n                    for (const value of obj.webtransportCerthashes){\n                        w.uint32(10);\n                        w.bytes(value);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length)=>{\n                const obj = {\n                    webtransportCerthashes: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while(reader.pos < end){\n                    const tag = reader.uint32();\n                    switch(tag >>> 3){\n                        case 1:\n                            {\n                                obj.webtransportCerthashes.push(reader.bytes());\n                                break;\n                            }\n                        default:\n                            {\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseExtensions.encode = (obj)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, NoiseExtensions.codec());\n    };\n    NoiseExtensions.decode = (buf)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, NoiseExtensions.codec());\n    };\n})(NoiseExtensions || (NoiseExtensions = {}));\nvar NoiseHandshakePayload;\n(function(NoiseHandshakePayload) {\n    let _codec;\n    NoiseHandshakePayload.codec = ()=>{\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.identityKey != null && obj.identityKey.byteLength > 0) {\n                    w.uint32(10);\n                    w.bytes(obj.identityKey);\n                }\n                if (obj.identitySig != null && obj.identitySig.byteLength > 0) {\n                    w.uint32(18);\n                    w.bytes(obj.identitySig);\n                }\n                if (obj.extensions != null) {\n                    w.uint32(34);\n                    NoiseExtensions.codec().encode(obj.extensions, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length)=>{\n                const obj = {\n                    identityKey: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0),\n                    identitySig: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while(reader.pos < end){\n                    const tag = reader.uint32();\n                    switch(tag >>> 3){\n                        case 1:\n                            {\n                                obj.identityKey = reader.bytes();\n                                break;\n                            }\n                        case 2:\n                            {\n                                obj.identitySig = reader.bytes();\n                                break;\n                            }\n                        case 4:\n                            {\n                                obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32());\n                                break;\n                            }\n                        default:\n                            {\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseHandshakePayload.encode = (obj)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, NoiseHandshakePayload.codec());\n    };\n    NoiseHandshakePayload.decode = (buf)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, NoiseHandshakePayload.codec());\n    };\n})(NoiseHandshakePayload || (NoiseHandshakePayload = {})); //# sourceMappingURL=payload.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHandshakePayload: () => (/* binding */ createHandshakePayload),\n/* harmony export */   decodePayload: () => (/* binding */ decodePayload),\n/* harmony export */   getHandshakePayload: () => (/* binding */ getHandshakePayload),\n/* harmony export */   getPayload: () => (/* binding */ getPayload),\n/* harmony export */   getPeerIdFromPayload: () => (/* binding */ getPeerIdFromPayload),\n/* harmony export */   isValidPublicKey: () => (/* binding */ isValidPublicKey),\n/* harmony export */   signPayload: () => (/* binding */ signPayload),\n/* harmony export */   verifySignedPayload: () => (/* binding */ verifySignedPayload)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-id */ \"(ssr)/./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arraylist */ \"(ssr)/./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var _proto_payload_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./proto/payload.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js\");\n\n\n\n\n\n\nasync function getPayload(localPeer, staticPublicKey, extensions) {\n    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n    if (localPeer.publicKey == null) {\n        throw new Error(\"PublicKey was missing from local PeerId\");\n    }\n    return createHandshakePayload(localPeer.publicKey, signedPayload, extensions);\n}\nfunction createHandshakePayload(libp2pPublicKey, signedPayload, extensions) {\n    return _proto_payload_js__WEBPACK_IMPORTED_MODULE_4__.NoiseHandshakePayload.encode({\n        identityKey: libp2pPublicKey,\n        identitySig: signedPayload,\n        extensions: extensions ?? {\n            webtransportCerthashes: []\n        }\n    }).subarray();\n}\nasync function signPayload(peerId, payload) {\n    if (peerId.privateKey == null) {\n        throw new Error(\"PrivateKey was missing from PeerId\");\n    }\n    const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_0__.unmarshalPrivateKey)(peerId.privateKey);\n    return privateKey.sign(payload);\n}\nasync function getPeerIdFromPayload(payload) {\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromKeys)(payload.identityKey);\n}\nfunction decodePayload(payload) {\n    return _proto_payload_js__WEBPACK_IMPORTED_MODULE_4__.NoiseHandshakePayload.decode(payload);\n}\nfunction getHandshakePayload(publicKey) {\n    const prefix = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(\"noise-libp2p-static-key:\");\n    if (publicKey instanceof Uint8Array) {\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([\n            prefix,\n            publicKey\n        ], prefix.length + publicKey.length);\n    }\n    publicKey.prepend(prefix);\n    return publicKey;\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n *\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */ async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n    // Unmarshaling from PublicKey protobuf\n    const payloadPeerId = await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromKeys)(payload.identityKey);\n    if (!payloadPeerId.equals(remotePeer)) {\n        throw new Error(`Payload identity key ${payloadPeerId.toString()} does not match expected remote peer ${remotePeer.toString()}`);\n    }\n    const generatedPayload = getHandshakePayload(noiseStaticKey);\n    if (payloadPeerId.publicKey == null) {\n        throw new Error(\"PublicKey was missing from PeerId\");\n    }\n    if (payload.identitySig == null) {\n        throw new Error(\"Signature was missing from message\");\n    }\n    const publicKey = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_0__.unmarshalPublicKey)(payloadPeerId.publicKey);\n    const valid = await publicKey.verify(generatedPayload, payload.identitySig);\n    if (!valid) {\n        throw new Error(\"Static key doesn't match to peer that signed payload!\");\n    }\n    return payloadPeerId;\n}\nfunction isValidPublicKey(pk) {\n    if (!(pk instanceof Uint8Array) && !(0,uint8arraylist__WEBPACK_IMPORTED_MODULE_1__.isUint8ArrayList)(pk)) {\n        return false;\n    }\n    if (pk.byteLength !== 32) {\n        return false;\n    }\n    return true;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n\n\n\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\nfunction create(opts) {\n    const algorithm = opts?.algorithm ?? \"aes-128-gcm\";\n    const keyLength = opts?.keyLength ?? 16;\n    const nonceLength = opts?.nonceLength ?? 12;\n    const digest = opts?.digest ?? \"sha256\";\n    const saltLength = opts?.saltLength ?? 16;\n    const iterations = opts?.iterations ?? 32767;\n    const algorithmTagLength = opts?.algorithmTagLength ?? 16;\n    function encryptWithKey(data, key) {\n        const nonce = crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes(nonceLength);\n        // Create the cipher instance.\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_0__.createCipheriv(algorithm, key, nonce);\n        // Encrypt and prepend nonce.\n        const ciphertext = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            cipher.update(data),\n            cipher.final()\n        ]);\n        // @ts-expect-error getAuthTag is not a function\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            nonce,\n            ciphertext,\n            cipher.getAuthTag()\n        ]);\n    }\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to encrypt the data.\n     */ async function encrypt(data, password) {\n        // Generate a 128-bit salt using a CSPRNG.\n        const salt = crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes(saltLength);\n        if (typeof password === \"string\") {\n            password = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(password);\n        }\n        // Derive a key using PBKDF2.\n        const key = crypto__WEBPACK_IMPORTED_MODULE_0__.pbkdf2Sync(password, salt, iterations, keyLength, digest);\n        // Encrypt and prepend salt.\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            salt,\n            encryptWithKey(Uint8Array.from(data), key)\n        ]);\n    }\n    /**\n     * Decrypts the given cipher text with the provided key. The `key` should\n     * be a cryptographically safe key and not a plaintext password. To use\n     * a plaintext password, use `decrypt`. The options used to create\n     * this decryption cipher must be the same as those used to create\n     * the encryption cipher.\n     */ function decryptWithKey(ciphertextAndNonce, key) {\n        // Create Uint8Arrays of nonce, ciphertext and tag.\n        const nonce = ciphertextAndNonce.subarray(0, nonceLength);\n        const ciphertext = ciphertextAndNonce.subarray(nonceLength, ciphertextAndNonce.length - algorithmTagLength);\n        const tag = ciphertextAndNonce.subarray(ciphertext.length + nonceLength);\n        // Create the cipher instance.\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_0__.createDecipheriv(algorithm, key, nonce);\n        // Decrypt and return result.\n        // @ts-expect-error getAuthTag is not a function\n        cipher.setAuthTag(tag);\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            cipher.update(ciphertext),\n            cipher.final()\n        ]);\n    }\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to decrypt the data. The options used to create\n     * this decryption cipher must be the same as those used to create\n     * the encryption cipher.\n     *\n     * @param {Uint8Array} data - The data to decrypt\n     * @param {string|Uint8Array} password - A plain password\n     */ async function decrypt(data, password) {\n        // Create Uint8Arrays of salt and ciphertextAndNonce.\n        const salt = data.subarray(0, saltLength);\n        const ciphertextAndNonce = data.subarray(saltLength);\n        if (typeof password === \"string\") {\n            password = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(password);\n        }\n        // Derive the key using PBKDF2.\n        const key = crypto__WEBPACK_IMPORTED_MODULE_0__.pbkdf2Sync(password, salt, iterations, keyLength, digest);\n        // Decrypt and return result.\n        return decryptWithKey(ciphertextAndNonce, key);\n    }\n    const cipher = {\n        encrypt,\n        decrypt\n    };\n    return cipher;\n} //# sourceMappingURL=aes-gcm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _lengths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lengths.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/lengths.js\");\n/**\n * @packageDocumentation\n *\n * Exposes an interface to the Keyed-Hash Message Authentication Code (HMAC) as defined in U.S. Federal Information Processing Standards Publication 198. An HMAC is a cryptographic hash that uses a key to sign a message. The receiver verifies the hash by recomputing it using the same key.\n *\n * @example\n *\n * ```js\n * import { create } from '@libp2p/hmac'\n *\n * const hash = 'SHA1' // 'SHA256' || 'SHA512'\n * const hmac = await crypto.hmac.create(hash, uint8ArrayFromString('secret'))\n * const sig = await hmac.digest(uint8ArrayFromString('hello world'))\n * console.log(sig)\n * ```\n */ \n\nasync function create(hash, secret) {\n    const res = {\n        async digest (data) {\n            const hmac = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(hash.toLowerCase(), secret);\n            hmac.update(data);\n            return hmac.digest();\n        },\n        length: _lengths_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][hash]\n    };\n    return res;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2htYWMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQzJCO0FBQ087QUFDNUIsZUFBZUUsT0FBT0MsSUFBSSxFQUFFQyxNQUFNO0lBQ3JDLE1BQU1DLE1BQU07UUFDUixNQUFNQyxRQUFPQyxJQUFJO1lBQ2IsTUFBTUMsT0FBT1IsOENBQWlCLENBQUNHLEtBQUtPLFdBQVcsSUFBSU47WUFDbkRJLEtBQUtHLE1BQU0sQ0FBQ0o7WUFDWixPQUFPQyxLQUFLRixNQUFNO1FBQ3RCO1FBQ0FNLFFBQVFYLG1EQUFPLENBQUNFLEtBQUs7SUFDekI7SUFDQSxPQUFPRTtBQUNYLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2htYWMvaW5kZXguanM/YzI1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICpcbiAqIEV4cG9zZXMgYW4gaW50ZXJmYWNlIHRvIHRoZSBLZXllZC1IYXNoIE1lc3NhZ2UgQXV0aGVudGljYXRpb24gQ29kZSAoSE1BQykgYXMgZGVmaW5lZCBpbiBVLlMuIEZlZGVyYWwgSW5mb3JtYXRpb24gUHJvY2Vzc2luZyBTdGFuZGFyZHMgUHVibGljYXRpb24gMTk4LiBBbiBITUFDIGlzIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIHRoYXQgdXNlcyBhIGtleSB0byBzaWduIGEgbWVzc2FnZS4gVGhlIHJlY2VpdmVyIHZlcmlmaWVzIHRoZSBoYXNoIGJ5IHJlY29tcHV0aW5nIGl0IHVzaW5nIHRoZSBzYW1lIGtleS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdAbGlicDJwL2htYWMnXG4gKlxuICogY29uc3QgaGFzaCA9ICdTSEExJyAvLyAnU0hBMjU2JyB8fCAnU0hBNTEyJ1xuICogY29uc3QgaG1hYyA9IGF3YWl0IGNyeXB0by5obWFjLmNyZWF0ZShoYXNoLCB1aW50OEFycmF5RnJvbVN0cmluZygnc2VjcmV0JykpXG4gKiBjb25zdCBzaWcgPSBhd2FpdCBobWFjLmRpZ2VzdCh1aW50OEFycmF5RnJvbVN0cmluZygnaGVsbG8gd29ybGQnKSlcbiAqIGNvbnNvbGUubG9nKHNpZylcbiAqIGBgYFxuICovXG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgbGVuZ3RocyBmcm9tICcuL2xlbmd0aHMuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZShoYXNoLCBzZWNyZXQpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIGFzeW5jIGRpZ2VzdChkYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaC50b0xvd2VyQ2FzZSgpLCBzZWNyZXQpO1xuICAgICAgICAgICAgaG1hYy51cGRhdGUoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gaG1hYy5kaWdlc3QoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGhzW2hhc2hdXG4gICAgfTtcbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImNyeXB0byIsImxlbmd0aHMiLCJjcmVhdGUiLCJoYXNoIiwic2VjcmV0IiwicmVzIiwiZGlnZXN0IiwiZGF0YSIsImhtYWMiLCJjcmVhdGVIbWFjIiwidG9Mb3dlckNhc2UiLCJ1cGRhdGUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/lengths.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/lengths.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    SHA1: 20,\n    SHA256: 32,\n    SHA512: 64\n}); //# sourceMappingURL=lengths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2htYWMvbGVuZ3Rocy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWEEsTUFBTTtJQUNOQyxRQUFRO0lBQ1JDLFFBQVE7QUFDWixDQUFDLEVBQUMsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1ub2lzZS9ub2RlX21vZHVsZXMvQGxpYnAycC9jcnlwdG8vZGlzdC9zcmMvaG1hYy9sZW5ndGhzLmpzPzNmNTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFNIQTE6IDIwLFxuICAgIFNIQTI1NjogMzIsXG4gICAgU0hBNTEyOiA2NFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlbmd0aHMuanMubWFwIl0sIm5hbWVzIjpbIlNIQTEiLCJTSEEyNTYiLCJTSEE1MTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/lengths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ecdh.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ecdh.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateEphmeralKeyPair: () => (/* binding */ generateEphmeralKeyPair)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n\n\nconst curves = {\n    \"P-256\": \"prime256v1\",\n    \"P-384\": \"secp384r1\",\n    \"P-521\": \"secp521r1\"\n};\nconst curveTypes = Object.keys(curves);\nconst names = curveTypes.join(\" / \");\n/**\n * Generates an ephemeral public key and returns a function that will compute the shared secret key.\n *\n * Focuses only on ECDH now, but can be made more general in the future.\n */ async function generateEphmeralKeyPair(curve) {\n    if (curve !== \"P-256\" && curve !== \"P-384\" && curve !== \"P-521\") {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(`Unknown curve: ${curve}. Must be ${names}`, \"ERR_INVALID_CURVE\");\n    }\n    const ecdh = crypto__WEBPACK_IMPORTED_MODULE_0__.createECDH(curves[curve]);\n    ecdh.generateKeys();\n    return {\n        key: ecdh.getPublicKey(),\n        async genSharedKey (theirPub, forcePrivate) {\n            if (forcePrivate != null) {\n                ecdh.setPrivateKey(forcePrivate.private);\n            }\n            return ecdh.computeSecret(theirPub);\n        }\n    };\n} //# sourceMappingURL=ecdh.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvZWNkaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFDa0I7QUFDOUMsTUFBTUUsU0FBUztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztBQUNiO0FBQ0EsTUFBTUMsYUFBYUMsT0FBT0MsSUFBSSxDQUFDSDtBQUMvQixNQUFNSSxRQUFRSCxXQUFXSSxJQUFJLENBQUM7QUFDOUI7Ozs7Q0FJQyxHQUNNLGVBQWVDLHdCQUF3QkMsS0FBSztJQUMvQyxJQUFJQSxVQUFVLFdBQVdBLFVBQVUsV0FBV0EsVUFBVSxTQUFTO1FBQzdELE1BQU0sSUFBSVIsd0RBQVNBLENBQUMsQ0FBQyxlQUFlLEVBQUVRLE1BQU0sVUFBVSxFQUFFSCxNQUFNLENBQUMsRUFBRTtJQUNyRTtJQUNBLE1BQU1JLE9BQU9WLDhDQUFpQixDQUFDRSxNQUFNLENBQUNPLE1BQU07SUFDNUNDLEtBQUtFLFlBQVk7SUFDakIsT0FBTztRQUNIQyxLQUFLSCxLQUFLSSxZQUFZO1FBQ3RCLE1BQU1DLGNBQWFDLFFBQVEsRUFBRUMsWUFBWTtZQUNyQyxJQUFJQSxnQkFBZ0IsTUFBTTtnQkFDdEJQLEtBQUtRLGFBQWEsQ0FBQ0QsYUFBYUUsT0FBTztZQUMzQztZQUNBLE9BQU9ULEtBQUtVLGFBQWEsQ0FBQ0o7UUFDOUI7SUFDSjtBQUNKLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvZWNkaC5qcz9mMzMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IENvZGVFcnJvciB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmNvbnN0IGN1cnZlcyA9IHtcbiAgICAnUC0yNTYnOiAncHJpbWUyNTZ2MScsXG4gICAgJ1AtMzg0JzogJ3NlY3AzODRyMScsXG4gICAgJ1AtNTIxJzogJ3NlY3A1MjFyMSdcbn07XG5jb25zdCBjdXJ2ZVR5cGVzID0gT2JqZWN0LmtleXMoY3VydmVzKTtcbmNvbnN0IG5hbWVzID0gY3VydmVUeXBlcy5qb2luKCcgLyAnKTtcbi8qKlxuICogR2VuZXJhdGVzIGFuIGVwaGVtZXJhbCBwdWJsaWMga2V5IGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNvbXB1dGUgdGhlIHNoYXJlZCBzZWNyZXQga2V5LlxuICpcbiAqIEZvY3VzZXMgb25seSBvbiBFQ0RIIG5vdywgYnV0IGNhbiBiZSBtYWRlIG1vcmUgZ2VuZXJhbCBpbiB0aGUgZnV0dXJlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVFcGhtZXJhbEtleVBhaXIoY3VydmUpIHtcbiAgICBpZiAoY3VydmUgIT09ICdQLTI1NicgJiYgY3VydmUgIT09ICdQLTM4NCcgJiYgY3VydmUgIT09ICdQLTUyMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihgVW5rbm93biBjdXJ2ZTogJHtjdXJ2ZX0uIE11c3QgYmUgJHtuYW1lc31gLCAnRVJSX0lOVkFMSURfQ1VSVkUnKTtcbiAgICB9XG4gICAgY29uc3QgZWNkaCA9IGNyeXB0by5jcmVhdGVFQ0RIKGN1cnZlc1tjdXJ2ZV0pO1xuICAgIGVjZGguZ2VuZXJhdGVLZXlzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBlY2RoLmdldFB1YmxpY0tleSgpLFxuICAgICAgICBhc3luYyBnZW5TaGFyZWRLZXkodGhlaXJQdWIsIGZvcmNlUHJpdmF0ZSkge1xuICAgICAgICAgICAgaWYgKGZvcmNlUHJpdmF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZWNkaC5zZXRQcml2YXRlS2V5KGZvcmNlUHJpdmF0ZS5wcml2YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlY2RoLmNvbXB1dGVTZWNyZXQodGhlaXJQdWIpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVjZGguanMubWFwIl0sIm5hbWVzIjpbImNyeXB0byIsIkNvZGVFcnJvciIsImN1cnZlcyIsImN1cnZlVHlwZXMiLCJPYmplY3QiLCJrZXlzIiwibmFtZXMiLCJqb2luIiwiZ2VuZXJhdGVFcGhtZXJhbEtleVBhaXIiLCJjdXJ2ZSIsImVjZGgiLCJjcmVhdGVFQ0RIIiwiZ2VuZXJhdGVLZXlzIiwia2V5IiwiZ2V0UHVibGljS2V5IiwiZ2VuU2hhcmVkS2V5IiwidGhlaXJQdWIiLCJmb3JjZVByaXZhdGUiLCJzZXRQcml2YXRlS2V5IiwicHJpdmF0ZSIsImNvbXB1dGVTZWNyZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ecdh.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519PrivateKey: () => (/* binding */ Ed25519PrivateKey),\n/* harmony export */   Ed25519PublicKey: () => (/* binding */ Ed25519PublicKey),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   generateKeyPairFromSeed: () => (/* binding */ generateKeyPairFromSeed),\n/* harmony export */   unmarshalEd25519PrivateKey: () => (/* binding */ unmarshalEd25519PrivateKey),\n/* harmony export */   unmarshalEd25519PublicKey: () => (/* binding */ unmarshalEd25519PublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"(ssr)/./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/hashes/identity */ \"(ssr)/./node_modules/multiformats/dist/src/hashes/identity.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"(ssr)/./node_modules/multiformats/dist/src/hashes/sha2.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _ed25519_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ed25519.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519.js\");\n/* harmony import */ var _exporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./exporter.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/exporter.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n\n\n\n\n\n\n\n\n\nclass Ed25519PublicKey {\n    constructor(key){\n        this._key = ensureKey(key, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.publicKeyLength);\n    }\n    verify(data, sig) {\n        return _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_7__.PublicKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_7__.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_4__.isPromise)(p)) {\n            return p.then(({ bytes })=>bytes);\n        }\n        return p.bytes;\n    }\n}\nclass Ed25519PrivateKey {\n    // key       - 64 byte Uint8Array containing private key\n    // publicKey - 32 byte Uint8Array containing public key\n    constructor(key, publicKey){\n        this._key = ensureKey(key, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength);\n        this._publicKey = ensureKey(publicKey, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.publicKeyLength);\n    }\n    sign(message) {\n        return _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Ed25519PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_7__.PrivateKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_7__.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(this.bytes, key.bytes);\n    }\n    async hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.digest(this.bytes);\n        let bytes;\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_4__.isPromise)(p)) {\n            ({ bytes } = await p);\n        } else {\n            bytes = p.bytes;\n        }\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the identity multihash containing its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */ async id() {\n        const encoding = multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_1__.identity.digest(this.public.bytes);\n        return multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc.encode(encoding.bytes).substring(1);\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */ async export(password, format = \"libp2p-key\") {\n        if (format === \"libp2p-key\") {\n            return (0,_exporter_js__WEBPACK_IMPORTED_MODULE_6__.exporter)(this.bytes, password);\n        } else {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError(`export format '${format}' is not supported`, \"ERR_INVALID_EXPORT_FORMAT\");\n        }\n    }\n}\nfunction unmarshalEd25519PrivateKey(bytes) {\n    // Try the old, redundant public key version\n    if (bytes.length > _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength) {\n        bytes = ensureKey(bytes, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength + _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.publicKeyLength);\n        const privateKeyBytes = bytes.subarray(0, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength);\n        const publicKeyBytes = bytes.subarray(_ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength, bytes.length);\n        return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n    }\n    bytes = ensureKey(bytes, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength);\n    const privateKeyBytes = bytes.subarray(0, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.privateKeyLength);\n    const publicKeyBytes = bytes.subarray(_ed25519_js__WEBPACK_IMPORTED_MODULE_5__.publicKeyLength);\n    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n}\nfunction unmarshalEd25519PublicKey(bytes) {\n    bytes = ensureKey(bytes, _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.publicKeyLength);\n    return new Ed25519PublicKey(bytes);\n}\nasync function generateKeyPair() {\n    const { privateKey, publicKey } = _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.generateKey();\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nasync function generateKeyPairFromSeed(seed) {\n    const { privateKey, publicKey } = _ed25519_js__WEBPACK_IMPORTED_MODULE_5__.generateKeyFromSeed(seed);\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nfunction ensureKey(key, length) {\n    key = Uint8Array.from(key ?? []);\n    if (key.length !== length) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, \"ERR_INVALID_KEY_TYPE\");\n    }\n    return key;\n} //# sourceMappingURL=ed25519-class.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   generateKeyFromSeed: () => (/* binding */ generateKeyFromSeed),\n/* harmony export */   hashAndSign: () => (/* binding */ hashAndSign),\n/* harmony export */   hashAndVerify: () => (/* binding */ hashAndVerify),\n/* harmony export */   privateKeyLength: () => (/* binding */ PRIVATE_KEY_BYTE_LENGTH),\n/* harmony export */   publicKeyLength: () => (/* binding */ PUBLIC_KEY_BYTE_LENGTH)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n\n\n\n\nconst keypair = crypto__WEBPACK_IMPORTED_MODULE_0__.generateKeyPairSync;\nconst PUBLIC_KEY_BYTE_LENGTH = 32;\nconst PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys\nconst KEYS_BYTE_LENGTH = 32;\nconst SIGNATURE_BYTE_LENGTH = 64;\n\n\nfunction derivePublicKey(privateKey) {\n    const keyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        format: \"jwk\",\n        key: {\n            crv: \"Ed25519\",\n            x: \"\",\n            d: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(privateKey, \"base64url\"),\n            kty: \"OKP\"\n        }\n    });\n    const jwk = keyObject.export({\n        format: \"jwk\"\n    });\n    if (jwk.x == null || jwk.x === \"\") {\n        throw new Error(\"Could not export JWK public key\");\n    }\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(jwk.x, \"base64url\");\n}\nfunction generateKey() {\n    const key = keypair(\"ed25519\", {\n        publicKeyEncoding: {\n            type: \"spki\",\n            format: \"jwk\"\n        },\n        privateKeyEncoding: {\n            type: \"pkcs8\",\n            format: \"jwk\"\n        }\n    });\n    // @ts-expect-error node types are missing jwk as a format\n    const privateKeyRaw = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(key.privateKey.d, \"base64url\");\n    // @ts-expect-error node types are missing jwk as a format\n    const publicKeyRaw = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(key.privateKey.x, \"base64url\");\n    return {\n        privateKey: (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            privateKeyRaw,\n            publicKeyRaw\n        ], privateKeyRaw.byteLength + publicKeyRaw.byteLength),\n        publicKey: publicKeyRaw\n    };\n}\n/**\n * Generate keypair from a 32 byte uint8array\n */ function generateKeyFromSeed(seed) {\n    if (seed.length !== KEYS_BYTE_LENGTH) {\n        throw new TypeError('\"seed\" must be 32 bytes in length.');\n    } else if (!(seed instanceof Uint8Array)) {\n        throw new TypeError('\"seed\" must be a node.js Buffer, or Uint8Array.');\n    }\n    // based on node forges algorithm, the seed is used directly as private key\n    const publicKeyRaw = derivePublicKey(seed);\n    return {\n        privateKey: (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([\n            seed,\n            publicKeyRaw\n        ], seed.byteLength + publicKeyRaw.byteLength),\n        publicKey: publicKeyRaw\n    };\n}\nfunction hashAndSign(key, msg) {\n    if (!(key instanceof Uint8Array)) {\n        throw new TypeError('\"key\" must be a node.js Buffer, or Uint8Array.');\n    }\n    let privateKey;\n    let publicKey;\n    if (key.byteLength === PRIVATE_KEY_BYTE_LENGTH) {\n        privateKey = key.subarray(0, 32);\n        publicKey = key.subarray(32);\n    } else if (key.byteLength === KEYS_BYTE_LENGTH) {\n        privateKey = key.subarray(0, 32);\n        publicKey = derivePublicKey(privateKey);\n    } else {\n        throw new TypeError('\"key\" must be 64 or 32 bytes in length.');\n    }\n    const obj = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        format: \"jwk\",\n        key: {\n            crv: \"Ed25519\",\n            d: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(privateKey, \"base64url\"),\n            x: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(publicKey, \"base64url\"),\n            kty: \"OKP\"\n        }\n    });\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.sign(null, msg instanceof Uint8Array ? msg : msg.subarray(), obj);\n}\nfunction hashAndVerify(key, sig, msg) {\n    if (key.byteLength !== PUBLIC_KEY_BYTE_LENGTH) {\n        throw new TypeError('\"key\" must be 32 bytes in length.');\n    } else if (!(key instanceof Uint8Array)) {\n        throw new TypeError('\"key\" must be a node.js Buffer, or Uint8Array.');\n    }\n    if (sig.byteLength !== SIGNATURE_BYTE_LENGTH) {\n        throw new TypeError('\"sig\" must be 64 bytes in length.');\n    } else if (!(sig instanceof Uint8Array)) {\n        throw new TypeError('\"sig\" must be a node.js Buffer, or Uint8Array.');\n    }\n    const obj = crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey({\n        format: \"jwk\",\n        key: {\n            crv: \"Ed25519\",\n            x: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(key, \"base64url\"),\n            kty: \"OKP\"\n        }\n    });\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.verify(null, msg instanceof Uint8Array ? msg : msg.subarray(), obj, sig);\n} //# sourceMappingURL=ed25519.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ecdh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ecdh.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ecdh.js\");\n\n/**\n * Generates an ephemeral public key and returns a function that will compute\n * the shared secret key.\n *\n * Focuses only on ECDH now, but can be made more general in the future.\n */ /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_ecdh_js__WEBPACK_IMPORTED_MODULE_0__.generateEphmeralKeyPair); //# sourceMappingURL=ephemeral-keys.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvZXBoZW1lcmFsLWtleXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFDcEQ7Ozs7O0NBS0MsR0FDRCxpRUFBZUEsNkRBQXVCQSxFQUFDLENBQ3ZDLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL25vZGVfbW9kdWxlcy9AbGlicDJwL2NyeXB0by9kaXN0L3NyYy9rZXlzL2VwaGVtZXJhbC1rZXlzLmpzPzQ5NzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVFcGhtZXJhbEtleVBhaXIgfSBmcm9tICcuL2VjZGguanMnO1xuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gZXBoZW1lcmFsIHB1YmxpYyBrZXkgYW5kIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgY29tcHV0ZVxuICogdGhlIHNoYXJlZCBzZWNyZXQga2V5LlxuICpcbiAqIEZvY3VzZXMgb25seSBvbiBFQ0RIIG5vdywgYnV0IGNhbiBiZSBtYWRlIG1vcmUgZ2VuZXJhbCBpbiB0aGUgZnV0dXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZUVwaG1lcmFsS2V5UGFpcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVwaGVtZXJhbC1rZXlzLmpzLm1hcCJdLCJuYW1lcyI6WyJnZW5lcmF0ZUVwaG1lcmFsS2V5UGFpciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/exporter.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/exporter.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exporter: () => (/* binding */ exporter)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base64 */ \"(ssr)/./node_modules/multiformats/dist/src/bases/base64.js\");\n/* harmony import */ var _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ciphers/aes-gcm.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.js\");\n\n\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */ async function exporter(privateKey, password) {\n    const cipher = _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__.create();\n    const encryptedKey = await cipher.encrypt(privateKey, password);\n    return multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__.base64.encode(encryptedKey);\n} //# sourceMappingURL=exporter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvZXhwb3J0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ0Y7QUFDakQ7Ozs7Q0FJQyxHQUNNLGVBQWVFLFNBQVNDLFVBQVUsRUFBRUMsUUFBUTtJQUMvQyxNQUFNQyxTQUFTSix1REFBYztJQUM3QixNQUFNTSxlQUFlLE1BQU1GLE9BQU9HLE9BQU8sQ0FBQ0wsWUFBWUM7SUFDdEQsT0FBT0osNkRBQU1BLENBQUNTLE1BQU0sQ0FBQ0Y7QUFDekIsRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1ub2lzZS9ub2RlX21vZHVsZXMvQGxpYnAycC9jcnlwdG8vZGlzdC9zcmMva2V5cy9leHBvcnRlci5qcz81M2VmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJhc2U2NCB9IGZyb20gJ211bHRpZm9ybWF0cy9iYXNlcy9iYXNlNjQnO1xuaW1wb3J0ICogYXMgY2lwaGVycyBmcm9tICcuLi9jaXBoZXJzL2Flcy1nY20uanMnO1xuLyoqXG4gKiBFeHBvcnRzIHRoZSBnaXZlbiBQcml2YXRlS2V5IGFzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICogVGhlIFByaXZhdGVLZXkgaXMgZW5jcnlwdGVkIHZpYSBhIHBhc3N3b3JkIGRlcml2ZWQgUEJLREYyIGtleVxuICogbGV2ZXJhZ2luZyB0aGUgYWVzLWdjbSBjaXBoZXIgYWxnb3JpdGhtLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0ZXIocHJpdmF0ZUtleSwgcGFzc3dvcmQpIHtcbiAgICBjb25zdCBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZSgpO1xuICAgIGNvbnN0IGVuY3J5cHRlZEtleSA9IGF3YWl0IGNpcGhlci5lbmNyeXB0KHByaXZhdGVLZXksIHBhc3N3b3JkKTtcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZShlbmNyeXB0ZWRLZXkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb3J0ZXIuanMubWFwIl0sIm5hbWVzIjpbImJhc2U2NCIsImNpcGhlcnMiLCJleHBvcnRlciIsInByaXZhdGVLZXkiLCJwYXNzd29yZCIsImNpcGhlciIsImNyZWF0ZSIsImVuY3J5cHRlZEtleSIsImVuY3J5cHQiLCJlbmNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/exporter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/importer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/importer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   importer: () => (/* binding */ importer)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base64 */ \"(ssr)/./node_modules/multiformats/dist/src/bases/base64.js\");\n/* harmony import */ var _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ciphers/aes-gcm.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.js\");\n\n\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */ async function importer(privateKey, password) {\n    const encryptedKey = multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__.base64.decode(privateKey);\n    const cipher = _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__.create();\n    return cipher.decrypt(encryptedKey, password);\n} //# sourceMappingURL=importer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvaW1wb3J0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ0Y7QUFDakQ7Ozs7Q0FJQyxHQUNNLGVBQWVFLFNBQVNDLFVBQVUsRUFBRUMsUUFBUTtJQUMvQyxNQUFNQyxlQUFlTCw2REFBTUEsQ0FBQ00sTUFBTSxDQUFDSDtJQUNuQyxNQUFNSSxTQUFTTix1REFBYztJQUM3QixPQUFPTSxPQUFPRSxPQUFPLENBQUNKLGNBQWNEO0FBQ3hDLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvaW1wb3J0ZXIuanM/YWVjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlNjQgfSBmcm9tICdtdWx0aWZvcm1hdHMvYmFzZXMvYmFzZTY0JztcbmltcG9ydCAqIGFzIGNpcGhlcnMgZnJvbSAnLi4vY2lwaGVycy9hZXMtZ2NtLmpzJztcbi8qKlxuICogQXR0ZW1wdHMgdG8gZGVjcnlwdCBhIGJhc2U2NCBlbmNvZGVkIFByaXZhdGVLZXkgc3RyaW5nXG4gKiB3aXRoIHRoZSBnaXZlbiBwYXNzd29yZC4gVGhlIHByaXZhdGVLZXkgbXVzdCBoYXZlIGJlZW4gZXhwb3J0ZWRcbiAqIHVzaW5nIHRoZSBzYW1lIHBhc3N3b3JkIGFuZCB1bmRlcmx5aW5nIGNpcGhlciAoYWVzLWdjbSlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGltcG9ydGVyKHByaXZhdGVLZXksIHBhc3N3b3JkKSB7XG4gICAgY29uc3QgZW5jcnlwdGVkS2V5ID0gYmFzZTY0LmRlY29kZShwcml2YXRlS2V5KTtcbiAgICBjb25zdCBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZSgpO1xuICAgIHJldHVybiBjaXBoZXIuZGVjcnlwdChlbmNyeXB0ZWRLZXksIHBhc3N3b3JkKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltcG9ydGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJiYXNlNjQiLCJjaXBoZXJzIiwiaW1wb3J0ZXIiLCJwcml2YXRlS2V5IiwicGFzc3dvcmQiLCJlbmNyeXB0ZWRLZXkiLCJkZWNvZGUiLCJjaXBoZXIiLCJjcmVhdGUiLCJkZWNyeXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/importer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/index.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateEphemeralKeyPair: () => (/* reexport safe */ _ephemeral_keys_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   generateKeyPairFromSeed: () => (/* binding */ generateKeyPairFromSeed),\n/* harmony export */   importKey: () => (/* binding */ importKey),\n/* harmony export */   keyStretcher: () => (/* reexport safe */ _key_stretcher_js__WEBPACK_IMPORTED_MODULE_7__.keyStretcher),\n/* harmony export */   keysPBM: () => (/* reexport module object */ _keys_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   marshalPrivateKey: () => (/* binding */ marshalPrivateKey),\n/* harmony export */   marshalPublicKey: () => (/* binding */ marshalPublicKey),\n/* harmony export */   supportedKeys: () => (/* binding */ supportedKeys),\n/* harmony export */   unmarshalPrivateKey: () => (/* binding */ unmarshalPrivateKey),\n/* harmony export */   unmarshalPublicKey: () => (/* binding */ unmarshalPublicKey)\n/* harmony export */ });\n/* harmony import */ var node_forge_lib_asn1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-forge/lib/asn1.js */ \"(ssr)/./node_modules/node-forge/lib/asn1.js\");\n/* harmony import */ var node_forge_lib_pbe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-forge/lib/pbe.js */ \"(ssr)/./node_modules/node-forge/lib/pbe.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-forge/lib/forge.js */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ed25519-class.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js\");\n/* harmony import */ var _ephemeral_keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ephemeral-keys.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js\");\n/* harmony import */ var _importer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./importer.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/importer.js\");\n/* harmony import */ var _key_stretcher_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./key-stretcher.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n/* harmony import */ var _rsa_class_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rsa-class.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js\");\n/* harmony import */ var _secp256k1_class_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./secp256k1-class.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js\");\n/**\n * @packageDocumentation\n *\n * **Supported Key Types**\n *\n * The {@link generateKeyPair}, {@link marshalPublicKey}, and {@link marshalPrivateKey} functions accept a string `type` argument.\n *\n * Currently the `'RSA'`, `'ed25519'`, and `secp256k1` types are supported, although ed25519 and secp256k1 keys support only signing and verification of messages.\n *\n * For encryption / decryption support, RSA keys should be used.\n */ \n\n\n// @ts-expect-error types are missing\n\n\n\n\n\n\n\n\n\n\n\n\nconst supportedKeys = {\n    rsa: _rsa_class_js__WEBPACK_IMPORTED_MODULE_9__,\n    ed25519: _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__,\n    secp256k1: _secp256k1_class_js__WEBPACK_IMPORTED_MODULE_10__\n};\nfunction unsupportedKey(type) {\n    const supported = Object.keys(supportedKeys).join(\" / \");\n    return new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError(`invalid or unsupported key type ${type}. Must be ${supported}`, \"ERR_UNSUPPORTED_KEY_TYPE\");\n}\nfunction typeToKey(type) {\n    type = type.toLowerCase();\n    if (type === \"rsa\" || type === \"ed25519\" || type === \"secp256k1\") {\n        return supportedKeys[type];\n    }\n    throw unsupportedKey(type);\n}\n/**\n * Generates a keypair of the given type and bitsize\n *\n * @param type\n * @param bits -  Minimum of 1024\n */ async function generateKeyPair(type, bits) {\n    return typeToKey(type).generateKeyPair(bits ?? 2048);\n}\n/**\n * Generates a keypair of the given type and bitsize.\n *\n * Seed is a 32 byte uint8array\n */ async function generateKeyPairFromSeed(type, seed, bits) {\n    if (type.toLowerCase() !== \"ed25519\") {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError(\"Seed key derivation is unimplemented for RSA or secp256k1\", \"ERR_UNSUPPORTED_KEY_DERIVATION_TYPE\");\n    }\n    return _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__.generateKeyPairFromSeed(seed);\n}\n/**\n * Converts a protobuf serialized public key into its representative object\n */ function unmarshalPublicKey(buf) {\n    const decoded = _keys_js__WEBPACK_IMPORTED_MODULE_8__.PublicKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch(decoded.Type){\n        case _keys_js__WEBPACK_IMPORTED_MODULE_8__.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_8__.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_8__.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? \"unknown\");\n    }\n}\n/**\n * Converts a public key object into a protobuf serialized public key\n */ function marshalPublicKey(key, type) {\n    type = (type ?? \"rsa\").toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n/**\n * Converts a protobuf serialized private key into its representative object\n */ async function unmarshalPrivateKey(buf) {\n    const decoded = _keys_js__WEBPACK_IMPORTED_MODULE_8__.PrivateKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch(decoded.Type){\n        case _keys_js__WEBPACK_IMPORTED_MODULE_8__.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_8__.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_8__.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? \"RSA\");\n    }\n}\n/**\n * Converts a private key object into a protobuf serialized private key\n */ function marshalPrivateKey(key, type) {\n    type = (type ?? \"rsa\").toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n/**\n * Converts an exported private key into its representative object.\n *\n * Supported formats are 'pem' (RSA only) and 'libp2p-key'.\n */ async function importKey(encryptedKey, password) {\n    try {\n        const key = await (0,_importer_js__WEBPACK_IMPORTED_MODULE_6__.importer)(encryptedKey, password);\n        return await unmarshalPrivateKey(key);\n    } catch (_) {\n    // Ignore and try the old pem decrypt\n    }\n    // Only rsa supports pem right now\n    const key = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.pki.decryptRsaPrivateKey(encryptedKey, password);\n    if (key === null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError(\"Cannot read the key, most likely the password is wrong or not a RSA key\", \"ERR_CANNOT_DECRYPT_PEM\");\n    }\n    let der = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.asn1.toDer(node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.pki.privateKeyToAsn1(key));\n    der = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(der.getBytes(), \"ascii\");\n    return supportedKeys.rsa.unmarshalRsaPrivateKey(der);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyStretcher: () => (/* binding */ keyStretcher)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var _hmac_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../hmac/index.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/hmac/index.js\");\n\n\n\n\nconst cipherMap = {\n    \"AES-128\": {\n        ivSize: 16,\n        keySize: 16\n    },\n    \"AES-256\": {\n        ivSize: 16,\n        keySize: 32\n    },\n    Blowfish: {\n        ivSize: 8,\n        keySize: 32\n    }\n};\n/**\n * Generates a set of keys for each party by stretching the shared key.\n * (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)\n */ async function keyStretcher(cipherType, hash, secret) {\n    const cipher = cipherMap[cipherType];\n    if (cipher == null) {\n        const allowed = Object.keys(cipherMap).join(\" / \");\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`unknown cipher type '${cipherType}'. Must be ${allowed}`, \"ERR_INVALID_CIPHER_TYPE\");\n    }\n    if (hash == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(\"missing hash type\", \"ERR_MISSING_HASH_TYPE\");\n    }\n    const cipherKeySize = cipher.keySize;\n    const ivSize = cipher.ivSize;\n    const hmacKeySize = 20;\n    const seed = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(\"key expansion\");\n    const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);\n    const m = await _hmac_index_js__WEBPACK_IMPORTED_MODULE_2__.create(hash, secret);\n    let a = await m.digest(seed);\n    const result = [];\n    let j = 0;\n    while(j < resultLength){\n        const b = await m.digest((0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([\n            a,\n            seed\n        ]));\n        let todo = b.length;\n        if (j + todo > resultLength) {\n            todo = resultLength - j;\n        }\n        result.push(b);\n        j += todo;\n        a = await m.digest(a);\n    }\n    const half = resultLength / 2;\n    const resultBuffer = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(result);\n    const r1 = resultBuffer.subarray(0, half);\n    const r2 = resultBuffer.subarray(half, resultLength);\n    const createKey = (res)=>({\n            iv: res.subarray(0, ivSize),\n            cipherKey: res.subarray(ivSize, ivSize + cipherKeySize),\n            macKey: res.subarray(ivSize + cipherKeySize)\n        });\n    return {\n        k1: createKey(r1),\n        k2: createKey(r2)\n    };\n} //# sourceMappingURL=key-stretcher.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMva2V5LXN0cmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QztBQUNrQjtBQUNhO0FBQ3BDO0FBQ3pDLE1BQU1NLFlBQVk7SUFDZCxXQUFXO1FBQ1BDLFFBQVE7UUFDUkMsU0FBUztJQUNiO0lBQ0EsV0FBVztRQUNQRCxRQUFRO1FBQ1JDLFNBQVM7SUFDYjtJQUNBQyxVQUFVO1FBQ05GLFFBQVE7UUFDUkMsU0FBUztJQUNiO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxlQUFlRSxhQUFhQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsTUFBTTtJQUN2RCxNQUFNQyxTQUFTUixTQUFTLENBQUNLLFdBQVc7SUFDcEMsSUFBSUcsVUFBVSxNQUFNO1FBQ2hCLE1BQU1DLFVBQVVDLE9BQU9DLElBQUksQ0FBQ1gsV0FBV1ksSUFBSSxDQUFDO1FBQzVDLE1BQU0sSUFBSWxCLHdEQUFTQSxDQUFDLENBQUMscUJBQXFCLEVBQUVXLFdBQVcsV0FBVyxFQUFFSSxRQUFRLENBQUMsRUFBRTtJQUNuRjtJQUNBLElBQUlILFFBQVEsTUFBTTtRQUNkLE1BQU0sSUFBSVosd0RBQVNBLENBQUMscUJBQXFCO0lBQzdDO0lBQ0EsTUFBTW1CLGdCQUFnQkwsT0FBT04sT0FBTztJQUNwQyxNQUFNRCxTQUFTTyxPQUFPUCxNQUFNO0lBQzVCLE1BQU1hLGNBQWM7SUFDcEIsTUFBTUMsT0FBT2pCLG1FQUFvQkEsQ0FBQztJQUNsQyxNQUFNa0IsZUFBZSxJQUFLZixDQUFBQSxTQUFTWSxnQkFBZ0JDLFdBQVU7SUFDN0QsTUFBTUcsSUFBSSxNQUFNbEIsa0RBQVcsQ0FBQ08sTUFBTUM7SUFDbEMsSUFBSVksSUFBSSxNQUFNRixFQUFFRyxNQUFNLENBQUNMO0lBQ3ZCLE1BQU1NLFNBQVMsRUFBRTtJQUNqQixJQUFJQyxJQUFJO0lBQ1IsTUFBT0EsSUFBSU4sYUFBYztRQUNyQixNQUFNTyxJQUFJLE1BQU1OLEVBQUVHLE1BQU0sQ0FBQ3hCLDBEQUFnQkEsQ0FBQztZQUFDdUI7WUFBR0o7U0FBSztRQUNuRCxJQUFJUyxPQUFPRCxFQUFFRSxNQUFNO1FBQ25CLElBQUlILElBQUlFLE9BQU9SLGNBQWM7WUFDekJRLE9BQU9SLGVBQWVNO1FBQzFCO1FBQ0FELE9BQU9LLElBQUksQ0FBQ0g7UUFDWkQsS0FBS0U7UUFDTEwsSUFBSSxNQUFNRixFQUFFRyxNQUFNLENBQUNEO0lBQ3ZCO0lBQ0EsTUFBTVEsT0FBT1gsZUFBZTtJQUM1QixNQUFNWSxlQUFlaEMsMERBQWdCQSxDQUFDeUI7SUFDdEMsTUFBTVEsS0FBS0QsYUFBYUUsUUFBUSxDQUFDLEdBQUdIO0lBQ3BDLE1BQU1JLEtBQUtILGFBQWFFLFFBQVEsQ0FBQ0gsTUFBTVg7SUFDdkMsTUFBTWdCLFlBQVksQ0FBQ0MsTUFBUztZQUN4QkMsSUFBSUQsSUFBSUgsUUFBUSxDQUFDLEdBQUc3QjtZQUNwQmtDLFdBQVdGLElBQUlILFFBQVEsQ0FBQzdCLFFBQVFBLFNBQVNZO1lBQ3pDdUIsUUFBUUgsSUFBSUgsUUFBUSxDQUFDN0IsU0FBU1k7UUFDbEM7SUFDQSxPQUFPO1FBQ0h3QixJQUFJTCxVQUFVSDtRQUNkUyxJQUFJTixVQUFVRDtJQUNsQjtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMva2V5LXN0cmV0Y2hlci5qcz8zMmI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvZGVFcnJvciB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmltcG9ydCB7IGNvbmNhdCBhcyB1aW50OEFycmF5Q29uY2F0IH0gZnJvbSAndWludDhhcnJheXMvY29uY2F0JztcbmltcG9ydCB7IGZyb21TdHJpbmcgYXMgdWludDhBcnJheUZyb21TdHJpbmcgfSBmcm9tICd1aW50OGFycmF5cy9mcm9tLXN0cmluZyc7XG5pbXBvcnQgKiBhcyBobWFjIGZyb20gJy4uL2htYWMvaW5kZXguanMnO1xuY29uc3QgY2lwaGVyTWFwID0ge1xuICAgICdBRVMtMTI4Jzoge1xuICAgICAgICBpdlNpemU6IDE2LFxuICAgICAgICBrZXlTaXplOiAxNlxuICAgIH0sXG4gICAgJ0FFUy0yNTYnOiB7XG4gICAgICAgIGl2U2l6ZTogMTYsXG4gICAgICAgIGtleVNpemU6IDMyXG4gICAgfSxcbiAgICBCbG93ZmlzaDoge1xuICAgICAgICBpdlNpemU6IDgsXG4gICAgICAgIGtleVNpemU6IDMyXG4gICAgfVxufTtcbi8qKlxuICogR2VuZXJhdGVzIGEgc2V0IG9mIGtleXMgZm9yIGVhY2ggcGFydHkgYnkgc3RyZXRjaGluZyB0aGUgc2hhcmVkIGtleS5cbiAqIChteUlWLCB0aGVpcklWLCBteUNpcGhlcktleSwgdGhlaXJDaXBoZXJLZXksIG15TUFDS2V5LCB0aGVpck1BQ0tleSlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGtleVN0cmV0Y2hlcihjaXBoZXJUeXBlLCBoYXNoLCBzZWNyZXQpIHtcbiAgICBjb25zdCBjaXBoZXIgPSBjaXBoZXJNYXBbY2lwaGVyVHlwZV07XG4gICAgaWYgKGNpcGhlciA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGFsbG93ZWQgPSBPYmplY3Qua2V5cyhjaXBoZXJNYXApLmpvaW4oJyAvICcpO1xuICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKGB1bmtub3duIGNpcGhlciB0eXBlICcke2NpcGhlclR5cGV9Jy4gTXVzdCBiZSAke2FsbG93ZWR9YCwgJ0VSUl9JTlZBTElEX0NJUEhFUl9UWVBFJyk7XG4gICAgfVxuICAgIGlmIChoYXNoID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignbWlzc2luZyBoYXNoIHR5cGUnLCAnRVJSX01JU1NJTkdfSEFTSF9UWVBFJyk7XG4gICAgfVxuICAgIGNvbnN0IGNpcGhlcktleVNpemUgPSBjaXBoZXIua2V5U2l6ZTtcbiAgICBjb25zdCBpdlNpemUgPSBjaXBoZXIuaXZTaXplO1xuICAgIGNvbnN0IGhtYWNLZXlTaXplID0gMjA7XG4gICAgY29uc3Qgc2VlZCA9IHVpbnQ4QXJyYXlGcm9tU3RyaW5nKCdrZXkgZXhwYW5zaW9uJyk7XG4gICAgY29uc3QgcmVzdWx0TGVuZ3RoID0gMiAqIChpdlNpemUgKyBjaXBoZXJLZXlTaXplICsgaG1hY0tleVNpemUpO1xuICAgIGNvbnN0IG0gPSBhd2FpdCBobWFjLmNyZWF0ZShoYXNoLCBzZWNyZXQpO1xuICAgIGxldCBhID0gYXdhaXQgbS5kaWdlc3Qoc2VlZCk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGogPSAwO1xuICAgIHdoaWxlIChqIDwgcmVzdWx0TGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGIgPSBhd2FpdCBtLmRpZ2VzdCh1aW50OEFycmF5Q29uY2F0KFthLCBzZWVkXSkpO1xuICAgICAgICBsZXQgdG9kbyA9IGIubGVuZ3RoO1xuICAgICAgICBpZiAoaiArIHRvZG8gPiByZXN1bHRMZW5ndGgpIHtcbiAgICAgICAgICAgIHRvZG8gPSByZXN1bHRMZW5ndGggLSBqO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKGIpO1xuICAgICAgICBqICs9IHRvZG87XG4gICAgICAgIGEgPSBhd2FpdCBtLmRpZ2VzdChhKTtcbiAgICB9XG4gICAgY29uc3QgaGFsZiA9IHJlc3VsdExlbmd0aCAvIDI7XG4gICAgY29uc3QgcmVzdWx0QnVmZmVyID0gdWludDhBcnJheUNvbmNhdChyZXN1bHQpO1xuICAgIGNvbnN0IHIxID0gcmVzdWx0QnVmZmVyLnN1YmFycmF5KDAsIGhhbGYpO1xuICAgIGNvbnN0IHIyID0gcmVzdWx0QnVmZmVyLnN1YmFycmF5KGhhbGYsIHJlc3VsdExlbmd0aCk7XG4gICAgY29uc3QgY3JlYXRlS2V5ID0gKHJlcykgPT4gKHtcbiAgICAgICAgaXY6IHJlcy5zdWJhcnJheSgwLCBpdlNpemUpLFxuICAgICAgICBjaXBoZXJLZXk6IHJlcy5zdWJhcnJheShpdlNpemUsIGl2U2l6ZSArIGNpcGhlcktleVNpemUpLFxuICAgICAgICBtYWNLZXk6IHJlcy5zdWJhcnJheShpdlNpemUgKyBjaXBoZXJLZXlTaXplKVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGsxOiBjcmVhdGVLZXkocjEpLFxuICAgICAgICBrMjogY3JlYXRlS2V5KHIyKVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXktc3RyZXRjaGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJDb2RlRXJyb3IiLCJjb25jYXQiLCJ1aW50OEFycmF5Q29uY2F0IiwiZnJvbVN0cmluZyIsInVpbnQ4QXJyYXlGcm9tU3RyaW5nIiwiaG1hYyIsImNpcGhlck1hcCIsIml2U2l6ZSIsImtleVNpemUiLCJCbG93ZmlzaCIsImtleVN0cmV0Y2hlciIsImNpcGhlclR5cGUiLCJoYXNoIiwic2VjcmV0IiwiY2lwaGVyIiwiYWxsb3dlZCIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiY2lwaGVyS2V5U2l6ZSIsImhtYWNLZXlTaXplIiwic2VlZCIsInJlc3VsdExlbmd0aCIsIm0iLCJjcmVhdGUiLCJhIiwiZGlnZXN0IiwicmVzdWx0IiwiaiIsImIiLCJ0b2RvIiwibGVuZ3RoIiwicHVzaCIsImhhbGYiLCJyZXN1bHRCdWZmZXIiLCJyMSIsInN1YmFycmF5IiwicjIiLCJjcmVhdGVLZXkiLCJyZXMiLCJpdiIsImNpcGhlcktleSIsIm1hY0tleSIsImsxIiwiazIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyType: () => (/* binding */ KeyType),\n/* harmony export */   PrivateKey: () => (/* binding */ PrivateKey),\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"(ssr)/./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */ /* eslint-disable complexity */ /* eslint-disable @typescript-eslint/no-namespace */ /* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */ /* eslint-disable @typescript-eslint/no-empty-interface */ \nvar KeyType;\n(function(KeyType) {\n    KeyType[\"RSA\"] = \"RSA\";\n    KeyType[\"Ed25519\"] = \"Ed25519\";\n    KeyType[\"Secp256k1\"] = \"Secp256k1\";\n})(KeyType || (KeyType = {}));\nvar __KeyTypeValues;\n(function(__KeyTypeValues) {\n    __KeyTypeValues[__KeyTypeValues[\"RSA\"] = 0] = \"RSA\";\n    __KeyTypeValues[__KeyTypeValues[\"Ed25519\"] = 1] = \"Ed25519\";\n    __KeyTypeValues[__KeyTypeValues[\"Secp256k1\"] = 2] = \"Secp256k1\";\n})(__KeyTypeValues || (__KeyTypeValues = {}));\n(function(KeyType) {\n    KeyType.codec = ()=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__KeyTypeValues);\n    };\n})(KeyType || (KeyType = {}));\nvar PublicKey;\n(function(PublicKey) {\n    let _codec;\n    PublicKey.codec = ()=>{\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length)=>{\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while(reader.pos < end){\n                    const tag = reader.uint32();\n                    switch(tag >>> 3){\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PublicKey.encode = (obj)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PublicKey.codec());\n    };\n    PublicKey.decode = (buf)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PublicKey.codec());\n    };\n})(PublicKey || (PublicKey = {}));\nvar PrivateKey;\n(function(PrivateKey) {\n    let _codec;\n    PrivateKey.codec = ()=>{\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {})=>{\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length)=>{\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while(reader.pos < end){\n                    const tag = reader.uint32();\n                    switch(tag >>> 3){\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PrivateKey.encode = (obj)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PrivateKey.codec());\n    };\n    PrivateKey.decode = (buf)=>{\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PrivateKey.codec());\n    };\n})(PrivateKey || (PrivateKey = {})); //# sourceMappingURL=keys.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMva2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsZ0NBQWdDLEdBQ2hDLDZCQUE2QixHQUM3QixrREFBa0QsR0FDbEQsNEVBQTRFLEdBQzVFLHdEQUF3RCxHQUM2QjtBQUM5RSxJQUFJSSxRQUFRO0FBQ2xCLFVBQVVBLE9BQU87SUFDZEEsT0FBTyxDQUFDLE1BQU0sR0FBRztJQUNqQkEsT0FBTyxDQUFDLFVBQVUsR0FBRztJQUNyQkEsT0FBTyxDQUFDLFlBQVksR0FBRztBQUMzQixHQUFHQSxXQUFZQSxDQUFBQSxVQUFVLENBQUM7QUFDMUIsSUFBSUM7QUFDSCxVQUFVQSxlQUFlO0lBQ3RCQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ2xEQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0FBQ3hELEdBQUdBLG1CQUFvQkEsQ0FBQUEsa0JBQWtCLENBQUM7QUFDekMsVUFBVUQsT0FBTztJQUNkQSxRQUFRRSxLQUFLLEdBQUc7UUFDWixPQUFPTiw0REFBV0EsQ0FBQ0s7SUFDdkI7QUFDSixHQUFHRCxXQUFZQSxDQUFBQSxVQUFVLENBQUM7QUFDbkIsSUFBSUcsVUFBVTtBQUNwQixVQUFVQSxTQUFTO0lBQ2hCLElBQUlDO0lBQ0pELFVBQVVELEtBQUssR0FBRztRQUNkLElBQUlFLFVBQVUsTUFBTTtZQUNoQkEsU0FBU0wsd0RBQU9BLENBQUMsQ0FBQ00sS0FBS0MsR0FBR0MsT0FBTyxDQUFDLENBQUM7Z0JBQy9CLElBQUlBLEtBQUtDLGVBQWUsS0FBSyxPQUFPO29CQUNoQ0YsRUFBRUcsSUFBSTtnQkFDVjtnQkFDQSxJQUFJSixJQUFJSyxJQUFJLElBQUksTUFBTTtvQkFDbEJKLEVBQUVLLE1BQU0sQ0FBQztvQkFDVFgsUUFBUUUsS0FBSyxHQUFHVSxNQUFNLENBQUNQLElBQUlLLElBQUksRUFBRUo7Z0JBQ3JDO2dCQUNBLElBQUlELElBQUlRLElBQUksSUFBSSxNQUFNO29CQUNsQlAsRUFBRUssTUFBTSxDQUFDO29CQUNUTCxFQUFFUSxLQUFLLENBQUNULElBQUlRLElBQUk7Z0JBQ3BCO2dCQUNBLElBQUlOLEtBQUtDLGVBQWUsS0FBSyxPQUFPO29CQUNoQ0YsRUFBRVMsTUFBTTtnQkFDWjtZQUNKLEdBQUcsQ0FBQ0MsUUFBUUM7Z0JBQ1IsTUFBTVosTUFBTSxDQUFDO2dCQUNiLE1BQU1hLE1BQU1ELFVBQVUsT0FBT0QsT0FBT0csR0FBRyxHQUFHSCxPQUFPSSxHQUFHLEdBQUdIO2dCQUN2RCxNQUFPRCxPQUFPSSxHQUFHLEdBQUdGLElBQUs7b0JBQ3JCLE1BQU1HLE1BQU1MLE9BQU9MLE1BQU07b0JBQ3pCLE9BQVFVLFFBQVE7d0JBQ1osS0FBSzs0QkFDRGhCLElBQUlLLElBQUksR0FBR1YsUUFBUUUsS0FBSyxHQUFHb0IsTUFBTSxDQUFDTjs0QkFDbEM7d0JBQ0osS0FBSzs0QkFDRFgsSUFBSVEsSUFBSSxHQUFHRyxPQUFPRixLQUFLOzRCQUN2Qjt3QkFDSjs0QkFDSUUsT0FBT08sUUFBUSxDQUFDRixNQUFNOzRCQUN0QjtvQkFDUjtnQkFDSjtnQkFDQSxPQUFPaEI7WUFDWDtRQUNKO1FBQ0EsT0FBT0Q7SUFDWDtJQUNBRCxVQUFVUyxNQUFNLEdBQUcsQ0FBQ1A7UUFDaEIsT0FBT1IsOERBQWFBLENBQUNRLEtBQUtGLFVBQVVELEtBQUs7SUFDN0M7SUFDQUMsVUFBVW1CLE1BQU0sR0FBRyxDQUFDRTtRQUNoQixPQUFPMUIsOERBQWFBLENBQUMwQixLQUFLckIsVUFBVUQsS0FBSztJQUM3QztBQUNKLEdBQUdDLGFBQWNBLENBQUFBLFlBQVksQ0FBQztBQUN2QixJQUFJc0IsV0FBVztBQUNyQixVQUFVQSxVQUFVO0lBQ2pCLElBQUlyQjtJQUNKcUIsV0FBV3ZCLEtBQUssR0FBRztRQUNmLElBQUlFLFVBQVUsTUFBTTtZQUNoQkEsU0FBU0wsd0RBQU9BLENBQUMsQ0FBQ00sS0FBS0MsR0FBR0MsT0FBTyxDQUFDLENBQUM7Z0JBQy9CLElBQUlBLEtBQUtDLGVBQWUsS0FBSyxPQUFPO29CQUNoQ0YsRUFBRUcsSUFBSTtnQkFDVjtnQkFDQSxJQUFJSixJQUFJSyxJQUFJLElBQUksTUFBTTtvQkFDbEJKLEVBQUVLLE1BQU0sQ0FBQztvQkFDVFgsUUFBUUUsS0FBSyxHQUFHVSxNQUFNLENBQUNQLElBQUlLLElBQUksRUFBRUo7Z0JBQ3JDO2dCQUNBLElBQUlELElBQUlRLElBQUksSUFBSSxNQUFNO29CQUNsQlAsRUFBRUssTUFBTSxDQUFDO29CQUNUTCxFQUFFUSxLQUFLLENBQUNULElBQUlRLElBQUk7Z0JBQ3BCO2dCQUNBLElBQUlOLEtBQUtDLGVBQWUsS0FBSyxPQUFPO29CQUNoQ0YsRUFBRVMsTUFBTTtnQkFDWjtZQUNKLEdBQUcsQ0FBQ0MsUUFBUUM7Z0JBQ1IsTUFBTVosTUFBTSxDQUFDO2dCQUNiLE1BQU1hLE1BQU1ELFVBQVUsT0FBT0QsT0FBT0csR0FBRyxHQUFHSCxPQUFPSSxHQUFHLEdBQUdIO2dCQUN2RCxNQUFPRCxPQUFPSSxHQUFHLEdBQUdGLElBQUs7b0JBQ3JCLE1BQU1HLE1BQU1MLE9BQU9MLE1BQU07b0JBQ3pCLE9BQVFVLFFBQVE7d0JBQ1osS0FBSzs0QkFDRGhCLElBQUlLLElBQUksR0FBR1YsUUFBUUUsS0FBSyxHQUFHb0IsTUFBTSxDQUFDTjs0QkFDbEM7d0JBQ0osS0FBSzs0QkFDRFgsSUFBSVEsSUFBSSxHQUFHRyxPQUFPRixLQUFLOzRCQUN2Qjt3QkFDSjs0QkFDSUUsT0FBT08sUUFBUSxDQUFDRixNQUFNOzRCQUN0QjtvQkFDUjtnQkFDSjtnQkFDQSxPQUFPaEI7WUFDWDtRQUNKO1FBQ0EsT0FBT0Q7SUFDWDtJQUNBcUIsV0FBV2IsTUFBTSxHQUFHLENBQUNQO1FBQ2pCLE9BQU9SLDhEQUFhQSxDQUFDUSxLQUFLb0IsV0FBV3ZCLEtBQUs7SUFDOUM7SUFDQXVCLFdBQVdILE1BQU0sR0FBRyxDQUFDRTtRQUNqQixPQUFPMUIsOERBQWFBLENBQUMwQixLQUFLQyxXQUFXdkIsS0FBSztJQUM5QztBQUNKLEdBQUd1QixjQUFlQSxDQUFBQSxhQUFhLENBQUMsS0FDaEMsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMva2V5cy5qcz8wN2Y0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9leHBvcnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2UgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1ib29sZWFuLWxpdGVyYWwtY29tcGFyZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWludGVyZmFjZSAqL1xuaW1wb3J0IHsgZW51bWVyYXRpb24sIGVuY29kZU1lc3NhZ2UsIGRlY29kZU1lc3NhZ2UsIG1lc3NhZ2UgfSBmcm9tICdwcm90b25zLXJ1bnRpbWUnO1xuZXhwb3J0IHZhciBLZXlUeXBlO1xuKGZ1bmN0aW9uIChLZXlUeXBlKSB7XG4gICAgS2V5VHlwZVtcIlJTQVwiXSA9IFwiUlNBXCI7XG4gICAgS2V5VHlwZVtcIkVkMjU1MTlcIl0gPSBcIkVkMjU1MTlcIjtcbiAgICBLZXlUeXBlW1wiU2VjcDI1NmsxXCJdID0gXCJTZWNwMjU2azFcIjtcbn0pKEtleVR5cGUgfHwgKEtleVR5cGUgPSB7fSkpO1xudmFyIF9fS2V5VHlwZVZhbHVlcztcbihmdW5jdGlvbiAoX19LZXlUeXBlVmFsdWVzKSB7XG4gICAgX19LZXlUeXBlVmFsdWVzW19fS2V5VHlwZVZhbHVlc1tcIlJTQVwiXSA9IDBdID0gXCJSU0FcIjtcbiAgICBfX0tleVR5cGVWYWx1ZXNbX19LZXlUeXBlVmFsdWVzW1wiRWQyNTUxOVwiXSA9IDFdID0gXCJFZDI1NTE5XCI7XG4gICAgX19LZXlUeXBlVmFsdWVzW19fS2V5VHlwZVZhbHVlc1tcIlNlY3AyNTZrMVwiXSA9IDJdID0gXCJTZWNwMjU2azFcIjtcbn0pKF9fS2V5VHlwZVZhbHVlcyB8fCAoX19LZXlUeXBlVmFsdWVzID0ge30pKTtcbihmdW5jdGlvbiAoS2V5VHlwZSkge1xuICAgIEtleVR5cGUuY29kZWMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBlbnVtZXJhdGlvbihfX0tleVR5cGVWYWx1ZXMpO1xuICAgIH07XG59KShLZXlUeXBlIHx8IChLZXlUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgUHVibGljS2V5O1xuKGZ1bmN0aW9uIChQdWJsaWNLZXkpIHtcbiAgICBsZXQgX2NvZGVjO1xuICAgIFB1YmxpY0tleS5jb2RlYyA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9jb2RlYyA9PSBudWxsKSB7XG4gICAgICAgICAgICBfY29kZWMgPSBtZXNzYWdlKChvYmosIHcsIG9wdHMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmxlbmd0aERlbGltaXRlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdy5mb3JrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvYmouVHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgpO1xuICAgICAgICAgICAgICAgICAgICBLZXlUeXBlLmNvZGVjKCkuZW5jb2RlKG9iai5UeXBlLCB3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9iai5EYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTgpO1xuICAgICAgICAgICAgICAgICAgICB3LmJ5dGVzKG9iai5EYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubGVuZ3RoRGVsaW1pdGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIChyZWFkZXIsIGxlbmd0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxlbmd0aCA9PSBudWxsID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5UeXBlID0gS2V5VHlwZS5jb2RlYygpLmRlY29kZShyZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5EYXRhID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9jb2RlYztcbiAgICB9O1xuICAgIFB1YmxpY0tleS5lbmNvZGUgPSAob2JqKSA9PiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVNZXNzYWdlKG9iaiwgUHVibGljS2V5LmNvZGVjKCkpO1xuICAgIH07XG4gICAgUHVibGljS2V5LmRlY29kZSA9IChidWYpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZU1lc3NhZ2UoYnVmLCBQdWJsaWNLZXkuY29kZWMoKSk7XG4gICAgfTtcbn0pKFB1YmxpY0tleSB8fCAoUHVibGljS2V5ID0ge30pKTtcbmV4cG9ydCB2YXIgUHJpdmF0ZUtleTtcbihmdW5jdGlvbiAoUHJpdmF0ZUtleSkge1xuICAgIGxldCBfY29kZWM7XG4gICAgUHJpdmF0ZUtleS5jb2RlYyA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9jb2RlYyA9PSBudWxsKSB7XG4gICAgICAgICAgICBfY29kZWMgPSBtZXNzYWdlKChvYmosIHcsIG9wdHMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLmxlbmd0aERlbGltaXRlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdy5mb3JrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvYmouVHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgpO1xuICAgICAgICAgICAgICAgICAgICBLZXlUeXBlLmNvZGVjKCkuZW5jb2RlKG9iai5UeXBlLCB3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9iai5EYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTgpO1xuICAgICAgICAgICAgICAgICAgICB3LmJ5dGVzKG9iai5EYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubGVuZ3RoRGVsaW1pdGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIChyZWFkZXIsIGxlbmd0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxlbmd0aCA9PSBudWxsID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5UeXBlID0gS2V5VHlwZS5jb2RlYygpLmRlY29kZShyZWFkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5EYXRhID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9jb2RlYztcbiAgICB9O1xuICAgIFByaXZhdGVLZXkuZW5jb2RlID0gKG9iaikgPT4ge1xuICAgICAgICByZXR1cm4gZW5jb2RlTWVzc2FnZShvYmosIFByaXZhdGVLZXkuY29kZWMoKSk7XG4gICAgfTtcbiAgICBQcml2YXRlS2V5LmRlY29kZSA9IChidWYpID0+IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZU1lc3NhZ2UoYnVmLCBQcml2YXRlS2V5LmNvZGVjKCkpO1xuICAgIH07XG59KShQcml2YXRlS2V5IHx8IChQcml2YXRlS2V5ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleXMuanMubWFwIl0sIm5hbWVzIjpbImVudW1lcmF0aW9uIiwiZW5jb2RlTWVzc2FnZSIsImRlY29kZU1lc3NhZ2UiLCJtZXNzYWdlIiwiS2V5VHlwZSIsIl9fS2V5VHlwZVZhbHVlcyIsImNvZGVjIiwiUHVibGljS2V5IiwiX2NvZGVjIiwib2JqIiwidyIsIm9wdHMiLCJsZW5ndGhEZWxpbWl0ZWQiLCJmb3JrIiwiVHlwZSIsInVpbnQzMiIsImVuY29kZSIsIkRhdGEiLCJieXRlcyIsImxkZWxpbSIsInJlYWRlciIsImxlbmd0aCIsImVuZCIsImxlbiIsInBvcyIsInRhZyIsImRlY29kZSIsInNraXBUeXBlIiwiYnVmIiwiUHJpdmF0ZUtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_KEY_SIZE: () => (/* binding */ MAX_KEY_SIZE),\n/* harmony export */   RsaPrivateKey: () => (/* binding */ RsaPrivateKey),\n/* harmony export */   RsaPublicKey: () => (/* binding */ RsaPublicKey),\n/* harmony export */   fromJwk: () => (/* binding */ fromJwk),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   unmarshalRsaPrivateKey: () => (/* binding */ unmarshalRsaPrivateKey),\n/* harmony export */   unmarshalRsaPublicKey: () => (/* binding */ unmarshalRsaPublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"(ssr)/./node_modules/multiformats/dist/src/hashes/sha2.js\");\n/* harmony import */ var node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-forge/lib/forge.js */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var node_forge_lib_sha512_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node-forge/lib/sha512.js */ \"(ssr)/./node_modules/node-forge/lib/sha512.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _exporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./exporter.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/exporter.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n/* harmony import */ var _rsa_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rsa.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa.js\");\n\n\n// @ts-expect-error types are missing\n\n\n\n\n\n\n\n\nconst MAX_KEY_SIZE = 8192;\nclass RsaPublicKey {\n    constructor(key){\n        this._key = key;\n    }\n    verify(data, sig) {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.utils.jwkToPkix(this._key);\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_7__.PublicKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_7__.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    encrypt(bytes) {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.encrypt(this._key, bytes);\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_5__.isPromise)(p)) {\n            return p.then(({ bytes })=>bytes);\n        }\n        return p.bytes;\n    }\n}\nclass RsaPrivateKey {\n    constructor(key, publicKey){\n        this._key = key;\n        this._publicKey = publicKey;\n    }\n    genSecret() {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.getRandomValues(16);\n    }\n    sign(message) {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.hashAndSign(this._key, message);\n    }\n    get public() {\n        if (this._publicKey == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError(\"public key not provided\", \"ERR_PUBKEY_NOT_PROVIDED\");\n        }\n        return new RsaPublicKey(this._publicKey);\n    }\n    decrypt(bytes) {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.decrypt(this._key, bytes);\n    }\n    marshal() {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_8__.utils.jwkToPkcs1(this._key);\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_7__.PrivateKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_7__.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_5__.isPromise)(p)) {\n            return p.then(({ bytes })=>bytes);\n        }\n        return p.bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */ async id() {\n        const hash = await this.public.hash();\n        return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(hash, \"base58btc\");\n    }\n    /**\n     * Exports the key into a password protected PEM format\n     */ async export(password, format = \"pkcs-8\") {\n        if (format === \"pkcs-8\") {\n            const buffer = new node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_1__.util.ByteBuffer(this.marshal());\n            const asn1 = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_1__.asn1.fromDer(buffer);\n            const privateKey = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_1__.pki.privateKeyFromAsn1(asn1);\n            const options = {\n                algorithm: \"aes256\",\n                count: 10000,\n                saltSize: 128 / 8,\n                prfAlgorithm: \"sha512\"\n            };\n            return node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_1__.pki.encryptRsaPrivateKey(privateKey, password, options);\n        } else if (format === \"libp2p-key\") {\n            return (0,_exporter_js__WEBPACK_IMPORTED_MODULE_6__.exporter)(this.bytes, password);\n        } else {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError(`export format '${format}' is not supported`, \"ERR_INVALID_EXPORT_FORMAT\");\n        }\n    }\n}\nasync function unmarshalRsaPrivateKey(bytes) {\n    const jwk = _rsa_js__WEBPACK_IMPORTED_MODULE_8__.utils.pkcs1ToJwk(bytes);\n    if (_rsa_js__WEBPACK_IMPORTED_MODULE_8__.keySize(jwk) > MAX_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError(\"key size is too large\", \"ERR_KEY_SIZE_TOO_LARGE\");\n    }\n    const keys = await _rsa_js__WEBPACK_IMPORTED_MODULE_8__.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nfunction unmarshalRsaPublicKey(bytes) {\n    const jwk = _rsa_js__WEBPACK_IMPORTED_MODULE_8__.utils.pkixToJwk(bytes);\n    if (_rsa_js__WEBPACK_IMPORTED_MODULE_8__.keySize(jwk) > MAX_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError(\"key size is too large\", \"ERR_KEY_SIZE_TOO_LARGE\");\n    }\n    return new RsaPublicKey(jwk);\n}\nasync function fromJwk(jwk) {\n    if (_rsa_js__WEBPACK_IMPORTED_MODULE_8__.keySize(jwk) > MAX_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError(\"key size is too large\", \"ERR_KEY_SIZE_TOO_LARGE\");\n    }\n    const keys = await _rsa_js__WEBPACK_IMPORTED_MODULE_8__.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nasync function generateKeyPair(bits) {\n    if (bits > MAX_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError(\"key size is too large\", \"ERR_KEY_SIZE_TOO_LARGE\");\n    }\n    const keys = await _rsa_js__WEBPACK_IMPORTED_MODULE_8__.generateKey(bits);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n} //# sourceMappingURL=rsa-class.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jwkToPkcs1: () => (/* binding */ jwkToPkcs1),\n/* harmony export */   jwkToPkix: () => (/* binding */ jwkToPkix),\n/* harmony export */   pkcs1ToJwk: () => (/* binding */ pkcs1ToJwk),\n/* harmony export */   pkixToJwk: () => (/* binding */ pkixToJwk)\n/* harmony export */ });\n/* harmony import */ var node_forge_lib_asn1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-forge/lib/asn1.js */ \"(ssr)/./node_modules/node-forge/lib/asn1.js\");\n/* harmony import */ var node_forge_lib_rsa_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-forge/lib/rsa.js */ \"(ssr)/./node_modules/node-forge/lib/rsa.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-forge/lib/forge.js */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../util.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js\");\n\n\n\n// @ts-expect-error types are missing\n\n\n\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nfunction pkcs1ToJwk(bytes) {\n    const asn1 = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.asn1.fromDer((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(bytes, \"ascii\"));\n    const privateKey = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.pki.privateKeyFromAsn1(asn1);\n    // https://tools.ietf.org/html/rfc7518#section-6.3.1\n    return {\n        kty: \"RSA\",\n        n: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.n),\n        e: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.e),\n        d: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.d),\n        p: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.p),\n        q: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.q),\n        dp: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.dP),\n        dq: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.dQ),\n        qi: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(privateKey.qInv),\n        alg: \"RS256\"\n    };\n}\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nfunction jwkToPkcs1(jwk) {\n    if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError(\"JWK was missing components\", \"ERR_INVALID_PARAMETERS\");\n    }\n    const asn1 = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.pki.privateKeyToAsn1({\n        n: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.n),\n        e: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.e),\n        d: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.d),\n        p: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.p),\n        q: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.q),\n        dP: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.dp),\n        dQ: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.dq),\n        qInv: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.qi)\n    });\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.asn1.toDer(asn1).getBytes(), \"ascii\");\n}\n// Convert a PKCIX in ASN1 DER format to a JWK key\nfunction pkixToJwk(bytes) {\n    const asn1 = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.asn1.fromDer((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(bytes, \"ascii\"));\n    const publicKey = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.pki.publicKeyFromAsn1(asn1);\n    return {\n        kty: \"RSA\",\n        n: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(publicKey.n),\n        e: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.bigIntegerToUintBase64url)(publicKey.e)\n    };\n}\n// Convert a JWK key to PKCIX in ASN1 DER format\nfunction jwkToPkix(jwk) {\n    if (jwk.n == null || jwk.e == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError(\"JWK was missing components\", \"ERR_INVALID_PARAMETERS\");\n    }\n    const asn1 = node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.pki.publicKeyToAsn1({\n        n: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.n),\n        e: (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBigInteger)(jwk.e)\n    });\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.asn1.toDer(asn1).getBytes(), \"ascii\");\n} //# sourceMappingURL=rsa-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvcnNhLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWdDO0FBQ0Q7QUFDZTtBQUM5QyxxQ0FBcUM7QUFDTztBQUNpQztBQUNOO0FBQ1M7QUFDaEYsbURBQW1EO0FBQzVDLFNBQVNRLFdBQVdDLEtBQUs7SUFDNUIsTUFBTUMsT0FBT1QseURBQVUsQ0FBQ1UsT0FBTyxDQUFDTiwrREFBa0JBLENBQUNJLE9BQU87SUFDMUQsTUFBTUcsYUFBYVgsd0RBQVMsQ0FBQ2Esa0JBQWtCLENBQUNKO0lBQ2hELG9EQUFvRDtJQUNwRCxPQUFPO1FBQ0hLLEtBQUs7UUFDTEMsR0FBR1YsbUVBQXlCQSxDQUFDTSxXQUFXSSxDQUFDO1FBQ3pDQyxHQUFHWCxtRUFBeUJBLENBQUNNLFdBQVdLLENBQUM7UUFDekNDLEdBQUdaLG1FQUF5QkEsQ0FBQ00sV0FBV00sQ0FBQztRQUN6Q0MsR0FBR2IsbUVBQXlCQSxDQUFDTSxXQUFXTyxDQUFDO1FBQ3pDQyxHQUFHZCxtRUFBeUJBLENBQUNNLFdBQVdRLENBQUM7UUFDekNDLElBQUlmLG1FQUF5QkEsQ0FBQ00sV0FBV1UsRUFBRTtRQUMzQ0MsSUFBSWpCLG1FQUF5QkEsQ0FBQ00sV0FBV1ksRUFBRTtRQUMzQ0MsSUFBSW5CLG1FQUF5QkEsQ0FBQ00sV0FBV2MsSUFBSTtRQUM3Q0MsS0FBSztJQUNUO0FBQ0o7QUFDQSxtREFBbUQ7QUFDNUMsU0FBU0MsV0FBV0MsR0FBRztJQUMxQixJQUFJQSxJQUFJYixDQUFDLElBQUksUUFBUWEsSUFBSVosQ0FBQyxJQUFJLFFBQVFZLElBQUlYLENBQUMsSUFBSSxRQUFRVyxJQUFJVixDQUFDLElBQUksUUFBUVUsSUFBSVQsQ0FBQyxJQUFJLFFBQVFTLElBQUlSLEVBQUUsSUFBSSxRQUFRUSxJQUFJTixFQUFFLElBQUksUUFBUU0sSUFBSUosRUFBRSxJQUFJLE1BQU07UUFDekksTUFBTSxJQUFJekIsd0RBQVNBLENBQUMsOEJBQThCO0lBQ3REO0lBQ0EsTUFBTVUsT0FBT1Qsd0RBQVMsQ0FBQzZCLGdCQUFnQixDQUFDO1FBQ3BDZCxHQUFHVCwrREFBcUJBLENBQUNzQixJQUFJYixDQUFDO1FBQzlCQyxHQUFHViwrREFBcUJBLENBQUNzQixJQUFJWixDQUFDO1FBQzlCQyxHQUFHWCwrREFBcUJBLENBQUNzQixJQUFJWCxDQUFDO1FBQzlCQyxHQUFHWiwrREFBcUJBLENBQUNzQixJQUFJVixDQUFDO1FBQzlCQyxHQUFHYiwrREFBcUJBLENBQUNzQixJQUFJVCxDQUFDO1FBQzlCRSxJQUFJZiwrREFBcUJBLENBQUNzQixJQUFJUixFQUFFO1FBQ2hDRyxJQUFJakIsK0RBQXFCQSxDQUFDc0IsSUFBSU4sRUFBRTtRQUNoQ0csTUFBTW5CLCtEQUFxQkEsQ0FBQ3NCLElBQUlKLEVBQUU7SUFDdEM7SUFDQSxPQUFPdEIsbUVBQW9CQSxDQUFDRix5REFBVSxDQUFDOEIsS0FBSyxDQUFDckIsTUFBTXNCLFFBQVEsSUFBSTtBQUNuRTtBQUNBLGtEQUFrRDtBQUMzQyxTQUFTQyxVQUFVeEIsS0FBSztJQUMzQixNQUFNQyxPQUFPVCx5REFBVSxDQUFDVSxPQUFPLENBQUNOLCtEQUFrQkEsQ0FBQ0ksT0FBTztJQUMxRCxNQUFNeUIsWUFBWWpDLHdEQUFTLENBQUNrQyxpQkFBaUIsQ0FBQ3pCO0lBQzlDLE9BQU87UUFDSEssS0FBSztRQUNMQyxHQUFHVixtRUFBeUJBLENBQUM0QixVQUFVbEIsQ0FBQztRQUN4Q0MsR0FBR1gsbUVBQXlCQSxDQUFDNEIsVUFBVWpCLENBQUM7SUFDNUM7QUFDSjtBQUNBLGdEQUFnRDtBQUN6QyxTQUFTbUIsVUFBVVAsR0FBRztJQUN6QixJQUFJQSxJQUFJYixDQUFDLElBQUksUUFBUWEsSUFBSVosQ0FBQyxJQUFJLE1BQU07UUFDaEMsTUFBTSxJQUFJakIsd0RBQVNBLENBQUMsOEJBQThCO0lBQ3REO0lBQ0EsTUFBTVUsT0FBT1Qsd0RBQVMsQ0FBQ29DLGVBQWUsQ0FBQztRQUNuQ3JCLEdBQUdULCtEQUFxQkEsQ0FBQ3NCLElBQUliLENBQUM7UUFDOUJDLEdBQUdWLCtEQUFxQkEsQ0FBQ3NCLElBQUlaLENBQUM7SUFDbEM7SUFDQSxPQUFPZCxtRUFBb0JBLENBQUNGLHlEQUFVLENBQUM4QixLQUFLLENBQUNyQixNQUFNc0IsUUFBUSxJQUFJO0FBQ25FLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvcnNhLXV0aWxzLmpzPzMwMWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdub2RlLWZvcmdlL2xpYi9hc24xLmpzJztcbmltcG9ydCAnbm9kZS1mb3JnZS9saWIvcnNhLmpzJztcbmltcG9ydCB7IENvZGVFcnJvciB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbi8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZXMgYXJlIG1pc3NpbmdcbmltcG9ydCBmb3JnZSBmcm9tICdub2RlLWZvcmdlL2xpYi9mb3JnZS5qcyc7XG5pbXBvcnQgeyBmcm9tU3RyaW5nIGFzIHVpbnQ4QXJyYXlGcm9tU3RyaW5nIH0gZnJvbSAndWludDhhcnJheXMvZnJvbS1zdHJpbmcnO1xuaW1wb3J0IHsgdG9TdHJpbmcgYXMgdWludDhBcnJheVRvU3RyaW5nIH0gZnJvbSAndWludDhhcnJheXMvdG8tc3RyaW5nJztcbmltcG9ydCB7IGJpZ0ludGVnZXJUb1VpbnRCYXNlNjR1cmwsIGJhc2U2NHVybFRvQmlnSW50ZWdlciB9IGZyb20gJy4vLi4vdXRpbC5qcyc7XG4vLyBDb252ZXJ0IGEgUEtDUyMxIGluIEFTTjEgREVSIGZvcm1hdCB0byBhIEpXSyBrZXlcbmV4cG9ydCBmdW5jdGlvbiBwa2NzMVRvSndrKGJ5dGVzKSB7XG4gICAgY29uc3QgYXNuMSA9IGZvcmdlLmFzbjEuZnJvbURlcih1aW50OEFycmF5VG9TdHJpbmcoYnl0ZXMsICdhc2NpaScpKTtcbiAgICBjb25zdCBwcml2YXRlS2V5ID0gZm9yZ2UucGtpLnByaXZhdGVLZXlGcm9tQXNuMShhc24xKTtcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzUxOCNzZWN0aW9uLTYuMy4xXG4gICAgcmV0dXJuIHtcbiAgICAgICAga3R5OiAnUlNBJyxcbiAgICAgICAgbjogYmlnSW50ZWdlclRvVWludEJhc2U2NHVybChwcml2YXRlS2V5Lm4pLFxuICAgICAgICBlOiBiaWdJbnRlZ2VyVG9VaW50QmFzZTY0dXJsKHByaXZhdGVLZXkuZSksXG4gICAgICAgIGQ6IGJpZ0ludGVnZXJUb1VpbnRCYXNlNjR1cmwocHJpdmF0ZUtleS5kKSxcbiAgICAgICAgcDogYmlnSW50ZWdlclRvVWludEJhc2U2NHVybChwcml2YXRlS2V5LnApLFxuICAgICAgICBxOiBiaWdJbnRlZ2VyVG9VaW50QmFzZTY0dXJsKHByaXZhdGVLZXkucSksXG4gICAgICAgIGRwOiBiaWdJbnRlZ2VyVG9VaW50QmFzZTY0dXJsKHByaXZhdGVLZXkuZFApLFxuICAgICAgICBkcTogYmlnSW50ZWdlclRvVWludEJhc2U2NHVybChwcml2YXRlS2V5LmRRKSxcbiAgICAgICAgcWk6IGJpZ0ludGVnZXJUb1VpbnRCYXNlNjR1cmwocHJpdmF0ZUtleS5xSW52KSxcbiAgICAgICAgYWxnOiAnUlMyNTYnXG4gICAgfTtcbn1cbi8vIENvbnZlcnQgYSBKV0sga2V5IGludG8gUEtDUyMxIGluIEFTTjEgREVSIGZvcm1hdFxuZXhwb3J0IGZ1bmN0aW9uIGp3a1RvUGtjczEoandrKSB7XG4gICAgaWYgKGp3ay5uID09IG51bGwgfHwgandrLmUgPT0gbnVsbCB8fCBqd2suZCA9PSBudWxsIHx8IGp3ay5wID09IG51bGwgfHwgandrLnEgPT0gbnVsbCB8fCBqd2suZHAgPT0gbnVsbCB8fCBqd2suZHEgPT0gbnVsbCB8fCBqd2sucWkgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdKV0sgd2FzIG1pc3NpbmcgY29tcG9uZW50cycsICdFUlJfSU5WQUxJRF9QQVJBTUVURVJTJyk7XG4gICAgfVxuICAgIGNvbnN0IGFzbjEgPSBmb3JnZS5wa2kucHJpdmF0ZUtleVRvQXNuMSh7XG4gICAgICAgIG46IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2subiksXG4gICAgICAgIGU6IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2suZSksXG4gICAgICAgIGQ6IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2suZCksXG4gICAgICAgIHA6IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2sucCksXG4gICAgICAgIHE6IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2sucSksXG4gICAgICAgIGRQOiBiYXNlNjR1cmxUb0JpZ0ludGVnZXIoandrLmRwKSxcbiAgICAgICAgZFE6IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2suZHEpLFxuICAgICAgICBxSW52OiBiYXNlNjR1cmxUb0JpZ0ludGVnZXIoandrLnFpKVxuICAgIH0pO1xuICAgIHJldHVybiB1aW50OEFycmF5RnJvbVN0cmluZyhmb3JnZS5hc24xLnRvRGVyKGFzbjEpLmdldEJ5dGVzKCksICdhc2NpaScpO1xufVxuLy8gQ29udmVydCBhIFBLQ0lYIGluIEFTTjEgREVSIGZvcm1hdCB0byBhIEpXSyBrZXlcbmV4cG9ydCBmdW5jdGlvbiBwa2l4VG9Kd2soYnl0ZXMpIHtcbiAgICBjb25zdCBhc24xID0gZm9yZ2UuYXNuMS5mcm9tRGVyKHVpbnQ4QXJyYXlUb1N0cmluZyhieXRlcywgJ2FzY2lpJykpO1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IGZvcmdlLnBraS5wdWJsaWNLZXlGcm9tQXNuMShhc24xKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBrdHk6ICdSU0EnLFxuICAgICAgICBuOiBiaWdJbnRlZ2VyVG9VaW50QmFzZTY0dXJsKHB1YmxpY0tleS5uKSxcbiAgICAgICAgZTogYmlnSW50ZWdlclRvVWludEJhc2U2NHVybChwdWJsaWNLZXkuZSlcbiAgICB9O1xufVxuLy8gQ29udmVydCBhIEpXSyBrZXkgdG8gUEtDSVggaW4gQVNOMSBERVIgZm9ybWF0XG5leHBvcnQgZnVuY3Rpb24gandrVG9Qa2l4KGp3aykge1xuICAgIGlmIChqd2subiA9PSBudWxsIHx8IGp3ay5lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcignSldLIHdhcyBtaXNzaW5nIGNvbXBvbmVudHMnLCAnRVJSX0lOVkFMSURfUEFSQU1FVEVSUycpO1xuICAgIH1cbiAgICBjb25zdCBhc24xID0gZm9yZ2UucGtpLnB1YmxpY0tleVRvQXNuMSh7XG4gICAgICAgIG46IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2subiksXG4gICAgICAgIGU6IGJhc2U2NHVybFRvQmlnSW50ZWdlcihqd2suZSlcbiAgICB9KTtcbiAgICByZXR1cm4gdWludDhBcnJheUZyb21TdHJpbmcoZm9yZ2UuYXNuMS50b0Rlcihhc24xKS5nZXRCeXRlcygpLCAnYXNjaWknKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJzYS11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiQ29kZUVycm9yIiwiZm9yZ2UiLCJmcm9tU3RyaW5nIiwidWludDhBcnJheUZyb21TdHJpbmciLCJ0b1N0cmluZyIsInVpbnQ4QXJyYXlUb1N0cmluZyIsImJpZ0ludGVnZXJUb1VpbnRCYXNlNjR1cmwiLCJiYXNlNjR1cmxUb0JpZ0ludGVnZXIiLCJwa2NzMVRvSndrIiwiYnl0ZXMiLCJhc24xIiwiZnJvbURlciIsInByaXZhdGVLZXkiLCJwa2kiLCJwcml2YXRlS2V5RnJvbUFzbjEiLCJrdHkiLCJuIiwiZSIsImQiLCJwIiwicSIsImRwIiwiZFAiLCJkcSIsImRRIiwicWkiLCJxSW52IiwiYWxnIiwiandrVG9Qa2NzMSIsImp3ayIsInByaXZhdGVLZXlUb0FzbjEiLCJ0b0RlciIsImdldEJ5dGVzIiwicGtpeFRvSndrIiwicHVibGljS2V5IiwicHVibGljS2V5RnJvbUFzbjEiLCJqd2tUb1BraXgiLCJwdWJsaWNLZXlUb0FzbjEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   getRandomValues: () => (/* reexport safe */ _random_bytes_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   hashAndSign: () => (/* binding */ hashAndSign),\n/* harmony export */   hashAndVerify: () => (/* binding */ hashAndVerify),\n/* harmony export */   keySize: () => (/* binding */ keySize),\n/* harmony export */   unmarshalPrivateKey: () => (/* binding */ unmarshalPrivateKey),\n/* harmony export */   utils: () => (/* reexport module object */ _rsa_utils_js__WEBPACK_IMPORTED_MODULE_3__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _random_bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../random-bytes.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _rsa_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rsa-utils.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js\");\n\n\n\n\n\nconst keypair = (0,util__WEBPACK_IMPORTED_MODULE_1__.promisify)(crypto__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair);\n\nasync function generateKey(bits) {\n    // @ts-expect-error node types are missing jwk as a format\n    const key = await keypair(\"rsa\", {\n        modulusLength: bits,\n        publicKeyEncoding: {\n            type: \"pkcs1\",\n            format: \"jwk\"\n        },\n        privateKeyEncoding: {\n            type: \"pkcs1\",\n            format: \"jwk\"\n        }\n    });\n    return {\n        // @ts-expect-error node types are missing jwk as a format\n        privateKey: key.privateKey,\n        // @ts-expect-error node types are missing jwk as a format\n        publicKey: key.publicKey\n    };\n}\n// Takes a jwk key\nasync function unmarshalPrivateKey(key) {\n    if (key == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(\"Missing key parameter\", \"ERR_MISSING_KEY\");\n    }\n    return {\n        privateKey: key,\n        publicKey: {\n            kty: key.kty,\n            n: key.n,\n            e: key.e\n        }\n    };\n}\n\nasync function hashAndSign(key, msg) {\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"RSA-SHA256\");\n    if (msg instanceof Uint8Array) {\n        hash.update(msg);\n    } else {\n        for (const buf of msg){\n            hash.update(buf);\n        }\n    }\n    // @ts-expect-error node types are missing jwk as a format\n    return hash.sign({\n        format: \"jwk\",\n        key\n    });\n}\nasync function hashAndVerify(key, sig, msg) {\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_0__.createVerify(\"RSA-SHA256\");\n    if (msg instanceof Uint8Array) {\n        hash.update(msg);\n    } else {\n        for (const buf of msg){\n            hash.update(buf);\n        }\n    }\n    // @ts-expect-error node types are missing jwk as a format\n    return hash.verify({\n        format: \"jwk\",\n        key\n    }, sig);\n}\nconst padding = crypto__WEBPACK_IMPORTED_MODULE_0__.constants.RSA_PKCS1_PADDING;\nfunction encrypt(key, bytes) {\n    if (bytes instanceof Uint8Array) {\n        // @ts-expect-error node types are missing jwk as a format\n        return crypto__WEBPACK_IMPORTED_MODULE_0__.publicEncrypt({\n            format: \"jwk\",\n            key,\n            padding\n        }, bytes);\n    } else {\n        // @ts-expect-error node types are missing jwk as a format\n        return crypto__WEBPACK_IMPORTED_MODULE_0__.publicEncrypt({\n            format: \"jwk\",\n            key,\n            padding\n        }, bytes.subarray());\n    }\n}\nfunction decrypt(key, bytes) {\n    if (bytes instanceof Uint8Array) {\n        // @ts-expect-error node types are missing jwk as a format\n        return crypto__WEBPACK_IMPORTED_MODULE_0__.privateDecrypt({\n            format: \"jwk\",\n            key,\n            padding\n        }, bytes);\n    } else {\n        // @ts-expect-error node types are missing jwk as a format\n        return crypto__WEBPACK_IMPORTED_MODULE_0__.privateDecrypt({\n            format: \"jwk\",\n            key,\n            padding\n        }, bytes.subarray());\n    }\n}\nfunction keySize(jwk) {\n    if (jwk.kty !== \"RSA\") {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(\"invalid key type\", \"ERR_INVALID_KEY_TYPE\");\n    } else if (jwk.n == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(\"invalid key modulus\", \"ERR_INVALID_KEY_MODULUS\");\n    }\n    const modulus = Buffer.from(jwk.n, \"base64\");\n    return modulus.length * 8;\n} //# sourceMappingURL=rsa.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvcnNhLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0s7QUFDYTtBQUNEO0FBQ0w7QUFDeEMsTUFBTUssVUFBVUosK0NBQVNBLENBQUNELG1EQUFzQjtBQUMvQjtBQUNWLGVBQWVPLFlBQVlDLElBQUk7SUFDbEMsMERBQTBEO0lBQzFELE1BQU1DLE1BQU0sTUFBTUosUUFBUSxPQUFPO1FBQzdCSyxlQUFlRjtRQUNmRyxtQkFBbUI7WUFBRUMsTUFBTTtZQUFTQyxRQUFRO1FBQU07UUFDbERDLG9CQUFvQjtZQUFFRixNQUFNO1lBQVNDLFFBQVE7UUFBTTtJQUN2RDtJQUNBLE9BQU87UUFDSCwwREFBMEQ7UUFDMURFLFlBQVlOLElBQUlNLFVBQVU7UUFDMUIsMERBQTBEO1FBQzFEQyxXQUFXUCxJQUFJTyxTQUFTO0lBQzVCO0FBQ0o7QUFDQSxrQkFBa0I7QUFDWCxlQUFlQyxvQkFBb0JSLEdBQUc7SUFDekMsSUFBSUEsT0FBTyxNQUFNO1FBQ2IsTUFBTSxJQUFJUCx3REFBU0EsQ0FBQyx5QkFBeUI7SUFDakQ7SUFDQSxPQUFPO1FBQ0hhLFlBQVlOO1FBQ1pPLFdBQVc7WUFDUEUsS0FBS1QsSUFBSVMsR0FBRztZQUNaQyxHQUFHVixJQUFJVSxDQUFDO1lBQ1JDLEdBQUdYLElBQUlXLENBQUM7UUFDWjtJQUNKO0FBQ0o7QUFDMEM7QUFDbkMsZUFBZUUsWUFBWWIsR0FBRyxFQUFFYyxHQUFHO0lBQ3RDLE1BQU1DLE9BQU94Qiw4Q0FBaUIsQ0FBQztJQUMvQixJQUFJdUIsZUFBZUcsWUFBWTtRQUMzQkYsS0FBS0csTUFBTSxDQUFDSjtJQUNoQixPQUNLO1FBQ0QsS0FBSyxNQUFNSyxPQUFPTCxJQUFLO1lBQ25CQyxLQUFLRyxNQUFNLENBQUNDO1FBQ2hCO0lBQ0o7SUFDQSwwREFBMEQ7SUFDMUQsT0FBT0osS0FBS0ssSUFBSSxDQUFDO1FBQUVoQixRQUFRO1FBQU9KO0lBQUk7QUFDMUM7QUFDTyxlQUFlcUIsY0FBY3JCLEdBQUcsRUFBRXNCLEdBQUcsRUFBRVIsR0FBRztJQUM3QyxNQUFNQyxPQUFPeEIsZ0RBQW1CLENBQUM7SUFDakMsSUFBSXVCLGVBQWVHLFlBQVk7UUFDM0JGLEtBQUtHLE1BQU0sQ0FBQ0o7SUFDaEIsT0FDSztRQUNELEtBQUssTUFBTUssT0FBT0wsSUFBSztZQUNuQkMsS0FBS0csTUFBTSxDQUFDQztRQUNoQjtJQUNKO0lBQ0EsMERBQTBEO0lBQzFELE9BQU9KLEtBQUtTLE1BQU0sQ0FBQztRQUFFcEIsUUFBUTtRQUFPSjtJQUFJLEdBQUdzQjtBQUMvQztBQUNBLE1BQU1HLFVBQVVsQyw2Q0FBZ0IsQ0FBQ29DLGlCQUFpQjtBQUMzQyxTQUFTQyxRQUFRNUIsR0FBRyxFQUFFNkIsS0FBSztJQUM5QixJQUFJQSxpQkFBaUJaLFlBQVk7UUFDN0IsMERBQTBEO1FBQzFELE9BQU8xQixpREFBb0IsQ0FBQztZQUFFYSxRQUFRO1lBQU9KO1lBQUt5QjtRQUFRLEdBQUdJO0lBQ2pFLE9BQ0s7UUFDRCwwREFBMEQ7UUFDMUQsT0FBT3RDLGlEQUFvQixDQUFDO1lBQUVhLFFBQVE7WUFBT0o7WUFBS3lCO1FBQVEsR0FBR0ksTUFBTUUsUUFBUTtJQUMvRTtBQUNKO0FBQ08sU0FBU0MsUUFBUWhDLEdBQUcsRUFBRTZCLEtBQUs7SUFDOUIsSUFBSUEsaUJBQWlCWixZQUFZO1FBQzdCLDBEQUEwRDtRQUMxRCxPQUFPMUIsa0RBQXFCLENBQUM7WUFBRWEsUUFBUTtZQUFPSjtZQUFLeUI7UUFBUSxHQUFHSTtJQUNsRSxPQUNLO1FBQ0QsMERBQTBEO1FBQzFELE9BQU90QyxrREFBcUIsQ0FBQztZQUFFYSxRQUFRO1lBQU9KO1lBQUt5QjtRQUFRLEdBQUdJLE1BQU1FLFFBQVE7SUFDaEY7QUFDSjtBQUNPLFNBQVNHLFFBQVFDLEdBQUc7SUFDdkIsSUFBSUEsSUFBSTFCLEdBQUcsS0FBSyxPQUFPO1FBQ25CLE1BQU0sSUFBSWhCLHdEQUFTQSxDQUFDLG9CQUFvQjtJQUM1QyxPQUNLLElBQUkwQyxJQUFJekIsQ0FBQyxJQUFJLE1BQU07UUFDcEIsTUFBTSxJQUFJakIsd0RBQVNBLENBQUMsdUJBQXVCO0lBQy9DO0lBQ0EsTUFBTTJDLFVBQVVDLE9BQU9DLElBQUksQ0FBQ0gsSUFBSXpCLENBQUMsRUFBRTtJQUNuQyxPQUFPMEIsUUFBUUcsTUFBTSxHQUFHO0FBQzVCLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvcnNhLmpzPzZiNzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBDb2RlRXJyb3IgfSBmcm9tICdAbGlicDJwL2ludGVyZmFjZSc7XG5pbXBvcnQgcmFuZG9tQnl0ZXMgZnJvbSAnLi4vcmFuZG9tLWJ5dGVzLmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vcnNhLXV0aWxzLmpzJztcbmNvbnN0IGtleXBhaXIgPSBwcm9taXNpZnkoY3J5cHRvLmdlbmVyYXRlS2V5UGFpcik7XG5leHBvcnQgeyB1dGlscyB9O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5KGJpdHMpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vZGUgdHlwZXMgYXJlIG1pc3NpbmcgandrIGFzIGEgZm9ybWF0XG4gICAgY29uc3Qga2V5ID0gYXdhaXQga2V5cGFpcigncnNhJywge1xuICAgICAgICBtb2R1bHVzTGVuZ3RoOiBiaXRzLFxuICAgICAgICBwdWJsaWNLZXlFbmNvZGluZzogeyB0eXBlOiAncGtjczEnLCBmb3JtYXQ6ICdqd2snIH0sXG4gICAgICAgIHByaXZhdGVLZXlFbmNvZGluZzogeyB0eXBlOiAncGtjczEnLCBmb3JtYXQ6ICdqd2snIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vZGUgdHlwZXMgYXJlIG1pc3NpbmcgandrIGFzIGEgZm9ybWF0XG4gICAgICAgIHByaXZhdGVLZXk6IGtleS5wcml2YXRlS2V5LFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vZGUgdHlwZXMgYXJlIG1pc3NpbmcgandrIGFzIGEgZm9ybWF0XG4gICAgICAgIHB1YmxpY0tleToga2V5LnB1YmxpY0tleVxuICAgIH07XG59XG4vLyBUYWtlcyBhIGp3ayBrZXlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1bm1hcnNoYWxQcml2YXRlS2V5KGtleSkge1xuICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdNaXNzaW5nIGtleSBwYXJhbWV0ZXInLCAnRVJSX01JU1NJTkdfS0VZJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHByaXZhdGVLZXk6IGtleSxcbiAgICAgICAgcHVibGljS2V5OiB7XG4gICAgICAgICAgICBrdHk6IGtleS5rdHksXG4gICAgICAgICAgICBuOiBrZXkubixcbiAgICAgICAgICAgIGU6IGtleS5lXG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0IHsgcmFuZG9tQnl0ZXMgYXMgZ2V0UmFuZG9tVmFsdWVzIH07XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFzaEFuZFNpZ24oa2V5LCBtc2cpIHtcbiAgICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZVNpZ24oJ1JTQS1TSEEyNTYnKTtcbiAgICBpZiAobXNnIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBoYXNoLnVwZGF0ZShtc2cpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBidWYgb2YgbXNnKSB7XG4gICAgICAgICAgICBoYXNoLnVwZGF0ZShidWYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm9kZSB0eXBlcyBhcmUgbWlzc2luZyBqd2sgYXMgYSBmb3JtYXRcbiAgICByZXR1cm4gaGFzaC5zaWduKHsgZm9ybWF0OiAnandrJywga2V5IH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhc2hBbmRWZXJpZnkoa2V5LCBzaWcsIG1zZykge1xuICAgIGNvbnN0IGhhc2ggPSBjcnlwdG8uY3JlYXRlVmVyaWZ5KCdSU0EtU0hBMjU2Jyk7XG4gICAgaWYgKG1zZyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgaGFzaC51cGRhdGUobXNnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgYnVmIG9mIG1zZykge1xuICAgICAgICAgICAgaGFzaC51cGRhdGUoYnVmKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vZGUgdHlwZXMgYXJlIG1pc3NpbmcgandrIGFzIGEgZm9ybWF0XG4gICAgcmV0dXJuIGhhc2gudmVyaWZ5KHsgZm9ybWF0OiAnandrJywga2V5IH0sIHNpZyk7XG59XG5jb25zdCBwYWRkaW5nID0gY3J5cHRvLmNvbnN0YW50cy5SU0FfUEtDUzFfUEFERElORztcbmV4cG9ydCBmdW5jdGlvbiBlbmNyeXB0KGtleSwgYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm9kZSB0eXBlcyBhcmUgbWlzc2luZyBqd2sgYXMgYSBmb3JtYXRcbiAgICAgICAgcmV0dXJuIGNyeXB0by5wdWJsaWNFbmNyeXB0KHsgZm9ybWF0OiAnandrJywga2V5LCBwYWRkaW5nIH0sIGJ5dGVzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm9kZSB0eXBlcyBhcmUgbWlzc2luZyBqd2sgYXMgYSBmb3JtYXRcbiAgICAgICAgcmV0dXJuIGNyeXB0by5wdWJsaWNFbmNyeXB0KHsgZm9ybWF0OiAnandrJywga2V5LCBwYWRkaW5nIH0sIGJ5dGVzLnN1YmFycmF5KCkpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0KGtleSwgYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm9kZSB0eXBlcyBhcmUgbWlzc2luZyBqd2sgYXMgYSBmb3JtYXRcbiAgICAgICAgcmV0dXJuIGNyeXB0by5wcml2YXRlRGVjcnlwdCh7IGZvcm1hdDogJ2p3aycsIGtleSwgcGFkZGluZyB9LCBieXRlcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vZGUgdHlwZXMgYXJlIG1pc3NpbmcgandrIGFzIGEgZm9ybWF0XG4gICAgICAgIHJldHVybiBjcnlwdG8ucHJpdmF0ZURlY3J5cHQoeyBmb3JtYXQ6ICdqd2snLCBrZXksIHBhZGRpbmcgfSwgYnl0ZXMuc3ViYXJyYXkoKSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGtleVNpemUoandrKSB7XG4gICAgaWYgKGp3ay5rdHkgIT09ICdSU0EnKSB7XG4gICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IoJ2ludmFsaWQga2V5IHR5cGUnLCAnRVJSX0lOVkFMSURfS0VZX1RZUEUnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoandrLm4gPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdpbnZhbGlkIGtleSBtb2R1bHVzJywgJ0VSUl9JTlZBTElEX0tFWV9NT0RVTFVTJyk7XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsdXMgPSBCdWZmZXIuZnJvbShqd2subiwgJ2Jhc2U2NCcpO1xuICAgIHJldHVybiBtb2R1bHVzLmxlbmd0aCAqIDg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yc2EuanMubWFwIl0sIm5hbWVzIjpbImNyeXB0byIsInByb21pc2lmeSIsIkNvZGVFcnJvciIsInJhbmRvbUJ5dGVzIiwidXRpbHMiLCJrZXlwYWlyIiwiZ2VuZXJhdGVLZXlQYWlyIiwiZ2VuZXJhdGVLZXkiLCJiaXRzIiwia2V5IiwibW9kdWx1c0xlbmd0aCIsInB1YmxpY0tleUVuY29kaW5nIiwidHlwZSIsImZvcm1hdCIsInByaXZhdGVLZXlFbmNvZGluZyIsInByaXZhdGVLZXkiLCJwdWJsaWNLZXkiLCJ1bm1hcnNoYWxQcml2YXRlS2V5Iiwia3R5IiwibiIsImUiLCJnZXRSYW5kb21WYWx1ZXMiLCJoYXNoQW5kU2lnbiIsIm1zZyIsImhhc2giLCJjcmVhdGVTaWduIiwiVWludDhBcnJheSIsInVwZGF0ZSIsImJ1ZiIsInNpZ24iLCJoYXNoQW5kVmVyaWZ5Iiwic2lnIiwiY3JlYXRlVmVyaWZ5IiwidmVyaWZ5IiwicGFkZGluZyIsImNvbnN0YW50cyIsIlJTQV9QS0NTMV9QQURESU5HIiwiZW5jcnlwdCIsImJ5dGVzIiwicHVibGljRW5jcnlwdCIsInN1YmFycmF5IiwiZGVjcnlwdCIsInByaXZhdGVEZWNyeXB0Iiwia2V5U2l6ZSIsImp3ayIsIm1vZHVsdXMiLCJCdWZmZXIiLCJmcm9tIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/rsa.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Secp256k1PrivateKey: () => (/* binding */ Secp256k1PrivateKey),\n/* harmony export */   Secp256k1PublicKey: () => (/* binding */ Secp256k1PublicKey),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   unmarshalSecp256k1PrivateKey: () => (/* binding */ unmarshalSecp256k1PrivateKey),\n/* harmony export */   unmarshalSecp256k1PublicKey: () => (/* binding */ unmarshalSecp256k1PublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"(ssr)/./node_modules/multiformats/dist/src/hashes/sha2.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/equals */ \"(ssr)/./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _exporter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./exporter.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/exporter.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n/* harmony import */ var _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./secp256k1.js */ \"(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1.js\");\n\n\n\n\n\n\n\n\nclass Secp256k1PublicKey {\n    constructor(key){\n        _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.validatePublicKey(key);\n        this._key = key;\n    }\n    verify(data, sig) {\n        return _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.compressPublicKey(this._key);\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_5__.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(this.bytes, key.bytes);\n    }\n    async hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        let bytes;\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_3__.isPromise)(p)) {\n            ({ bytes } = await p);\n        } else {\n            bytes = p.bytes;\n        }\n        return bytes;\n    }\n}\nclass Secp256k1PrivateKey {\n    constructor(key, publicKey){\n        this._key = key;\n        this._publicKey = publicKey ?? _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.computePublicKey(key);\n        _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.validatePrivateKey(this._key);\n        _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.validatePublicKey(this._publicKey);\n    }\n    sign(message) {\n        return _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Secp256k1PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_5__.PrivateKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_5__.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_3__.isPromise)(p)) {\n            return p.then(({ bytes })=>bytes);\n        }\n        return p.bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */ async id() {\n        const hash = await this.public.hash();\n        return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(hash, \"base58btc\");\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */ async export(password, format = \"libp2p-key\") {\n        if (format === \"libp2p-key\") {\n            return (0,_exporter_js__WEBPACK_IMPORTED_MODULE_4__.exporter)(this.bytes, password);\n        } else {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`export format '${format}' is not supported`, \"ERR_INVALID_EXPORT_FORMAT\");\n        }\n    }\n}\nfunction unmarshalSecp256k1PrivateKey(bytes) {\n    return new Secp256k1PrivateKey(bytes);\n}\nfunction unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n}\nasync function generateKeyPair() {\n    const privateKeyBytes = _secp256k1_js__WEBPACK_IMPORTED_MODULE_6__.generateKey();\n    return new Secp256k1PrivateKey(privateKeyBytes);\n} //# sourceMappingURL=secp256k1-class.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compressPublicKey: () => (/* binding */ compressPublicKey),\n/* harmony export */   computePublicKey: () => (/* binding */ computePublicKey),\n/* harmony export */   decompressPublicKey: () => (/* binding */ decompressPublicKey),\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   hashAndSign: () => (/* binding */ hashAndSign),\n/* harmony export */   hashAndVerify: () => (/* binding */ hashAndVerify),\n/* harmony export */   privateKeyLength: () => (/* binding */ PRIVATE_KEY_BYTE_LENGTH),\n/* harmony export */   validatePrivateKey: () => (/* binding */ validatePrivateKey),\n/* harmony export */   validatePublicKey: () => (/* binding */ validatePublicKey)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n\n\n\nconst PRIVATE_KEY_BYTE_LENGTH = 32;\n\nfunction generateKey() {\n    return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.utils.randomPrivateKey();\n}\n/**\n * Hash and sign message with private key\n */ function hashAndSign(key, msg) {\n    const hash = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha256\");\n    if (msg instanceof Uint8Array) {\n        hash.update(msg);\n    } else {\n        for (const buf of msg){\n            hash.update(buf);\n        }\n    }\n    const digest = hash.digest();\n    try {\n        const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(digest, key);\n        return signature.toDERRawBytes();\n    } catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(String(err), \"ERR_INVALID_INPUT\");\n    }\n}\n/**\n * Hash message and verify signature with public key\n */ function hashAndVerify(key, sig, msg) {\n    const hash = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createHash(\"sha256\");\n    if (msg instanceof Uint8Array) {\n        hash.update(msg);\n    } else {\n        for (const buf of msg){\n            hash.update(buf);\n        }\n    }\n    const digest = hash.digest();\n    try {\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.verify(sig, digest, key);\n    } catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(String(err), \"ERR_INVALID_INPUT\");\n    }\n}\nfunction compressPublicKey(key) {\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(key).toRawBytes(true);\n    return point;\n}\nfunction decompressPublicKey(key) {\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(key).toRawBytes(false);\n    return point;\n}\nfunction validatePrivateKey(key) {\n    try {\n        _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.getPublicKey(key, true);\n    } catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(String(err), \"ERR_INVALID_PRIVATE_KEY\");\n    }\n}\nfunction validatePublicKey(key) {\n    try {\n        _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(key);\n    } catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(String(err), \"ERR_INVALID_PUBLIC_KEY\");\n    }\n}\nfunction computePublicKey(privateKey) {\n    try {\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.getPublicKey(privateKey, true);\n    } catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(String(err), \"ERR_INVALID_PRIVATE_KEY\");\n    }\n} //# sourceMappingURL=secp256k1.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL2tleXMvc2VjcDI1NmsxLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFpQztBQUNhO0FBQ2M7QUFDNUQsTUFBTUksMEJBQTBCO0FBQ3VCO0FBQ2hELFNBQVNFO0lBQ1osT0FBT0gsOERBQUlBLENBQUNJLEtBQUssQ0FBQ0MsZ0JBQWdCO0FBQ3RDO0FBQ0E7O0NBRUMsR0FDTSxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLEdBQUc7SUFDaEMsTUFBTUMsT0FBT1osbURBQWlCLENBQUM7SUFDL0IsSUFBSVcsZUFBZUcsWUFBWTtRQUMzQkYsS0FBS0csTUFBTSxDQUFDSjtJQUNoQixPQUNLO1FBQ0QsS0FBSyxNQUFNSyxPQUFPTCxJQUFLO1lBQ25CQyxLQUFLRyxNQUFNLENBQUNDO1FBQ2hCO0lBQ0o7SUFDQSxNQUFNQyxTQUFTTCxLQUFLSyxNQUFNO0lBQzFCLElBQUk7UUFDQSxNQUFNQyxZQUFZZiw4REFBSUEsQ0FBQ2dCLElBQUksQ0FBQ0YsUUFBUVA7UUFDcEMsT0FBT1EsVUFBVUUsYUFBYTtJQUNsQyxFQUNBLE9BQU9DLEtBQUs7UUFDUixNQUFNLElBQUlwQix3REFBU0EsQ0FBQ3FCLE9BQU9ELE1BQU07SUFDckM7QUFDSjtBQUNBOztDQUVDLEdBQ00sU0FBU0UsY0FBY2IsR0FBRyxFQUFFYyxHQUFHLEVBQUViLEdBQUc7SUFDdkMsTUFBTUMsT0FBT1osbURBQWlCLENBQUM7SUFDL0IsSUFBSVcsZUFBZUcsWUFBWTtRQUMzQkYsS0FBS0csTUFBTSxDQUFDSjtJQUNoQixPQUNLO1FBQ0QsS0FBSyxNQUFNSyxPQUFPTCxJQUFLO1lBQ25CQyxLQUFLRyxNQUFNLENBQUNDO1FBQ2hCO0lBQ0o7SUFDQSxNQUFNQyxTQUFTTCxLQUFLSyxNQUFNO0lBQzFCLElBQUk7UUFDQSxPQUFPZCw4REFBSUEsQ0FBQ3NCLE1BQU0sQ0FBQ0QsS0FBS1AsUUFBUVA7SUFDcEMsRUFDQSxPQUFPVyxLQUFLO1FBQ1IsTUFBTSxJQUFJcEIsd0RBQVNBLENBQUNxQixPQUFPRCxNQUFNO0lBQ3JDO0FBQ0o7QUFDTyxTQUFTSyxrQkFBa0JoQixHQUFHO0lBQ2pDLE1BQU1pQixRQUFReEIsOERBQUlBLENBQUN5QixlQUFlLENBQUNDLE9BQU8sQ0FBQ25CLEtBQUtvQixVQUFVLENBQUM7SUFDM0QsT0FBT0g7QUFDWDtBQUNPLFNBQVNJLG9CQUFvQnJCLEdBQUc7SUFDbkMsTUFBTWlCLFFBQVF4Qiw4REFBSUEsQ0FBQ3lCLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDbkIsS0FBS29CLFVBQVUsQ0FBQztJQUMzRCxPQUFPSDtBQUNYO0FBQ08sU0FBU0ssbUJBQW1CdEIsR0FBRztJQUNsQyxJQUFJO1FBQ0FQLDhEQUFJQSxDQUFDOEIsWUFBWSxDQUFDdkIsS0FBSztJQUMzQixFQUNBLE9BQU9XLEtBQUs7UUFDUixNQUFNLElBQUlwQix3REFBU0EsQ0FBQ3FCLE9BQU9ELE1BQU07SUFDckM7QUFDSjtBQUNPLFNBQVNhLGtCQUFrQnhCLEdBQUc7SUFDakMsSUFBSTtRQUNBUCw4REFBSUEsQ0FBQ3lCLGVBQWUsQ0FBQ0MsT0FBTyxDQUFDbkI7SUFDakMsRUFDQSxPQUFPVyxLQUFLO1FBQ1IsTUFBTSxJQUFJcEIsd0RBQVNBLENBQUNxQixPQUFPRCxNQUFNO0lBQ3JDO0FBQ0o7QUFDTyxTQUFTYyxpQkFBaUJDLFVBQVU7SUFDdkMsSUFBSTtRQUNBLE9BQU9qQyw4REFBSUEsQ0FBQzhCLFlBQVksQ0FBQ0csWUFBWTtJQUN6QyxFQUNBLE9BQU9mLEtBQUs7UUFDUixNQUFNLElBQUlwQix3REFBU0EsQ0FBQ3FCLE9BQU9ELE1BQU07SUFDckM7QUFDSixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbGlicDJwLW5vaXNlL25vZGVfbW9kdWxlcy9AbGlicDJwL2NyeXB0by9kaXN0L3NyYy9rZXlzL3NlY3AyNTZrMS5qcz80NDc2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnbm9kZTpjcnlwdG8nO1xuaW1wb3J0IHsgQ29kZUVycm9yIH0gZnJvbSAnQGxpYnAycC9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgc2VjcDI1NmsxIGFzIHNlY3AgfSBmcm9tICdAbm9ibGUvY3VydmVzL3NlY3AyNTZrMSc7XG5jb25zdCBQUklWQVRFX0tFWV9CWVRFX0xFTkdUSCA9IDMyO1xuZXhwb3J0IHsgUFJJVkFURV9LRVlfQllURV9MRU5HVEggYXMgcHJpdmF0ZUtleUxlbmd0aCB9O1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlS2V5KCkge1xuICAgIHJldHVybiBzZWNwLnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbn1cbi8qKlxuICogSGFzaCBhbmQgc2lnbiBtZXNzYWdlIHdpdGggcHJpdmF0ZSBrZXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2hBbmRTaWduKGtleSwgbXNnKSB7XG4gICAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKTtcbiAgICBpZiAobXNnIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBoYXNoLnVwZGF0ZShtc2cpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBidWYgb2YgbXNnKSB7XG4gICAgICAgICAgICBoYXNoLnVwZGF0ZShidWYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGRpZ2VzdCA9IGhhc2guZGlnZXN0KCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gc2VjcC5zaWduKGRpZ2VzdCwga2V5KTtcbiAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS50b0RFUlJhd0J5dGVzKCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihTdHJpbmcoZXJyKSwgJ0VSUl9JTlZBTElEX0lOUFVUJyk7XG4gICAgfVxufVxuLyoqXG4gKiBIYXNoIG1lc3NhZ2UgYW5kIHZlcmlmeSBzaWduYXR1cmUgd2l0aCBwdWJsaWMga2V5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoQW5kVmVyaWZ5KGtleSwgc2lnLCBtc2cpIHtcbiAgICBjb25zdCBoYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpO1xuICAgIGlmIChtc2cgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGhhc2gudXBkYXRlKG1zZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGJ1ZiBvZiBtc2cpIHtcbiAgICAgICAgICAgIGhhc2gudXBkYXRlKGJ1Zik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGlnZXN0ID0gaGFzaC5kaWdlc3QoKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gc2VjcC52ZXJpZnkoc2lnLCBkaWdlc3QsIGtleSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihTdHJpbmcoZXJyKSwgJ0VSUl9JTlZBTElEX0lOUFVUJyk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXByZXNzUHVibGljS2V5KGtleSkge1xuICAgIGNvbnN0IHBvaW50ID0gc2VjcC5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleChrZXkpLnRvUmF3Qnl0ZXModHJ1ZSk7XG4gICAgcmV0dXJuIHBvaW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcHJlc3NQdWJsaWNLZXkoa2V5KSB7XG4gICAgY29uc3QgcG9pbnQgPSBzZWNwLlByb2plY3RpdmVQb2ludC5mcm9tSGV4KGtleSkudG9SYXdCeXRlcyhmYWxzZSk7XG4gICAgcmV0dXJuIHBvaW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJpdmF0ZUtleShrZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBzZWNwLmdldFB1YmxpY0tleShrZXksIHRydWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IoU3RyaW5nKGVyciksICdFUlJfSU5WQUxJRF9QUklWQVRFX0tFWScpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVB1YmxpY0tleShrZXkpIHtcbiAgICB0cnkge1xuICAgICAgICBzZWNwLlByb2plY3RpdmVQb2ludC5mcm9tSGV4KGtleSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IENvZGVFcnJvcihTdHJpbmcoZXJyKSwgJ0VSUl9JTlZBTElEX1BVQkxJQ19LRVknKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVB1YmxpY0tleShwcml2YXRlS2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHNlY3AuZ2V0UHVibGljS2V5KHByaXZhdGVLZXksIHRydWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBDb2RlRXJyb3IoU3RyaW5nKGVyciksICdFUlJfSU5WQUxJRF9QUklWQVRFX0tFWScpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlY3AyNTZrMS5qcy5tYXAiXSwibmFtZXMiOlsiY3J5cHRvIiwiQ29kZUVycm9yIiwic2VjcDI1NmsxIiwic2VjcCIsIlBSSVZBVEVfS0VZX0JZVEVfTEVOR1RIIiwicHJpdmF0ZUtleUxlbmd0aCIsImdlbmVyYXRlS2V5IiwidXRpbHMiLCJyYW5kb21Qcml2YXRlS2V5IiwiaGFzaEFuZFNpZ24iLCJrZXkiLCJtc2ciLCJoYXNoIiwiY3JlYXRlSGFzaCIsIlVpbnQ4QXJyYXkiLCJ1cGRhdGUiLCJidWYiLCJkaWdlc3QiLCJzaWduYXR1cmUiLCJzaWduIiwidG9ERVJSYXdCeXRlcyIsImVyciIsIlN0cmluZyIsImhhc2hBbmRWZXJpZnkiLCJzaWciLCJ2ZXJpZnkiLCJjb21wcmVzc1B1YmxpY0tleSIsInBvaW50IiwiUHJvamVjdGl2ZVBvaW50IiwiZnJvbUhleCIsInRvUmF3Qnl0ZXMiLCJkZWNvbXByZXNzUHVibGljS2V5IiwidmFsaWRhdGVQcml2YXRlS2V5IiwiZ2V0UHVibGljS2V5IiwidmFsaWRhdGVQdWJsaWNLZXkiLCJjb21wdXRlUHVibGljS2V5IiwicHJpdmF0ZUtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/keys/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/random-bytes.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/random-bytes.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ randomBytes)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"(ssr)/./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n\n\n/**\n * Generates a Uint8Array with length `number` populated by random bytes\n */ function randomBytes(length) {\n    if (isNaN(length) || length <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(\"random bytes length must be a Number bigger than 0\", \"ERR_INVALID_LENGTH\");\n    }\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(length);\n} //# sourceMappingURL=random-bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL3JhbmRvbS1ieXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDYTtBQUMzRDs7Q0FFQyxHQUNjLFNBQVNDLFlBQVlFLE1BQU07SUFDdEMsSUFBSUMsTUFBTUQsV0FBV0EsVUFBVSxHQUFHO1FBQzlCLE1BQU0sSUFBSUgsd0RBQVNBLENBQUMsc0RBQXNEO0lBQzlFO0lBQ0EsT0FBT0UsZ0VBQUtBLENBQUNDO0FBQ2pCLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL3JhbmRvbS1ieXRlcy5qcz8yYTYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvZGVFcnJvciB9IGZyb20gJ0BsaWJwMnAvaW50ZXJmYWNlJztcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIGFzIHJhbmRCIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG4vKipcbiAqIEdlbmVyYXRlcyBhIFVpbnQ4QXJyYXkgd2l0aCBsZW5ndGggYG51bWJlcmAgcG9wdWxhdGVkIGJ5IHJhbmRvbSBieXRlc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICBpZiAoaXNOYU4obGVuZ3RoKSB8fCBsZW5ndGggPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgQ29kZUVycm9yKCdyYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgYSBOdW1iZXIgYmlnZ2VyIHRoYW4gMCcsICdFUlJfSU5WQUxJRF9MRU5HVEgnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmRCKGxlbmd0aCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5kb20tYnl0ZXMuanMubWFwIl0sIm5hbWVzIjpbIkNvZGVFcnJvciIsInJhbmRvbUJ5dGVzIiwicmFuZEIiLCJsZW5ndGgiLCJpc05hTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/random-bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64urlToBigInteger: () => (/* binding */ base64urlToBigInteger),\n/* harmony export */   base64urlToBuffer: () => (/* binding */ base64urlToBuffer),\n/* harmony export */   bigIntegerToUintBase64url: () => (/* binding */ bigIntegerToUintBase64url),\n/* harmony export */   isPromise: () => (/* binding */ isPromise)\n/* harmony export */ });\n/* harmony import */ var node_forge_lib_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-forge/lib/util.js */ \"(ssr)/./node_modules/node-forge/lib/util.js\");\n/* harmony import */ var node_forge_lib_jsbn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-forge/lib/jsbn.js */ \"(ssr)/./node_modules/node-forge/lib/jsbn.js\");\n/* harmony import */ var node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-forge/lib/forge.js */ \"(ssr)/./node_modules/node-forge/lib/forge.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/concat */ \"(ssr)/./node_modules/uint8arrays/dist/src/concat.node.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/from-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/from-string.node.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays/to-string */ \"(ssr)/./node_modules/uint8arrays/dist/src/to-string.node.js\");\n\n\n// @ts-expect-error types are missing\n\n\n\n\nfunction bigIntegerToUintBase64url(num, len) {\n    // Call `.abs()` to convert to unsigned\n    let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n    // toByteArray() gives us back a signed array, which will include a leading 0\n    // byte if the most significant bit of the number is 1:\n    // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n    // Our number will always be positive so we should remove the leading padding.\n    buf = buf[0] === 0 ? buf.subarray(1) : buf;\n    if (len != null) {\n        if (buf.length > len) throw new Error(\"byte array longer than desired length\");\n        buf = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_3__.concat)([\n            new Uint8Array(len - buf.length),\n            buf\n        ]);\n    }\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_5__.toString)(buf, \"base64url\");\n}\n// Convert a base64url encoded string to a BigInteger\nfunction base64urlToBigInteger(str) {\n    const buf = base64urlToBuffer(str);\n    return new node_forge_lib_forge_js__WEBPACK_IMPORTED_MODULE_2__.jsbn.BigInteger((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_5__.toString)(buf, \"base16\"), 16);\n}\nfunction base64urlToBuffer(str, len) {\n    let buf = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(str, \"base64urlpad\");\n    if (len != null) {\n        if (buf.length > len) throw new Error(\"byte array longer than desired length\");\n        buf = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_3__.concat)([\n            new Uint8Array(len - buf.length),\n            buf\n        ]);\n    }\n    return buf;\n}\nfunction isPromise(thing) {\n    if (thing == null) {\n        return false;\n    }\n    return typeof thing.then === \"function\" && typeof thing.catch === \"function\" && typeof thing.finally === \"function\";\n} //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9saWJwMnAtbm9pc2Uvbm9kZV9tb2R1bGVzL0BsaWJwMnAvY3J5cHRvL2Rpc3Qvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFnQztBQUNBO0FBQ2hDLHFDQUFxQztBQUNPO0FBQ29CO0FBQ2E7QUFDTjtBQUNoRSxTQUFTTywwQkFBMEJDLEdBQUcsRUFBRUMsR0FBRztJQUM5Qyx1Q0FBdUM7SUFDdkMsSUFBSUMsTUFBTUMsV0FBV0MsSUFBSSxDQUFDSixJQUFJSyxHQUFHLEdBQUdDLFdBQVcsS0FBSyxxQ0FBcUM7SUFDekYsNkVBQTZFO0lBQzdFLHVEQUF1RDtJQUN2RCw2RUFBNkU7SUFDN0UsOEVBQThFO0lBQzlFSixNQUFNQSxHQUFHLENBQUMsRUFBRSxLQUFLLElBQUlBLElBQUlLLFFBQVEsQ0FBQyxLQUFLTDtJQUN2QyxJQUFJRCxPQUFPLE1BQU07UUFDYixJQUFJQyxJQUFJTSxNQUFNLEdBQUdQLEtBQ2IsTUFBTSxJQUFJUSxNQUFNO1FBQ3BCUCxNQUFNUiwwREFBZ0JBLENBQUM7WUFBQyxJQUFJUyxXQUFXRixNQUFNQyxJQUFJTSxNQUFNO1lBQUdOO1NBQUk7SUFDbEU7SUFDQSxPQUFPSiwrREFBa0JBLENBQUNJLEtBQUs7QUFDbkM7QUFDQSxxREFBcUQ7QUFDOUMsU0FBU1Esc0JBQXNCQyxHQUFHO0lBQ3JDLE1BQU1ULE1BQU1VLGtCQUFrQkQ7SUFDOUIsT0FBTyxJQUFJbkIseURBQVUsQ0FBQ3NCLFVBQVUsQ0FBQ2hCLCtEQUFrQkEsQ0FBQ0ksS0FBSyxXQUFXO0FBQ3hFO0FBQ08sU0FBU1Usa0JBQWtCRCxHQUFHLEVBQUVWLEdBQUc7SUFDdEMsSUFBSUMsTUFBTU4sbUVBQW9CQSxDQUFDZSxLQUFLO0lBQ3BDLElBQUlWLE9BQU8sTUFBTTtRQUNiLElBQUlDLElBQUlNLE1BQU0sR0FBR1AsS0FDYixNQUFNLElBQUlRLE1BQU07UUFDcEJQLE1BQU1SLDBEQUFnQkEsQ0FBQztZQUFDLElBQUlTLFdBQVdGLE1BQU1DLElBQUlNLE1BQU07WUFBR047U0FBSTtJQUNsRTtJQUNBLE9BQU9BO0FBQ1g7QUFDTyxTQUFTYSxVQUFVQyxLQUFLO0lBQzNCLElBQUlBLFNBQVMsTUFBTTtRQUNmLE9BQU87SUFDWDtJQUNBLE9BQU8sT0FBT0EsTUFBTUMsSUFBSSxLQUFLLGNBQ3pCLE9BQU9ELE1BQU1FLEtBQUssS0FBSyxjQUN2QixPQUFPRixNQUFNRyxPQUFPLEtBQUs7QUFDakMsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL2xpYnAycC1ub2lzZS9ub2RlX21vZHVsZXMvQGxpYnAycC9jcnlwdG8vZGlzdC9zcmMvdXRpbC5qcz9iZGZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnbm9kZS1mb3JnZS9saWIvdXRpbC5qcyc7XG5pbXBvcnQgJ25vZGUtZm9yZ2UvbGliL2pzYm4uanMnO1xuLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlcyBhcmUgbWlzc2luZ1xuaW1wb3J0IGZvcmdlIGZyb20gJ25vZGUtZm9yZ2UvbGliL2ZvcmdlLmpzJztcbmltcG9ydCB7IGNvbmNhdCBhcyB1aW50OEFycmF5Q29uY2F0IH0gZnJvbSAndWludDhhcnJheXMvY29uY2F0JztcbmltcG9ydCB7IGZyb21TdHJpbmcgYXMgdWludDhBcnJheUZyb21TdHJpbmcgfSBmcm9tICd1aW50OGFycmF5cy9mcm9tLXN0cmluZyc7XG5pbXBvcnQgeyB0b1N0cmluZyBhcyB1aW50OEFycmF5VG9TdHJpbmcgfSBmcm9tICd1aW50OGFycmF5cy90by1zdHJpbmcnO1xuZXhwb3J0IGZ1bmN0aW9uIGJpZ0ludGVnZXJUb1VpbnRCYXNlNjR1cmwobnVtLCBsZW4pIHtcbiAgICAvLyBDYWxsIGAuYWJzKClgIHRvIGNvbnZlcnQgdG8gdW5zaWduZWRcbiAgICBsZXQgYnVmID0gVWludDhBcnJheS5mcm9tKG51bS5hYnMoKS50b0J5dGVBcnJheSgpKTsgLy8gdG9CeXRlQXJyYXkgY29udmVydHMgdG8gYmlnIGVuZGlhblxuICAgIC8vIHRvQnl0ZUFycmF5KCkgZ2l2ZXMgdXMgYmFjayBhIHNpZ25lZCBhcnJheSwgd2hpY2ggd2lsbCBpbmNsdWRlIGEgbGVhZGluZyAwXG4gICAgLy8gYnl0ZSBpZiB0aGUgbW9zdCBzaWduaWZpY2FudCBiaXQgb2YgdGhlIG51bWJlciBpcyAxOlxuICAgIC8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mvd2luMzIvc2VjY2VydGVucm9sbC9hYm91dC1pbnRlZ2VyXG4gICAgLy8gT3VyIG51bWJlciB3aWxsIGFsd2F5cyBiZSBwb3NpdGl2ZSBzbyB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBsZWFkaW5nIHBhZGRpbmcuXG4gICAgYnVmID0gYnVmWzBdID09PSAwID8gYnVmLnN1YmFycmF5KDEpIDogYnVmO1xuICAgIGlmIChsZW4gIT0gbnVsbCkge1xuICAgICAgICBpZiAoYnVmLmxlbmd0aCA+IGxlbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgICAgICBidWYgPSB1aW50OEFycmF5Q29uY2F0KFtuZXcgVWludDhBcnJheShsZW4gLSBidWYubGVuZ3RoKSwgYnVmXSk7XG4gICAgfVxuICAgIHJldHVybiB1aW50OEFycmF5VG9TdHJpbmcoYnVmLCAnYmFzZTY0dXJsJyk7XG59XG4vLyBDb252ZXJ0IGEgYmFzZTY0dXJsIGVuY29kZWQgc3RyaW5nIHRvIGEgQmlnSW50ZWdlclxuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NHVybFRvQmlnSW50ZWdlcihzdHIpIHtcbiAgICBjb25zdCBidWYgPSBiYXNlNjR1cmxUb0J1ZmZlcihzdHIpO1xuICAgIHJldHVybiBuZXcgZm9yZ2UuanNibi5CaWdJbnRlZ2VyKHVpbnQ4QXJyYXlUb1N0cmluZyhidWYsICdiYXNlMTYnKSwgMTYpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NHVybFRvQnVmZmVyKHN0ciwgbGVuKSB7XG4gICAgbGV0IGJ1ZiA9IHVpbnQ4QXJyYXlGcm9tU3RyaW5nKHN0ciwgJ2Jhc2U2NHVybHBhZCcpO1xuICAgIGlmIChsZW4gIT0gbnVsbCkge1xuICAgICAgICBpZiAoYnVmLmxlbmd0aCA+IGxlbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgICAgICBidWYgPSB1aW50OEFycmF5Q29uY2F0KFtuZXcgVWludDhBcnJheShsZW4gLSBidWYubGVuZ3RoKSwgYnVmXSk7XG4gICAgfVxuICAgIHJldHVybiBidWY7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKHRoaW5nKSB7XG4gICAgaWYgKHRoaW5nID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHRoaW5nLmNhdGNoID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgIHR5cGVvZiB0aGluZy5maW5hbGx5ID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOlsiZm9yZ2UiLCJjb25jYXQiLCJ1aW50OEFycmF5Q29uY2F0IiwiZnJvbVN0cmluZyIsInVpbnQ4QXJyYXlGcm9tU3RyaW5nIiwidG9TdHJpbmciLCJ1aW50OEFycmF5VG9TdHJpbmciLCJiaWdJbnRlZ2VyVG9VaW50QmFzZTY0dXJsIiwibnVtIiwibGVuIiwiYnVmIiwiVWludDhBcnJheSIsImZyb20iLCJhYnMiLCJ0b0J5dGVBcnJheSIsInN1YmFycmF5IiwibGVuZ3RoIiwiRXJyb3IiLCJiYXNlNjR1cmxUb0JpZ0ludGVnZXIiLCJzdHIiLCJiYXNlNjR1cmxUb0J1ZmZlciIsImpzYm4iLCJCaWdJbnRlZ2VyIiwiaXNQcm9taXNlIiwidGhpbmciLCJ0aGVuIiwiY2F0Y2giLCJmaW5hbGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/libp2p-noise/node_modules/@libp2p/crypto/dist/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js":
/*!**********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/cidr.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cidrMask: () => (/* binding */ cidrMask),\n/* harmony export */   parseCidr: () => (/* binding */ parseCidr)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n\n\nfunction parseCidr(s) {\n    const [address, maskString] = s.split(\"/\");\n    if (!address || !maskString) throw new Error(\"Failed to parse given CIDR: \" + s);\n    let ipLength = _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv4Len;\n    let ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIPv4)(address);\n    if (ip == null) {\n        ipLength = _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv6Len;\n        ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIPv6)(address);\n        if (ip == null) throw new Error(\"Failed to parse given CIDR: \" + s);\n    }\n    const m = parseInt(maskString, 10);\n    if (Number.isNaN(m) || String(m).length !== maskString.length || m < 0 || m > ipLength * 8) {\n        throw new Error(\"Failed to parse given CIDR: \" + s);\n    }\n    const mask = cidrMask(m, 8 * ipLength);\n    return {\n        network: (0,_ip_js__WEBPACK_IMPORTED_MODULE_1__.maskIp)(ip, mask),\n        mask\n    };\n}\nfunction cidrMask(ones, bits) {\n    if (bits !== 8 * _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv4Len && bits !== 8 * _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv6Len) throw new Error(\"Invalid CIDR mask\");\n    if (ones < 0 || ones > bits) throw new Error(\"Invalid CIDR mask\");\n    const l = bits / 8;\n    const m = new Uint8Array(l);\n    for(let i = 0; i < l; i++){\n        if (ones >= 8) {\n            m[i] = 0xff;\n            ones -= 8;\n            continue;\n        }\n        m[i] = 255 - (0xff >> ones);\n        ones = 0;\n    }\n    return m;\n} //# sourceMappingURL=cidr.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2NpZHIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4RDtBQUNYO0FBQzVDLFNBQVNLLFVBQVVDLENBQUM7SUFDdkIsTUFBTSxDQUFDQyxTQUFTQyxXQUFXLEdBQUdGLEVBQUVHLEtBQUssQ0FBQztJQUN0QyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0MsWUFDYixNQUFNLElBQUlFLE1BQU0saUNBQWlDSjtJQUNyRCxJQUFJSyxXQUFXVCwyQ0FBT0E7SUFDdEIsSUFBSVUsS0FBS1osaUVBQVNBLENBQUNPO0lBQ25CLElBQUlLLE1BQU0sTUFBTTtRQUNaRCxXQUFXUiwyQ0FBT0E7UUFDbEJTLEtBQUtYLGlFQUFTQSxDQUFDTTtRQUNmLElBQUlLLE1BQU0sTUFDTixNQUFNLElBQUlGLE1BQU0saUNBQWlDSjtJQUN6RDtJQUNBLE1BQU1PLElBQUlDLFNBQVNOLFlBQVk7SUFDL0IsSUFBSU8sT0FBT0MsS0FBSyxDQUFDSCxNQUNiSSxPQUFPSixHQUFHSyxNQUFNLEtBQUtWLFdBQVdVLE1BQU0sSUFDdENMLElBQUksS0FDSkEsSUFBSUYsV0FBVyxHQUFHO1FBQ2xCLE1BQU0sSUFBSUQsTUFBTSxpQ0FBaUNKO0lBQ3JEO0lBQ0EsTUFBTWEsT0FBT0MsU0FBU1AsR0FBRyxJQUFJRjtJQUM3QixPQUFPO1FBQ0hVLFNBQVNqQiw4Q0FBTUEsQ0FBQ1EsSUFBSU87UUFDcEJBO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLFNBQVNFLElBQUksRUFBRUMsSUFBSTtJQUMvQixJQUFJQSxTQUFTLElBQUlyQiwyQ0FBT0EsSUFBSXFCLFNBQVMsSUFBSXBCLDJDQUFPQSxFQUM1QyxNQUFNLElBQUlPLE1BQU07SUFDcEIsSUFBSVksT0FBTyxLQUFLQSxPQUFPQyxNQUNuQixNQUFNLElBQUliLE1BQU07SUFDcEIsTUFBTWMsSUFBSUQsT0FBTztJQUNqQixNQUFNVixJQUFJLElBQUlZLFdBQVdEO0lBQ3pCLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJRixHQUFHRSxJQUFLO1FBQ3hCLElBQUlKLFFBQVEsR0FBRztZQUNYVCxDQUFDLENBQUNhLEVBQUUsR0FBRztZQUNQSixRQUFRO1lBQ1I7UUFDSjtRQUNBVCxDQUFDLENBQUNhLEVBQUUsR0FBRyxNQUFPLFNBQVFKLElBQUc7UUFDekJBLE9BQU87SUFDWDtJQUNBLE9BQU9UO0FBQ1gsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL25ldG1hc2svZGlzdC9zcmMvY2lkci5qcz8zM2MzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlSVB2NCwgcGFyc2VJUHY2IH0gZnJvbSBcIkBjaGFpbnNhZmUvaXMtaXAvcGFyc2VcIjtcbmltcG9ydCB7IElQdjRMZW4sIElQdjZMZW4sIG1hc2tJcCB9IGZyb20gXCIuL2lwLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDaWRyKHMpIHtcbiAgICBjb25zdCBbYWRkcmVzcywgbWFza1N0cmluZ10gPSBzLnNwbGl0KFwiL1wiKTtcbiAgICBpZiAoIWFkZHJlc3MgfHwgIW1hc2tTdHJpbmcpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBnaXZlbiBDSURSOiBcIiArIHMpO1xuICAgIGxldCBpcExlbmd0aCA9IElQdjRMZW47XG4gICAgbGV0IGlwID0gcGFyc2VJUHY0KGFkZHJlc3MpO1xuICAgIGlmIChpcCA9PSBudWxsKSB7XG4gICAgICAgIGlwTGVuZ3RoID0gSVB2NkxlbjtcbiAgICAgICAgaXAgPSBwYXJzZUlQdjYoYWRkcmVzcyk7XG4gICAgICAgIGlmIChpcCA9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIGdpdmVuIENJRFI6IFwiICsgcyk7XG4gICAgfVxuICAgIGNvbnN0IG0gPSBwYXJzZUludChtYXNrU3RyaW5nLCAxMCk7XG4gICAgaWYgKE51bWJlci5pc05hTihtKSB8fFxuICAgICAgICBTdHJpbmcobSkubGVuZ3RoICE9PSBtYXNrU3RyaW5nLmxlbmd0aCB8fFxuICAgICAgICBtIDwgMCB8fFxuICAgICAgICBtID4gaXBMZW5ndGggKiA4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBnaXZlbiBDSURSOiBcIiArIHMpO1xuICAgIH1cbiAgICBjb25zdCBtYXNrID0gY2lkck1hc2sobSwgOCAqIGlwTGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuZXR3b3JrOiBtYXNrSXAoaXAsIG1hc2spLFxuICAgICAgICBtYXNrLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY2lkck1hc2sob25lcywgYml0cykge1xuICAgIGlmIChiaXRzICE9PSA4ICogSVB2NExlbiAmJiBiaXRzICE9PSA4ICogSVB2NkxlbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBDSURSIG1hc2tcIik7XG4gICAgaWYgKG9uZXMgPCAwIHx8IG9uZXMgPiBiaXRzKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIENJRFIgbWFza1wiKTtcbiAgICBjb25zdCBsID0gYml0cyAvIDg7XG4gICAgY29uc3QgbSA9IG5ldyBVaW50OEFycmF5KGwpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChvbmVzID49IDgpIHtcbiAgICAgICAgICAgIG1baV0gPSAweGZmO1xuICAgICAgICAgICAgb25lcyAtPSA4O1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbVtpXSA9IDI1NSAtICgweGZmID4+IG9uZXMpO1xuICAgICAgICBvbmVzID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaWRyLmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJzZUlQdjQiLCJwYXJzZUlQdjYiLCJJUHY0TGVuIiwiSVB2NkxlbiIsIm1hc2tJcCIsInBhcnNlQ2lkciIsInMiLCJhZGRyZXNzIiwibWFza1N0cmluZyIsInNwbGl0IiwiRXJyb3IiLCJpcExlbmd0aCIsImlwIiwibSIsInBhcnNlSW50IiwiTnVtYmVyIiwiaXNOYU4iLCJTdHJpbmciLCJsZW5ndGgiLCJtYXNrIiwiY2lkck1hc2siLCJuZXR3b3JrIiwib25lcyIsImJpdHMiLCJsIiwiVWludDhBcnJheSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpNet: () => (/* reexport safe */ _ipnet_js__WEBPACK_IMPORTED_MODULE_0__.IpNet),\n/* harmony export */   cidrContains: () => (/* binding */ cidrContains),\n/* harmony export */   iPv4FromIPv6: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.iPv4FromIPv6),\n/* harmony export */   ipToString: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_1__.ipToString),\n/* harmony export */   isIPv4mappedIPv6: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.isIPv4mappedIPv6),\n/* harmony export */   maskIp: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.maskIp),\n/* harmony export */   parseCidr: () => (/* reexport safe */ _cidr_js__WEBPACK_IMPORTED_MODULE_3__.parseCidr)\n/* harmony export */ });\n/* harmony import */ var _ipnet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ipnet.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ipnet.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n/* harmony import */ var _cidr_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cidr.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js\");\n\n\n\n\n\n/**\n * Checks if cidr block contains ip address\n * @param cidr ipv4 or ipv6 formatted cidr . Example 198.51.100.14/24 or 2001:db8::/48\n * @param ip ipv4 or ipv6 address Example 198.51.100.14 or 2001:db8::\n *\n */ function cidrContains(cidr, ip) {\n    const ipnet = new _ipnet_js__WEBPACK_IMPORTED_MODULE_0__.IpNet(cidr);\n    return ipnet.contains(ip);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ0k7QUFDMEI7QUFDOUI7QUFDRztBQUN0Qzs7Ozs7Q0FLQyxHQUNNLFNBQVNNLGFBQWFDLElBQUksRUFBRUMsRUFBRTtJQUNqQyxNQUFNQyxRQUFRLElBQUlULDRDQUFLQSxDQUFDTztJQUN4QixPQUFPRSxNQUFNQyxRQUFRLENBQUNGO0FBQzFCLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2luZGV4LmpzPzU2MTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXBOZXQgfSBmcm9tIFwiLi9pcG5ldC5qc1wiO1xuZXhwb3J0IHsgaXBUb1N0cmluZyB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmV4cG9ydCB7IG1hc2tJcCwgaVB2NEZyb21JUHY2LCBpc0lQdjRtYXBwZWRJUHY2IH0gZnJvbSBcIi4vaXAuanNcIjtcbmV4cG9ydCB7IElwTmV0IH0gZnJvbSBcIi4vaXBuZXQuanNcIjtcbmV4cG9ydCB7IHBhcnNlQ2lkciB9IGZyb20gXCIuL2NpZHIuanNcIjtcbi8qKlxuICogQ2hlY2tzIGlmIGNpZHIgYmxvY2sgY29udGFpbnMgaXAgYWRkcmVzc1xuICogQHBhcmFtIGNpZHIgaXB2NCBvciBpcHY2IGZvcm1hdHRlZCBjaWRyIC4gRXhhbXBsZSAxOTguNTEuMTAwLjE0LzI0IG9yIDIwMDE6ZGI4OjovNDhcbiAqIEBwYXJhbSBpcCBpcHY0IG9yIGlwdjYgYWRkcmVzcyBFeGFtcGxlIDE5OC41MS4xMDAuMTQgb3IgMjAwMTpkYjg6OlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNpZHJDb250YWlucyhjaWRyLCBpcCkge1xuICAgIGNvbnN0IGlwbmV0ID0gbmV3IElwTmV0KGNpZHIpO1xuICAgIHJldHVybiBpcG5ldC5jb250YWlucyhpcCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiSXBOZXQiLCJpcFRvU3RyaW5nIiwibWFza0lwIiwiaVB2NEZyb21JUHY2IiwiaXNJUHY0bWFwcGVkSVB2NiIsInBhcnNlQ2lkciIsImNpZHJDb250YWlucyIsImNpZHIiLCJpcCIsImlwbmV0IiwiY29udGFpbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js":
/*!********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/ip.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IPv4Len: () => (/* binding */ IPv4Len),\n/* harmony export */   IPv6Len: () => (/* binding */ IPv6Len),\n/* harmony export */   containsIp: () => (/* binding */ containsIp),\n/* harmony export */   iPv4FromIPv6: () => (/* binding */ iPv4FromIPv6),\n/* harmony export */   ipv4Prefix: () => (/* binding */ ipv4Prefix),\n/* harmony export */   isIPv4mappedIPv6: () => (/* binding */ isIPv4mappedIPv6),\n/* harmony export */   maskIp: () => (/* binding */ maskIp),\n/* harmony export */   maxIPv6Octet: () => (/* binding */ maxIPv6Octet)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\");\n\n\nconst IPv4Len = 4;\nconst IPv6Len = 16;\nconst maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nconst ipv4Prefix = new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    255,\n    255\n]);\nfunction maskIp(ip, mask) {\n    if (mask.length === IPv6Len && ip.length === IPv4Len && (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.allFF)(mask, 0, 11)) {\n        mask = mask.slice(12);\n    }\n    if (mask.length === IPv4Len && ip.length === IPv6Len && (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(ip, ipv4Prefix, 0, 11)) {\n        ip = ip.slice(12);\n    }\n    const n = ip.length;\n    if (n != mask.length) {\n        throw new Error(\"Failed to mask ip\");\n    }\n    const out = new Uint8Array(n);\n    for(let i = 0; i < n; i++){\n        out[i] = ip[i] & mask[i];\n    }\n    return out;\n}\nfunction containsIp(net, ip) {\n    if (typeof ip === \"string\") {\n        ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(ip);\n    }\n    if (ip == null) throw new Error(\"Invalid ip\");\n    if (ip.length !== net.network.length) {\n        return false;\n    }\n    for(let i = 0; i < ip.length; i++){\n        if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction iPv4FromIPv6(ip) {\n    if (!isIPv4mappedIPv6(ip)) {\n        throw new Error(\"Must have 0xffff prefix\");\n    }\n    return ip.slice(12);\n}\nfunction isIPv4mappedIPv6(ip) {\n    return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(ip, ipv4Prefix, 0, 11);\n} //# sourceMappingURL=ip.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2lwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDSjtBQUN0QyxNQUFNRyxVQUFVLEVBQUU7QUFDbEIsTUFBTUMsVUFBVSxHQUFHO0FBQ25CLE1BQU1DLGVBQWVDLFNBQVMsVUFBVSxJQUFJO0FBQzVDLE1BQU1DLGFBQWEsSUFBSUMsV0FBVztJQUNyQztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUs7Q0FDdEMsRUFBRTtBQUNJLFNBQVNDLE9BQU9DLEVBQUUsRUFBRUMsSUFBSTtJQUMzQixJQUFJQSxLQUFLQyxNQUFNLEtBQUtSLFdBQVdNLEdBQUdFLE1BQU0sS0FBS1QsV0FBV0YsK0NBQUtBLENBQUNVLE1BQU0sR0FBRyxLQUFLO1FBQ3hFQSxPQUFPQSxLQUFLRSxLQUFLLENBQUM7SUFDdEI7SUFDQSxJQUFJRixLQUFLQyxNQUFNLEtBQUtULFdBQ2hCTyxHQUFHRSxNQUFNLEtBQUtSLFdBQ2RGLG1EQUFTQSxDQUFDUSxJQUFJSCxZQUFZLEdBQUcsS0FBSztRQUNsQ0csS0FBS0EsR0FBR0csS0FBSyxDQUFDO0lBQ2xCO0lBQ0EsTUFBTUMsSUFBSUosR0FBR0UsTUFBTTtJQUNuQixJQUFJRSxLQUFLSCxLQUFLQyxNQUFNLEVBQUU7UUFDbEIsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUMsTUFBTSxJQUFJUixXQUFXTTtJQUMzQixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUgsR0FBR0csSUFBSztRQUN4QkQsR0FBRyxDQUFDQyxFQUFFLEdBQUdQLEVBQUUsQ0FBQ08sRUFBRSxHQUFHTixJQUFJLENBQUNNLEVBQUU7SUFDNUI7SUFDQSxPQUFPRDtBQUNYO0FBQ08sU0FBU0UsV0FBV0MsR0FBRyxFQUFFVCxFQUFFO0lBQzlCLElBQUksT0FBT0EsT0FBTyxVQUFVO1FBQ3hCQSxLQUFLViwrREFBT0EsQ0FBQ1U7SUFDakI7SUFDQSxJQUFJQSxNQUFNLE1BQ04sTUFBTSxJQUFJSyxNQUFNO0lBQ3BCLElBQUlMLEdBQUdFLE1BQU0sS0FBS08sSUFBSUMsT0FBTyxDQUFDUixNQUFNLEVBQUU7UUFDbEMsT0FBTztJQUNYO0lBQ0EsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlQLEdBQUdFLE1BQU0sRUFBRUssSUFBSztRQUNoQyxJQUFJLENBQUNFLElBQUlDLE9BQU8sQ0FBQ0gsRUFBRSxHQUFHRSxJQUFJUixJQUFJLENBQUNNLEVBQUUsTUFBT1AsQ0FBQUEsRUFBRSxDQUFDTyxFQUFFLEdBQUdFLElBQUlSLElBQUksQ0FBQ00sRUFBRSxHQUFHO1lBQzFELE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU0ksYUFBYVgsRUFBRTtJQUMzQixJQUFJLENBQUNZLGlCQUFpQlosS0FBSztRQUN2QixNQUFNLElBQUlLLE1BQU07SUFDcEI7SUFDQSxPQUFPTCxHQUFHRyxLQUFLLENBQUM7QUFDcEI7QUFDTyxTQUFTUyxpQkFBaUJaLEVBQUU7SUFDL0IsT0FBT1IsbURBQVNBLENBQUNRLElBQUlILFlBQVksR0FBRztBQUN4QyxFQUNBLDhCQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbmV0bWFzay9kaXN0L3NyYy9pcC5qcz9hOWJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlSVAgfSBmcm9tIFwiQGNoYWluc2FmZS9pcy1pcC9wYXJzZVwiO1xuaW1wb3J0IHsgYWxsRkYsIGRlZXBFcXVhbCB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmV4cG9ydCBjb25zdCBJUHY0TGVuID0gNDtcbmV4cG9ydCBjb25zdCBJUHY2TGVuID0gMTY7XG5leHBvcnQgY29uc3QgbWF4SVB2Nk9jdGV0ID0gcGFyc2VJbnQoXCIweEZGRkZcIiwgMTYpO1xuZXhwb3J0IGNvbnN0IGlwdjRQcmVmaXggPSBuZXcgVWludDhBcnJheShbXG4gICAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMjU1LCAyNTUsXG5dKTtcbmV4cG9ydCBmdW5jdGlvbiBtYXNrSXAoaXAsIG1hc2spIHtcbiAgICBpZiAobWFzay5sZW5ndGggPT09IElQdjZMZW4gJiYgaXAubGVuZ3RoID09PSBJUHY0TGVuICYmIGFsbEZGKG1hc2ssIDAsIDExKSkge1xuICAgICAgICBtYXNrID0gbWFzay5zbGljZSgxMik7XG4gICAgfVxuICAgIGlmIChtYXNrLmxlbmd0aCA9PT0gSVB2NExlbiAmJlxuICAgICAgICBpcC5sZW5ndGggPT09IElQdjZMZW4gJiZcbiAgICAgICAgZGVlcEVxdWFsKGlwLCBpcHY0UHJlZml4LCAwLCAxMSkpIHtcbiAgICAgICAgaXAgPSBpcC5zbGljZSgxMik7XG4gICAgfVxuICAgIGNvbnN0IG4gPSBpcC5sZW5ndGg7XG4gICAgaWYgKG4gIT0gbWFzay5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIG1hc2sgaXBcIik7XG4gICAgfVxuICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIG91dFtpXSA9IGlwW2ldICYgbWFza1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluc0lwKG5ldCwgaXApIHtcbiAgICBpZiAodHlwZW9mIGlwID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlwID0gcGFyc2VJUChpcCk7XG4gICAgfVxuICAgIGlmIChpcCA9PSBudWxsKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlwXCIpO1xuICAgIGlmIChpcC5sZW5ndGggIT09IG5ldC5uZXR3b3JrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKChuZXQubmV0d29ya1tpXSAmIG5ldC5tYXNrW2ldKSAhPT0gKGlwW2ldICYgbmV0Lm1hc2tbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaVB2NEZyb21JUHY2KGlwKSB7XG4gICAgaWYgKCFpc0lQdjRtYXBwZWRJUHY2KGlwKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IGhhdmUgMHhmZmZmIHByZWZpeFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGlwLnNsaWNlKDEyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0lQdjRtYXBwZWRJUHY2KGlwKSB7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChpcCwgaXB2NFByZWZpeCwgMCwgMTEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXAuanMubWFwIl0sIm5hbWVzIjpbInBhcnNlSVAiLCJhbGxGRiIsImRlZXBFcXVhbCIsIklQdjRMZW4iLCJJUHY2TGVuIiwibWF4SVB2Nk9jdGV0IiwicGFyc2VJbnQiLCJpcHY0UHJlZml4IiwiVWludDhBcnJheSIsIm1hc2tJcCIsImlwIiwibWFzayIsImxlbmd0aCIsInNsaWNlIiwibiIsIkVycm9yIiwib3V0IiwiaSIsImNvbnRhaW5zSXAiLCJuZXQiLCJuZXR3b3JrIiwiaVB2NEZyb21JUHY2IiwiaXNJUHY0bWFwcGVkSVB2NiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/ipnet.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/ipnet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpNet: () => (/* binding */ IpNet)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"(ssr)/./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _cidr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cidr.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/cidr.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\");\n\n\n\n\nclass IpNet {\n    /**\n     *\n     * @param ipOrCidr either network ip or full cidr address\n     * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n     */ constructor(ipOrCidr, mask){\n        if (mask == null) {\n            ({ network: this.network, mask: this.mask } = (0,_cidr_js__WEBPACK_IMPORTED_MODULE_1__.parseCidr)(ipOrCidr));\n        } else {\n            const ipResult = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(ipOrCidr);\n            if (ipResult == null) {\n                throw new Error(\"Failed to parse network\");\n            }\n            mask = String(mask);\n            const m = parseInt(mask, 10);\n            if (Number.isNaN(m) || String(m).length !== mask.length || m < 0 || m > ipResult.length * 8) {\n                const maskResult = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(mask);\n                if (maskResult == null) {\n                    throw new Error(\"Failed to parse mask\");\n                }\n                this.mask = maskResult;\n            } else {\n                this.mask = (0,_cidr_js__WEBPACK_IMPORTED_MODULE_1__.cidrMask)(m, 8 * ipResult.length);\n            }\n            this.network = (0,_ip_js__WEBPACK_IMPORTED_MODULE_2__.maskIp)(ipResult, this.mask);\n        }\n    }\n    /**\n     * Checks if netmask contains ip address\n     * @param ip\n     * @returns\n     */ contains(ip) {\n        return (0,_ip_js__WEBPACK_IMPORTED_MODULE_2__.containsIp)({\n            network: this.network,\n            mask: this.mask\n        }, ip);\n    }\n    /**Serializes back to string format */ toString() {\n        const l = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.simpleMaskLength)(this.mask);\n        const mask = l !== -1 ? String(l) : (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.maskToHex)(this.mask);\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.ipToString)(this.network) + \"/\" + mask;\n    }\n} //# sourceMappingURL=ipnet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL2lwbmV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ0Q7QUFDSDtBQUN1QjtBQUM3RCxNQUFNUTtJQUNUOzs7O0tBSUMsR0FDREMsWUFBWUMsUUFBUSxFQUFFQyxJQUFJLENBQUU7UUFDeEIsSUFBSUEsUUFBUSxNQUFNO1lBQ2IsR0FBRUMsU0FBUyxJQUFJLENBQUNBLE9BQU8sRUFBRUQsTUFBTSxJQUFJLENBQUNBLElBQUksRUFBRSxHQUFHVCxtREFBU0EsQ0FBQ1EsU0FBUTtRQUNwRSxPQUNLO1lBQ0QsTUFBTUcsV0FBV2IsK0RBQU9BLENBQUNVO1lBQ3pCLElBQUlHLFlBQVksTUFBTTtnQkFDbEIsTUFBTSxJQUFJQyxNQUFNO1lBQ3BCO1lBQ0FILE9BQU9JLE9BQU9KO1lBQ2QsTUFBTUssSUFBSUMsU0FBU04sTUFBTTtZQUN6QixJQUFJTyxPQUFPQyxLQUFLLENBQUNILE1BQ2JELE9BQU9DLEdBQUdJLE1BQU0sS0FBS1QsS0FBS1MsTUFBTSxJQUNoQ0osSUFBSSxLQUNKQSxJQUFJSCxTQUFTTyxNQUFNLEdBQUcsR0FBRztnQkFDekIsTUFBTUMsYUFBYXJCLCtEQUFPQSxDQUFDVztnQkFDM0IsSUFBSVUsY0FBYyxNQUFNO29CQUNwQixNQUFNLElBQUlQLE1BQU07Z0JBQ3BCO2dCQUNBLElBQUksQ0FBQ0gsSUFBSSxHQUFHVTtZQUNoQixPQUNLO2dCQUNELElBQUksQ0FBQ1YsSUFBSSxHQUFHVixrREFBUUEsQ0FBQ2UsR0FBRyxJQUFJSCxTQUFTTyxNQUFNO1lBQy9DO1lBQ0EsSUFBSSxDQUFDUixPQUFPLEdBQUdSLDhDQUFNQSxDQUFDUyxVQUFVLElBQUksQ0FBQ0YsSUFBSTtRQUM3QztJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNEVyxTQUFTQyxFQUFFLEVBQUU7UUFDVCxPQUFPcEIsa0RBQVVBLENBQUM7WUFBRVMsU0FBUyxJQUFJLENBQUNBLE9BQU87WUFBRUQsTUFBTSxJQUFJLENBQUNBLElBQUk7UUFBQyxHQUFHWTtJQUNsRTtJQUNBLG9DQUFvQyxHQUNwQ0MsV0FBVztRQUNQLE1BQU1DLElBQUlsQiwwREFBZ0JBLENBQUMsSUFBSSxDQUFDSSxJQUFJO1FBQ3BDLE1BQU1BLE9BQU9jLE1BQU0sQ0FBQyxJQUFJVixPQUFPVSxLQUFLbkIsbURBQVNBLENBQUMsSUFBSSxDQUFDSyxJQUFJO1FBQ3ZELE9BQU9OLG9EQUFVQSxDQUFDLElBQUksQ0FBQ08sT0FBTyxJQUFJLE1BQU1EO0lBQzVDO0FBQ0osRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbHVzaC1ub3Rlcy8uL25vZGVfbW9kdWxlcy9AY2hhaW5zYWZlL25ldG1hc2svZGlzdC9zcmMvaXBuZXQuanM/OTE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZUlQIH0gZnJvbSBcIkBjaGFpbnNhZmUvaXMtaXAvcGFyc2VcIjtcbmltcG9ydCB7IGNpZHJNYXNrLCBwYXJzZUNpZHIgfSBmcm9tIFwiLi9jaWRyLmpzXCI7XG5pbXBvcnQgeyBjb250YWluc0lwLCBtYXNrSXAgfSBmcm9tIFwiLi9pcC5qc1wiO1xuaW1wb3J0IHsgaXBUb1N0cmluZywgbWFza1RvSGV4LCBzaW1wbGVNYXNrTGVuZ3RoIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuZXhwb3J0IGNsYXNzIElwTmV0IHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpcE9yQ2lkciBlaXRoZXIgbmV0d29yayBpcCBvciBmdWxsIGNpZHIgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBtYXNrIGluIGNhc2UgaXBPckNpZHIgaXMgbmV0d29yayB0aGlzIGNhbiBiZSBlaXRoZXIgbWFzayBpbiBkZWNpbWFsIGZvcm1hdCBvciBhcyBpcCBhZGRyZXNzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaXBPckNpZHIsIG1hc2spIHtcbiAgICAgICAgaWYgKG1hc2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgKHsgbmV0d29yazogdGhpcy5uZXR3b3JrLCBtYXNrOiB0aGlzLm1hc2sgfSA9IHBhcnNlQ2lkcihpcE9yQ2lkcikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXBSZXN1bHQgPSBwYXJzZUlQKGlwT3JDaWRyKTtcbiAgICAgICAgICAgIGlmIChpcFJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIG5ldHdvcmtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXNrID0gU3RyaW5nKG1hc2spO1xuICAgICAgICAgICAgY29uc3QgbSA9IHBhcnNlSW50KG1hc2ssIDEwKTtcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4obSkgfHxcbiAgICAgICAgICAgICAgICBTdHJpbmcobSkubGVuZ3RoICE9PSBtYXNrLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgIG0gPCAwIHx8XG4gICAgICAgICAgICAgICAgbSA+IGlwUmVzdWx0Lmxlbmd0aCAqIDgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXNrUmVzdWx0ID0gcGFyc2VJUChtYXNrKTtcbiAgICAgICAgICAgICAgICBpZiAobWFza1Jlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBtYXNrXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1hc2sgPSBtYXNrUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXNrID0gY2lkck1hc2sobSwgOCAqIGlwUmVzdWx0Lmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5ldHdvcmsgPSBtYXNrSXAoaXBSZXN1bHQsIHRoaXMubWFzayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIG5ldG1hc2sgY29udGFpbnMgaXAgYWRkcmVzc1xuICAgICAqIEBwYXJhbSBpcFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgY29udGFpbnMoaXApIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5zSXAoeyBuZXR3b3JrOiB0aGlzLm5ldHdvcmssIG1hc2s6IHRoaXMubWFzayB9LCBpcCk7XG4gICAgfVxuICAgIC8qKlNlcmlhbGl6ZXMgYmFjayB0byBzdHJpbmcgZm9ybWF0ICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGwgPSBzaW1wbGVNYXNrTGVuZ3RoKHRoaXMubWFzayk7XG4gICAgICAgIGNvbnN0IG1hc2sgPSBsICE9PSAtMSA/IFN0cmluZyhsKSA6IG1hc2tUb0hleCh0aGlzLm1hc2spO1xuICAgICAgICByZXR1cm4gaXBUb1N0cmluZyh0aGlzLm5ldHdvcmspICsgXCIvXCIgKyBtYXNrO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlwbmV0LmpzLm1hcCJdLCJuYW1lcyI6WyJwYXJzZUlQIiwiY2lkck1hc2siLCJwYXJzZUNpZHIiLCJjb250YWluc0lwIiwibWFza0lwIiwiaXBUb1N0cmluZyIsIm1hc2tUb0hleCIsInNpbXBsZU1hc2tMZW5ndGgiLCJJcE5ldCIsImNvbnN0cnVjdG9yIiwiaXBPckNpZHIiLCJtYXNrIiwibmV0d29yayIsImlwUmVzdWx0IiwiRXJyb3IiLCJTdHJpbmciLCJtIiwicGFyc2VJbnQiLCJOdW1iZXIiLCJpc05hTiIsImxlbmd0aCIsIm1hc2tSZXN1bHQiLCJjb250YWlucyIsImlwIiwidG9TdHJpbmciLCJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/ipnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js":
/*!**********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/util.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allFF: () => (/* binding */ allFF),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   ipToString: () => (/* binding */ ipToString),\n/* harmony export */   maskToHex: () => (/* binding */ maskToHex),\n/* harmony export */   simpleMaskLength: () => (/* binding */ simpleMaskLength)\n/* harmony export */ });\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ip.js */ \"(ssr)/./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n\nfunction allFF(a, from, to) {\n    let i = 0;\n    for (const e of a){\n        if (i < from) continue;\n        if (i > to) break;\n        if (e !== 0xff) return false;\n        i++;\n    }\n    return true;\n}\nfunction deepEqual(a, b, from, to) {\n    let i = 0;\n    for (const e of a){\n        if (i < from) continue;\n        if (i > to) break;\n        if (e !== b[i]) return false;\n        i++;\n    }\n    return true;\n}\n/***\n * Returns long ip format\n */ function ipToString(ip) {\n    switch(ip.length){\n        case _ip_js__WEBPACK_IMPORTED_MODULE_0__.IPv4Len:\n            {\n                return ip.join(\".\");\n            }\n        case _ip_js__WEBPACK_IMPORTED_MODULE_0__.IPv6Len:\n            {\n                const result = [];\n                for(let i = 0; i < ip.length; i++){\n                    if (i % 2 === 0) {\n                        result.push(ip[i].toString(16).padStart(2, \"0\") + ip[i + 1].toString(16).padStart(2, \"0\"));\n                    }\n                }\n                return result.join(\":\");\n            }\n        default:\n            {\n                throw new Error(\"Invalid ip length\");\n            }\n    }\n}\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */ function simpleMaskLength(mask) {\n    let ones = 0;\n    // eslint-disable-next-line prefer-const\n    for (let [index, byte] of mask.entries()){\n        if (byte === 0xff) {\n            ones += 8;\n            continue;\n        }\n        while((byte & 0x80) != 0){\n            ones++;\n            byte = byte << 1;\n        }\n        if ((byte & 0x80) != 0) {\n            return -1;\n        }\n        for(let i = index + 1; i < mask.length; i++){\n            if (mask[i] != 0) {\n                return -1;\n            }\n        }\n        break;\n    }\n    return ones;\n}\nfunction maskToHex(mask) {\n    let hex = \"0x\";\n    for (const byte of mask){\n        hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n    }\n    return hex;\n} //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNoYWluc2FmZS9uZXRtYXNrL2Rpc3Qvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTJDO0FBQ3BDLFNBQVNFLE1BQU1DLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxFQUFFO0lBQzdCLElBQUlDLElBQUk7SUFDUixLQUFLLE1BQU1DLEtBQUtKLEVBQUc7UUFDZixJQUFJRyxJQUFJRixNQUNKO1FBQ0osSUFBSUUsSUFBSUQsSUFDSjtRQUNKLElBQUlFLE1BQU0sTUFDTixPQUFPO1FBQ1hEO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTRSxVQUFVTCxDQUFDLEVBQUVNLENBQUMsRUFBRUwsSUFBSSxFQUFFQyxFQUFFO0lBQ3BDLElBQUlDLElBQUk7SUFDUixLQUFLLE1BQU1DLEtBQUtKLEVBQUc7UUFDZixJQUFJRyxJQUFJRixNQUNKO1FBQ0osSUFBSUUsSUFBSUQsSUFDSjtRQUNKLElBQUlFLE1BQU1FLENBQUMsQ0FBQ0gsRUFBRSxFQUNWLE9BQU87UUFDWEE7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUNBOztDQUVDLEdBQ00sU0FBU0ksV0FBV0MsRUFBRTtJQUN6QixPQUFRQSxHQUFHQyxNQUFNO1FBQ2IsS0FBS1osMkNBQU9BO1lBQUU7Z0JBQ1YsT0FBT1csR0FBR0UsSUFBSSxDQUFDO1lBQ25CO1FBQ0EsS0FBS1osMkNBQU9BO1lBQUU7Z0JBQ1YsTUFBTWEsU0FBUyxFQUFFO2dCQUNqQixJQUFLLElBQUlSLElBQUksR0FBR0EsSUFBSUssR0FBR0MsTUFBTSxFQUFFTixJQUFLO29CQUNoQyxJQUFJQSxJQUFJLE1BQU0sR0FBRzt3QkFDYlEsT0FBT0MsSUFBSSxDQUFDSixFQUFFLENBQUNMLEVBQUUsQ0FBQ1UsUUFBUSxDQUFDLElBQUlDLFFBQVEsQ0FBQyxHQUFHLE9BQ3ZDTixFQUFFLENBQUNMLElBQUksRUFBRSxDQUFDVSxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUc7b0JBQzNDO2dCQUNKO2dCQUNBLE9BQU9ILE9BQU9ELElBQUksQ0FBQztZQUN2QjtRQUNBO1lBQVM7Z0JBQ0wsTUFBTSxJQUFJSyxNQUFNO1lBQ3BCO0lBQ0o7QUFDSjtBQUNBOztDQUVDLEdBQ00sU0FBU0MsaUJBQWlCQyxJQUFJO0lBQ2pDLElBQUlDLE9BQU87SUFDWCx3Q0FBd0M7SUFDeEMsS0FBSyxJQUFJLENBQUNDLE9BQU9DLEtBQUssSUFBSUgsS0FBS0ksT0FBTyxHQUFJO1FBQ3RDLElBQUlELFNBQVMsTUFBTTtZQUNmRixRQUFRO1lBQ1I7UUFDSjtRQUNBLE1BQU8sQ0FBQ0UsT0FBTyxJQUFHLEtBQU0sRUFBRztZQUN2QkY7WUFDQUUsT0FBT0EsUUFBUTtRQUNuQjtRQUNBLElBQUksQ0FBQ0EsT0FBTyxJQUFHLEtBQU0sR0FBRztZQUNwQixPQUFPLENBQUM7UUFDWjtRQUNBLElBQUssSUFBSWpCLElBQUlnQixRQUFRLEdBQUdoQixJQUFJYyxLQUFLUixNQUFNLEVBQUVOLElBQUs7WUFDMUMsSUFBSWMsSUFBSSxDQUFDZCxFQUFFLElBQUksR0FBRztnQkFDZCxPQUFPLENBQUM7WUFDWjtRQUNKO1FBQ0E7SUFDSjtJQUNBLE9BQU9lO0FBQ1g7QUFDTyxTQUFTSSxVQUFVTCxJQUFJO0lBQzFCLElBQUlNLE1BQU07SUFDVixLQUFLLE1BQU1ILFFBQVFILEtBQU07UUFDckJNLE9BQU8sQ0FBQ0gsUUFBUSxHQUFHUCxRQUFRLENBQUMsTUFBTSxDQUFDTyxPQUFPLElBQUcsRUFBR1AsUUFBUSxDQUFDO0lBQzdEO0lBQ0EsT0FBT1U7QUFDWCxFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZsdXNoLW5vdGVzLy4vbm9kZV9tb2R1bGVzL0BjaGFpbnNhZmUvbmV0bWFzay9kaXN0L3NyYy91dGlsLmpzPzY2MzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVB2NExlbiwgSVB2NkxlbiB9IGZyb20gXCIuL2lwLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gYWxsRkYoYSwgZnJvbSwgdG8pIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yIChjb25zdCBlIG9mIGEpIHtcbiAgICAgICAgaWYgKGkgPCBmcm9tKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChpID4gdG8pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKGUgIT09IDB4ZmYpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIsIGZyb20sIHRvKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3QgZSBvZiBhKSB7XG4gICAgICAgIGlmIChpIDwgZnJvbSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoaSA+IHRvKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChlICE9PSBiW2ldKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqKlxuICogUmV0dXJucyBsb25nIGlwIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXBUb1N0cmluZyhpcCkge1xuICAgIHN3aXRjaCAoaXAubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgSVB2NExlbjoge1xuICAgICAgICAgICAgcmV0dXJuIGlwLmpvaW4oXCIuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgSVB2Nkxlbjoge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGlwW2ldLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgaXBbaSArIDFdLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIjpcIik7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpcCBsZW5ndGhcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIElmIG1hc2sgaXMgYSBzZXF1ZW5jZSBvZiAxIGJpdHMgZm9sbG93ZWQgYnkgMCBiaXRzLCByZXR1cm4gbnVtYmVyIG9mIDEgYml0cyBlbHNlIC0xXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVNYXNrTGVuZ3RoKG1hc2spIHtcbiAgICBsZXQgb25lcyA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1jb25zdFxuICAgIGZvciAobGV0IFtpbmRleCwgYnl0ZV0gb2YgbWFzay5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKGJ5dGUgPT09IDB4ZmYpIHtcbiAgICAgICAgICAgIG9uZXMgKz0gODtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICgoYnl0ZSAmIDB4ODApICE9IDApIHtcbiAgICAgICAgICAgIG9uZXMrKztcbiAgICAgICAgICAgIGJ5dGUgPSBieXRlIDw8IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChieXRlICYgMHg4MCkgIT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBpbmRleCArIDE7IGkgPCBtYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobWFza1tpXSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gb25lcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXNrVG9IZXgobWFzaykge1xuICAgIGxldCBoZXggPSBcIjB4XCI7XG4gICAgZm9yIChjb25zdCBieXRlIG9mIG1hc2spIHtcbiAgICAgICAgaGV4ICs9IChieXRlID4+IDQpLnRvU3RyaW5nKDE2KSArIChieXRlICYgMHgwZikudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOlsiSVB2NExlbiIsIklQdjZMZW4iLCJhbGxGRiIsImEiLCJmcm9tIiwidG8iLCJpIiwiZSIsImRlZXBFcXVhbCIsImIiLCJpcFRvU3RyaW5nIiwiaXAiLCJsZW5ndGgiLCJqb2luIiwicmVzdWx0IiwicHVzaCIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJFcnJvciIsInNpbXBsZU1hc2tMZW5ndGgiLCJtYXNrIiwib25lcyIsImluZGV4IiwiYnl0ZSIsImVudHJpZXMiLCJtYXNrVG9IZXgiLCJoZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@chainsafe/netmask/dist/src/util.js\n");

/***/ })

};
;