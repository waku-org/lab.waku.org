"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/it-pushable";
exports.ids = ["vendor-chunks/it-pushable"];
exports.modules = {

/***/ "(ssr)/./node_modules/it-pushable/dist/src/fifo.js":
/*!***************************************************!*\
  !*** ./node_modules/it-pushable/dist/src/fifo.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FIFO: () => (/* binding */ FIFO)\n/* harmony export */ });\n// ported from https://www.npmjs.com/package/fast-fifo\nclass FixedFIFO {\n    constructor(hwm){\n        if (!(hwm > 0) || (hwm - 1 & hwm) !== 0) {\n            throw new Error(\"Max size for a FixedFIFO should be a power of two\");\n        }\n        this.buffer = new Array(hwm);\n        this.mask = hwm - 1;\n        this.top = 0;\n        this.btm = 0;\n        this.next = null;\n    }\n    push(data) {\n        if (this.buffer[this.top] !== undefined) {\n            return false;\n        }\n        this.buffer[this.top] = data;\n        this.top = this.top + 1 & this.mask;\n        return true;\n    }\n    shift() {\n        const last = this.buffer[this.btm];\n        if (last === undefined) {\n            return undefined;\n        }\n        this.buffer[this.btm] = undefined;\n        this.btm = this.btm + 1 & this.mask;\n        return last;\n    }\n    isEmpty() {\n        return this.buffer[this.btm] === undefined;\n    }\n}\nclass FIFO {\n    constructor(options = {}){\n        this.hwm = options.splitLimit ?? 16;\n        this.head = new FixedFIFO(this.hwm);\n        this.tail = this.head;\n        this.size = 0;\n    }\n    calculateSize(obj) {\n        if (obj?.byteLength != null) {\n            return obj.byteLength;\n        }\n        return 1;\n    }\n    push(val) {\n        if (val?.value != null) {\n            this.size += this.calculateSize(val.value);\n        }\n        if (!this.head.push(val)) {\n            const prev = this.head;\n            this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);\n            this.head.push(val);\n        }\n    }\n    shift() {\n        let val = this.tail.shift();\n        if (val === undefined && this.tail.next != null) {\n            const next = this.tail.next;\n            this.tail.next = null;\n            this.tail = next;\n            val = this.tail.shift();\n        }\n        if (val?.value != null) {\n            this.size -= this.calculateSize(val.value);\n        }\n        return val;\n    }\n    isEmpty() {\n        return this.head.isEmpty();\n    }\n} //# sourceMappingURL=fifo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaXQtcHVzaGFibGUvZGlzdC9zcmMvZmlmby5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsc0RBQXNEO0FBQ3RELE1BQU1BO0lBTUZDLFlBQVlDLEdBQUcsQ0FBRTtRQUNiLElBQUksQ0FBRUEsQ0FBQUEsTUFBTSxNQUFNLENBQUMsTUFBTyxJQUFLQSxHQUFFLE1BQU8sR0FBRztZQUN2QyxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQyxNQUFNSDtRQUN4QixJQUFJLENBQUNJLElBQUksR0FBR0osTUFBTTtRQUNsQixJQUFJLENBQUNLLEdBQUcsR0FBRztRQUNYLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7SUFDQUMsS0FBS0MsSUFBSSxFQUFFO1FBQ1AsSUFBSSxJQUFJLENBQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUNHLEdBQUcsQ0FBQyxLQUFLSyxXQUFXO1lBQ3JDLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQ0csR0FBRyxDQUFDLEdBQUdJO1FBQ3hCLElBQUksQ0FBQ0osR0FBRyxHQUFHLElBQUssQ0FBQ0EsR0FBRyxHQUFHLElBQUssSUFBSSxDQUFDRCxJQUFJO1FBQ3JDLE9BQU87SUFDWDtJQUNBTyxRQUFRO1FBQ0osTUFBTUMsT0FBTyxJQUFJLENBQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUNJLEdBQUcsQ0FBQztRQUNsQyxJQUFJTSxTQUFTRixXQUFXO1lBQ3BCLE9BQU9BO1FBQ1g7UUFDQSxJQUFJLENBQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUNJLEdBQUcsQ0FBQyxHQUFHSTtRQUN4QixJQUFJLENBQUNKLEdBQUcsR0FBRyxJQUFLLENBQUNBLEdBQUcsR0FBRyxJQUFLLElBQUksQ0FBQ0YsSUFBSTtRQUNyQyxPQUFPUTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQ0ksR0FBRyxDQUFDLEtBQUtJO0lBQ3JDO0FBQ0o7QUFDTyxNQUFNSTtJQUtUZixZQUFZZ0IsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUN0QixJQUFJLENBQUNmLEdBQUcsR0FBR2UsUUFBUUMsVUFBVSxJQUFJO1FBQ2pDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUluQixVQUFVLElBQUksQ0FBQ0UsR0FBRztRQUNsQyxJQUFJLENBQUNrQixJQUFJLEdBQUcsSUFBSSxDQUFDRCxJQUFJO1FBQ3JCLElBQUksQ0FBQ0UsSUFBSSxHQUFHO0lBQ2hCO0lBQ0FDLGNBQWNDLEdBQUcsRUFBRTtRQUNmLElBQUlBLEtBQUtDLGNBQWMsTUFBTTtZQUN6QixPQUFPRCxJQUFJQyxVQUFVO1FBQ3pCO1FBQ0EsT0FBTztJQUNYO0lBQ0FkLEtBQUtlLEdBQUcsRUFBRTtRQUNOLElBQUlBLEtBQUtDLFNBQVMsTUFBTTtZQUNwQixJQUFJLENBQUNMLElBQUksSUFBSSxJQUFJLENBQUNDLGFBQWEsQ0FBQ0csSUFBSUMsS0FBSztRQUM3QztRQUNBLElBQUksQ0FBQyxJQUFJLENBQUNQLElBQUksQ0FBQ1QsSUFBSSxDQUFDZSxNQUFNO1lBQ3RCLE1BQU1FLE9BQU8sSUFBSSxDQUFDUixJQUFJO1lBQ3RCLElBQUksQ0FBQ0EsSUFBSSxHQUFHUSxLQUFLbEIsSUFBSSxHQUFHLElBQUlULFVBQVUsSUFBSSxJQUFJLENBQUNtQixJQUFJLENBQUNmLE1BQU0sQ0FBQ3dCLE1BQU07WUFDakUsSUFBSSxDQUFDVCxJQUFJLENBQUNULElBQUksQ0FBQ2U7UUFDbkI7SUFDSjtJQUNBWixRQUFRO1FBQ0osSUFBSVksTUFBTSxJQUFJLENBQUNMLElBQUksQ0FBQ1AsS0FBSztRQUN6QixJQUFJWSxRQUFRYixhQUFjLElBQUksQ0FBQ1EsSUFBSSxDQUFDWCxJQUFJLElBQUksTUFBTztZQUMvQyxNQUFNQSxPQUFPLElBQUksQ0FBQ1csSUFBSSxDQUFDWCxJQUFJO1lBQzNCLElBQUksQ0FBQ1csSUFBSSxDQUFDWCxJQUFJLEdBQUc7WUFDakIsSUFBSSxDQUFDVyxJQUFJLEdBQUdYO1lBQ1pnQixNQUFNLElBQUksQ0FBQ0wsSUFBSSxDQUFDUCxLQUFLO1FBQ3pCO1FBQ0EsSUFBSVksS0FBS0MsU0FBUyxNQUFNO1lBQ3BCLElBQUksQ0FBQ0wsSUFBSSxJQUFJLElBQUksQ0FBQ0MsYUFBYSxDQUFDRyxJQUFJQyxLQUFLO1FBQzdDO1FBQ0EsT0FBT0Q7SUFDWDtJQUNBVixVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUNJLElBQUksQ0FBQ0osT0FBTztJQUM1QjtBQUNKLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmx1c2gtbm90ZXMvLi9ub2RlX21vZHVsZXMvaXQtcHVzaGFibGUvZGlzdC9zcmMvZmlmby5qcz9mNzIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBvcnRlZCBmcm9tIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2Zhc3QtZmlmb1xuY2xhc3MgRml4ZWRGSUZPIHtcbiAgICBidWZmZXI7XG4gICAgbWFzaztcbiAgICB0b3A7XG4gICAgYnRtO1xuICAgIG5leHQ7XG4gICAgY29uc3RydWN0b3IoaHdtKSB7XG4gICAgICAgIGlmICghKGh3bSA+IDApIHx8ICgoaHdtIC0gMSkgJiBod20pICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01heCBzaXplIGZvciBhIEZpeGVkRklGTyBzaG91bGQgYmUgYSBwb3dlciBvZiB0d28nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheShod20pO1xuICAgICAgICB0aGlzLm1hc2sgPSBod20gLSAxO1xuICAgICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICAgIHRoaXMuYnRtID0gMDtcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB9XG4gICAgcHVzaChkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlclt0aGlzLnRvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMudG9wXSA9IGRhdGE7XG4gICAgICAgIHRoaXMudG9wID0gKHRoaXMudG9wICsgMSkgJiB0aGlzLm1hc2s7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMuYnVmZmVyW3RoaXMuYnRtXTtcbiAgICAgICAgaWYgKGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ0bV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYnRtID0gKHRoaXMuYnRtICsgMSkgJiB0aGlzLm1hc2s7XG4gICAgICAgIHJldHVybiBsYXN0O1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5idG1dID09PSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEZJRk8ge1xuICAgIHNpemU7XG4gICAgaHdtO1xuICAgIGhlYWQ7XG4gICAgdGFpbDtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5od20gPSBvcHRpb25zLnNwbGl0TGltaXQgPz8gMTY7XG4gICAgICAgIHRoaXMuaGVhZCA9IG5ldyBGaXhlZEZJRk8odGhpcy5od20pO1xuICAgICAgICB0aGlzLnRhaWwgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIGNhbGN1bGF0ZVNpemUob2JqKSB7XG4gICAgICAgIGlmIChvYmo/LmJ5dGVMZW5ndGggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5ieXRlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBwdXNoKHZhbCkge1xuICAgICAgICBpZiAodmFsPy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNpemUgKz0gdGhpcy5jYWxjdWxhdGVTaXplKHZhbC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmhlYWQucHVzaCh2YWwpKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5oZWFkO1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gcHJldi5uZXh0ID0gbmV3IEZpeGVkRklGTygyICogdGhpcy5oZWFkLmJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5oZWFkLnB1c2godmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMudGFpbC5zaGlmdCgpO1xuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQgJiYgKHRoaXMudGFpbC5uZXh0ICE9IG51bGwpKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy50YWlsLm5leHQ7XG4gICAgICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnRhaWwgPSBuZXh0O1xuICAgICAgICAgICAgdmFsID0gdGhpcy50YWlsLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbD8udmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zaXplIC09IHRoaXMuY2FsY3VsYXRlU2l6ZSh2YWwudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWQuaXNFbXB0eSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpZm8uanMubWFwIl0sIm5hbWVzIjpbIkZpeGVkRklGTyIsImNvbnN0cnVjdG9yIiwiaHdtIiwiRXJyb3IiLCJidWZmZXIiLCJBcnJheSIsIm1hc2siLCJ0b3AiLCJidG0iLCJuZXh0IiwicHVzaCIsImRhdGEiLCJ1bmRlZmluZWQiLCJzaGlmdCIsImxhc3QiLCJpc0VtcHR5IiwiRklGTyIsIm9wdGlvbnMiLCJzcGxpdExpbWl0IiwiaGVhZCIsInRhaWwiLCJzaXplIiwiY2FsY3VsYXRlU2l6ZSIsIm9iaiIsImJ5dGVMZW5ndGgiLCJ2YWwiLCJ2YWx1ZSIsInByZXYiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/it-pushable/dist/src/fifo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/it-pushable/dist/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/it-pushable/dist/src/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   pushable: () => (/* binding */ pushable),\n/* harmony export */   pushableV: () => (/* binding */ pushableV)\n/* harmony export */ });\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-defer */ \"(ssr)/./node_modules/p-defer/index.js\");\n/* harmony import */ var _fifo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fifo.js */ \"(ssr)/./node_modules/it-pushable/dist/src/fifo.js\");\n/**\n * @packageDocumentation\n *\n * An iterable that you can push values into.\n *\n * @example\n *\n * ```js\n * import { pushable } from 'it-pushable'\n *\n * const source = pushable()\n *\n * setTimeout(() => source.push('hello'), 100)\n * setTimeout(() => source.push('world'), 200)\n * setTimeout(() => source.end(), 300)\n *\n * const start = Date.now()\n *\n * for await (const value of source) {\n *   console.log(`got \"${value}\" after ${Date.now() - start}ms`)\n * }\n * console.log(`done after ${Date.now() - start}ms`)\n *\n * // Output:\n * // got \"hello\" after 105ms\n * // got \"world\" after 207ms\n * // done after 309ms\n * ```\n *\n * @example\n *\n * ```js\n * import { pushableV } from 'it-pushable'\n * import all from 'it-all'\n *\n * const source = pushableV()\n *\n * source.push(1)\n * source.push(2)\n * source.push(3)\n * source.end()\n *\n * console.info(await all(source))\n *\n * // Output:\n * // [ [1, 2, 3] ]\n * ```\n */ \n\nclass AbortError extends Error {\n    constructor(message, code){\n        super(message ?? \"The operation was aborted\");\n        this.type = \"aborted\";\n        this.code = code ?? \"ABORT_ERR\";\n    }\n}\nfunction pushable(options = {}) {\n    const getNext = (buffer)=>{\n        const next = buffer.shift();\n        if (next == null) {\n            return {\n                done: true\n            };\n        }\n        if (next.error != null) {\n            throw next.error;\n        }\n        return {\n            done: next.done === true,\n            // @ts-expect-error if done is false, value will be present\n            value: next.value\n        };\n    };\n    return _pushable(getNext, options);\n}\nfunction pushableV(options = {}) {\n    const getNext = (buffer)=>{\n        let next;\n        const values = [];\n        while(!buffer.isEmpty()){\n            next = buffer.shift();\n            if (next == null) {\n                break;\n            }\n            if (next.error != null) {\n                throw next.error;\n            }\n            if (next.done === false) {\n                // @ts-expect-error if done is false value should be pushed\n                values.push(next.value);\n            }\n        }\n        if (next == null) {\n            return {\n                done: true\n            };\n        }\n        return {\n            done: next.done === true,\n            value: values\n        };\n    };\n    return _pushable(getNext, options);\n}\nfunction _pushable(getNext, options) {\n    options = options ?? {};\n    let onEnd = options.onEnd;\n    let buffer = new _fifo_js__WEBPACK_IMPORTED_MODULE_0__.FIFO();\n    let pushable;\n    let onNext;\n    let ended;\n    let drain = (0,p_defer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    const waitNext = async ()=>{\n        try {\n            if (!buffer.isEmpty()) {\n                return getNext(buffer);\n            }\n            if (ended) {\n                return {\n                    done: true\n                };\n            }\n            return await new Promise((resolve, reject)=>{\n                onNext = (next)=>{\n                    onNext = null;\n                    buffer.push(next);\n                    try {\n                        resolve(getNext(buffer));\n                    } catch (err) {\n                        reject(err);\n                    }\n                    return pushable;\n                };\n            });\n        } finally{\n            if (buffer.isEmpty()) {\n                // settle promise in the microtask queue to give consumers a chance to\n                // await after calling .push\n                queueMicrotask(()=>{\n                    drain.resolve();\n                    drain = (0,p_defer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n                });\n            }\n        }\n    };\n    const bufferNext = (next)=>{\n        if (onNext != null) {\n            return onNext(next);\n        }\n        buffer.push(next);\n        return pushable;\n    };\n    const bufferError = (err)=>{\n        buffer = new _fifo_js__WEBPACK_IMPORTED_MODULE_0__.FIFO();\n        if (onNext != null) {\n            return onNext({\n                error: err\n            });\n        }\n        buffer.push({\n            error: err\n        });\n        return pushable;\n    };\n    const push = (value)=>{\n        if (ended) {\n            return pushable;\n        }\n        // @ts-expect-error `byteLength` is not declared on PushType\n        if (options?.objectMode !== true && value?.byteLength == null) {\n            throw new Error(\"objectMode was not true but tried to push non-Uint8Array value\");\n        }\n        return bufferNext({\n            done: false,\n            value\n        });\n    };\n    const end = (err)=>{\n        if (ended) return pushable;\n        ended = true;\n        return err != null ? bufferError(err) : bufferNext({\n            done: true\n        });\n    };\n    const _return = ()=>{\n        buffer = new _fifo_js__WEBPACK_IMPORTED_MODULE_0__.FIFO();\n        end();\n        return {\n            done: true\n        };\n    };\n    const _throw = (err)=>{\n        end(err);\n        return {\n            done: true\n        };\n    };\n    pushable = {\n        [Symbol.asyncIterator] () {\n            return this;\n        },\n        next: waitNext,\n        return: _return,\n        throw: _throw,\n        push,\n        end,\n        get readableLength () {\n            return buffer.size;\n        },\n        onEmpty: async (options)=>{\n            const signal = options?.signal;\n            signal?.throwIfAborted();\n            if (buffer.isEmpty()) {\n                return;\n            }\n            let cancel;\n            let listener;\n            if (signal != null) {\n                cancel = new Promise((resolve, reject)=>{\n                    listener = ()=>{\n                        reject(new AbortError());\n                    };\n                    signal.addEventListener(\"abort\", listener);\n                });\n            }\n            try {\n                await Promise.race([\n                    drain.promise,\n                    cancel\n                ]);\n            } finally{\n                if (listener != null && signal != null) {\n                    signal?.removeEventListener(\"abort\", listener);\n                }\n            }\n        }\n    };\n    if (onEnd == null) {\n        return pushable;\n    }\n    const _pushable = pushable;\n    pushable = {\n        [Symbol.asyncIterator] () {\n            return this;\n        },\n        next () {\n            return _pushable.next();\n        },\n        throw (err) {\n            _pushable.throw(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return {\n                done: true\n            };\n        },\n        return () {\n            _pushable.return();\n            if (onEnd != null) {\n                onEnd();\n                onEnd = undefined;\n            }\n            return {\n                done: true\n            };\n        },\n        push,\n        end (err) {\n            _pushable.end(err);\n            if (onEnd != null) {\n                onEnd(err);\n                onEnd = undefined;\n            }\n            return pushable;\n        },\n        get readableLength () {\n            return _pushable.readableLength;\n        },\n        onEmpty: (opts)=>{\n            return _pushable.onEmpty(opts);\n        }\n    };\n    return pushable;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/it-pushable/dist/src/index.js\n");

/***/ })

};
;