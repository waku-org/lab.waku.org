"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dns-query";
exports.ids = ["vendor-chunks/dns-query"];
exports.modules = {

/***/ "(ssr)/./node_modules/dns-query/common.mjs":
/*!*******************************************!*\
  !*** ./node_modules/dns-query/common.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   BaseEndpoint: () => (/* binding */ BaseEndpoint),\n/* harmony export */   HTTPEndpoint: () => (/* binding */ HTTPEndpoint),\n/* harmony export */   HTTPStatusError: () => (/* binding */ HTTPStatusError),\n/* harmony export */   InvalidProtocolError: () => (/* binding */ InvalidProtocolError),\n/* harmony export */   ResponseError: () => (/* binding */ ResponseError),\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   UDP4Endpoint: () => (/* binding */ UDP4Endpoint),\n/* harmony export */   UDP6Endpoint: () => (/* binding */ UDP6Endpoint),\n/* harmony export */   UDPEndpoint: () => (/* binding */ UDPEndpoint),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   parseEndpoint: () => (/* binding */ parseEndpoint),\n/* harmony export */   reduceError: () => (/* binding */ reduceError),\n/* harmony export */   supportedProtocols: () => (/* binding */ supportedProtocols),\n/* harmony export */   toEndpoint: () => (/* binding */ toEndpoint)\n/* harmony export */ });\nlet AbortError = typeof global !== \"undefined\" ? global.AbortError :  false ? 0 : null;\nif (!AbortError) {\n    AbortError = class AbortError extends Error {\n        constructor(message = \"Request aborted.\"){\n            super(message);\n        }\n    };\n}\nAbortError.prototype.name = \"AbortError\";\nAbortError.prototype.code = \"ABORT_ERR\";\nconst URL = typeof globalThis !== \"undefined\" && globalThis.URL || require(\"url\").URL;\n\nclass HTTPStatusError extends Error {\n    constructor(uri, code, method){\n        super(\"status=\" + code + \" while requesting \" + uri + \" [\" + method + \"]\");\n        this.uri = uri;\n        this.status = code;\n        this.method = method;\n    }\n    toJSON() {\n        return {\n            code: this.code,\n            uri: this.uri,\n            status: this.status,\n            method: this.method,\n            endpoint: this.endpoint\n        };\n    }\n}\nHTTPStatusError.prototype.name = \"HTTPStatusError\";\nHTTPStatusError.prototype.code = \"HTTP_STATUS\";\nclass ResponseError extends Error {\n    constructor(message, cause){\n        super(message);\n        this.cause = cause;\n    }\n    toJSON() {\n        return {\n            message: this.message,\n            endpoint: this.endpoint,\n            code: this.code,\n            cause: reduceError(this.cause)\n        };\n    }\n}\nResponseError.prototype.name = \"ResponseError\";\nResponseError.prototype.code = \"RESPONSE_ERR\";\nclass TimeoutError extends Error {\n    constructor(timeout){\n        super(\"Timeout (t=\" + timeout + \").\");\n        this.timeout = timeout;\n    }\n    toJSON() {\n        return {\n            code: this.code,\n            endpoint: this.endpoint,\n            timeout: this.timeout\n        };\n    }\n}\nTimeoutError.prototype.name = \"TimeoutError\";\nTimeoutError.prototype.code = \"ETIMEOUT\";\nconst v4Regex = /^((\\d{1,3}\\.){3,3}\\d{1,3})(:(\\d{2,5}))?$/;\nconst v6Regex = /^((::)?(((\\d{1,3}\\.){3}(\\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?)(:(\\d{2,5}))?$/i;\nfunction reduceError(err) {\n    if (typeof err === \"string\") {\n        return {\n            message: err\n        };\n    }\n    try {\n        const json = JSON.stringify(err);\n        if (json !== \"{}\") {\n            return JSON.parse(json);\n        }\n    } catch (e) {}\n    const error = {\n        message: String(err.message || err)\n    };\n    if (err.code !== undefined) {\n        error.code = String(err.code);\n    }\n    return error;\n}\nconst baseParts = /^(([a-z0-9]+:)\\/\\/)?([^/[\\s:]+|\\[[^\\]]+\\])?(:([^/\\s]+))?(\\/[^\\s]*)?(.*)$/;\nconst httpFlags = /\\[(post|get|((ipv4|ipv6|name)=([^\\]]+)))\\]/ig;\nconst updFlags = /\\[(((pk|name)=([^\\]]+)))\\]/ig;\nfunction parseEndpoint(endpoint) {\n    const parts = baseParts.exec(endpoint);\n    const protocol = parts[2] || \"https:\";\n    const host = parts[3];\n    const port = parts[5];\n    const path = parts[6];\n    const rest = parts[7];\n    if (protocol === \"https:\" || protocol === \"http:\") {\n        const flags = parseFlags(rest, httpFlags);\n        return {\n            name: flags.name,\n            protocol,\n            ipv4: flags.ipv4,\n            ipv6: flags.ipv6,\n            host,\n            port,\n            path,\n            method: flags.post ? \"POST\" : \"GET\"\n        };\n    }\n    if (protocol === \"udp:\" || protocol === \"udp4:\" || protocol === \"udp6:\") {\n        const flags = parseFlags(rest, updFlags);\n        const v6Parts = /^\\[(.*)\\]$/.exec(host);\n        if (v6Parts && protocol === \"udp4:\") {\n            throw new Error(`Endpoint parsing error: Cannot use ipv6 host with udp4: (endpoint=${endpoint})`);\n        }\n        if (!v6Parts && protocol === \"udp6:\") {\n            throw new Error(`Endpoint parsing error: Incorrectly formatted host for udp6: (endpoint=${endpoint})`);\n        }\n        if (v6Parts) {\n            return new UDP6Endpoint({\n                protocol: \"udp6:\",\n                ipv6: v6Parts[1],\n                port,\n                pk: flags.pk,\n                name: flags.name\n            });\n        }\n        return new UDP4Endpoint({\n            protocol: \"udp4:\",\n            ipv4: host,\n            port,\n            pk: flags.pk,\n            name: flags.name\n        });\n    }\n    throw new InvalidProtocolError(protocol, endpoint);\n}\nfunction parseFlags(rest, regex) {\n    regex.lastIndex = 0;\n    const result = {};\n    while(true){\n        const match = regex.exec(rest);\n        if (!match) break;\n        if (match[2]) {\n            result[match[3].toLowerCase()] = match[4];\n        } else {\n            result[match[1].toLowerCase()] = true;\n        }\n    }\n    return result;\n}\nclass InvalidProtocolError extends Error {\n    constructor(protocol, endpoint){\n        super(`Invalid Endpoint: unsupported protocol \"${protocol}\" for endpoint: ${endpoint}, supported protocols: ${supportedProtocols.join(\", \")}`);\n        this.protocol = protocol;\n        this.endpoint = endpoint;\n    }\n    toJSON() {\n        return {\n            code: this.code,\n            endpoint: this.endpoint,\n            timeout: this.timeout\n        };\n    }\n}\nInvalidProtocolError.prototype.name = \"InvalidProtocolError\";\nInvalidProtocolError.prototype.code = \"EPROTOCOL\";\nconst supportedProtocols = [\n    \"http:\",\n    \"https:\",\n    \"udp4:\",\n    \"udp6:\"\n];\nclass BaseEndpoint {\n    constructor(opts, isHTTP){\n        this.name = opts.name || null;\n        this.protocol = opts.protocol;\n        const port = typeof opts.port === \"string\" ? opts.port = parseInt(opts.port, 10) : opts.port;\n        if (port === undefined || port === null) {\n            this.port = isHTTP ? this.protocol === \"https:\" ? 443 : 80 : opts.pk ? 443 : 53;\n        } else if (typeof port !== \"number\" && !isNaN(port)) {\n            throw new Error(`Invalid Endpoint: port \"${opts.port}\" needs to be a number: ${JSON.stringify(opts)}`);\n        } else {\n            this.port = port;\n        }\n    }\n    toJSON() {\n        return this.toString();\n    }\n}\nclass UDPEndpoint extends BaseEndpoint {\n    constructor(opts){\n        super(opts, false);\n        this.pk = opts.pk || null;\n    }\n    toString() {\n        const port = this.port !== (this.pk ? 443 : 53) ? `:${this.port}` : \"\";\n        const pk = this.pk ? ` [pk=${this.pk}]` : \"\";\n        const name = this.name ? ` [name=${this.name}]` : \"\";\n        return `udp://${this.ipv4 || `[${this.ipv6}]`}${port}${pk}${name}`;\n    }\n}\nclass UDP4Endpoint extends UDPEndpoint {\n    constructor(opts){\n        super(Object.assign({\n            protocol: \"udp4:\"\n        }, opts));\n        if (!opts.ipv4 || typeof opts.ipv4 !== \"string\") {\n            throw new Error(`Invalid Endpoint: .ipv4 \"${opts.ipv4}\" needs to be set: ${JSON.stringify(opts)}`);\n        }\n        this.ipv4 = opts.ipv4;\n    }\n}\nclass UDP6Endpoint extends UDPEndpoint {\n    constructor(opts){\n        super(Object.assign({\n            protocol: \"udp6:\"\n        }, opts));\n        if (!opts.ipv6 || typeof opts.ipv6 !== \"string\") {\n            throw new Error(`Invalid Endpoint: .ipv6 \"${opts.ipv6}\" needs to be set: ${JSON.stringify(opts)}`);\n        }\n        this.ipv6 = opts.ipv6;\n    }\n}\nfunction safeHost(host) {\n    return v6Regex.test(host) && !v4Regex.test(host) ? `[${host}]` : host;\n}\nclass HTTPEndpoint extends BaseEndpoint {\n    constructor(opts){\n        super(Object.assign({\n            protocol: \"https:\"\n        }, opts), true);\n        if (!opts.host) {\n            if (opts.ipv4) {\n                opts.host = opts.ipv4;\n            }\n            if (opts.ipv6) {\n                opts.host = `[${opts.ipv6}]`;\n            }\n        }\n        if (!opts.host || typeof opts.host !== \"string\") {\n            throw new Error(`Invalid Endpoint: host \"${opts.path}\" needs to be set: ${JSON.stringify(opts)}`);\n        }\n        this.host = opts.host;\n        this.path = opts.path || \"/dns-query\";\n        this.method = /^post$/i.test(opts.method) ? \"POST\" : \"GET\";\n        this.ipv4 = opts.ipv4;\n        this.ipv6 = opts.ipv6;\n        if (!this.ipv6) {\n            const v6Parts = v6Regex.exec(this.host);\n            if (v6Parts) {\n                this.ipv6 = v6Parts[1];\n            }\n        }\n        if (!this.ipv4) {\n            if (v4Regex.test(this.host)) {\n                this.ipv4 = this.host;\n            }\n        }\n        const url = `${this.protocol}//${safeHost(this.host)}:${this.port}${this.path}`;\n        try {\n            this.url = new URL(url);\n        } catch (err) {\n            throw new Error(err.message + ` [${url}]`);\n        }\n    }\n    toString() {\n        const protocol = this.protocol === \"https:\" ? \"\" : \"http://\";\n        const port = this.port !== (this.protocol === \"https:\" ? 443 : 80) ? `:${this.port}` : \"\";\n        const method = this.method !== \"GET\" ? \" [post]\" : \"\";\n        const path = this.path === \"/dns-query\" ? \"\" : this.path;\n        const name = this.name ? ` [name=${this.name}]` : \"\";\n        const ipv4 = this.ipv4 && this.ipv4 !== this.host ? ` [ipv4=${this.ipv4}]` : \"\";\n        const ipv6 = this.ipv6 && this.ipv6 !== this.host ? ` [ipv6=${this.ipv6}]` : \"\";\n        return `${protocol}${safeHost(this.host)}${port}${path}${method}${ipv4}${ipv6}${name}`;\n    }\n}\nfunction toEndpoint(input) {\n    let opts;\n    if (typeof input === \"string\") {\n        opts = parseEndpoint(input);\n    } else {\n        if (typeof input !== \"object\" || input === null || Array.isArray(input)) {\n            throw new Error(`Can not convert ${input} to an endpoint`);\n        } else if (input instanceof BaseEndpoint) {\n            return input;\n        }\n        opts = input;\n    }\n    if (opts.protocol === null || opts.protocol === undefined) {\n        opts.protocol = \"https:\";\n    }\n    const protocol = opts.protocol;\n    if (protocol === \"udp4:\") {\n        return new UDP4Endpoint(opts);\n    }\n    if (protocol === \"udp6:\") {\n        return new UDP6Endpoint(opts);\n    }\n    if (protocol === \"https:\" || protocol === \"http:\") {\n        return new HTTPEndpoint(opts);\n    }\n    throw new InvalidProtocolError(protocol, JSON.stringify(opts));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-query/common.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-query/index.mjs":
/*!******************************************!*\
  !*** ./node_modules/dns-query/index.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.AbortError),\n/* harmony export */   BaseEndpoint: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.BaseEndpoint),\n/* harmony export */   DNSRcodeError: () => (/* binding */ DNSRcodeError),\n/* harmony export */   DNS_RCODE_ERROR: () => (/* binding */ DNS_RCODE_ERROR),\n/* harmony export */   DNS_RCODE_MESSAGE: () => (/* binding */ DNS_RCODE_MESSAGE),\n/* harmony export */   HTTPEndpoint: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.HTTPEndpoint),\n/* harmony export */   HTTPStatusError: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.HTTPStatusError),\n/* harmony export */   ResponseError: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.ResponseError),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.TimeoutError),\n/* harmony export */   UDP4Endpoint: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.UDP4Endpoint),\n/* harmony export */   UDP6Endpoint: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.UDP6Endpoint),\n/* harmony export */   Wellknown: () => (/* binding */ Wellknown),\n/* harmony export */   backup: () => (/* binding */ backup),\n/* harmony export */   combineTXT: () => (/* binding */ combineTXT),\n/* harmony export */   lookupTxt: () => (/* binding */ lookupTxt),\n/* harmony export */   parseEndpoint: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.parseEndpoint),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   toEndpoint: () => (/* reexport safe */ _common_mjs__WEBPACK_IMPORTED_MODULE_5__.toEndpoint),\n/* harmony export */   validateResponse: () => (/* binding */ validateResponse),\n/* harmony export */   wellknown: () => (/* binding */ wellknown)\n/* harmony export */ });\n/* harmony import */ var _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @leichtgewicht/dns-packet */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/index.mjs\");\n/* harmony import */ var _leichtgewicht_dns_packet_rcodes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @leichtgewicht/dns-packet/rcodes.js */ \"(ssr)/./node_modules/@leichtgewicht/dns-packet/rcodes.mjs\");\n/* harmony import */ var utf8_codec__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utf8-codec */ \"(ssr)/./node_modules/utf8-codec/index.mjs\");\n/* harmony import */ var _lib_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib.mjs */ \"(ssr)/./node_modules/dns-query/lib.mjs\");\n/* harmony import */ var _resolvers_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resolvers.mjs */ \"(ssr)/./node_modules/dns-query/resolvers.mjs\");\n/* harmony import */ var _common_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common.mjs */ \"(ssr)/./node_modules/dns-query/common.mjs\");\n\n\n\n\n\n\n\nconst DNS_RCODE_ERROR = {\n    1: \"FormErr\",\n    2: \"ServFail\",\n    3: \"NXDomain\",\n    4: \"NotImp\",\n    5: \"Refused\",\n    6: \"YXDomain\",\n    7: \"YXRRSet\",\n    8: \"NXRRSet\",\n    9: \"NotAuth\",\n    10: \"NotZone\",\n    11: \"DSOTYPENI\"\n};\nconst DNS_RCODE_MESSAGE = {\n    // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6\n    1: \"The name server was unable to interpret the query.\",\n    2: \"The name server was unable to process this query due to a problem with the name server.\",\n    3: \"Non-Existent Domain.\",\n    4: \"The name server does not support the requested kind of query.\",\n    5: \"The name server refuses to perform the specified operation for policy reasons.\",\n    6: \"Name Exists when it should not.\",\n    7: \"RR Set Exists when it should not.\",\n    8: \"RR Set that should exist does not.\",\n    9: \"Server Not Authoritative for zone  / Not Authorized.\",\n    10: \"Name not contained in zone.\",\n    11: \"DSO-TYPE Not Implemented.\"\n};\nclass DNSRcodeError extends Error {\n    constructor(rcode, question){\n        super(`${DNS_RCODE_MESSAGE[rcode] || \"Undefined error.\"} (rcode=${rcode}${DNS_RCODE_ERROR[rcode] ? `, error=${DNS_RCODE_ERROR[rcode]}` : \"\"}, question=${JSON.stringify(question)})`);\n        this.rcode = rcode;\n        this.code = `DNS_RCODE_${rcode}`;\n        this.error = DNS_RCODE_ERROR[rcode];\n        this.question = question;\n    }\n    toJSON() {\n        return {\n            code: this.code,\n            error: this.error,\n            question: this.question,\n            endpoint: this.endpoint\n        };\n    }\n}\nfunction validateResponse(data, question) {\n    const rcode = (0,_leichtgewicht_dns_packet_rcodes_js__WEBPACK_IMPORTED_MODULE_1__.toRcode)(data.rcode);\n    if (rcode !== 0) {\n        const err = new DNSRcodeError(rcode, question);\n        err.endpoint = data.endpoint;\n        throw err;\n    }\n    return data;\n}\nfunction processResolvers(res) {\n    const time = res.time === null || res.time === undefined ? Date.now() : res.time;\n    const resolvers = _lib_mjs__WEBPACK_IMPORTED_MODULE_3__.processResolvers(res.data.map((resolver)=>{\n        resolver.endpoint = (0,_common_mjs__WEBPACK_IMPORTED_MODULE_5__.toEndpoint)(Object.assign({\n            name: resolver.name\n        }, resolver.endpoint));\n        return resolver;\n    }));\n    const endpoints = resolvers.map((resolver)=>resolver.endpoint);\n    return {\n        data: {\n            resolvers,\n            resolverByName: resolvers.reduce((byName, resolver)=>{\n                byName[resolver.name] = resolver;\n                return byName;\n            }, {}),\n            endpoints,\n            endpointByName: endpoints.reduce((byName, endpoint)=>{\n                byName[endpoint.name] = endpoint;\n                return byName;\n            }, {})\n        },\n        time\n    };\n}\nconst backup = processResolvers(_resolvers_mjs__WEBPACK_IMPORTED_MODULE_4__.resolvers);\nfunction toMultiQuery(singleQuery) {\n    const query = Object.assign({\n        type: \"query\"\n    }, singleQuery);\n    delete query.question;\n    query.questions = [];\n    if (singleQuery.question) {\n        query.questions.push(singleQuery.question);\n    }\n    return query;\n}\nfunction queryOne(endpoint, query, timeout, abortSignal) {\n    if (abortSignal && abortSignal.aborted) {\n        return Promise.reject(new _common_mjs__WEBPACK_IMPORTED_MODULE_5__.AbortError());\n    }\n    if (endpoint.protocol === \"udp4:\" || endpoint.protocol === \"udp6:\") {\n        return _lib_mjs__WEBPACK_IMPORTED_MODULE_3__.queryDns(endpoint, query, timeout, abortSignal);\n    }\n    return queryDoh(endpoint, query, timeout, abortSignal);\n}\nfunction queryDoh(endpoint, query, timeout, abortSignal) {\n    return _lib_mjs__WEBPACK_IMPORTED_MODULE_3__.request(endpoint.url, endpoint.method, _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_0__.encode(Object.assign({\n        flags: _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_0__.RECURSION_DESIRED\n    }, query)), timeout, abortSignal).then(function(res) {\n        const data = res.data;\n        const response = res.response;\n        let error = res.error;\n        if (error === undefined) {\n            if (data.length === 0) {\n                error = new _common_mjs__WEBPACK_IMPORTED_MODULE_5__.ResponseError(\"Empty.\");\n            } else {\n                try {\n                    const decoded = _leichtgewicht_dns_packet__WEBPACK_IMPORTED_MODULE_0__.decode(data);\n                    decoded.response = response;\n                    return decoded;\n                } catch (err) {\n                    error = new _common_mjs__WEBPACK_IMPORTED_MODULE_5__.ResponseError(\"Invalid packet (cause=\" + err.message + \")\", err);\n                }\n            }\n        }\n        throw Object.assign(error, {\n            response\n        });\n    });\n}\nconst UPDATE_URL = new _common_mjs__WEBPACK_IMPORTED_MODULE_5__.URL(\"https://martinheidegger.github.io/dns-query/resolvers.json\");\nfunction concatUint8(arrs) {\n    const res = new Uint8Array(arrs.reduce((len, arr)=>len + arr.length, 0));\n    let pos = 0;\n    for (const arr of arrs){\n        res.set(arr, pos);\n        pos += arr.length;\n    }\n    return res;\n}\nfunction combineTXT(inputs) {\n    return (0,utf8_codec__WEBPACK_IMPORTED_MODULE_2__.decode)(concatUint8(inputs));\n}\nfunction isNameString(entry) {\n    return /^@/.test(entry);\n}\nclass Wellknown {\n    constructor(opts){\n        this.opts = Object.assign({\n            timeout: 5000,\n            update: true,\n            updateURL: UPDATE_URL,\n            persist: false,\n            localStoragePrefix: \"dnsquery_\",\n            maxAge: 300000 // 5 minutes\n        }, opts);\n        this._dataP = null;\n    }\n    _data(force, outdated) {\n        if (!force && this._dataP !== null) {\n            return this._dataP.then((res)=>{\n                if (res.time < Date.now() - this.opts.maxAge) {\n                    return this._data(true, res);\n                }\n                return res;\n            });\n        }\n        this._dataP = !this.opts.update ? Promise.resolve(backup) : _lib_mjs__WEBPACK_IMPORTED_MODULE_3__.loadJSON(this.opts.updateURL, this.opts.persist ? {\n            name: \"resolvers.json\",\n            localStoragePrefix: this.opts.localStoragePrefix,\n            maxTime: Date.now() - this.opts.maxAge\n        } : null, this.opts.timeout).then((res)=>processResolvers({\n                data: res.data.resolvers,\n                time: res.time\n            })).catch(()=>outdated || backup);\n        return this._dataP;\n    }\n    data() {\n        return this._data(false).then((data)=>data.data);\n    }\n    endpoints(input) {\n        if (input === null || input === undefined) {\n            return this.data().then((data)=>data.endpoints);\n        }\n        if (input === \"doh\") {\n            input = filterDoh;\n        }\n        if (input === \"dns\") {\n            input = filterDns;\n        }\n        if (typeof input === \"function\") {\n            return this.data().then((data)=>data.endpoints.filter(input));\n        }\n        if (typeof input === \"string\" || typeof input[Symbol.iterator] !== \"function\") {\n            return Promise.reject(new Error(`Endpoints (${input}) needs to be iterable (array).`));\n        }\n        input = Array.from(input).filter(Boolean);\n        if (input.findIndex(isNameString) === -1) {\n            try {\n                return Promise.resolve(input.map(_common_mjs__WEBPACK_IMPORTED_MODULE_5__.toEndpoint));\n            } catch (err) {\n                return Promise.reject(err);\n            }\n        }\n        return this.data().then((data)=>input.map((entry)=>{\n                if (isNameString(entry)) {\n                    const found = data.endpointByName[entry.substring(1)];\n                    if (!found) {\n                        throw new Error(`Endpoint ${entry} is not known.`);\n                    }\n                    return found;\n                }\n                return (0,_common_mjs__WEBPACK_IMPORTED_MODULE_5__.toEndpoint)(entry);\n            }));\n    }\n}\nconst wellknown = new Wellknown();\nfunction isPromise(input) {\n    if (input === null) {\n        return false;\n    }\n    if (typeof input !== \"object\") {\n        return false;\n    }\n    return typeof input.then === \"function\";\n}\nfunction toPromise(input) {\n    return isPromise(input) ? input : Promise.resolve(input);\n}\nfunction query(q, opts) {\n    opts = Object.assign({\n        retries: 5,\n        timeout: 30000 // 30 seconds\n    }, opts);\n    if (!q.question) return Promise.reject(new Error(\"To request data you need to specify a .question!\"));\n    return toPromise(opts.endpoints).then((endpoints)=>{\n        if (!Array.isArray(endpoints) || endpoints.length === 0) {\n            throw new Error(\"No endpoints defined to lookup dns records.\");\n        }\n        return queryN(endpoints.map(_common_mjs__WEBPACK_IMPORTED_MODULE_5__.toEndpoint), toMultiQuery(q), opts);\n    }).then((data)=>{\n        data.question = data.questions[0];\n        delete data.questions;\n        return data;\n    });\n}\nfunction lookupTxt(domain, opts) {\n    const q = Object.assign({\n        question: {\n            type: \"TXT\",\n            name: domain\n        }\n    }, opts.query);\n    return query(q, opts).then((data)=>{\n        validateResponse(data, q);\n        return {\n            entries: (data.answers || []).filter((answer)=>answer.type === \"TXT\" && answer.data).map((answer)=>{\n                return {\n                    data: combineTXT(answer.data),\n                    ttl: answer.ttl\n                };\n            }).sort((a, b)=>{\n                if (a.data > b.data) return 1;\n                if (a.data < b.data) return -1;\n                return 0;\n            }),\n            endpoint: data.endpoint\n        };\n    });\n}\nfunction queryN(endpoints, q, opts) {\n    const endpoint = endpoints.length === 1 ? endpoints[0] : endpoints[Math.floor(Math.random() * endpoints.length) % endpoints.length];\n    return queryOne(endpoint, q, opts.timeout, opts.signal).then((data)=>{\n        // Add the endpoint to give a chance to identify which endpoint returned the result\n        data.endpoint = endpoint.toString();\n        return data;\n    }, (err)=>{\n        if (err.name === \"AbortError\" || opts.retries === 0) {\n            err.endpoint = endpoint.toString();\n            throw err;\n        }\n        if (opts.retries > 0) {\n            opts.retries -= 1;\n        }\n        return queryN(endpoints, q, opts);\n    });\n}\nfunction filterDoh(endpoint) {\n    return endpoint.protocol === \"https:\" || endpoint.protocol === \"http:\";\n}\nfunction filterDns(endpoint) {\n    return endpoint.protocol === \"udp4:\" || endpoint.protocol === \"udp6:\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-query/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-query/lib.mjs":
/*!****************************************!*\
  !*** ./node_modules/dns-query/lib.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadJSON: () => (/* binding */ loadJSON),\n/* harmony export */   processResolvers: () => (/* binding */ processResolvers),\n/* harmony export */   queryDns: () => (/* binding */ queryDns),\n/* harmony export */   request: () => (/* binding */ request)\n/* harmony export */ });\n/* harmony import */ var dns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dns */ \"dns\");\n/* harmony import */ var dgram__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dgram */ \"dgram\");\n/* harmony import */ var _leichtgewicht_dns_socket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @leichtgewicht/dns-socket */ \"(ssr)/./node_modules/@leichtgewicht/dns-socket/index.mjs\");\n/* harmony import */ var _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @leichtgewicht/ip-codec */ \"(ssr)/./node_modules/@leichtgewicht/ip-codec/index.mjs\");\n/* harmony import */ var _leichtgewicht_base64_codec__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @leichtgewicht/base64-codec */ \"(ssr)/./node_modules/@leichtgewicht/base64-codec/index.mjs\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var _common_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common.mjs */ \"(ssr)/./node_modules/dns-query/common.mjs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! buffer */ \"buffer\");\n\n\n\n\n\n\n\n\n\n\n\nconst { AbortError, HTTPStatusError, TimeoutError, UDP4Endpoint, UDP6Endpoint, URL } = _common_mjs__WEBPACK_IMPORTED_MODULE_7__;\n// Node 6 support\nconst writeFile = (path, data)=>new Promise((resolve, reject)=>fs__WEBPACK_IMPORTED_MODULE_8__.writeFile(path, data, (err)=>{\n            err ? reject(err) : resolve();\n        }));\nconst readFile = (path, opts)=>new Promise((resolve, reject)=>fs__WEBPACK_IMPORTED_MODULE_8__.readFile(path, opts, (err, data)=>{\n            err ? reject(err) : resolve(data);\n        }));\nconst mkdir = (path)=>new Promise((resolve, reject)=>fs__WEBPACK_IMPORTED_MODULE_8__.mkdir(path, (err)=>{\n            err ? reject(err) : resolve();\n        }));\nconst stat = (path)=>new Promise((resolve, reject)=>fs__WEBPACK_IMPORTED_MODULE_8__.stat(path, (err, stats)=>{\n            err ? reject(err) : resolve(stats);\n        }));\nconst filename = decodeURI(\"file:///Users/arseniy/Waku/lab.waku.org/examples/flush-notes/node_modules/dns-query/lib.mjs\").replace(/^file:\\/\\/(\\/(\\w+:))?/, \"$2\").replace(/\\//g, path__WEBPACK_IMPORTED_MODULE_9__.sep);\nconst contentType = \"application/dns-message\";\nlet socket4;\nlet socket6;\nfunction clearSocketMaybe(socket) {\n    if (socket.inflight === 0) {\n        socket.destroy();\n        if (socket === socket4) {\n            socket4 = null;\n        } else {\n            socket6 = null;\n        }\n    }\n}\nconst MAX_32BIT_INT = 2147483647;\nfunction getSocket(protocol) {\n    if (protocol === \"udp4:\") {\n        if (!socket4) {\n            socket4 = new _leichtgewicht_dns_socket__WEBPACK_IMPORTED_MODULE_2__.DNSSocket({\n                timeout: MAX_32BIT_INT,\n                timeoutChecks: MAX_32BIT_INT,\n                retries: 0,\n                socket: dgram__WEBPACK_IMPORTED_MODULE_1__.createSocket(\"udp4\")\n            });\n        }\n        return socket4;\n    }\n    if (!socket6) {\n        socket6 = new _leichtgewicht_dns_socket__WEBPACK_IMPORTED_MODULE_2__.DNSSocket({\n            timeout: MAX_32BIT_INT,\n            timeoutChecks: MAX_32BIT_INT,\n            retries: 0,\n            socket: dgram__WEBPACK_IMPORTED_MODULE_1__.createSocket(\"udp6\")\n        });\n    }\n    return socket6;\n}\nfunction queryDns(endpoint, query, timeout, signal) {\n    return new Promise((resolve, reject)=>{\n        const socket = getSocket(endpoint.protocol);\n        if (endpoint.pk) {\n            // TODO: add dnscrypt support to @leichtgewicht/dns-socket\n            return reject(new Error(\"dnscrypt servers currently not supported\"));\n        }\n        const done = (err, res)=>{\n            if (signal) {\n                signal.removeEventListener(\"abort\", onAbort);\n            }\n            clearSocketMaybe(socket);\n            clearTimeout(t);\n            if (err) return reject(err);\n            resolve(res);\n        };\n        const requestId = socket.query(query, endpoint.port, endpoint.ipv4 || endpoint.ipv6, (err, res)=>{\n            // Done for sturdier tests, some DNS servers return very, very fast.\n            setTimeout(done, 10, err, res);\n        });\n        const t = setTimeout(onTimeout, timeout);\n        if (signal) {\n            signal.addEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            done(new AbortError());\n            socket.cancel(requestId);\n            clearSocketMaybe(socket);\n        }\n        function onTimeout() {\n            done(new TimeoutError(timeout));\n            socket.cancel(requestId);\n            clearSocketMaybe(socket);\n        }\n    });\n}\nfunction requestRaw(url, method, body, timeout, abortSignal, headers) {\n    return new Promise((resolve, reject)=>{\n        let timer;\n        const client = url.protocol === \"https:\" ? https__WEBPACK_IMPORTED_MODULE_5__ : http__WEBPACK_IMPORTED_MODULE_6__;\n        let finish = (error, data, response)=>{\n            finish = null;\n            clearTimeout(timer);\n            if (abortSignal) {\n                abortSignal.removeEventListener(\"abort\", onabort);\n            }\n            if (error) {\n                if (response) {\n                    resolve({\n                        error,\n                        response\n                    });\n                } else {\n                    reject(error);\n                }\n            } else {\n                resolve({\n                    data,\n                    response\n                });\n            }\n        };\n        const target = new URL(url);\n        if (method === \"GET\" && body) {\n            target.search = \"?dns=\" + _leichtgewicht_base64_codec__WEBPACK_IMPORTED_MODULE_4__.base64URL.decode(body);\n        }\n        const req = client.request({\n            hostname: target.hostname,\n            port: target.port || (target.protocol === \"https:\" ? 443 : 80),\n            path: `${target.pathname}${target.search}`,\n            method,\n            headers\n        }, onresponse);\n        if (abortSignal) {\n            abortSignal.addEventListener(\"abort\", onabort);\n        }\n        req.on(\"error\", onerror);\n        if (method === \"POST\") {\n            req.end(buffer__WEBPACK_IMPORTED_MODULE_10__.Buffer.from(body));\n        } else {\n            req.end();\n        }\n        resetTimeout();\n        function onabort() {\n            req.destroy(new AbortError());\n        }\n        function onresponse(res) {\n            if (res.statusCode !== 200) {\n                const error = new HTTPStatusError(target.toString(), res.statusCode, method);\n                finish(error, null, res);\n                res.destroy(error);\n                return;\n            }\n            const result = [];\n            res.on(\"error\", onerror);\n            res.on(\"data\", (data)=>{\n                resetTimeout();\n                result.push(data);\n            });\n            res.on(\"end\", onclose);\n            res.on(\"close\", onclose);\n            function onclose() {\n                if (finish !== null) {\n                    finish(null, buffer__WEBPACK_IMPORTED_MODULE_10__.Buffer.concat(result), res);\n                }\n            }\n        }\n        function onerror(error) {\n            if (finish !== null) {\n                if (error instanceof Error) {\n                    finish(error);\n                } else {\n                    finish(error ? new Error(error) : new Error(\"Unknown Error.\"));\n                }\n            }\n        }\n        function resetTimeout() {\n            clearTimeout(timer);\n            timer = setTimeout(ontimeout, timeout);\n        }\n        function ontimeout() {\n            req.destroy(new TimeoutError(timeout));\n        }\n    });\n}\nfunction request(url, method, packet, timeout, abortSignal) {\n    const headers = {\n        Accept: contentType\n    };\n    if (method === \"POST\") {\n        headers[\"Content-Type\"] = contentType;\n        headers[\"Content-Length\"] = packet.byteLength;\n    }\n    return requestRaw(url, method, packet, timeout, abortSignal, headers);\n}\nfunction loadCache(cache, cachePath) {\n    if (!cachePath) {\n        return Promise.resolve();\n    }\n    return stat(cachePath).then(function(stats) {\n        const time = stats.mtime.getTime();\n        if (stats.isFile && time > cache.maxTime) {\n            return readFile(cachePath, \"utf8\").then(function(raw) {\n                const data = JSON.parse(raw);\n                return {\n                    time,\n                    data\n                };\n            });\n        }\n    }).catch(noop);\n}\nfunction storeCache(folder, cachePath, data) {\n    if (!cachePath) {\n        return Promise.resolve(null);\n    }\n    return mkdir(folder).catch(function() {}) // mkdir is okay to fail!\n    .then(function() {\n        return writeFile(cachePath, data);\n    }).then(function() {\n        return stat(cachePath);\n    }).then(function(stat) {\n        return stat.mtime.getTime();\n    }, function() {\n        return null;\n    });\n}\nfunction noop() {}\nfunction loadJSON(url, cache, timeout, abortSignal) {\n    const folder = path__WEBPACK_IMPORTED_MODULE_9__.join(filename, \"..\", \".cache\");\n    const cachePath = cache ? path__WEBPACK_IMPORTED_MODULE_9__.join(folder, cache.name) : null;\n    return loadCache(cache, cachePath).then(function(cached) {\n        if (cached) {\n            return cached;\n        }\n        return requestRaw(url, \"GET\", null, timeout, abortSignal).then(function(response) {\n            if (response.error) {\n                return Promise.reject(response.error);\n            }\n            const data = response.data;\n            return storeCache(folder, cachePath, data).then(function(time) {\n                return {\n                    time,\n                    data: JSON.parse(data.toString())\n                };\n            });\n        });\n    });\n}\nfunction processResolvers(resolvers) {\n    return resolvers.concat(dns__WEBPACK_IMPORTED_MODULE_0__.getServers().map((host, index)=>{\n        const name = `local#${index}`;\n        return {\n            name,\n            endpoint: _leichtgewicht_ip_codec__WEBPACK_IMPORTED_MODULE_3__.familyOf(host) === 1 ? new UDP4Endpoint({\n                protocol: \"udp4:\",\n                ipv4: host\n            }) : new UDP6Endpoint({\n                protocol: \"udp6:\",\n                ipv6: host\n            })\n        };\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-query/lib.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/dns-query/resolvers.mjs":
/*!**********************************************!*\
  !*** ./node_modules/dns-query/resolvers.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolvers: () => (/* binding */ resolvers)\n/* harmony export */ });\nconst resolvers = {\n    data: [\n        {\n            name: \"adfree.usableprivacy.net\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"adfree.usableprivacy.net\"\n            },\n            description: \"Public updns DoH service with advertising, tracker and malware filters.\\nHosted in Europe by @usableprivacy, details see: https://docs.usableprivacy.com\",\n            country: \"Germany\",\n            location: {\n                lat: 51.2993,\n                long: 9.491\n            },\n            filter: true\n        },\n        {\n            name: \"adguard-dns-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.adguard.com\",\n                ipv4: \"94.140.15.15\"\n            },\n            description: \"Remove ads and protect your computer from malware (over DoH)\",\n            country: \"France\",\n            location: {\n                lat: 48.8582,\n                long: 2.3387\n            },\n            filter: true\n        },\n        {\n            name: \"adguard-dns-family-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns-family.adguard.com\",\n                ipv4: \"94.140.15.16\"\n            },\n            description: \"Adguard DNS with safesearch and adult content blocking (over DoH)\",\n            country: \"France\",\n            location: {\n                lat: 48.8582,\n                long: 2.3387\n            },\n            filter: true\n        },\n        {\n            name: \"adguard-dns-unfiltered-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns-unfiltered.adguard.com\",\n                ipv4: \"94.140.14.140\"\n            },\n            description: \"AdGuard public DNS servers without filters (over DoH)\",\n            country: \"France\",\n            location: {\n                lat: 48.8582,\n                long: 2.3387\n            }\n        },\n        {\n            name: \"ahadns-doh-chi\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.chi.ahadns.net\",\n                cors: true\n            },\n            description: \"A zero logging DNS with support for DNS-over-HTTPS (DoH) & DNS-over-TLS (DoT). Blocks ads, malware, trackers, viruses, ransomware, telemetry and more. No persistent logs. DNSSEC. Hosted in Chicago, USA. By https://ahadns.com/\\nServer statistics can be seen at: https://statistics.ahadns.com/?server=chi\",\n            country: \"United States\",\n            location: {\n                lat: 41.8483,\n                long: -87.6517\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"ahadns-doh-in\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.in.ahadns.net\",\n                cors: true\n            },\n            description: \"A zero logging DNS with support for DNS-over-HTTPS (DoH) & DNS-over-TLS (DoT). Blocks ads, malware, trackers, viruses, ransomware, telemetry and more. No persistent logs. DNSSEC. Hosted in Mumbai, India. By https://ahadns.com/\\nServer statistics can be seen at: https://statistics.ahadns.com/?server=in\",\n            country: \"India\",\n            location: {\n                lat: 19.0748,\n                long: 72.8856\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"ahadns-doh-la\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.la.ahadns.net\",\n                cors: true\n            },\n            description: \"A zero logging DNS with support for DNS-over-HTTPS (DoH) & DNS-over-TLS (DoT). Blocks ads, malware, trackers, viruses, ransomware, telemetry and more. No persistent logs. DNSSEC. Hosted in Los Angeles, USA. By https://ahadns.com/\\nServer statistics can be seen at: https://statistics.ahadns.com/?server=la\",\n            country: \"United States\",\n            location: {\n                lat: 34.0549,\n                long: -118.2578\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"ahadns-doh-nl\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.nl.ahadns.net\",\n                cors: true\n            },\n            description: \"A zero logging DNS with support for DNS-over-HTTPS (DoH) & DNS-over-TLS (DoT). Blocks ads, malware, trackers, viruses, ransomware, telemetry and more. No persistent logs. DNSSEC. Hosted in Amsterdam, Netherlands. By https://ahadns.com/\\nServer statistics can be seen at: https://statistics.ahadns.com/?server=nl\",\n            country: \"Netherlands\",\n            location: {\n                lat: 52.3824,\n                long: 4.8995\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"ahadns-doh-ny\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.ny.ahadns.net\",\n                cors: true\n            },\n            description: \"A zero logging DNS with support for DNS-over-HTTPS (DoH) & DNS-over-TLS (DoT). Blocks ads, malware, trackers, viruses, ransomware, telemetry and more. No persistent logs. DNSSEC. Hosted in New York. By https://ahadns.com/\\nServer statistics can be seen at: https://statistics.ahadns.com/?server=ny\",\n            country: \"United States\",\n            location: {\n                lat: 40.7308,\n                long: -73.9975\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"ahadns-doh-pl\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.pl.ahadns.net\",\n                cors: true\n            },\n            description: \"A zero logging DNS with support for DNS-over-HTTPS (DoH) & DNS-over-TLS (DoT). Blocks ads, malware, trackers, viruses, ransomware, telemetry and more. No persistent logs. DNSSEC. Hosted in Poland. By https://ahadns.com/\\nServer statistics can be seen at: https://statistics.ahadns.com/?server=pl\",\n            country: \"Netherlands\",\n            location: {\n                lat: 52.3824,\n                long: 4.8995\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"alidns-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.alidns.com\",\n                ipv4: \"223.5.5.5\",\n                cors: true\n            },\n            description: \"A public DNS resolver that supports DoH/DoT in mainland China, provided by Alibaba-Cloud.\\nWarning: GFW filtering rules are applied by that resolver.\\nHomepage: https://alidns.com/\",\n            country: \"China\",\n            location: {\n                lat: 34.7725,\n                long: 113.7266\n            },\n            filter: true,\n            log: true,\n            cors: true\n        },\n        {\n            name: \"ams-ads-doh-nl\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnsnl-noads.alekberg.net\"\n            },\n            description: \"Resolver in Amsterdam. DoH protocol. Non-logging. Blocks ads, malware and trackers. DNSSEC enabled.\",\n            country: \"Romania\",\n            location: {\n                lat: 45.9968,\n                long: 24.997\n            },\n            filter: true\n        },\n        {\n            name: \"ams-doh-nl\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnsnl.alekberg.net\"\n            },\n            description: \"Resolver in Amsterdam. DoH protocol. Non-logging, non-filtering, DNSSEC.\",\n            country: \"Romania\",\n            location: {\n                lat: 45.9968,\n                long: 24.997\n            }\n        },\n        {\n            name: \"att\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dohtrial.att.net\"\n            },\n            description: \"AT&T test DoH server.\",\n            log: true\n        },\n        {\n            name: \"bcn-ads-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnses-noads.alekberg.net\"\n            },\n            description: \"Resolver in Spain. DoH protocol. Non-logging, remove ads and malware, DNSSEC.\",\n            country: \"Spain\",\n            location: {\n                lat: 41.3891,\n                long: 2.1611\n            },\n            filter: true\n        },\n        {\n            name: \"bcn-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnses.alekberg.net\"\n            },\n            description: \"Resolver in Spain. DoH protocol. Non-logging, non-filtering, DNSSEC.\",\n            country: \"Spain\",\n            location: {\n                lat: 41.3891,\n                long: 2.1611\n            }\n        },\n        {\n            name: \"brahma-world\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.brahma.world\"\n            },\n            description: \"DNS-over-HTTPS server. Non Logging, filters ads, trackers and malware. DNSSEC ready, QNAME Minimization, No EDNS Client-Subnet.\\nHosted in Stockholm, Sweden. (https://dns.brahma.world)\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true\n        },\n        {\n            name: \"cisco-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.opendns.com\",\n                ipv4: \"146.112.41.2\"\n            },\n            description: \"Remove your DNS blind spot (DoH protocol)\\nWarning: modifies your queries to include a copy of your network\\naddress when forwarding them to a selection of companies and organizations.\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true,\n            log: true\n        },\n        {\n            name: \"cloudflare\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.cloudflare.com\",\n                ipv4: \"1.0.0.1\",\n                cors: true\n            },\n            description: \"Cloudflare DNS (anycast) - aka 1.1.1.1 / 1.0.0.1\",\n            country: \"Australia\",\n            location: {\n                lat: -33.494,\n                long: 143.2104\n            },\n            cors: true\n        },\n        {\n            name: \"cloudflare-family\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"family.cloudflare-dns.com\",\n                ipv4: \"1.0.0.3\",\n                cors: true\n            },\n            description: \"Cloudflare DNS (anycast) with malware protection and parental control - aka 1.1.1.3 / 1.0.0.3\",\n            country: \"Australia\",\n            location: {\n                lat: -33.494,\n                long: 143.2104\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"cloudflare-ipv6\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"1dot1dot1dot1.cloudflare-dns.com\",\n                cors: true\n            },\n            description: \"Cloudflare DNS over IPv6 (anycast)\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            cors: true\n        },\n        {\n            name: \"cloudflare-security\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"security.cloudflare-dns.com\",\n                ipv4: \"1.0.0.2\",\n                cors: true\n            },\n            description: \"Cloudflare DNS (anycast) with malware blocking - aka 1.1.1.2 / 1.0.0.2\",\n            country: \"Australia\",\n            location: {\n                lat: -33.494,\n                long: 143.2104\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"controld-block-malware\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"freedns.controld.com\",\n                path: \"/p1\"\n            },\n            description: \"ControlD Free DNS. Take CONTROL of your Internet. Block unwanted content, bypass geo-restrictions and be more productive. DoH protocol and No logging. - https://controld.com/free-dns\\nThis DNS blocks Malware domains.\",\n            country: \"Canada\",\n            location: {\n                lat: 43.6319,\n                long: -79.3716\n            },\n            filter: true\n        },\n        {\n            name: \"controld-block-malware-ad\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"freedns.controld.com\",\n                path: \"/p2\"\n            },\n            description: \"ControlD Free DNS. Take CONTROL of your Internet. Block unwanted content, bypass geo-restrictions and be more productive. DoH protocol and No logging. - https://controld.com/free-dns\\nThis DNS blocks Malware, Ads & Tracking domains.\",\n            country: \"Canada\",\n            location: {\n                lat: 43.6319,\n                long: -79.3716\n            },\n            filter: true\n        },\n        {\n            name: \"controld-block-malware-ad-social\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"freedns.controld.com\",\n                path: \"/p3\"\n            },\n            description: \"ControlD Free DNS. Take CONTROL of your Internet. Block unwanted content, bypass geo-restrictions and be more productive. DoH protocol and No logging. - https://controld.com/free-dns\\nThis DNS blocks Malware, Ads & Tracking and Social Networks domains.\",\n            country: \"Canada\",\n            location: {\n                lat: 43.6319,\n                long: -79.3716\n            },\n            filter: true\n        },\n        {\n            name: \"controld-family-friendly\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"freedns.controld.com\",\n                path: \"/family\"\n            },\n            description: \"ControlD Free DNS. Take CONTROL of your Internet. Block unwanted content, bypass geo-restrictions and be more productive. DoH protocol and No logging. - https://controld.com/free-dns\\nThis DNS blocks Malware, Ads & Tracking, Adult Content and Drugs domains.\",\n            country: \"Canada\",\n            location: {\n                lat: 43.6319,\n                long: -79.3716\n            },\n            filter: true\n        },\n        {\n            name: \"controld-uncensored\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"freedns.controld.com\",\n                path: \"/uncensored\"\n            },\n            description: \"ControlD Free DNS. Take CONTROL of your Internet. Block unwanted content, bypass geo-restrictions and be more productive. DoH protocol and No logging. - https://controld.com/free-dns\\nThis DNS unblocks censored domains from various countries.\",\n            country: \"Canada\",\n            location: {\n                lat: 43.6319,\n                long: -79.3716\n            }\n        },\n        {\n            name: \"controld-unfiltered\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"freedns.controld.com\",\n                path: \"/p0\"\n            },\n            description: \"ControlD Free DNS. Take CONTROL of your Internet. Block unwanted content, bypass geo-restrictions and be more productive. DoH protocol and No logging. - https://controld.com/free-dns\\nThis is a Unfiltered DNS, no DNS record blocking or manipulation here, if you want to block Malware, Ads & Tracking or Social Network domains, use the other ControlD DNS configs.\",\n            country: \"Canada\",\n            location: {\n                lat: 43.6319,\n                long: -79.3716\n            }\n        },\n        {\n            name: \"dns.digitale-gesellschaft.ch\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.digitale-gesellschaft.ch\"\n            },\n            description: \"Public DoH resolver operated by the Digital Society (https://www.digitale-gesellschaft.ch).\\nHosted in Zurich, Switzerland.\\nNon-logging, non-filtering, supports DNSSEC.\",\n            country: \"Switzerland\",\n            location: {\n                lat: 47.1449,\n                long: 8.1551\n            }\n        },\n        {\n            name: \"dns.ryan-palmer\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns1.ryan-palmer.com\"\n            },\n            description: \"Non-logging, non-filtering, DNSSEC DoH Server. Hosted in the UK.\",\n            country: \"United Kingdom\",\n            location: {\n                lat: 51.5164,\n                long: -0.093\n            }\n        },\n        {\n            name: \"dns.sb\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.sb\",\n                ipv4: \"185.222.222.222\",\n                cors: true\n            },\n            description: \"DNSSEC-enabled DoH server by https://xtom.com/\\nhttps://dns.sb/doh/\",\n            country: \"Unknown\",\n            location: {\n                lat: 47,\n                long: 8\n            },\n            cors: true\n        },\n        {\n            name: \"dns.therifleman.name\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.therifleman.name\"\n            },\n            description: \"DNS-over-HTTPS DNS forwarder from Mumbai, India. Blocks web and Android trackers and ads.\\nIP addresses are not logged, but queries are logged for 24 hours for debugging.\\nReport issues, send suggestions @ joker349 at protonmail.com.\\nAlso supports DoT (for android) @ dns.therifleman.name and plain DNS @ 172.104.206.174\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true\n        },\n        {\n            name: \"dnsforfamily-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns-doh.dnsforfamily.com\"\n            },\n            description: \"(DoH Protocol) (Now supports DNSSEC). Block adult websites, gambling websites, malwares and advertisements.\\nIt also enforces safe search in: Google, YouTube, Bing, DuckDuckGo and Yandex.\\nSocial websites like Facebook and Instagram are not blocked. No DNS queries are logged.\\nAs of 26-May-2022 5.9 million websites are blocked and new websites are added to blacklist daily.\\nCompletely free, no ads or any commercial motive. Operating for 4 years now.\\nProvided by: https://dnsforfamily.com\",\n            country: \"Finland\",\n            location: {\n                lat: 60.1758,\n                long: 24.9349\n            },\n            filter: true\n        },\n        {\n            name: \"dnsforfamily-doh-no-safe-search\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns-doh-no-safe-search.dnsforfamily.com\"\n            },\n            description: \"(DoH Protocol) (Now supports DNSSEC) Block adult websites, gambling websites, malwares and advertisements.\\nUnlike other dnsforfamily servers, this one does not enforces safe search. So Google, YouTube, Bing, DuckDuckGo and Yandex are completely accessible without any restriction.\\nSocial websites like Facebook and Instagram are not blocked. No DNS queries are logged.\\nAs of 26-May-2022 5.9 million websites are blocked and new websites are added to blacklist daily.\\nCompletely free, no ads or any commercial motive. Operating for 4 years now.\\nWarning: This server is incompatible with anonymization.\\nProvided by: https://dnsforfamily.com\",\n            country: \"Finland\",\n            location: {\n                lat: 60.1758,\n                long: 24.9349\n            },\n            filter: true\n        },\n        {\n            name: \"dnsforge.de\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnsforge.de\",\n                cors: true\n            },\n            description: \"Public DoH resolver running with Pihole for Adblocking (https://dnsforge.de).\\nNon-logging, AD-filtering, supports DNSSEC. Hosted in Germany.\",\n            country: \"Germany\",\n            location: {\n                lat: 52.2998,\n                long: 9.447\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"dnshome-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.dnshome.de\"\n            },\n            description: \"https://www.dnshome.de/ public resolver in Germany\"\n        },\n        {\n            name: \"dnspod-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.pub\",\n                cors: true\n            },\n            description: \"A public DNS resolver in mainland China provided by DNSPod (Tencent Cloud).\\nhttps://www.dnspod.cn/Products/Public.DNS?lang=en\",\n            filter: true,\n            log: true,\n            cors: true\n        },\n        {\n            name: \"dnswarden-asia-adblock-dohv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.asia.dnswarden.com\",\n                path: \"/adblock\"\n            },\n            description: \"Hosted in Singapore. For more information look [here](https://github.com/bhanupratapys/dnswarden) or [here](https://dnswarden.com).\",\n            country: \"Singapore\",\n            location: {\n                lat: 1.2929,\n                long: 103.8547\n            },\n            filter: true\n        },\n        {\n            name: \"dnswarden-asia-adultfilter-dohv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.asia.dnswarden.com\",\n                path: \"/adultfilter\"\n            },\n            description: \"Hosted in Singapore. For more information look [here](https://github.com/bhanupratapys/dnswarden) or [here](https://dnswarden.com).\",\n            country: \"Singapore\",\n            location: {\n                lat: 1.2929,\n                long: 103.8547\n            },\n            filter: true\n        },\n        {\n            name: \"dnswarden-asia-uncensor-dohv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.asia.dnswarden.com\",\n                path: \"/uncensored\"\n            },\n            description: \"Hosted in Singapore. For more information look [here](https://github.com/bhanupratapys/dnswarden) or [here](https://dnswarden.com).\",\n            country: \"Singapore\",\n            location: {\n                lat: 1.2929,\n                long: 103.8547\n            }\n        },\n        {\n            name: \"dnswarden-eu-adblock-dohv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.eu.dnswarden.com\"\n            },\n            description: \"Hosted in Germany. For more information look [here](https://github.com/bhanupratapys/dnswarden) or [here](https://dnswarden.com).\",\n            country: \"Germany\",\n            location: {\n                lat: 50.1103,\n                long: 8.7147\n            },\n            filter: true\n        },\n        {\n            name: \"dnswarden-us-adblock-dohv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.us.dnswarden.com\"\n            },\n            description: \"Hosted in USA (Dallas) . For more information look [here](https://github.com/bhanupratapys/dnswarden) or [here](https://dnswarden.com).\",\n            country: \"United States\",\n            location: {\n                lat: 32.7889,\n                long: -96.8021\n            },\n            filter: true\n        },\n        {\n            name: \"doh-ch-blahdns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh-ch.blahdns.com\",\n                cors: true\n            },\n            description: \"Blocks ad and Tracking, no Logging, DNSSEC, Hosted in Switzerland. By https://blahdns.com/\",\n            country: \"Netherlands\",\n            location: {\n                lat: 52.3824,\n                long: 4.8995\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh-cleanbrowsing-adult\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.cleanbrowsing.org\",\n                path: \"/doh/adult-filter/\",\n                cors: true\n            },\n            description: \"Blocks access to all adult, pornographic and explicit sites. It does\\nnot block proxy or VPNs, nor mixed-content sites. Sites like Reddit\\nare allowed. Google and Bing are set to the Safe Mode.\\nBy https://cleanbrowsing.org/\",\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh-cleanbrowsing-family\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.cleanbrowsing.org\",\n                path: \"/doh/family-filter/\",\n                cors: true\n            },\n            description: \"Blocks access to all adult, pornographic and explicit sites. It also\\nblocks proxy and VPN domains that are used to bypass the filters.\\nMixed content sites (like Reddit) are also blocked. Google, Bing and\\nYoutube are set to the Safe Mode.\\nBy https://cleanbrowsing.org/\",\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh-cleanbrowsing-security\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.cleanbrowsing.org\",\n                path: \"/doh/security-filter/\",\n                cors: true\n            },\n            description: \"Block access to phishing, malware and malicious domains. It does not block adult content.\\nBy https://cleanbrowsing.org/\",\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh-crypto-sx\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.crypto.sx\",\n                cors: true\n            },\n            description: \"DNS-over-HTTPS server. Anycast, no logs, no censorship, DNSSEC.\\nBackend hosted by Scaleway, globally cached via Cloudflare.\\nMaintained by Frank Denis.\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            cors: true\n        },\n        {\n            name: \"doh-crypto-sx-ipv6\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh-ipv6.crypto.sx\",\n                cors: true\n            },\n            description: \"DNS-over-HTTPS server accessible over IPv6. Anycast, no logs, no censorship, DNSSEC.\\nBackend hosted by Scaleway, globally cached via Cloudflare.\\nMaintained by Frank Denis.\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            cors: true\n        },\n        {\n            name: \"doh-de-blahdns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh-de.blahdns.com\",\n                cors: true\n            },\n            description: \"Blocks ad and Tracking, no Logging, DNSSEC, Hosted in Germany. By https://blahdns.com/\",\n            country: \"Germany\",\n            location: {\n                lat: 51.2993,\n                long: 9.491\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh-fi-blahdns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh-fi.blahdns.com\",\n                cors: true\n            },\n            description: \"Blocks ad and Tracking, no Logging, DNSSEC, Hosted in Finland. By https://blahdns.com/\",\n            country: \"Finland\",\n            location: {\n                lat: 60.1758,\n                long: 24.9349\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh-ibksturm\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"ibksturm.synology.me\"\n            },\n            description: \"DoH & DoT Server, No Logging, No Filters, DNSSEC\\nRunning privately by ibksturm in Thurgau, Switzerland\"\n        },\n        {\n            name: \"doh-jp-blahdns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh-jp.blahdns.com\",\n                cors: true\n            },\n            description: \"Blocks ad and Tracking, no Logging, DNSSEC, Hosted in Japan. By https://blahdns.com/\",\n            country: \"Japan\",\n            location: {\n                lat: 35.6882,\n                long: 139.7532\n            },\n            filter: true,\n            cors: true\n        },\n        {\n            name: \"doh.ffmuc.net\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.ffmuc.net\"\n            },\n            description: \"An open (non-logging, non-filtering, non-censoring) DoH resolver operated by Freifunk Munich with nodes in DE.\\nhttps://ffmuc.net/\",\n            country: \"Germany\",\n            location: {\n                lat: 51.2993,\n                long: 9.491\n            }\n        },\n        {\n            name: \"doh.tiarap.org\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.tiarap.org\"\n            },\n            description: \"Non-Logging DNS-over-HTTPS server, cached via Cloudflare.\\nFilters out ads, trackers and malware, NO ECS, supports DNSSEC.\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true\n        },\n        {\n            name: \"google\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.google\",\n                ipv4: \"8.8.8.8\",\n                cors: true\n            },\n            description: \"Google DNS (anycast)\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            log: true,\n            cors: true\n        },\n        {\n            name: \"hdns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"query.hdns.io\",\n                cors: true\n            },\n            description: \"HDNS is a public DNS resolver that supports Handshake domains.\\nhttps://www.hdns.io\",\n            country: \"United States\",\n            location: {\n                lat: 37.7771,\n                long: -122.406\n            },\n            cors: true\n        },\n        {\n            name: \"he\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"ordns.he.net\"\n            },\n            description: \"Hurricane Electric DoH server (anycast)\\nUnknown logging policy.\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            log: true\n        },\n        {\n            name: \"id-gmail-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.tiar.app\"\n            },\n            description: \"Non-Logging DNS-over-HTTPS server located in Singapore.\\nFilters out ads, trackers and malware, supports DNSSEC, provided by id-gmail.\",\n            country: \"Singapore\",\n            location: {\n                lat: 1.2929,\n                long: 103.8547\n            },\n            filter: true\n        },\n        {\n            name: \"iij\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"public.dns.iij.jp\"\n            },\n            description: \"DoH server operated by Internet Initiative Japan in Tokyo.\\nhttps://www.iij.ad.jp/\",\n            country: \"Japan\",\n            location: {\n                lat: 35.69,\n                long: 139.69\n            },\n            log: true\n        },\n        {\n            name: \"iqdns-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"a.passcloud.xyz\"\n            },\n            description: 'Non-logging DoH service runned by V2EX.com user johnsonwil.\\nReturns \"no such domain\" for anti-Chinese government websites. Supports DNSSEC.\\nFor more information: https://www.v2ex.com/t/785666',\n            filter: true\n        },\n        {\n            name: \"jp.tiar.app-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"jp.tiar.app\"\n            },\n            description: \"Non-Logging, Non-Filtering DNS-over-HTTPS server in Japan.\\nNo ECS, Support DNSSEC\",\n            country: \"Japan\",\n            location: {\n                lat: 35.6882,\n                long: 139.7532\n            }\n        },\n        {\n            name: \"jp.tiarap.org\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"jp.tiarap.org\"\n            },\n            description: \"DNS-over-HTTPS Server. Non-Logging, Non-Filtering, No ECS, Support DNSSEC.\\nCached via Cloudflare.\"\n        },\n        {\n            name: \"libredns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.libredns.gr\"\n            },\n            description: \"DoH server in Germany. No logging, but no DNS padding and no DNSSEC support.\\nhttps://libredns.gr/\",\n            country: \"Germany\",\n            location: {\n                lat: 51.2993,\n                long: 9.491\n            }\n        },\n        {\n            name: \"nextdns\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"anycsast.dns.nextdns.io\"\n            },\n            description: \"NextDNS is a cloud-based private DNS service that gives you full control\\nover what is allowed and what is blocked on the Internet.\\nDNSSEC, Anycast, Non-logging, NoFilters\\nhttps://www.nextdns.io/\",\n            country: \"Netherlands\",\n            location: {\n                lat: 52.3891,\n                long: 4.6563\n            }\n        },\n        {\n            name: \"nextdns-ultralow\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.nextdns.io\",\n                path: \"/dnscrypt-proxy\"\n            },\n            description: 'NextDNS is a cloud-based private DNS service that gives you full control\\nover what is allowed and what is blocked on the Internet.\\nhttps://www.nextdns.io/\\nTo select the server location, the \"-ultralow\" variant relies on bootstrap servers\\ninstead of anycast.'\n        },\n        {\n            name: \"njalla-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.njal.la\",\n                cors: true\n            },\n            description: \"Non-logging DoH server in Sweden operated by Njalla.\\nhttps://dns.njal.la/\",\n            country: \"Sweden\",\n            location: {\n                lat: 59.3247,\n                long: 18.056\n            },\n            cors: true\n        },\n        {\n            name: \"odoh-cloudflare\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"odoh.cloudflare-dns.com\",\n                cors: true\n            },\n            description: \"Cloudflare ODoH server.\\nhttps://cloudflare.com\",\n            cors: true\n        },\n        {\n            name: \"odoh-crypto-sx\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"odoh.crypto.sx\",\n                cors: true\n            },\n            description: \"ODoH target server. Anycast, no logs.\\nBackend hosted by Scaleway. Maintained by Frank Denis.\",\n            cors: true\n        },\n        {\n            name: \"odoh-id-gmail\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.tiar.app\",\n                path: \"/odoh\"\n            },\n            description: \"ODoH target server. Based in Singapore, no logs.\\nFilter ads, trackers and malware.\",\n            filter: true\n        },\n        {\n            name: \"odoh-jp.tiar.app\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"jp.tiar.app\",\n                path: \"/odoh\"\n            },\n            description: \"ODoH target server. no logs.\"\n        },\n        {\n            name: \"odoh-jp.tiarap.org\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"jp.tiarap.org\",\n                path: \"/odoh\"\n            },\n            description: \"ODoH target server via Cloudflare, no logs.\"\n        },\n        {\n            name: \"odoh-resolver4.dns.openinternet.io\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"resolver4.dns.openinternet.io\"\n            },\n            description: \"ODoH target server. no logs, no filter, DNSSEC.\\nRunning on dedicated hardware colocated at Sonic.net in Santa Rosa, CA in the United States.\\nUses Sonic's recusrive DNS servers as upstream resolvers (but is not affiliated with Sonic\\nin any way). Provided by https://openinternet.io\"\n        },\n        {\n            name: \"odoh-tiarap.org\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.tiarap.org\",\n                path: \"/odoh\"\n            },\n            description: \"ODoH target server via Cloudflare, no logs.\\nFilter ads, trackers and malware.\",\n            filter: true\n        },\n        {\n            name: \"publicarray-au2-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh-2.seby.io\",\n                cors: true\n            },\n            description: \"DNSSEC • OpenNIC • Non-logging • Uncensored - hosted on ovh.com.au\\nMaintained by publicarray - https://dns.seby.io\",\n            country: \"Australia\",\n            location: {\n                lat: -33.8591,\n                long: 151.2002\n            },\n            cors: true\n        },\n        {\n            name: \"puredns-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"puredns.org\",\n                ipv4: \"146.190.6.13\",\n                cors: true\n            },\n            description: \"Public uncensored DNS resolver in Singapore - https://puredns.org\\n** Only available in Indonesia and Singapore **\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            cors: true\n        },\n        {\n            name: \"quad101\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.twnic.tw\",\n                cors: true\n            },\n            description: \"DNSSEC-aware public resolver by the Taiwan Network Information Center (TWNIC)\\nhttps://101.101.101.101/index_en.html\",\n            cors: true\n        },\n        {\n            name: \"quad9-doh-ip4-port443-filter-ecs-pri\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns11.quad9.net\",\n                ipv4: \"149.112.112.11\"\n            },\n            description: \"Quad9 (anycast) dnssec/no-log/filter/ecs 9.9.9.11 - 149.112.112.11\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true\n        },\n        {\n            name: \"quad9-doh-ip4-port443-filter-pri\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.quad9.net\",\n                ipv4: \"149.112.112.112\"\n            },\n            description: \"Quad9 (anycast) dnssec/no-log/filter 9.9.9.9 - 149.112.112.9 - 149.112.112.112\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true\n        },\n        {\n            name: \"quad9-doh-ip4-port443-nofilter-ecs-pri\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns12.quad9.net\",\n                ipv4: \"9.9.9.12\"\n            },\n            description: \"Quad9 (anycast) no-dnssec/no-log/no-filter/ecs 9.9.9.12 - 149.112.112.12\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            }\n        },\n        {\n            name: \"quad9-doh-ip4-port443-nofilter-pri\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns10.quad9.net\",\n                ipv4: \"149.112.112.10\"\n            },\n            description: \"Quad9 (anycast) no-dnssec/no-log/no-filter 9.9.9.10 - 149.112.112.10\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            }\n        },\n        {\n            name: \"quad9-doh-ip6-port5053-filter-pri\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns9.quad9.net\"\n            },\n            description: \"Quad9 (anycast) dnssec/no-log/filter 2620:fe::fe - 2620:fe::9 - 2620:fe::fe:9\",\n            country: \"United States\",\n            location: {\n                lat: 37.751,\n                long: -97.822\n            },\n            filter: true\n        },\n        {\n            name: \"safesurfer-doh\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"doh.safesurfer.io\"\n            },\n            description: \"Family safety focused blocklist for over 2 million adult sites, as well as phishing and malware and more.\\nFree to use, paid for customizing blocking for more categories+sites and viewing usage at my.safesurfer.io. Logs taken for viewing\\nusage, data never sold - https://safesurfer.io\",\n            filter: true,\n            log: true\n        },\n        {\n            name: \"sth-ads-doh-se\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnsse-noads.alekberg.net\"\n            },\n            description: \"Resolver in Stockholm, Sweden. DoH server. Non-logging, remove ads and malware, DNSSEC.\",\n            country: \"Bulgaria\",\n            location: {\n                lat: 42.696,\n                long: 23.332\n            },\n            filter: true\n        },\n        {\n            name: \"sth-doh-se\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dnsse.alekberg.net\"\n            },\n            description: \"Resolver in Stockholm, Sweden. DoH server. Non-logging, non-filtering, DNSSEC.\",\n            country: \"Bulgaria\",\n            location: {\n                lat: 42.696,\n                long: 23.332\n            }\n        },\n        {\n            name: \"switch\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"dns.switch.ch\"\n            },\n            description: \"Public DoH service provided by SWITCH in Switzerland\\nhttps://www.switch.ch\\nProvides protection against malware, but does not block ads.\",\n            filter: true\n        },\n        {\n            name: \"uncensoreddns-dk-ipv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"unicast.uncensoreddns.org\"\n            },\n            description: \"Also known as censurfridns.\\nDoH, no logs, no filter, DNSSEC, unicast hosted in Denmark - https://blog.uncensoreddns.org\",\n            country: \"Denmark\",\n            location: {\n                lat: 55.7123,\n                long: 12.0564\n            }\n        },\n        {\n            name: \"uncensoreddns-ipv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"anycast.uncensoreddns.org\"\n            },\n            description: \"Also known as censurfridns.\\nDoH, no logs, no filter, DNSSEC, anycast - https://blog.uncensoreddns.org\",\n            country: \"Denmark\",\n            location: {\n                lat: 55.7123,\n                long: 12.0564\n            }\n        },\n        {\n            name: \"v.dnscrypt.uk-doh-ipv4\",\n            endpoint: {\n                protocol: \"https:\",\n                host: \"v.dnscrypt.uk\"\n            },\n            description: \"DoH, no logs, uncensored, DNSSEC. Hosted in London UK on Digital Ocean\\nhttps://www.dnscrypt.uk\",\n            country: \"United Kingdom\",\n            location: {\n                lat: 51.4964,\n                long: -0.1224\n            }\n        }\n    ],\n    time: 1654187067783\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dns-query/resolvers.mjs\n");

/***/ })

};
;